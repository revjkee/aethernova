version: "3.9"

services:
  frontend-dev:
    container_name: teslaai-frontend-dev
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: development
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
    volumes:
      - ./:/app
      - /app/node_modules
    command: ["npm", "run", "dev"]
    restart: unless-stopped

  frontend-prod:
    container_name: teslaai-frontend-prod
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: production
    ports:
      - "80:80"
    environment:
      - NODE_ENV=production
    depends_on:
      - frontend-dev
    command: ["nginx", "-g", "daemon off;"]
    restart: always

  telemetry-agent:
    container_name: telemetry-agent
    image: otel/opentelemetry-collector:latest
    restart: always
    volumes:
      - ./otel-config.yaml:/etc/otel-config.yaml:ro
    command:
      - "--config=/etc/otel-config.yaml"
    ports:
      - "4317:4317"     # OTLP gRPC
      - "55681:55681"   # OTLP HTTP

  logging-agent:
    container_name: logging-agent
    image: fluent/fluentd:latest
    restart: always
    volumes:
      - ./fluentd/conf:/fluentd/etc
      - /var/log:/var/log
    ports:
      - "24224:24224"   # Fluentd forward
      - "24224:24224/udp"

  ai-agent-manager:
    container_name: ai-agent-manager
    build:
      context: ./src/agents/manager
      dockerfile: Dockerfile.agent-manager
    environment:
      - NODE_ENV=production
      - AGENT_CONFIG=/app/config/agent-config.json
    restart: on-failure

  blockchain-watcher:
    container_name: blockchain-watcher
    build:
      context: ./src/blockchain/watcher
      dockerfile: Dockerfile.blockchain-watcher
    environment:
      - NODE_ENV=production
    restart: on-failure

  threat-intel-feed:
    container_name: threat-intel-feed
    image: teslaai/threat-feed:latest
    environment:
      - API_KEY=${THREAT_INTEL_API_KEY}
    restart: always

  notifications-service:
    container_name: notifications-service
    build:
      context: ./src/features/notifications
      dockerfile: Dockerfile.notifications
    ports:
      - "4000:4000"
    restart: on-failure

  realtime-socket:
    container_name: realtime-socket
    build:
      context: ./src/features/realtime
      dockerfile: Dockerfile.realtime
    ports:
      - "5000:5000"
    restart: always

  nft-minter:
    container_name: nft-minter
    build:
      context: ./src/blockchain/nft
      dockerfile: Dockerfile.nft-minter
    restart: on-failure

  zk-proof-service:
    container_name: zk-proof-service
    build:
      context: ./src/blockchain/zk
      dockerfile: Dockerfile.zk-proof
    restart: on-failure

  auth-service:
    container_name: auth-service
    build:
      context: ./src/features/auth
      dockerfile: Dockerfile.auth
    ports:
      - "4500:4500"
    restart: always

  dao-service:
    container_name: dao-service
    build:
      context: ./src/features/dao
      dockerfile: Dockerfile.dao
    restart: always

  attack-simulator:
    container_name: attack-simulator
    build:
      context: ./src/features/attack-simulator
      dockerfile: Dockerfile.attack-simulator
    restart: on-failure

  policy-engine:
    container_name: policy-engine
    build:
      context: ./src/core/policies
      dockerfile: Dockerfile.policy-engine
    restart: on-failure

  ai-evolution-service:
    container_name: ai-evolution-service
    build:
      context: ./src/features/ai-evolution
      dockerfile: Dockerfile.ai-evolution
    restart: on-failure

  websocket-proxy:
    container_name: websocket-proxy
    image: nginx:stable-alpine
    volumes:
      - ./nginx/websocket.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8080:80"
    restart: always

  gpg-signature-service:
    container_name: gpg-signature-service
    build:
      context: ./src/hooks/useGPGSignature
      dockerfile: Dockerfile.gpg
    restart: on-failure

  metrics-exporter:
    container_name: metrics-exporter
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    restart: always
