# backend/alembic.ini
# Industrial-grade Alembic configuration for async SQLAlchemy + PostgreSQL
# Alembic docs: https://alembic.sqlalchemy.org/  (see citations in the answer)

[alembic]
# Location of migration environment (ScriptDirectory)
script_location = %(here)s/migrations

# Where to store versions (single or multiple locations).
# Multiple paths are separated using the separator defined by [alembic] path_separator.
# See Alembic "Setting up Multiple Version Directories".
version_locations = %(here)s/migrations/versions

# Cross-platform separator for version_locations & prepend_sys_path.
# Since Alembic 1.14+, 'path_separator' supersedes 'version_path_separator'.
# 'os' means use Python's os.pathsep (':' on *nix, ';' on Windows).
path_separator = os

# File naming template for new revisions; includes date for natural ordering.
# Tokens per docs: %(rev)s %(slug)s %(year)d %(month).2d %(day).2d %(hour).2d %(minute).2d %(second).2d
file_template = %%(year)d_%%(month).2d_%%(day).2d-%%(rev)s_%%(slug)s

# Truncate autogenerated slug length
truncate_slug_length = 40

# Timezone used when rendering timestamps in filenames and inside scripts.
# Requires Python 3.9+ zoneinfo/tzdata availability on the host.
timezone = UTC

# Encoding for script output
output_encoding = utf-8

# Ensure our project package is importable when env.py runs (CWD-safe)
prepend_sys_path = .

# DATABASE URL:
# Prefer loading from env.py (recommended) or pass via CLI `-x db_url=...`.
# If you must set here, uncomment and set a DSN like:
# sqlalchemy.url = postgresql+psycopg://user:password@host:5432/dbname
# Leave commented to avoid secrets in VCS.
# sqlalchemy.url =

# Autogenerate tuning (applied by env.py using config.get_section / get_main_option)
# Compare column types and server defaults during autogenerate
compare_type = true
compare_server_default = true
# Include schema names when autogenerating across multiple schemas
include_schemas = true
# Render batch operations (useful for SQLite or complex ALTERs)
render_as_batch = true

# Optional: run env.py in both 'revision' and 'upgrade' phases (env-controlled)
# revision_environment = true

# -----------------------------------------------------------------------------
# Post-write hooks: format new revision files automatically
# -----------------------------------------------------------------------------
[post_write_hooks]
# Enable any of: black, isort, ruff
hooks = black, isort, ruff

# Black formatter
black.type = console_scripts
black.entrypoint = black
black.options = -q %(rev_file)s

# isort import sorter
isort.type = console_scripts
isort.entrypoint = isort
isort.options = -q %(rev_file)s

# Ruff (formatter+lint). If you only want formatting: "ruff format".
ruff.type = console_scripts
ruff.entrypoint = ruff
ruff.options = format %(rev_file)s

# -----------------------------------------------------------------------------
# Logging configuration (Python logging.config.fileConfig compatible)
# See Alembic docs and guidance to enable SQL echo during upgrades.
# -----------------------------------------------------------------------------
[loggers]
keys = root, alembic, sqlalchemy

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARNING
handlers = console
qualname =

[logger_alembic]
level = INFO
handlers = console
qualname = alembic
propagate = 0

# To see emitted SQL during migrations, set to INFO or DEBUG.
# (Equivalent to SQLAlchemy engine echo during migration runs.)
[logger_sqlalchemy]
level = WARNING
handlers = console
qualname = sqlalchemy.engine
propagate = 0

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %Y-%m-%d %H:%M:%S
