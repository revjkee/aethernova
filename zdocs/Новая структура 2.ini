Новое
/genius-core/learning-engine/agent_rl/
├── self_play_agent.py     +       # self-play обучение
├── utils.py          +           # вспомогательные функции RL

/genius-core/learning-engine/policy-networks/
├── attention_utils.py   +        # маски и LoRA утилиты
├── model_config.yaml +           # конфигурация моделей

/genius-core/learning-engine/replay-buffer/
├── priority_buffer.py  +         # приоритетный буфер

/genius-core/learning-engine/training-scripts/
├── eval_agent.py +                # скрипт оценки агента

/genius-core/learning-engine/gym-envs/
├── env_utils.py         +        # утилиты окружений

/genius-core/vulnerability-discovery/cve-hunter/
├── hunter_utils.py   +           # вспомогательные функции

/genius-core/vulnerability-discovery/ai-fuzzer/
├── fuzz_corpus/       +          # набор тестовых данных

/genius-core/vulnerability-discovery/signature-detector/
├── signature_db.json      +      # база сигнатур

/genius-core/generative-defense/mitre-mapper/
├── mitre_data.yaml     +         # данные MITRE ATT&CK

/genius-core/policy-ai/prompt_templates/
├── policy_gen_prompt.txt
├── defense_suggest_prompt.txt

/genius-core/code-enhancement/code-evolver/
├── evolution_rules.yaml   +      # правила мутаций

/genius-core/code-enhancement/syntax-autofix/
├── fix_patterns.yaml   +         # паттерны исправлений

/genius-core/code-enhancement/lint-learners/
├── lint_rules.json     +        # правила линтинга

/frontend/components/
├── Footer.tsx       +           # подвал сайта
├── Sidebar.tsx        +         # боковая панель
├── Loader.tsx         +         # индикатор загрузки

/frontend/pages/
├── login.tsx    +               # страница логина
├── profile.tsx     +            # профиль пользователя
├── error.tsx       +            # страница ошибок

/frontend/hooks/
├── useAuth.ts    +              # хук авторизации
├── useNotifications.ts         # уведомления

/frontend/styles/
├── globals.css          +       # глобальные стили
├── themes/
│   ├── dark.css        +
│   └── light.css     +

/frontend/assets/
├── images/
├── icons/

/telegram-bot/ai-assistant/
├── voice_handler.py    +        # обработка голоса
├── rl_planner.py     +          # RL планировщик задач

/telegram-bot/webapp/styles/
├── app.css           +         # стили для webapp

/telegram-bot/ton-payments/
├── nft_mint.py      +          # чеканка NFT
├── transaction_logger.py   +   # логирование транзакций

/telegram-bot/nft-inventory/achievements/
├── achievement_data.json   +   # данные достижений

/telegram-bot/nft-inventory/skins/
├── skin_catalog.json    +      # каталог скинов

/ai-core/attack-generator/
├── attack_db.yaml        +     # база известных атак
├── generator_utils.py    +     # утилиты генерации

/ai-core/redteam-strategies/
├── strategy_docs.md     +      # документация по стратегиям

/ai-core/defense-suggester/
├── defense_rules.yaml    +     # правила защиты

/ai-core/code-autocomplete/
├── code_snippets.json     +    # база сниппетов кода

/ai-core/copilot-engine/
├── prompt_manager.py    +      # управление подсказками
├── cache_manager.py     +      # кэширование подсказок и ответов
├── rate_limiter.py      +      # ограничение запросов к LLM
--------------------------------------------------------------------
/c2/metasploit/auxiliary_scripts/       # вспомогательные скрипты
├── scan_network.rb      +    # скрипт сканирования подсети
├── bypass_firewall.rb    +   # обход файрвола
├── persistence_setup.rb  +   # установка персистентности
├── session_cleanup.rb    +   # очистка сессий
├── exploit_launcher.rb   +   # запуск вспомогательных эксплоитов

/c2/cobaltstrike/docs/                  # документация и примеры


/c2/covenant/modules/
├── __init__.py
├── core/
│   ├── __init__.py
│   ├── covenant_engine.py   +       # Главный исполнитель модулей политики
│   ├── contract_parser.py   +       # Парсер условий и ограничений
│   ├── policy_executor.py   +       # Выполняет и верифицирует политику
│   └── signature_verifier.py   +    # Проверка цифровых подписей (в т.ч. GPG, zkSNARKs)
│
├── rbac/
│   ├── __init__.py
│   ├── roles.py         +           # Определения ролей
│   ├── permissions.py  +            # Управление разрешениями
│   └── enforcer.py     +            # Применение правил RBAC к агентам
│
├── zero_knowledge/
│   ├── __init__.py
│   ├── zk_prover.py       +         # Генератор доказательств
│   ├── zk_verifier.py      +        # Верификация ZK-доказательств
│   └── circuits/
│       ├── circuit_auth.zok    +    # Цепь для аутентификации без раскрытия
│       └── circuit_access.zok   +   # Цепь доступа к системам
│
├── threat_intel/
│   ├── __init__.py
│   ├── anomaly_detector.py    +     # Выявление аномалий
│   ├── honeypot_signals.py     +    # Подключение к ловушкам и внешним сенсорам
│   └── intelligence_graph.py   +    # Построение графа угроз
│
├── alerts/
│   ├── __init__.py
│   ├── alert_dispatcher.py   +      # Рассылка оповещений
│   ├── alert_templates.py +         # Форматирование сообщений
│   └── notify_channels/
│       ├── telegram.py      +       # Интеграция с Telegram
│       ├── email.py        +        # Email-оповещения
│       └── slack.py        +        # Slack-подключение
│
├── ci_hooks/
│   ├── __init__.py
│   ├── pre_deploy_check.py  +       # Анализ безопасности перед деплоем
│   └── audit_trail_logger.py  +     # Запись истории проверок
│
└── utils/
    ├── __init__.py
    ├── cryptography.py   +          # Шифрование/расшифровка
    ├── time_sync.py      +          # Синхронизация времени между агентами
    └── validation.py     +          # Валидация входных контрактов и ролей



/c2/config/secrets.yaml                 # секреты для C2 серверов

/scanners/nmap/scripts/                 # кастомные скрипты nmap
├── auth/
│   ├── ftp_auth_bypass.nse +
│   ├── http_basic_auth.nse +
│   ├── ssh_bruteforce.nse +
│   ├── smb_auth_check.nse +
│   └── kerberos_ticket_enum.nse +
├── brute/
│   ├── ftp_bruteforce.nse +
│   ├── http_bruteforce.nse  +
│   ├── mysql_bruteforce.nse +
│   ├── ssh_bruteforce.nse +
│   └── smtp_bruteforce.nse +
├── discovery/
│   ├── dns_enum.nse +
│   ├── host_discovery.nse +
│   ├── netbios_enum.nse + 
│   ├── smb_enum.nse + 
│   ├── ssl_cert_info.nse +
│   └── version_detection.nse + 
├── exploit/
│   ├── cve_2021_26855_proxylogon.nse +
│   ├── eternalblue_smb.nse +
│   ├── sql_injection.nse +
│   └── vsftpd_backdoor.nse + 
├── external/
│   ├── shodan_enum.nse +
│   ├── virus_total_lookup.nse + 
│   └── threat_intel_integration.nse +
├── post-exploit/
│   ├── data_exfiltration.nse +
│   ├── persistence_check.nse + 
│   └── user_enum.nse +
├── vuln/
│   ├── cve_2022_22965_spring4shell.nse + 
│   ├── heartbleed.nse +
│   ├── smb_vuln_check.nse +
│   └── tls_weak_cipher.nse +
├── libs/
│   ├── crypto_helpers.nse +
│   ├── http_utils.nse +
│   └── net_utils.nse +
├── templates/
│   ├── scan_config.template +
│   └── report_template.nse +
├── logs/
│   └── scan_YYYYMMDD.log +
├── README.md
└── LICENSE


/scanners/nikto/plugins/                # плагины для Nikto

├── injection/
│   ├── check_sql_injection.pl +
│   ├── check_ssti.pl +
│   └── check_rce.pl + 
├── enumeration/
│   ├── check_sensitive_files.pl + 
│   ├── check_user_enum.pl   +    # добавлен для полноты
│   └── custom_vuln_check.pl  +   # нестандартные проверки
├── traversal/
│   └── check_dir_traversal.pl +
├── auth/
│   ├── check_auth_bypass.pl +
│   ├── check_csrf.pl+
│   └── check_cors_misconfig.pl+
├── client_side/
│   ├── check_xss.pl
│   └── check_clickjacking.pl
├── common/
│   ├── utils.pl           +     # вспомогательные функции для плагинов
│   └── http_helpers.pl     +    # работа с HTTP запросами/ответами
├── README.md     +              # описание структуры, инструкция по добавлению плагинов
├── config/
│   └── plugin_config.yaml  +    # конфигурация плагинов (вкл/выкл, параметры)

/scanners/wapiti/reports/               # сохранённые отчёты
├── formats/                           # Модули для генерации отчетов в разных форматах
│   ├── report_html.py    +             # Генерация HTML-отчётов
│   ├── report_pdf.py                  # Генерация PDF-отчётов
│   ├── report_json.py                 # Экспорт результатов в JSON
│   ├── __init__.py
│
├── templates/                        # Шаблоны для отчетов
│   ├── report_template.html  +        # Основной HTML-шаблон
│   ├── pdf_template.tex       +       # Шаблон LaTeX для PDF
│   ├── styles.css       +             # CSS для HTML-отчётов
│
├── logs/                            # Логи генерации отчетов
│   ├── generation.log  +              # Лог последней генерации
│
├── tests/                           # Автоматизированные тесты и тестовые данные
│   ├── test_report_html.py +
│   ├── test_report_pdf.py +
│   ├── sample_scan_results.json+
│
├── utils.py         +               # Вспомогательные функции для формирования отчетов и обработки данных
├── config.yaml       +              # Настройки генерации отчетов (формат, пути, локализация)
├── README.md         +             # Описание структуры, инструкции по добавлению новых форматов и шаблонов

/scanners/openvas/scan_results/         # результаты сканов
├── raw/                            # Исходные необработанные результаты сканирования (например, XML, NBE, .gnmap)
│   ├── scan_YYYYMMDD_HHMMSS.xml+
│   ├── scan_YYYYMMDD_HHMMSS.nbe-
│   └── scan_YYYYMMDD_HHMMSS.gnmap-
├── parsed/                         # Обработанные/преобразованные отчёты в JSON, YAML, CSV
│   ├── scan_YYYYMMDD_HHMMSS.json+
│   ├── scan_YYYYMMDD_HHMMSS.yaml-
│   └── scan_YYYYMMDD_HHMMSS.csv-
├── summaries/                     # Краткие сводки и итоговые отчёты по сканам (txt, md, html)
│   ├── scan_YYYYMMDD_HHMMSS_summary.txt-
│   ├── scan_YYYYMMDD_HHMMSS_summary.md-
│   └── scan_YYYYMMDD_HHMMSS_summary.html+
├── logs/                        +  # Логи процесса сканирования и экспорта отчётов
│   ├── scan_YYYYMMDD_HHMMSS.log+
├── configs/                       # Конфигурационные файлы сканов, шаблоны
│   ├── scan_profile_default.xml+
│   ├── scan_target_list.txt-
├── archive/                   +    # Архивы старых сканов, сжатые
│   ├── scan_YYYYMMDD_HHMMSS.zip+
│   └── scan_YYYYMMDD_HHMMSS.tar.gz+
└── README.md                 +    # Документация по структуре и использованию папки

/scanners/nuclei/custom_templates/      # кастомные шаблоны
├── network/                  # Шаблоны для проверки сетевых уязвимостей (например, open ports, протоколы)
│   ├── tcp_scan.yaml + 
│   └── udp_scan.yaml+
├── web/                      # Шаблоны для веб-уязвимостей (XSS, SQLi, SSRF и т.п.)
│   ├── xss_custom.yaml +
│   ├── sql_injection.yaml +
│   └── csrf.yaml +
├── auth/                     # Проверки аутентификации и авторизации (bruteforce, weak passwords)
│   ├── basic_auth_bypass.yaml +
│   └── brute_force_login.yaml +
├── ci/                       # Шаблоны для CI/CD сканирования и интеграции
│   └── ci_pipeline_check.yaml +
├── docs/                     # Документация и пояснения к шаблонам
│   └── README.md
├── templates_lib.yaml        # Общие библиотеки или общие настройки шаблонов
└── README.md                 # Описание и рекомендации по кастомным шаблонам

/plugins/health_check.py                # проверка состояния плагинов

/orchestrator/deployment_scripts/ +      # скрипты деплоя инфраструктуры
├── README.md                         # Документация по использованию, описание структуры и процедур
├── common/                     +     # Общие вспомогательные скрипты и библиотеки (питон, шелл)
│   ├── utils.py+
│   ├── logger.py+
│   ├── config_loader.py+
│   └── validators.sh+
├── envs/                            # Скрипты для настройки окружений
│   ├── setup_dev.sh         +        # Настройка дев окружения
│   ├── setup_staging.sh    +         # Настройка стейджинга
│   └── setup_prod.sh       +         # Настройка продакшена
├── terraform/          +            # Обёртки и вспомогательные скрипты для terraform
│   ├── init.sh+
│   ├── apply.sh+
│   ├── destroy.sh+
│   └── validate.sh+
├── ansible/                        # Скрипты/плейбуки для Ansible
│   ├── playbook.yml +
│   ├── roles/
│   │   ├── common/
│   │   ├── defaults/
│   │   │   └── main.yml  +             # Значения по умолчанию для переменных роли
│   │   ├── files/
│   │   │   └── hosts_common    +      # Статичные файлы для копирования (например, /etc/hosts)
│   │   ├── handlers/
│   │   │   └── main.yml        +      # Обработчики событий (например, перезапуск сервисов)
│   │   ├── ── meta/
│   │   │   └── main.yml        +      # Метаданные роли (зависимости, поддерживаемые платформы)
│   │   ├──├── tasks/
│   │   │   └── main.yml         +     # Основные задачи роли
│   │   ├── templates/
│   │   │   └── sshd_config.j2    +    # Jinja2 шаблоны конфигурационных файлов (например sshd_config)
│   │   ├── tests/
│   │   │   ├── inventory     +        # Тестовый инвентори файл
│   │   │   └── test.yml   +           # Тестовый плейбук для роли
│   │   └── vars/main.yml +
    └── main.yml    +          # Переменные роли с более высоким приоритетом
│   │   └── webserver/+
        ├── defaults/+
        │   └── main.yml          +       # Переменные по умолчанию
        ├── files/                      # Статичные файлы для копирования
        │   └── nginx.conf+
        ├── handlers/
        │   └── main.yml           +      # Обработчики (например, перезапуск nginx)
        ├── meta/
        │   └── main.yml          +       # Метаданные роли (зависимости и т.п.)
        ├── tasks/
        │   └── main.yml           +      # Основной плейбук задач
        ├── templates/
        │   └── nginx.conf.j2      +      # Jinja2 шаблоны конфигураций
        ├── tests/
        │   ├── inventory           +     # Тестовый инвентори
        │   └── test.yml            +     # Тестовый плейбук
        └── vars/
            └── main.yml          +       # Переменные с высоким приоритетом

│   └── inventory.ini +

/orchestrator/deployment_scripts/ansible/roles/webserver/tests/database/
├── inventory       +              # Тестовый инвентори файл с описанием тестовых хостов
├── test.yml    +                 # Тестовый плейбук для проверки роли и базы данных
├── vars/
│   └── main.yml     +            # Переменные для тестов базы данных
├── files/
│   └── init_db.sql   +           # Скрипт инициализации тестовой базы данных
├── templates/
│   └── db_config.j2   +          # Jinja2 шаблон конфигурации базы данных
└── handlers/
    └── main.yml     +            # Обработчики для перезапуска/обновления сервиса БД в тестах

├── kubernetes/                    # Скрипты для деплоя и управления k8s кластерами
│   ├── deploy.sh +
│   ├── rollback.sh  +
│   ├── manifests/
│   │   ├── deployment.yaml +
│   │   ├── service.yaml +
│   │   └── ingress.yaml +
│   └── configmaps/
│       └── app-config.yaml +
├── monitoring/                   # Скрипты деплоя и настройки мониторинга (Prometheus, Grafana)
│   ├── deploy_prometheus.sh +
│   ├── deploy_grafana.sh +
│   └── alert_rules.yaml +



├── security/                    # Скрипты безопасности: настройка firewall, сканеры, compliance
│   ├── firewall_setup.sh +
│   ├── vulnerability_scan.sh +
│   └── compliance_check.py +
├── ci_cd/                       # Скрипты интеграции с CI/CD пайплайнами (Jenkins, GitHub Actions)
│   ├── trigger_build.sh +
│   ├── deploy_pipeline.yml +
│   └── rollback_pipeline.yml +
├── backups/                     # Скрипты для бэкапа и восстановления
│   ├── backup_db.sh +
│   ├── restore_db.sh +
│   └── backup_files.sh +
├── rollback/                    # Скрипты отката изменений инфраструктуры
│   ├── rollback_last_deploy.sh +
│   └── rollback_db.sh +
├── tests/                       # Скрипты и утилиты для тестирования инфраструктуры и деплоя
│   ├── test_connectivity.sh +
│   ├── test_load.sh +
│   └── test_security.sh +
└── versions/                   # Метаданные и история версий скриптов деплоя
    ├── version_2025_07_14.md +
    └── changelog.md +

/orchestrator/terraform_modules/         # модули terraform
│
├── network_security/           # Модуль настройки безопасности сети (SG, ACL)
│   ├── main.tf +
│   ├── variables.tf +
│   ├── outputs.tf +
│
├── vpc/                       # Модуль создания и управления VPC
│   ├── main.tf+
│   ├── variables.tf+
│   ├── outputs.tf+
│
├── ec2_instance/     +         # Модуль для EC2 инстансов с безопасными настройками
│   ├── main.tf+
│   ├── variables.tf+
│   ├── outputs.tf+
│
├── rds/                      # Модуль создания RDS базы данных с безопасными параметрами
│   ├── main.tf+
│   ├── variables.tf+
│   ├── outputs.tf+
│
└── s3_bucket/                # Модуль для S3 бакетов с включенной шифровкой и версионностью
    ├── main.tf+
    ├── variables.tf+
    ├── outputs.tf+

/lab-os/kernel-patches/patch_instructions.md +       # инструкция по патчу ядра

/lab-os/iso-build/iso_config.yaml       +          # конфиг для сборки ISO

/lab-os/honeypot/honeypot_config.yaml   +          # конфигурация honeypot

/lab-os/eBPF/ebpf_helpers.h    +                     # вспомогательные заголовки

/devops/ci-cd/github-actions/test_pipeline.yml  +  # тестовый пайплайн

/devops/ci-cd/jenkins/Jenkinsfile   +               # Jenkins pipeline

/devops/ci-cd/scripts/deploy.sh           +          # скрипт деплоя

/devops/monitoring/prometheus/rules.yml    +         # правила алертов

/devops/monitoring/grafana/dashboards/system_overview.json   +  # общая панель

/devops/monitoring/loki/parsers/custom_parser.yaml + # парсеры логов

/devops/logging/elk/pipeline.conf       +            # конвейер логов

/devops/logging/siem/alerts.yaml             +       # правила оповещений

/devops/secrets/vault_config.yaml           +         # конфигурация HashiCorp Vault

/devops/secrets/encryption_keys/                     # зашифрованные ключи
├── README.md                        # описание структуры, политики и шифрования
├── gpg/
│   ├── master_pub.gpg      +        # публичный ключ GPG для подписей
│   ├── master_priv.enc      +       # зашифрованный приватный ключ (AES256+GPG)
│   └── trusted_fingerprints.txt  +  # список доверенных отпечатков GPG
├── vault/
│   ├── kv/
│   │   ├── db_creds.enc     +       # зашифрованные креды для БД
│   │   ├── aws_secrets.enc   +      # зашифрованные AWS ключи
│   │   └── service_tokens.enc  +    # access токены сервисов
│   └── transit/
│       ├── vault_key_id.txt   +     # ID ключа в Transit Engine
│       └── vault_policy.hcl     +   # политика доступа к ключу
├── kms/
│   ├── aws/
│   │   ├── kms_key_id.txt     +      # ID ключа в AWS KMS
│   │   └── encryption_context.json + # KMS encryption context
│   └── gcp/
│       ├── kms_key_id.txt+
│       └── protection_level.conf  +  # HSM, software и т.п.
├── rotator/
│   ├── key_rotation_policy.yaml  +  # политика ротации ключей
│   └── rotate.sh                   # скрипт безопасной ротации
└── audit/
    ├── key_access.log              # лог доступа к ключам
    ├── integrity_checksums.sha256 # контрольные суммы
    └── revoked_keys.list      +     # список отозванных ключей


/devops/backup/backup.sh              +               # скрипт бэкапа базы

/devops/backup/restore.sh               +             # скрипт восстановления

/data/timescaledb/retention_policies.sql      +      # политики хранения данных

/data/backups/retention_policy.yaml        +           # правила хранения резервных копий

/scripts/security_scan.sh             +                # запуск проверки безопасности

/scripts/setup_env.sh                  +               # настройка переменных окружения

/scripts/deploy.sh                    +               # общий скрипт деплоя

/scripts/test_runner.sh                +              # запуск тестов

/tests/exploits-validation/validate_exploits.py  +   # валидация эксплойтов

/tests/ai-fuzzing/fuzz_ai_engine.py        +          # fuzz тестирование AI

/tests/integration/test_telegram_bot.py       +       # тесты Telegram бота

/tests/integration/test_ai_core.py           +          # тесты AI ядра

/tests/performance/load_tests.py             +         # нагрузочные тесты

/docs/internal/certifications/CEH_cert_guide.md    +   # CEH сертификация

/docs/internal/gameplay_design/level_logic.md      +   # геймплейная логика

/docs/internal/labs/mitm-lab.md                 +       # лаборатория MITM

/docs/internal/labs/exploit-chain-lab.md        +       # лаборатория цепочки эксплойтов

/docs/external/tutorials/getting_started.md       +     # вводное руководство

/docs/external/api_reference/api_openapi.yaml     +     # OpenAPI спецификация

/docs/external/whitepapers/teslaai_whitepaper.pdf  +    # whitepaper проекта

/security/rbac-policies/permissions.yaml           +    # права доступа

/security/rbac-policies/policies.md                 +    # документация по RBAC

/security/mfa-guard/totp.py                        +     # генерация и проверка TOTP

/security/mfa-guard/backup_codes.py              +       # управление резервными кодами MFA

/security/pentest-reports/report_2025_q3.pdf       +    # отчёт по пентесту

/security/security-pipeline/vulnerability_report.md  +  # отчет по сканированию секретов

/security/security-pipeline/remediation_guide.md   +    # руководство по устранению уязвимостей

/onchain/smart-contracts/token_contract.sol      +       # контракт токена

/onchain/smart-contracts/governance.sol        +         # контракт управления DAO

/onchain/zk-verification/verification_scripts.js    +    # скрипты проверки ZK

/onchain/nft-metadata/metadata_schema.json          +     # схема метаданных

/onchain/dao-governance/voting_rules.json         +       # правила голосования

/onchain/dao-governance/proposals/proposal_1.json+

/onchain/dao-governance/proposals/proposal_2.json +

/marketplace/plugins/payment_plugin.py          +         # плагин для оплаты

/marketplace/plugins/inventory_plugin.py          +       # управление товарами

/marketplace/review-bot/review_bot.py           +         # бот отзывов
