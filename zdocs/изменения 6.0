
core-systems/
├── blackvault-core/
│   + ├── api/                # REST/gRPC контракты
│   │   + ├── rest/                 # OpenAPI спецификации и REST-хендлеры
│   │   │   ├── openapi.yaml  !
│   │   │   ├── server.py   !
│   │   │   └── handlers/
│   │   │       ├── secrets.py
│   │   │       ├── keys.py
│   │   │       └── health.py
│   │   + ├── grpc/                 # gRPC контракты и сервер
│   │   │   ├── secrets.proto
│   │   │   ├── auth.proto
│   │   │   ├── audit.proto
│   │   │   └── server.py
│   │   + ├── clients/              # SDK-клиенты для внешних сервисов
│   │   │   ├── python/
│   │   │   │   └── client.py
│   │   │   └── typescript/
│   │   │       └── client.ts
│   │   + └── tests/                # тесты контрактов и API
│   │       ├── test_rest.py
│   │       └── test_grpc.py

│   + ├── configs/            # конфиги YAML/JSON
│   │   + ├── base/                               # базовые конфиги (наследуются окружениями)
│   │   + │   ├── application.yaml                # порты, сервисные фичи, фичефлаги
│   │   + │   ├── auth.yaml                       # mTLS/OIDC, JWKS, аудит аутентификации
│   │   + │   ├── policies/
│   │   + │   │   ├── policy.example.yaml         # ABAC/RBAC правила
│   │   + │   │   ├── rbac.example.yaml
│   │   + │   │   └── abac.example.yaml
│   │   + │   ├── kms.yaml                        # backends: aws/gcp/azure/pkcs11/external
│   │   + │   ├── pkcs11.yaml                     # модуль, слот, пин, политики доступа
│   │   + │   ├── storage.yaml                    # postgres/s3/redis, пулы, таймауты
│   │   + │   ├── audit.yaml                      # hash-chain, экспорт, ретеншн
│   │   + │   ├── observability.yaml              # otel: traces, metrics, logs
│   │   + │   ├── rate_limits.yaml                # ручки API, лимиты и квоты
│   │   + │   ├── rotation.yaml                   # расписания и TTL ключей/секретов
│   │   + │   ├── dr.yaml                         # стратегии backup/restore, RPO/RTO
│   │   + │   └── feature_flags.yaml              # переключатели функционала
│   │   + ├── env/                                # конкретные окружения
│   │   + │   ├── dev/
│   │   + │   │   ├── application.yaml            # overlay для dev
│   │   + │   │   ├── secrets.example.yaml        # пути к секретам/волюмам
│   │   + │   │   └── overrides.d/                # точечные override-файлы
│   │   + │   ├── staging/
│   │   + │   │   ├── application.yaml
│   │   + │   │   └── overrides.d/
│   │   + │   └── prod/
│   │   + │       ├── application.yaml
│   │   + │       └── overrides.d/
│   │   + ├── schema/                             # JSON Schema для валидации конфигов
│   │   + │   ├── application.schema.json
│   │   + │   ├── policy.schema.json
│   │   + │   ├── kms.schema.json
│   │   + │   └── storage.schema.json
│   │   + ├── k8s/                                # манифесты ConfigMap/Secret (генерируемые)
│   │   + │   ├── configmap.yaml
│   │   + │   └── secret.yaml
│   │   + ├── helm/                               # значения чарта для разных окружений
│   │   + │   ├── values.dev.yaml
│   │   + │   ├── values.staging.yaml
│   │   + │   └── values.prod.yaml
│   │   + ├── alerts/                             # алерты для SLO/SLA
│   │   + │   ├── error_rate.yaml
│   │   + │   ├── latency.yaml
│   │   + │   └── kms_health.yaml
│   │   + ├── otel/                               # конфиг коллекторов/экспортеров
│   │   + │   └── collector-config.yaml
│   │   + ├── tls/                                # шаблоны и пути к сертификатам
│   │   + │   ├── server.example.yaml             # пути до tls.crt/tls.key/ca.pem
│   │   + │   └── trust/                          # доверенные CA (папка для монтирования)
│   │   + └── README.md                           # как мерджить base+env, порядок загрузки

│   + ├── migrations/         # миграции БД
│   ├── migrations/
│   │   + ├── sql/                          # декларативные миграции SQL
│   │   + │   ├── 0001_init_schema.up.sql   # создание базовых таблиц (users, secrets, keys)
│   │   + │   ├── 0001_init_schema.down.sql # откат схемы
│   │   + │   ├── 0002_add_audit.up.sql     # таблицы аудита, hash-chain
│   │   + │   ├── 0002_add_audit.down.sql
│   │   + │   ├── 0003_add_policy.up.sql    # таблицы policy, rbac/abac
│   │   + │   ├── 0003_add_policy.down.sql
│   │   + │   ├── 0004_add_kms_ref.up.sql   # ссылки на внешние KMS/HSM
│   │   + │   ├── 0004_add_kms_ref.down.sql
│   │   + │   └── ...                       # последующие версии
│   │   + ├── seeds/                        # стартовые данные (dev/staging)
│   │   + │   ├── dev_secrets.sql           # фиктивные данные для разработки
│   │   + │   ├── staging_policies.sql      # тестовые политики для стейджинга
│   │   + │   └── tenants_example.sql
│   │   + ├── versions/                     # машинные метаданные о миграциях
│   │   + │   └── schema_migrations.sql     # таблица контроля версий
│   │   + ├── scripts/                      # утилиты для применения миграций
│   │   + │   ├── migrate.sh                # обертка для запуска alembic/flyway/liquibase
│   │   + │   ├── rollback.sh               # откат миграций
│   │   + │   └── verify.sh                 # проверка корректности схемы
│   │   + ├── schema/                       # схемы БД (ER-диаграммы, экспорты)
│   │   + │   ├── erd.png
│   │   + │   └── schema.sql
│   │   + ├── tests/                        # тесты миграций
│   │   + │   ├── test_apply_migrations.py  # проверка накатывания
│   │   + │   ├── test_rollback.py          # проверка отката
│   │   + │   └── test_integrity.py         # консистентность схемы
│   │   + └── README.md                     # как запускать миграции, порядок версий


│   + ├── tests/              # unit + integration
│   ├── tests/
│   │   + ├── unit/                                   # модульные тесты (чистые, без I/O)
│   │   + │   ├── test_crypto_aead.py                 # AES-GCM/XChaCha20-Poly1305
│   │   + │   ├── test_crypto_kdf.py                  # HKDF с контекстом (AAD)
│   │   + │   ├── test_envelope_engine.py             # wrap/unwrap DEK, AAD
│   │   + │   ├── test_policy_engine_rbac.py          # RBAC правила
│   │   + │   ├── test_policy_engine_abac.py          # ABAC условия (time/env/tenant)
│   │   + │   ├── test_audit_hashchain.py             # хэш-цепочка аудита
│   │   + │   ├── test_rate_limits.py                 # квоты/лимиты API
│   │   + │   └── test_utils_retry_backoff.py
│   │   + ├── integration/                            # интеграционные тесты с БД/хранилищами
│   │   + │   ├── test_rest_secrets_flow.py           # POST /secrets -> GET -> DELETE
│   │   + │   ├── test_grpc_secrets_flow.py
│   │   + │   ├── test_storage_postgres.py            # миграции, транзакции, индексы
│   │   + │   ├── test_storage_s3.py                  # блобы, версии, ретеншн
│   │   + │   ├── test_kms_pkcs11_softHSM.py          # pkcs11 через SoftHSM
│   │   + │   ├── test_kms_aws_kms_local.py           # локальный стенд/моки
│   │   + │   └── test_observability_otel.py          # трейсы/метрики/логи
│   │   + ├── e2e/                                    # сквозные сценарии как у потребителя
│   │   + │   ├── test_e2e_rotate_and_shred.py
│   │   + │   └── test_e2e_policy_enforcement.py
│   │   + ├── security/                               # негативные/безопасностные кейсы
│   │   + │   ├── test_tamper_audit_log.py            # попытка подмены журнала
│   │   + │   ├── test_policy_bypass_attempts.py
│   │   + │   ├── test_auth_mtls_oidc_failures.py     # неверные сертификаты/JWT
│   │   + │   └── test_side_channel_limits.py         # тайминги/размеры ответов
│   │   + ├── fuzz/                                   # фаззинг входов API/форматов
│   │   + │   ├── test_fuzz_rest_payloads.py
│   │   + │   └── test_fuzz_proto_messages.py
│   │   + ├── property/                               # property-based (hypothesis)
│   │   + │   ├── test_prop_envelope_idempotency.py
│   │   + │   └── test_prop_policy_distributivity.py
│   │   + ├── performance/                            # perf/latency/SLO
│   │   + │   ├── test_perf_encrypt_qps.py
│   │   + │   └── test_perf_kms_latency_budget.py
│   │   + ├── regression/                             # регрессии и снапшоты контрактов
│   │   + │   ├── test_contract_openapi_snapshot.py
│   │   + │   └── snapshots/
│   │   + ├── fixtures/                               # общие фикстуры PyTest
│   │   + │   ├── conftest.py                         # точки входа фикстур
│   │   + │   ├── fixtures_crypto.py                  # ключи/пары/соли
│   │   + │   ├── fixtures_policy.py
│   │   + │   ├── fixtures_kms.py
│   │   + │   ├── fixtures_storage.py
│   │   + │   └── fixtures_http.py
│   │   + ├── factories/                              # фабрики тест-объектов
│   │   + │   ├── secret_factory.py
│   │   + │   ├── policy_factory.py
│   │   + │   └── audit_event_factory.py
│   │   + ├── data/                                   # тестовые данные (без секретов)
│   │   + │   ├── policies/
│   │   + │   │   ├── rbac_allow_example.yaml
│   │   + │   │   └── abac_time_window.yaml
│   │   + │   ├── blobs/
│   │   + │   │   └── sample_payload.bin
│   │   + │   └── openapi/
│   │   + │       └── openapi.reference.yaml
│   │   + ├── docker/                                 # окружение для integration/e2e
│   │   + │   ├── docker-compose.test.yml             # postgres, minio, softHSM, otel-collector
│   │   + │   ├── init/
│   │   + │   │   ├── postgres-init.sql
│   │   + │   │   └── minio-bootstrap.sh
│   │   + │   └── softhsm/
│   │   + │       ├── token_init.sh
│   │   + │       └── pkcs11.cfg
│   │   + ├── tools/                                  # вспомогательные утилиты тестов
│   │   + │   ├── k6_scenarios/                       # perf-наборы (k6)
│   │   + │   │   └── encrypt_burst.js
│   │   + │   ├── contract_check.py                   # сравнение OpenAPI/grpc
│   │   + │   └── coverage_merge.py                   # объединение покрытий
│   │   + ├── pytest.ini                              # конфиг PyTest (маркеры/опции)
│   │   + ├── .coveragerc                             # объединение coverage unit+integration
│   │   + └── README.md                               # как запускать тесты по слоям
│   + └── docs/               # threat model, api_usage
│
├── blackvault-ui/
│   ├── dashboard/
│   ├── static/
│   ├── trainer/
│   + ├── components/         # общие React/Vue компоненты
│   │   + ├── layout/                     # каркасные компоненты
│   │   + │   ├── AppLayout.tsx
│   │   + │   ├── Sidebar.tsx
│   │   + │   └── Topbar.tsx
│   │   + ├── navigation/                 # меню, breadcrumbs
│   │   + │   ├── NavMenu.tsx
│   │   + │   ├── Breadcrumbs.tsx
│   │   + │   └── Tabs.tsx
│   │   + ├── forms/                      # инпуты, селекты, валидация
│   │   + │   ├── TextInput.tsx
│   │   + │   ├── PasswordInput.tsx
│   │   + │   ├── Select.tsx
│   │   + │   └── FormField.tsx
│   │   + ├── feedback/                   # алерты, уведомления, лоадеры
│   │   + │   ├── Alert.tsx
│   │   + │   ├── Notification.tsx
│   │   + │   └── Spinner.tsx
│   │   + ├── data-display/               # таблицы, карточки, теги
│   │   + │   ├── DataTable.tsx
│   │   + │   ├── Card.tsx
│   │   + │   ├── Tag.tsx
│   │   + │   └── KeyValueList.tsx
│   │   + ├── charts/                     # графики и диаграммы
│   │   + │   ├── LineChart.tsx
│   │   + │   ├── BarChart.tsx
│   │   + │   └── DonutChart.tsx
│   │   + ├── modal/                      # модальные окна
│   │   + │   ├── Modal.tsx
│   │   + │   └── ConfirmDialog.tsx
│   │   + ├── buttons/                    # кнопки и action-компоненты
│   │   + │   ├── PrimaryButton.tsx
│   │   + │   ├── SecondaryButton.tsx
│   │   + │   └── IconButton.tsx
│   │   + ├── icons/                      # набор svg-иконок
│   │   + │   ├── VaultIcon.tsx
│   │   + │   ├── KeyIcon.tsx
│   │   + │   └── UserIcon.tsx
│   │   + ├── hooks/                      # кастомные React хуки для UI
│   │   + │   ├── useModal.ts
│   │   + │   ├── useNotifications.ts
│   │   + │   └── useForm.ts
│   │   + ├── theme/                      # темы, палитры, типографика
│   │   + │   ├── colors.ts
│   │   + │   ├── typography.ts
│   │   + │   └── index.ts
│   │   + ├── tests/                      # юнит и снапшот-тесты компонентов
│   │   + │   ├── layout.test.tsx
│   │   + │   ├── forms.test.tsx
│   │   + │   └── data-display.test.tsx
│   │   + └── index.ts                    # экспорт всех общих компонентов

│   + ├── tests/              # e2e + unit
│   │   + ├── unit/                             # юнит-тесты React/Vue компонентов
│   │   + │   ├── AppLayout.test.tsx
│   │   + │   ├── NavMenu.test.tsx
│   │   + │   ├── TextInput.test.tsx
│   │   + │   ├── DataTable.test.tsx
│   │   + │   └── ChartComponents.test.tsx
│   │   + ├── e2e/                              # сквозные тесты (Cypress/Playwright)
│   │   + │   ├── auth_flow.spec.ts             # логин/логаут, OIDC, сессии
│   │   + │   ├── secrets_crud.spec.ts          # создание/чтение/удаление секрета
│   │   + │   ├── policy_editor.spec.ts         # редактирование и применение политик
│   │   + │   ├── audit_stream.spec.ts          # поток аудита в UI
│   │   + │   └── dashboard_widgets.spec.ts
│   │   + ├── visual/                           # визуальные/скриншотные тесты
│   │   + │   ├── layout_visual.test.tsx
│   │   + │   └── theme_dark_light.test.tsx
│   │   + ├── contract/                         # тесты соответствия API/UI
│   │   + │   ├── rest_contract.test.ts         # сравнение с OpenAPI
│   │   + │   └── grpc_contract.test.ts         # сравнение с .proto
│   │   + ├── performance/                      # тесты перформанса (Lighthouse/K6)
│   │   + │   ├── lighthouse_report.spec.ts
│   │   + │   └── k6_frontend_scenario.js
│   │   + ├── security/                         # тесты XSS/CSRF/инъекций
│   │   + │   ├── xss_input.spec.ts
│   │   + │   ├── csrf_form.spec.ts
│   │   + │   └── open_redirect.spec.ts
│   │   + ├── fixtures/                         # тестовые фикстуры
│   │   + │   ├── users.json
│   │   + │   ├── secrets.json
│   │   + │   └── policies.json
│   │   + ├── mocks/                            # моки API и gRPC
│   │   + │   ├── rest_mock.ts
│   │   + │   └── grpc_mock.ts
│   │   + ├── docker/                           # окружение для e2e
│   │   + │   ├── docker-compose.test.yml       # selenium/playwright + backend mock
│   │   + │   └── init.sh
│   │   + ├── jest.config.js                    # конфиг Jest для unit/visual
│   │   + ├── playwright.config.ts              # конфиг Playwright для e2e
│   │   + ├── cypress.config.ts                 # если используется Cypress
│   │   + ├── .eslintrc.test.json               # правила линта для тестов
│   │   + └── README.md                         # как запускать тесты (локально и в CI)

│   + └── docs/
│
├── edu-ai-traincore/
│   ├── courses/
│   ├── instructor/
│   ├── student_interface/
│   + ├── labs/               # практические тренажёры
│   │   + ├── red_team/                      # атакующие сценарии
│   │   + │   ├── phishing_simulation/
│   │   + │   │   ├── scenario.md
│   │   + │   │   └── exercise.py
│   │   + │   ├── privilege_escalation/
│   │   + │   └── web_exploit/
│   │   + ├── blue_team/                     # оборонительные сценарии
│   │   + │   ├── incident_detection/
│   │   + │   ├── log_analysis/
│   │   + │   └── policy_enforcement/
│   │   + ├── crypto/                        # криптографические практикумы
│   │   + │   ├── aes_encryption/
│   │   + │   ├── rsa_signatures/
│   │   + │   └── zk_proofs_intro/
│   │   + ├── secure_coding/                 # практики по безопасному коду
│   │   + │   ├── input_validation/
│   │   + │   ├── sql_injection_fix/
│   │   + │   └── xss_prevention/
│   │   + ├── web_security/                  # практикумы по web-безопасности
│   │   + │   ├── csrf_defense/
│   │   + │   ├── session_hijack/
│   │   + │   └── auth_bypass/
│   │   + ├── reverse_forensics/             # реверсинг и цифровая криминалистика
│   │   + │   ├── malware_analysis/
│   │   + │   └── memory_dump/
│   │   + ├── ml_security/                   # ML-тренажёры (adversarial examples)
│   │   + │   ├── adversarial_examples/
│   │   + │   ├── model_poisoning/
│   │   + │   └── membership_inference/
│   │   + ├── scenarios/                     # комплексные сценарии (end-to-end)
│   │   + │   ├── ransomware_incident/
│   │   + │   └── insider_threat/
│   │   + ├── utils/                         # утилиты для запуска тренажёров
│   │   + │   ├── docker-compose.lab.yml
│   │   + │   ├── seed_data/
│   │   + │   └── reset_env.sh
│   │   + ├── tests/                         # тесты для тренажёров
│   │   + │   ├── test_crypto_lab.py
│   │   + │   ├── test_web_security_lab.py
│   │   + │   └── test_ml_security_lab.py
│   │   + └── README.md                      # описание структуры и запуск лаб


│   + ├── tests/
│   │   + ├── unit/                           # модульные тесты
│   │   + │   ├── test_curriculum_parser.py   # парсер курсов
│   │   + │   ├── test_lab_engine.py          # ядро запуска лаб
│   │   + │   ├── test_user_progress.py       # трекинг прогресса
│   │   + │   └── test_utils.py
│   │   + ├── integration/                    # интеграционные тесты
│   │   + │   ├── test_rest_api.py            # проверка API курсов/лабораторий
│   │   + │   ├── test_grpc_api.py
│   │   + │   ├── test_db_postgres.py         # миграции и данные
│   │   + │   └── test_ai_feedback_loop.py    # интеграция с AI-оценкой
│   │   + ├── e2e/                            # сквозные сценарии обучения
│   │   + │   ├── test_full_course_flow.py    # прохождение курса end-to-end
│   │   + │   ├── test_red_team_lab_flow.py
│   │   + │   └── test_ml_security_lab_flow.py
│   │   + ├── labs_validation/                # проверки всех лаб
│   │   + │   ├── test_lab_metadata.py        # корректность metadata.yaml
│   │   + │   ├── test_lab_docker_env.py      # окружение lab utils
│   │   + │   └── test_lab_scenarios.py
│   │   + ├── security/                       # негативные кейсы и защита
│   │   + │   ├── test_xss_in_labs.py
│   │   + │   ├── test_sql_injection_prevention.py
│   │   + │   └── test_policy_bypass.py
│   │   + ├── performance/                    # нагрузочные тесты
│   │   + │   ├── test_concurrent_users.py
│   │   + │   └── test_lab_latency.py
│   │   + ├── fixtures/                       # фикстуры pytest
│   │   + │   ├── conftest.py
│   │   + │   ├── fixtures_users.py
│   │   + │   ├── fixtures_courses.py
│   │   + │   └── fixtures_labs.py
│   │   + ├── data/                           # тестовые данные
│   │   + │   ├── users.json
│   │   + │   ├── courses.json
│   │   + │   └── labs_manifest.yaml
│   │   + ├── docker/                         # окружение для тестов
│   │   + │   ├── docker-compose.test.yml
│   │   + │   └── init.sh
│   │   + ├── pytest.ini                      # конфиг pytest
│   │   + ├── .coveragerc                     # покрытие
│   │   + └── README.md                       # описание запуска тестов

│   + └── docs/
│
├── forensic/
│   ├── collectors/
│   ├── timeline/
│   ├── exporters/
│   ├── parsers/
│   + ├── configs/            # правила сбора/парсинга
│   │   + ├── collectors/                  # правила для агентов сбора
│   │   + │   ├── sysmon_rules.yaml         # конфиг Sysmon
│   │   + │   ├── osquery_packs.yaml        # наборы запросов osquery
│   │   + │   ├── endpoint_linux.yaml       # сбор с Linux-эндпоинтов
│   │   + │   └── endpoint_windows.yaml     # сбор с Windows-эндпоинтов
│   │   + ├── parsers/                      # правила парсинга форматов
│   │   + │   ├── evtx_parser.yaml          # Windows Event Log
│   │   + │   ├── syslog_parser.yaml        # Syslog
│   │   + │   ├── jsonl_parser.yaml         # JSON Lines
│   │   + │   └── pcap_parser.yaml          # сетевые дампы
│   │   + ├── pipelines/                    # пайплайны обработки
│   │   + │   ├── default_pipeline.yaml
│   │   + │   ├── incident_replay.yaml
│   │   + │   └── anomaly_detection.yaml
│   │   + ├── profiles/                     # профили окружений
│   │   + │   ├── linux_server.yaml
│   │   + │   ├── windows_workstation.yaml
│   │   + │   └── cloud_k8s.yaml
│   │   + ├── schema/                       # схемы валидации
│   │   + │   ├── collector.schema.json
│   │   + │   ├── parser.schema.json
│   │   + │   └── pipeline.schema.json
│   │   + ├── alerts/                       # правила алертинга по артефактам
│   │   + │   ├── exfiltration.yaml
│   │   + │   ├── privilege_escalation.yaml
│   │   + │   └── persistence.yaml
│   │   + ├── docs/                         # документация по конфигах
│   │   + │   ├── collectors.md
│   │   + │   ├── parsers.md
│   │   + │   └── pipelines.md
│   │   + └── README.md                     # как подключать и расширять правила

│   + ├── tests/
        ├── README.md
        ├── pytest.ini
        ├── conftest.py
        ├── coverage.rc
        ├── noxfile.py
        ├── tox.ini
        ├── configs/
        │   ├── test-settings.yaml
        │   ├── test-secrets.example.yaml
        │   └── docker-compose.test.yml
        ├── unit/
        │   ├── test_hashing_algorithms.py
        │   ├── test_metadata_extractor.py
        │   ├── test_chain_of_custody_model.py
        │   ├── test_timestamp_normalizer.py
        │   ├── test_artifact_serialization.py
        │   ├── test_path_sanitizer.py
        │   ├── test_rbac_policies_eval.py
        │   ├── test_redaction_pii_rules.py
        │   └── __init__.py
        ├── integration/
        │   ├── test_ingest_pipeline_local_fs.py
        │   ├── test_ingest_pipeline_object_store_s3.py
        │   ├── test_message_bus_kafka_nats.py
        │   ├── test_storage_backends_versions_gc.py
        │   ├── test_evidence_locking_and_signing.py
        │   └── __init__.py
        ├── e2e/
        │   ├── test_case_lifecycle_happy_path.py
        │   ├── test_case_lifecycle_incident_reopen.py
        │   ├── test_full_artifact_flow_multi_format.py
        │   └── __init__.py
        ├── performance/
        │   ├── test_ingest_throughput_benchmark.py
        │   ├── test_metadata_parse_latency.py
        │   ├── test_storage_roundtrip_io.py
        │   └── __init__.py
        ├── fuzz/
        │   ├── test_fuzz_container_parsers.py
        │   ├── test_fuzz_log_parsers.py
        │   ├── test_fuzz_pcap_reader.py
        │   └── __init__.py
        ├── property/
        │   ├── test_prop_hash_idempotency.py
        │   ├── test_prop_time_ordering.py
        │   ├── test_prop_redaction_closure.py
        │   └── __init__.py
        ├── security/
        │   ├── test_tamper_detection_signatures.py
        │   ├── test_key_rotation_and_verification.py
        │   ├── test_secure_wipe_and_sanitize.py
        │   └── __init__.py
        ├── compliance/
        │   ├── test_gdpr_pii_masking_export.py
        │   ├── test_legal_hold_retention_policies.py
        │   ├── test_audit_log_completeness.py
        │   └── __init__.py
        ├── reliability/
        │   ├── test_retry_backoff_idempotency.py
        │   ├── test_partial_failures_degradation.py
        │   └── __init__.py
        ├── incident_replay/
        │   ├── test_replay_timeline_determinism.py
        │   ├── test_replay_hash_consistency.py
        │   └── __init__.py
        ├── fixtures/
        │   ├── __init__.py
        │   ├── clocks.py
        │   ├── fake_crypto.py
        │   ├── fake_object_store.py
        │   ├── fake_message_bus.py
        │   ├── sample_paths.py
        │   └── policies.py
        ├── data/
        │   ├── README.md
        │   ├── .gitkeep
        │   ├── images/
        │   │   ├── small-jpeg.corrupted
        │   │   └── small-png.png
        │   ├── archives/
        │   │   ├── nested.zip
        │   │   └── encrypted.7z
        │   ├── logs/
        │   │   ├── syslog_small.log
        │   │   └── app_ndjson.ndjson
        │   ├── pcaps/
        │   │   └── tiny.pcap
        │   ├── office_docs/
        │   │   ├── docx_sample.docx
        │   │   └── pdf_sample.pdf
        │   ├   memory/
        │   │   └── dummy.mem
        │   └── filesystem/
        │       └── tree.tar
        ├── golden/
        │   ├── README.md
        │   ├── expected_hashes.json
        │   ├── expected_metadata.json
        │   └── expected_audit_log.jsonl
        ├── tools/
        │   ├── gen_synth_logs.py
        │   ├── gen_corrupted_files.py
        │   ├── validate_golden.py
        │   └── build_test_images.Dockerfile
        ├── reports/
        │   ├── .gitkeep
        │   └── README.md
        └── scripts/
            ├── run_tests.sh
            ├── run_e2e.sh
            ├── lint_and_typecheck.sh
            └── coverage_report.sh

│   + └── docs/
│
├── immutable-core/
│   ├── lock_rules/
│   ├── watchdog/
│   + ├── notarization/       # криптографическое заверение
│   + ├── timestamp/          # временные метки
│   + ├── tests/
│   + └── docs/
│
├── incident_response/
│   ├── forensic/
│   ├── playbooks/
│   ├── auto_replay.py
│   ├── notify.py
│   ├── actions/            # изоляция, отзыв токенов и т.д.
    │  + ├── isolate/
    │  + │   ├── isolate_host.py            # изоляция хоста (EDR/сетевой)
    │  + │   └── quarantine_device.py       # карантин конечной точки
    │  + ├── identity/
    │  + │   ├── revoke_tokens.py           # отзыв сессий/токенов (SSO/IAM)
    │  + │   ├── disable_account.py         # блокировка учетки
    │  + │   └── reset_password.py          # принудительная смена пароля
    │  + ├── network/
    │  + │   ├── block_ip.py
    │  + │   ├── block_domain.py
    │  + │   └── revoke_vpn.py
    │  + ├── endpoint/
    │  + │   ├── kill_process.py
    │  + │   ├── delete_file.py
    │  + │   └── edr_quarantine.py
    │  + ├── cloud/
    │  + │   ├── revoke_keys.py             # отзыв API-ключей/учеток
    │  + │   ├── rotate_secrets.py
    │  + │   └── suspend_instance.py
    │  + ├── messaging/
    │  + │   ├── notify_user.py
    │  + │   └── notify_stakeholders.py
    │  + └── rollback/
    │   +   └── restore_backup.py          # восстановление после containment/eradication
    │
│   + ├── integrations/       # SIEM/SOAR/PagerDuty
        ├── README.md
        ├── __init__.py
        ├── pyproject.toml                    # (опционально, если модуль собирается отдельно)
        ├── configs/
        │   ├── pagerduty.example.yaml
        │   ├── splunk.example.yaml
        │   └── xsoar.example.yaml
        ├── common/
        │   ├── __init__.py
        │   ├── interfaces.py                 # Общие протоколы/модели (Alert, Incident, Connector)
        │   ├── errors.py                     # Исключения интеграций
        │   ├── http.py                       # Единый async HTTP-клиент (httpx) + ретраи/таймауты
        │   ├── tracing.py                    # Хуки трейсинга (opentelemetry), безопасные логи
        │   └── utils.py                      # Идемпотентность, хэш-ключи, нормализация полей
        ├── paging/
        │   ├── __init__.py
        │   └── pagerduty/
        │       ├── __init__.py
        │       ├── client.py                 # Полноценный клиент Events v2 (trigger/ack/resolve)
        │       ├── models.py                 # Pydantic-модели запросов/ответов
        │       └── mapper.py                 # Map из внутренних Incident/Alert → Payload PD
        ├── siem/
        │   ├── __init__.py
        │   ├── splunk/
        │   │   ├── __init__.py
        │   │   └── client.py                 # Каркас клиента (search, notable events)
        │   └── elastic/
        │       ├── __init__.py
        │       └── client.py                 # Каркас клиента (ECS-совместимый ingest)
        └── soar/
            ├── __init__.py
            ├── xsoar/
            │   ├── __init__.py
            │   └── client.py                 # Каркас клиента (incidents/tasks/files)
            └── thehive/
                ├── __init__.py
                └── client.py                 # Каркас клиента (cases/observables)
        tests/
        └── unit/
            ├── __init__.py
            └── test_pagerduty_client.py      # Юнит-тесты клиента PagerDuty (моки httpx)

│   + ├── configs/
        ├── README.md
        ├── .gitignore
        ├── .editorconfig
        ├── values.example.yaml
        ├── schema/
        │   ├── config.schema.json
        │   ├── policy.schema.yaml
        │   ├── detection_rule.schema.yaml
        │   ├── playbook.schema.yaml
        │   ├── runbook.schema.yaml
        │   ├── workflow.schema.yaml
        │   ├── escalation.schema.yaml
        │   ├── contacts.schema.yaml
        │   ├── comms_template.schema.yaml
        │   └── kpi.schema.yaml
        ├── validators/
        │   ├── configlint.yaml
        │   ├── precommit.yaml
        │   └── scripts/
        │       └── validate_all.py
        ├── policies/
        │   ├── classification.yaml
        │   ├── severity_matrix.yaml
        │   ├── sla_ola.yaml
        │   ├── escalations.yaml
        │   ├── risk_matrix.yaml
        │   ├── rbac.yaml
        │   ├── segregation_of_duties.yaml
        │   ├── data_retention.yaml
        │   └── evidence_retention.yaml
        ├── comms_templates/
        │   ├── incident_announce.md.j2
        │   ├── stakeholder_update.md.j2
        │   ├── regulator_notice.md.j2
        │   ├── customer_comm.md.j2
        │   └── postmortem.md.j2
        ├── legal_compliance/
        │   ├── chain_of_custody.yaml
        │   ├── evidence_handling.yaml
        │   ├── gdpr/
        │   │   ├── breach_notification.yaml
        │   │   ├── retention_policy.yaml
        │   │   └── dpia_template.md
        │   ├── iso27001/
        │   │   └── annex_a_mapping.yaml
        │   ├── soc2/
        │   │   └── controls_mapping.yaml
        │   └── pci_dss/
        │       └── controls_mapping.yaml
        ├── integrations/
        │   ├── siem/
        │   │   ├── splunk/
        │   │   │   ├── saved_searches.conf
        │   │   │   ├── macros.conf
        │   │   │   └── spl/                 # SPL-запросы
        │   │   ├── elastic/
        │   │   │   ├── detections/
        │   │   │   └── index_templates/
        │   │   └── sentinel/
        │   │       └── kql/                 # KQL-запросы
        │   ├── ticketing/
        │   │   ├── jira/
        │   │   │   ├── project.yaml
        │   │   │   └── workflows.yaml
        │   │   └── servicenow/
        │   │       ├── tables.yaml
        │   │       └── flows.yaml
        │   ├── chatops/
        │   │   ├── slack.yaml
        │   │   └── teams.yaml
        │   ├── edr/
        │   │   ├── crowdstrike.yaml
        │   │   ├── sentinelone.yaml
        │   │   └── defender.yaml
        │   ├── threat_intel/
        │   │   ├── misp.yaml
        │   │   ├── otx.yaml
        │   │   └── virustotal.yaml
        │   └── soar/
        │       ├── xsoar/
        │       │   └── integrations.yaml
        │       └── shuffle/
        │           └── connectors.yaml
        ├── detection/
        │   ├── sigma/
        │   │   ├── windows/
        │   │   ├── linux/
        │   │   ├── macos/
        │   │   ├── network/
        │   │   └── cloud/
        │   │       ├── aws/
        │   │       ├── gcp/
        │   │       └── azure/
        │   ├── suricata/
        │   │   └── rules/
        │   ├── yara/
        │   │   └── rules/
        │   ├── edr_queries/
        │   │   ├── crowdstrike/
        │   │   ├── sentinelone/
        │   │   └── defender/
        │   ├── kql/
        │   │   └── sentinel/
        │   └── spl/
        │       └── splunk/
        ├── playbooks/
        │   ├── ransomware/
        │   │   ├── identify.yaml
        │   │   ├── contain.yaml
        │   │   ├── eradicate.yaml
        │   │   ├── recover.yaml
        │   │   └── post_incident.yaml
        │   ├── phishing/
        │   │   ├── triage.yaml
        │   │   └── takedown.yaml
        │   ├── ddos/
        │   │   ├── mitigate.yaml
        │   │   └── comms.yaml
        │   ├── cloud_compromise/
        │   │   ├── iam_abuse.yaml
        │   │   └── access_key_leak.yaml
        │   ├── insider_threat/
        │   │   └── investigation.yaml
        │   └── data_exfiltration/
        │       └── response.yaml
        ├── runbooks/
        │   ├── aws/
        │   │   ├── iam_compromise.md
        │   │   └── s3_breach.md
        │   ├── gcp/
        │   │   └── gcs_breach.md
        │   ├── azure/
        │   │   └── keyvault_incident.md
        │   ├── k8s/
        │   │   ├── cluster_incident.md
        │   │   └── pod_escape.md
        │   ├── windows/
        │   │   └── dc_compromise.md
        │   ├── linux/
        │   │   └── ssh_bruteforce.md
        │   ├── macos/
        │   │   └── malware_quarantine.md
        │   └── network/
        │       └── lateral_movement.md
        ├── automation/
        │   ├── workflows/
        │   │   ├── soar/
        │   │   │   ├── xsoar/
        │   │   │   │   ├── ransomware_containment.yml
        │   │   │   │   └── phishing_triage.yml
        │   │   │   └── shuffle/
        │   │   │       └── notify_and_ticket.yml
        │   │   ├── n8n/
        │   │   │   └── notify_and_ticket.json
        │   │   └── stackstorm/
        │   │       ├── rules/
        │   │       └── actions/
        │   └── actions/
        │       ├── containment/
        │       │   ├── quarantine_host.yaml
        │       │   └── revoke_tokens.yaml
        │       ├── enrichment/
        │       │   ├── whois_lookup.yaml
        │       │   └── sandbox_file.yaml
        │       └── notification/
        │           ├── page_oncall.yaml
        │           └── post_chatops.yaml
        ├── environments/
        │   ├── base/
        │   │   ├── settings.yaml
        │   │   ├── contacts.yaml
        │   │   ├── providers.yaml
        │   │   ├── routing.yaml
        │   │   ├── kpis.yaml
        │   │   └── chronowatch_overrides.yaml
        │   ├── dev/
        │   │   ├── overlay.yaml
        │   │   └── toggles.yaml
        │   ├── stage/
        │   │   ├── overlay.yaml
        │   │   └── toggles.yaml
        │   └── prod/
        │       ├── overlay.yaml
        │       ├── toggles.yaml
        │       └── emergency_overrides.yaml
        ├── metrics/
        │   ├── kpi.yaml
        │   ├── sli_slo.yaml
        │   ├── dashboards/
        │   │   └── grafana/
        │   │       └── dashboards.json
        │   └── alerts/
        │       └── alertmanager.yaml
        ├── training/
        │   ├── tabletop_exercises/
        │   │   ├── ransomware.md
        │   │   └── phishing.md
        │   ├── drills/
        │   │   └── quarterly_plan.yaml
        │   └── runbooks_quiz/
        │       ├── l1.yaml
        │       └── l2.yaml
        ├── testdata/
        │   ├── incidents/
        │   │   ├── sample_phishing.eml
        │   │   └── sample_ransomware_note.txt
        │   └── pcaps/
        │       └── sample_dns_exfil.pcap
        ├── tests/
        │   └── config_validation/
        │       ├── test_schemas.py
        │       └── test_overlays.py
        ├── security/
        │   ├── signing/
        │   │   ├── README.md
        │   │   ├── gpg_policy.yaml
        │   │   └── trusted_keys/
        │   │       └── team.asc
        │   └── hashes/
        │       └── sha256.manifest
        └── chronowatch/
            ├── bridge.yaml
            └── schedules_refs.yaml

│   + ├── tests/
core-systems/
  incident_response/
    tests/
      README.md
      pytest.ini
      conftest.py
      markers.yaml
      resources/
        datasets/
          incidents/
            phishing_case_min.json
            ransomware_case_min.json
          telemetry/
            windows/
              sample_security_log.jsonl.gz
            network/
              zeek/sample_conn.log.gz
              pcap/sample.pcap.gz
        schemas/
          incident.schema.json
          timeline.schema.json
          enrichment.schema.json
        rules/
          sigma/
            win_susp_process_creation.yml
          yara/
            ransom_note_rule.yar
          stix/
            indicator_example.json
        configs/
          test.env
          docker-compose.mock.yml
        certificates/
          ca.pem
          server.pem
      unit/
        conftest.py
        test_incident_model_validation.py
        test_rule_engine.py
        test_deduplication.py
        test_enrichment_pipeline.py
        test_timeline_builder.py
        test_rbac_guard.py
        test_serialization_integrity.py
      integration/
        conftest.py
        adapters/
          test_siem_adapter_splunk.py
          test_siem_adapter_elastic.py
          test_ticketing_adapter_jira.py
        pipelines/
          test_ingest_to_correlation.py
          test_correlation_to_response.py
        storage/
          test_retention_policy_s3.py
          test_kv_state_redis.py
        security/
          test_secret_redaction.py
        observability/
          test_otlp_export.py
      e2e/
        conftest.py
        playbooks/
          test_playbook_phishing.yml
          test_playbook_ransomware.yml
          test_playbook_lateral_movement.yml
          test_playbook_data_exfiltration.yml
        scenarios/
          test_phishing_end_to_end.py
          test_ransomware_containment.py
          test_lateral_movement_detect_and_block.py
          test_exfiltration_detect_and_respond.py
        golden/
          snapshots/
            phishing/README.md
            ransomware/README.md
          validators/
            assert_incident_equivalence.py
      performance/
        conftest.py
        baselines/
          perf_thresholds.yaml
        test_throughput_ingest.py
        test_correlation_latency.py
        test_response_playbook_runtime.py
      security/
        conftest.py
        test_rbac_enforcement.py
        test_audit_log_integrity.py
        test_pii_minimization.py
        test_crypto_key_rotation.py
      compliance/
        conftest.py
        test_data_retention_gdpr.py
        test_chain_of_custody.py
        test_export_controls.py
      chaos/
        conftest.py
        test_message_bus_disconnect.py
        test_clock_skew_effects.py
      regression/
        conftest.py
        snapshots/
          timeline/
            sample_timeline_snapshot.json
        test_regression_timeline_serialization.py
      mocks/
        http/
          mock_jira_server.py
          mock_mitre_feed.py
        bus/
          mock_kafka.py
          mock_rabbitmq.py
        storage/
          mock_s3.py
          mock_redis.py
      plugins/
        pytest_allure.py
        pytest_markers.py
        pytest_time_synchronization.py
      tooling/
        run_local.sh
        run_ci.sh
        collect_artifacts.py
        sanitize_logs.py
      reports/
        README.md
        .gitkeep

│   + └── docs/
│
├── observability/
│   ├── integrations/
│   ├── anomaly_detector.py
│   ├── deep_trace.py
│   ├── soc_telemetry.py
│   + ├── exporters/          # Prometheus, Grafana, Loki
core-systems/
└── observability/
    └── exporters/
        ├── README.md                          # обзор, SLA/SLO, схемы потоков данных
        ├── OWNERS                             # ответственные за каталог
        ├── CODEOWNERS                         # маппинг директорий на команды
        ├── docs/
        │   ├── architecture.md                # общая архитектура Observability
        │   ├── data-flows.md                  # схемы потоков: метрики/логи/трейсы
        │   ├── threat-model.md                # STRIDE/PASTA для телеметрии
        │   ├── runbooks/
        │   │   ├── prometheus-runbook.md
        │   │   ├── loki-runbook.md
        │   │   ├── grafana-runbook.md
        │   │   └── otel-collector-runbook.md
        │   └── sre-playbooks/
        │       ├── paging-policy.md
        │       └── incident-comm-template.md
        ├── pkg/
        │   ├── docker/
        │   │   ├── custom-exporter-python/    # пример собственного экспортёра
        │   │   │   ├── Dockerfile
        │   │   │   ├── pyproject.toml
        │   │   │   └── exporter_app/
        │   │   │       ├── __init__.py
        │   │   │       ├── main.py            # HTTP /metrics
        │   │   │       └── metrics.py         # бизнес-метрики
        │   │   ├── otel-collector/
        │   │   │   ├── Dockerfile
        │   │   │   └── entrypoint.sh
        │   │   ├── blackbox-exporter/
        │   │   │   ├── Dockerfile
        │   │   │   └── blackbox.yml           # модули проверки
        │   │   ├── process-exporter/
        │   │   │   └── Dockerfile
        │   │   └── promtail/
        │   │       └── Dockerfile
        │   └── scripts/
        │       ├── lint_alerts.sh             # валидация правил Prometheus/Loki
        │       ├── validate_dashboards.py     # проверка JSON-дашбордов
        │       ├── chart_unit_test.sh         # helm-unittest
        │       └── generate_sbom.sh           # SBOM для артефактов
        ├── charts/                            # Helm: единая библиотека + приложения
        │   ├── exporters-lib/                 # library chart (шаблоны)
        │   │   ├── Chart.yaml
        │   │   ├── templates/
        │   │   │   ├── _helpers.tpl
        │   │   │   ├── deployment.yaml
        │   │   │   ├── daemonset.yaml
        │   │   │   ├── service.yaml
        │   │   │   ├── servicemonitor.yaml    # CRD Prometheus Operator
        │   │   │   ├── podmonitor.yaml
        │   │   │   ├── networkpolicy.yaml
        │   │   │   ├── psp-psa.yaml           # Pod Security Admission (PSA)
        │   │   │   └── rbac.yaml
        │   │   └── values.schema.json
        │   ├── prometheus/
        │   │   ├── Chart.yaml
        │   │   ├── values.yaml
        │   │   └── templates/
        │   │       ├── server-configmap.yaml  # scrape_configs/remote_write
        │   │       ├── rules-configmap.yaml   # recording/alerting rules
        │   │       └── statefulset.yaml
        │   ├── alertmanager/
        │   │   ├── Chart.yaml
        │   │   └── templates/
        │   ├── grafana/
        │   │   ├── Chart.yaml
        │   │   ├── values.yaml                # provisioning folders/datasources
        │   │   └── templates/
        │   │       ├── dashboards-cm.yaml     # JSON-дашборды как ConfigMap
        │   │       └── deployment.yaml
        │   ├── loki/
        │   │   ├── Chart.yaml
        │   │   ├── values.yaml                # schema_config, ruler, compactor
        │   │   └── templates/
        │   ├── promtail/
        │   │   ├── Chart.yaml
        │   │   ├── values.yaml                # pipelines, scrape_configs
        │   │   └── templates/
        │   ├── otel-collector/
        │   │   ├── Chart.yaml
        │   │   ├── values.yaml                # receivers/processors/exporters
        │   │   └── templates/
        │   ├── blackbox-exporter/
        │   │   ├── Chart.yaml
        │   │   ├── values.yaml
        │   │   └── templates/
        │   ├── node-exporter/
        │   │   ├── Chart.yaml
        │   │   └── templates/                 # DaemonSet + ServiceMonitor
        │   ├── kube-state-metrics/
        │   │   ├── Chart.yaml
        │   │   └── templates/
        │   └── process-exporter/
        │       ├── Chart.yaml
        │       └── templates/
        ├── k8s/                                # Kustomize: базовые манифесты + оверлеи
        │   ├── base/
        │   │   ├── namespace.yaml
        │   │   ├── prometheus/
        │   │   │   ├── prometheus.yaml
        │   │   │   └── service.yaml
        │   │   ├── grafana/
        │   │   │   ├── deployment.yaml
        │   │   │   └── datasource.yaml
        │   │   ├── loki/
        │   │   │   ├── loki.yaml
        │   │   │   └── ruler.yaml
        │   │   ├── promtail/                   # DaemonSet
        │   │   ├── monitors/                   # ServiceMonitor/PodMonitor
        │   │   └── kustomization.yaml
        │   └── overlays/
        │       ├── dev/
        │       │   └── kustomization.yaml
        │       ├── stage/
        │       │   └── kustomization.yaml
        │       └── prod/
        │           └── kustomization.yaml
        ├── terraform/
        │   ├── modules/
        │   │   ├── grafana_cloud/             # datasources, folders, api keys
        │   │   ├── loki_s3_bucket/            # backend для Loki (S3/GCS)
        │   │   ├── prometheus_remote_write/   # IAM + endpoint RW
        │   │   └── iam_roles/                 # сервис-аккаунты/политики
        │   └── envs/
        │       ├── dev/
        │       │   ├── main.tf
        │       │   ├── variables.tf
        │       │   └── outputs.tf
        │       ├── stage/
        │       └── prod/
        ├── otel/                               # OpenTelemetry Collector
        │   ├── pipelines/
        │   │   ├── metrics.yaml                # receivers → processors → exporters
        │   │   ├── logs.yaml
        │   │   └── traces.yaml
        │   ├── receivers/                      # hostmetrics, otlp, prometheus, filelog
        │   ├── processors/                     # batch, memory_limiter, resourcedetection
        │   ├── exporters/                      # prometheusremotewrite, loki, otlphttp
        │   ├── extensions/                     # health_check, pprof, zpages
        │   └── profiles/
        │       ├── dev.yaml
        │       ├── stage.yaml
        │       └── prod.yaml
        ├── prometheus/
        │   ├── scrape-configs/
        │   │   ├── exporters.yaml              # статики/подсетчики
        │   │   └── kubernetes_sd.yaml          # kubernetes_sd_configs
        │   ├── recording-rules/
        │   │   ├── general.rules.yaml
        │   │   └── slo.rules.yaml
        │   ├── alert-rules/
        │   │   ├── platform.alerts.yaml
        │   │   ├── exporters.alerts.yaml
        │   │   └── loki.alerts.yaml            # через Alertmanager маршруты
        │   └── mixins/                         # jsonnet-миксины (опционально)
        ├── loki/
        │   ├── config/
        │   │   ├── loki.yaml                   # schema_config, storage_config
        │   │   ├── ruler/                      # правила алертинга Loki
        │   │   │   └── rules.yaml
        │   │   └── tenants/                    # multi-tenant политики (опц.)
        │   └── promtail/
        │       ├── scrape-configs/
        │       │   ├── kubernetes.yaml
        │       │   └── systemd.yaml
        │       └── pipelines/
        │           ├── labels.yaml             # relabel_configs
        │           └── stages.yaml             # drop, json, multiline
        ├── grafana/
        │   ├── provisioning/
        │   │   ├── datasources/                # Prometheus, Loki, Tempo/OTLP
        │   │   ├── dashboards/
        │   │   │   └── dashboards.yaml         # auto-provision JSON
        │   │   └── notifiers/                  # Alerting contact points (v9+)
        │   └── folders/
        │       ├── Platform/
        │       ├── Exporters/
        │       └── SRE/
        ├── dashboards/
        │   ├── grafana/
        │   │   ├── platform-overview.json
        │   │   ├── exporters-blackbox.json
        │   │   ├── exporters-process.json
        │   │   ├── loki-logs-overview.json
        │   │   └── otel-pipelines.json
        │   └── library-panels/                 # реюзабельные панели
        ├── alerts/
        │   ├── prometheus/
        │   │   ├── availability.yaml           # аптайм, 5xx, latency
        │   │   ├── resources.yaml              # CPU/Mem/Disk/FS Inodes
        │   │   └── exporters.yaml              # up == 0, scrape errors, staleness
        │   └── loki/
        │       └── patterns.yaml               # error-rate, regex-паттерны
        ├── security/
        │   ├── rbac/
        │   │   ├── roles.yaml
        │   │   └── bindings.yaml
        │   ├── network-policies/
        │   │   ├── allow-scrape.yaml           # Prometheus → exporters
        │   │   └── deny-all.yaml
        │   ├── psa-pss/
        │   │   └── restricted.yaml             # Pod Security Admission profiles
        │   └── policies/
        │       ├── kyverno/                    # security hardening
        │       └── opa/                        # Rego-политики
        ├── ci/
        │   ├── github/
        │   │   └── workflows/
        │   │       ├── lint-yaml.yml
        │   │       ├── helm-ct.yml             # chart-testing (lint/install on kind)
        │   │       ├── validate-dashboards.yml
        │   │       ├── promtool-validate.yml   # promtool check rules
        │   │       └── kubeconform.yml         # схема-валидация манифестов
        │   └── gitlab/
        │       └── .gitlab-ci.yml
        ├── tests/
        │   ├── unit/
        │   │   └── test_dashboards_schema.py
        │   ├── integration/
        │   │   ├── test_helm_templates.py      # helm template → kubeconform
        │   │   └── test_prom_rules.py          # promtool check rules
        │   └── e2e/
        │       ├── kind-cluster.sh             # локальный кластер для прогонов
        │       └── test_exporters_up.py        # проверка up==1 для exporters
        └── samples/
            ├── values/
            │   ├── dev.values.yaml
            │   ├── stage.values.yaml
            │   └── prod.values.yaml
            └── exporters/
                ├── blackbox.sample.yml
                └── process.sample.yml

│   + ├── dashboards/         # json дашборды Grafana
core-systems/
└── observability/
    └── dashboards/
        ├── _meta/                           # Нормы и артефакты управления
        │   ├── README.md                    # Политики: теги, UID, ревью, релиз-цикл
        │   ├── conventions.md               # Именование, переменные, аннотации, панели
        │   ├── uids-registry.yaml           # Резерв UID для папок/дашбордов
        │   ├── schema.dashboard.json        # JSON Schema для lint в CI
        │   ├── lint-rules.yaml              # Правила проверки (jq/yq/ajv)
        │   └── changelog.md                 # История изменений дашбордов
        │
        ├── _templates/                      # Переиспользуемые шаблоны
        │   ├── base.dashboard.json          # Базовый каркас: переменные, теги, аннотации
        │   ├── vars.common.json             # Общие переменные: datasource, env, region, cluster, ns
        │   ├── panels.library.json          # Набор типовых панелей (latency, err_rate, RPS)
        │   ├── panels.logs.json             # Типовые панели для Loki
        │   ├── panels.traces.json           # Типовые панели для Tempo/Jaeger
        │   └── readme.md
        │
        ├── _provisioning/                   # Автопровиженинг Grafana
        │   ├── dashboards.yaml              # Провиженинг дашбордов (apiVersion: 1)
        │   ├── folders.yaml                 # Провиженинг папок/UID
        │   └── datasources/                 # (опц.) пример источников (prom/loki/tempo)
        │       ├── prometheus.yaml
        │       ├── loki.yaml
        │       └── tempo.yaml
        │
        ├── platform/                        # Инфраструктура/платформа
        │   ├── k8s/
        │   │   ├── cluster-overview.v1.json
        │   │   ├── nodes-health.v1.json
        │   │   ├── workloads.v1.json
        │   │   ├── networking-cni.v1.json
        │   │   └── etcd-observability.v1.json
        │   ├── infra/
        │   │   ├── linux-hosts.v1.json
        │   │   ├── windows-hosts.v1.json
        │   │   ├── nginx-haproxy.v1.json
        │   │   └── traefik-gateway.v1.json
        │   ├── network/
        │   │   ├── edge-lb.v1.json
        │   │   └── dns-cdn.v1.json
        │   ├── storage/
        │   │   ├── ceph-rook.v1.json
        │   │   └── s3-minio.v1.json
        │   └── ci-cd/
        │       ├── runners-executors.v1.json
        │       └── pipeline-health.v1.json
        │
        ├── apps/                            # Прикладные сервисы
        │   ├── services/
        │   │   └── chronowatch/             # Пример сервиса
        │   │       ├── service-overview.v1.json
        │   │       ├── api-latency-errors.v1.json
        │   │       └── dependencies.v1.json
        │   └── gateways/
        │       ├── api-gateway.v1.json
        │       └── ratelimiter.v1.json
        │
        ├── data/                            # СУБД, брокеры, кеш
        │   ├── postgres.v1.json
        │   ├── mysql.v1.json
        │   ├── clickhouse.v1.json
        │   ├── redis.v1.json
        │   ├── mongodb.v1.json
        │   ├── kafka.v1.json
        │   └── rabbitmq.v1.json
        │
        ├── tracing/                         # Трейсинг
        │   ├── tempo-service-map.v1.json
        │   ├── jaeger-latency.v1.json
        │   └── exemplar-rps-error.v1.json
        │
        ├── logs/                            # Логи
        │   ├── loki-system.v1.json
        │   └── loki-apps.v1.json
        │
        ├── security/                        # Безопасность и аудит
        │   ├── audit-events.v1.json
        │   ├── authz-authn.v1.json
        │   └── vulnerability-scans.v1.json
        │
        ├── sla-slo/                         # SLI/SLO и ошибки бюджета
        │   ├── product-slo.v1.json
        │   ├── error-budget.v1.json
        │   └── availability-rolling.v1.json
        │
        ├── business/                        # Бизнес-метрики
        │   ├── funnel-conversion.v1.json
        │   ├── revenue-kpis.v1.json
        │   └── retention-cohorts.v1.json
        │
        ├── synthetic/                       # Синтетика и внешние проверки
        │   ├── blackbox-http.v1.json
        │   └── rums-lite.v1.json
        │
        ├── perf/                            # Нагрузочное тестирование / k6
        │   ├── k6-overview.v1.json
        │   └── k6-trends.v1.json
        │
        ├── cost/                            # Стоимость/биллинг (FinOps)
        │   ├── cloud-costs.v1.json
        │   └── kubecost.v1.json
        │
        ├── incidents/                       # Инциденты и постмортем
        │   ├── incident-timeline.v1.json
        │   └── postmortem-metrics.v1.json
        │
        └── _onboarding/                     # Быстрый старт для авторов дашбордов
            ├── onboarding.md
            └── checklist.md

│   + ├── alerts/             # alerting rules
core-systems/
└── observability/
    └── alerts/
        ├── README.md                             # краткое описание, как рендерить/валидировать/деплоить правила
        ├── Makefile                               # make validate, make test, make render, make bundle
        ├── tools/
        │   ├── validate.sh                        # оболочка над promtool/alertlint/jsonschema
        │   ├── render.py                          # Jinja/Jsonnet рендеринг шаблонов -> итоговые YAML
        │   └── diff.sh                            # сравнение с кластером (kubectl diff/kustomize build)
        ├── policies/                              # политики и стандарты
        │   ├── naming.md                          # правила именования алертов (AlertName, snake_case labels)
        │   ├── labels.md                          # обязательные лейблы: severity, service, team, runbook, owner
        │   ├── severity.md                        # градации S0..S4 и требования к реакциям
        │   └── routing.md                         # принципы маршрутизации/ингибиций
        ├── ownership/
        │   ├── services.yaml                      # соответствие service -> team -> escalation chain
        │   └── contacts.yaml                      # контакты: PagerDuty/Opsgenie/Email/Slack endpoints
        ├── runbooks/                              # действия при срабатывании (ссылки кладём в label runbook)
        │   ├── TEMPLATE.md
        │   ├── infrastructure/
        │   │   └── cpu_throttle.md
        │   └── services/
        │       ├── blackvault/
        │       │   └── storage_latency.md
        │       └── chronowatch/
        │           └── grpc_error_rate.md
        ├── schemas/                               # схемы для валидации правил/политик
        │   ├── prometheus-rule.schema.json
        │   ├── alertmanager-config.schema.json
        │   └── grafana-alert.schema.json
        ├── prometheus/
        │   ├── lib/                               # переиспользуемые выражения, макросы (recording rule-библиотека)
        │   │   ├── latency.lib.yaml               # hist_quantile, агрегации по SLA/SLO
        │   │   ├── error_rate.lib.yaml
        │   │   └── resources.lib.yaml             # CPU/memory/disk/net хелперы
        │   ├── recording_rules/                   # записи для производных метрик (SLO, burn-rate)
        │   │   ├── base.yaml
        │   │   ├── slo/
        │   │   │   ├── http_availability.yaml
        │   │   │   └── grpc_availability.yaml
        │   │   └── infra/
        │   │       ├── k8s_capacity.yaml
        │   │       └── node_health.yaml
        │   ├── rules/                             # собственно алерты (grouped)
        │   │   ├── base/
        │   │   │   ├── availability.yaml          # Generic: InstanceDown, TargetDown, ScrapeErrors
        │   │   │   ├── performance.yaml           # HighLatency, HighErrorRate, Saturation
        │   │   │   └── reliability.yaml           # ConfigReloadFail, RuleEvaluationSlow
        │   │   ├── infra/
        │   │   │   ├── k8s.yaml                   # KubePodCrashLooping, KubeCPUOvercommit
        │   │   │   ├── nodes.yaml                 # NodeNotReady, DiskPressure
        │   │   │   └┬─ storage.yaml               # VolumeFullIn24h, IOThrottle
        │   │   ├── services/
        │   │   │   ├── blackvault/
        │   │   │   │   ├── api.yaml               # 5xx rate, p95 latency, auth failures
        │   │   │   │   ├── crypto.yaml            # HSM/KMS failures, key-rotation lag
        │   │   │   │   └── db.yaml                # connection spikes, tx aborts, replica lag
        │   │   │   └── chronowatch/
        │   │   │       ├── grpc.yaml              # grpc_server_handled_total error ratio
        │   │   │       └── scheduler.yaml         # job delay, backlog
        │   │   └── security/
        │   │       ├── auth.yaml                  # login anomalies, JWT verify failures
        │   │       └── network.yaml               # rate-limit bans, abnormal traffic
        │   ├── env/                               # оверлеи по окружениям
        │   │   ├── dev/
        │   │   │   ├── kustomization.yaml
        │   │   │   └── patches.yaml               # ослабленные severity/thresholds
        │   │   ├── staging/
        │   │   │   └── kustomization.yaml
        │   │   └── prod/
        │   │       └── kustomization.yaml
        │   ├── tenants/                           # мультиарендность (пер-tenant overrides)
        │   │   ├── default/
        │   │   │   └── overrides.yaml
        │   │   └── tenant-a/
        │   │       └── overrides.yaml
        │   └── tests/
        │       ├── promtool.yml                   # unit-тесты правил
        │       ├── alertlint.yml                  # правила линтинга алертов
        │       ├── cases/
        │       │   ├── latency_high.input.prom
        │       │   └── latency_high.yaml          # ожидаемые срабатывания/затухания
        │       └── ci.sh                          # скрипт для CI: promtool check rules, unit test
        ├── alertmanager/
        │   ├── config/
        │   │   ├── alertmanager.yml               # корневой маршрут, inhibit rules, mute intervals
        │   │   ├── routes/
        │   │   │   ├── base.yml
        │   │   │   ├── security.yml
        │   │   │   └── services.yml
        │   │   ├── receivers/
        │   │   │   ├── pagerduty.yml
        │   │   │   ├── opsgenie.yml
        │   │   │   ├── slack.yml
        │   │   │   └── email.yml
        │   │   ├── inhibition.yml                 # примеры ингибиций: severity по зависимостям
        │   │   ├── mute_time_intervals.yml        # расписания тишины (planned maintenance)
        │   │   └── templates/
        │   │       ├── default.tmpl               # общий шаблон уведомлений
        │   │       └── security.tmpl
        │   ├── secrets/.gitignore                 # токены/ключи не коммитить
        │   └── tests/
        │       ├── amtool.sh                      # amtool check-config
        │       └── cases/
        │           └── route_selection.yaml
        ├── grafana/
        │   ├── alerting/                          # Grafana Alerting (если используется совместно)
        │   │   ├── contact_points.json
        │   │   ├── notification_policies.json
        │   │   └── rules/
        │   │       ├── base.json
        │   │       └── services/
        │   │           ├── blackvault.json
        │   │           └── chronowatch.json
        │   └── tests/
        │       └── schema-validate.sh
        ├── slo/                                   # цели SLO и алерты по burn-rate
        │   ├── objectives/
        │   │   ├── blackvault.yaml                # SLO: availability 99.9, latency p95 300ms
        │   │   └── chronowatch.yaml
        │   ├── error_budget_policies.yaml         # окна 30д/7д/1д, budget steps
        │   └── burn_alerts/
        │       ├── fast_burn.yaml                 # 2h window
        │       └── slow_burn.yaml                 # 24h window
        ├── env/                                   # сквозные оверлеи для всех стэков (AM/Prom/Graf)
        │   ├── dev/
        │   │   └── kustomization.yaml
        │   ├── staging/
        │   │   └── kustomization.yaml
        │   └── prod/
        │       └── kustomization.yaml
        ├── compliance/
        │   ├── audit.md                           # как аудитировать изменения правил
        │   └── approvals.md                       # матрица утверждений (RACI)
        └── ci/
            ├── github-actions.yml                 # lint+test+schema-validate на PR
            ├── gitlab-ci.yml
            └── pre-commit-config.yaml             # promtool/alertlint/jsonschema hooks

│   + ├── configs/
core-systems/
└── observability/
    └── configs/
        ├── README.md
        ├── OWNERS
        ├── versions.lock
        ├── schema/
        │   ├── README.md
        │   ├── openslo.schema.json
        │   ├── sloth.schema.json
        │   ├── prometheus-rules.schema.json
        │   └── alertmanager.schema.json
        ├── k8s/
        │   ├── base/
        │   │   ├── kustomization.yaml
        │   │   ├── namespaces.yaml
        │   │   ├── rbac/
        │   │   │   ├── grafana-rbac.yaml
        │   │   │   ├── prometheus-rbac.yaml
        │   │   │   ├── loki-rbac.yaml
        │   │   │   ├── tempo-rbac.yaml
        │   │   │   └── otel-collector-rbac.yaml
        │   │   ├── security/
        │   │   │   ├── network-policies.yaml
        │   │   │   ├── pod-security-standards.yaml
        │   │   │   └── opa-policies/
        │   │   │       └── log-redaction.rego
        │   │   ├── grafana/
        │   │   │   ├── deployment.yaml
        │   │   │   ├── service.yaml
        │   │   │   ├── provisioning/
        │   │   │   │   ├── datasources.yaml
        │   │   │   │   └── dashboards.yaml
        │   │   │   └── configmaps/
        │   │   │       └── grafana.ini
        │   │   ├── prometheus/
        │   │   │   ├── prometheus-config.yaml
        │   │   │   ├── rules/
        │   │   │   │   ├── general.rules.yml
        │   │   │   │   ├── k8s.rules.yml
        │   │   │   │   ├── slo.rules.yml
        │   │   │   │   └── recording.rules.yml
        │   │   │   └── alertmanager/
        │   │   │       ├── alertmanager.yaml
        │   │   │       └── templates/
        │   │   │           ├── default.tmpl
        │   │   │           └── inhibit_rules.yml
        │   │   ├── loki/
        │   │   │   ├── loki-config.yaml
        │   │   │   ├── ruler/
        │   │   │   │   └── loki-alerts.yml
        │   │   │   └── retention/
        │   │   │       └── loki-retention.yaml
        │   │   ├── tempo/
        │   │   │   ├── tempo-config.yaml
        │   │   │   └── retention/
        │   │   │       └── tempo-retention.yaml
        │   │   ├── mimir/               # или cortex/thanos — по выбранной архитектуре
        │   │   │   ├── mimir-config.yaml
        │   │   │   └── storage.yaml
        │   │   ├── exporters/
        │   │   │   ├── node-exporter.yaml
        │   │   │   ├── kube-state-metrics.yaml
        │   │   │   └── blackbox-exporter.yaml
        │   │   ├── otel/
        │   │   │   ├── collector-gateway.yaml
        │   │   │   ├── collector-agent.yaml
        │   │   │   └── configs/
        │   │   │       ├── pipelines/
        │   │   │       │   ├── metrics.yaml
        │   │   │       │   ├── traces.yaml
        │   │   │       │   └── logs.yaml
        │   │   │       ├── receivers/
        │   │   │       │   ├── otlp.yaml
        │   │   │       │   ├── jaeger.yaml
        │   │   │       │   └── prometheus.yaml
        │   │   │       ├── processors/
        │   │   │       │   ├── batch.yaml
        │   │   │       │   ├── resource.yaml
        │   │   │       │   ├── k8sattributes.yaml
        │   │   │       │   └── attributes-redaction.yaml
        │   │   │       └── exporters/
        │   │   │           ├── prometheusremotewrite.yaml
        │   │   │           ├── otlphttp.yaml
        │   │   │           ├── loki.yaml
        │   │   │           └── tempo.yaml
        │   │   └── gateways/
        │   │       └── ingress.yaml
        │   └── overlays/
        │       ├── dev/
        │       │   ├── kustomization.yaml
        │       │   ├── resources-patches.yaml
        │       │   ├── alertmanager-dev.yaml
        │       │   ├── grafana-dev-datasources.yaml
        │       │   ├── otel-collector-dev.yaml
        │       │   └── storage-dev.yaml
        │       ├── staging/
        │       │   ├── kustomization.yaml
        │       │   ├── resources-patches.yaml
        │       │   ├── alertmanager-staging.yaml
        │       │   ├── grafana-staging-datasources.yaml
        │       │   ├── otel-collector-staging.yaml
        │       │   └── storage-staging.yaml
        │       └── prod/
        │           ├── kustomization.yaml
        │           ├── resources-hpa.yaml
        │           ├── network-policies-strict.yaml
        │           ├── alertmanager-prod.yaml
        │           ├── grafana-prod-datasources.yaml
        │           ├── otel-collector-prod.yaml
        │           ├── storage-prod.yaml
        │           └── tls-secrets.yaml
        ├── dashboards/
        │   ├── README.md
        │   ├── grafana/
        │   │   ├── k8s-cluster-overview.json
        │   │   ├── services-overview.json
        │   │   ├── api-latency-apdex.json
        │   │   ├── logs-loki-operational.json
        │   │   ├── traces-tempo-svc.json
        │   │   ├── business-sli.json
        │   │   └── alerts-operations.json
        │   └── provisioning/
        │       └── dashboard-provisioning.yaml
        ├── alerting/
        │   ├── README.md
        │   ├── prometheus/
        │   │   ├── routes.yaml
        │   │   ├── receivers.yaml
        │   │   ├── inhibit_rules.yaml
        │   │   └── pagerduty-slack-email.example.secrets.yaml
        │   └── loki/
        │       └── loki-ruler-alerts.yml
        ├── recording/
        │   ├── general.recording.yml
        │   ├── k8s.recording.yml
        │   └── http_sli.recording.yml
        ├── slo/
        │   ├── openslo/
        │   │   ├── api-latency-slo.yaml
        │   │   ├── api-availability-slo.yaml
        │   │   └── ingestion-errorbudget-slo.yaml
        │   └── sloth/
        │       ├── sloth-manifest.yaml
        │       └── sloth-backends.yaml
        ├── exporters/
        │   ├── blackbox/
        │   │   ├── blackbox.yml
        │   │   └── targets/
        │   │       ├── http_targets.yaml
        │   │       └── icmp_targets.yaml
        │   └── custom/
        │       └── README.md
        ├── storage/
        │   ├── s3/
        │   │   ├── loki-bucket-policy.json
        │   │   ├── tempo-bucket-policy.json
        │   │   ├── mimir-bucket-policy.json
        │   │   └── values-storage.yaml
        │   └── gcs/
        │       ├── bucket-policies.md
        │       └── values-storage.yaml
        ├── retention/
        │   ├── metrics-retention.yaml
        │   ├── logs-retention.yaml
        │   └── traces-retention.yaml
        ├── security/
        │   ├── tls/
        │   │   ├── README.md
        │   │   ├── grafana-tls.secret.example.yaml
        │   │   ├── prom-tls.secret.example.yaml
        │   │   └── otel-gateway-tls.secret.example.yaml
        │   ├── pii-redaction/
        │   │   ├── loki-pipeline-redaction.yaml
        │   │   └── otel-attributes-redaction.yaml
        │   └── tenants/
        │       ├── default/
        │       │   ├── grafana-datasources.yaml
        │       │   └── dashboards/
        │       │       └── README.md
        │       └── platform/
        │           ├── grafana-datasources.yaml
        │           └── dashboards/
        ├── ci/
        │   ├── promtool-check.sh
        │   ├── loki-rulecheck.sh
        │   ├── tempo-validate.sh
        │   ├── validate-openslo.py
        │   ├── lint-dashboards.py
        │   └── kubeconform.sh
        └── examples/
            ├── dev-minimal-overlay.md
            └── otel-collector-pipeline-examples.md

│   + └── tests/
core-systems/
└── observability/
    └── tests/
        ├── README.md                     # как запускать тесты, матрица покрытий, pre-commit, реплеи
        ├── conftest.py                   # общие фикстуры pytest (OTLP mock, временные каталоги, seed)
        ├── pytest.ini                    # маркеры: unit, contract, integration, e2e, perf, chaos, security, smoke
        ├── requirements-test.txt         # зависимости тестов (pytest, requests и т.д.)
        ├── assets/                       # фиксированные тестовые артефакты
        │   ├── logs/
        │   │   ├── nginx_sample.log
        │   │   └── pii_samples.log
        │   ├── metrics/
        │   │   ├── prometheus_exposition.txt
        │   │   └── alert_rules/
        │   │       └── prometheus/
        │   │           ├── alerts.rules.yaml      # копия правил для тестирования
        │   │           └── tests/
        │   │               ├── test_mttd_mttr.yaml
        │   │               └── test_error_budget.yaml
        │   ├── traces/
        │   │   └── otlp_spans.json
        │   └── dashboards/
        │       └── grafana/
        │           ├── dashboards.json
        │           └── datasources.json
        │
        ├── unit/                         # модульные тесты без сетевых зависимостей
        │   ├── metrics/
        │   │   ├── test_exporter_prometheus.py
        │   │   └── test_histogram_buckets.py
        │   ├── logs/
        │   │   ├── test_json_format.py
        │   │   └── test_pii_redaction.py
        │   ├── traces/
        │   │   ├── test_tracer_init.py
        │   │   └── test_resource_attributes.py
        │   ├── profiling/
        │   │   └── test_pprof_endpoints.py
        │   └── config/
        │       └── test_config_loader.py
        │
        ├── contract/                     # контрактные тесты схем и семантики
        │   ├── otel_semconv/
        │   │   ├── test_metric_semconv.py        # имена, юниты, label cardinality
        │   │   └── test_trace_semconv.py
        │   └── api/
        │       └── openapi/
        │           └── test_openapi_schema.py
        │
        ├── integration/                  # интеграционные тесты с реальными сервисами или их mock
        │   ├── collectors/
        │   │   └── test_otelcol_pipeline.py      # прием OTLP, маршрутизация, экспорт
        │   ├── backends/
        │   │   ├── test_prometheus_scrape.py
        │   │   ├── test_jaeger_ingest.py
        │   │   ├── test_loki_push_api.py
        │   │   └── test_tempo_ingest.py
        │   ├── exporters/
        │   │   ├── test_otlp_grpc_export.py
        │   │   └── test_otlp_http_export.py
        │   ├── agents/
        │   │   └── test_node_agent_heartbeat.py
        │   └── dashboards/
        │       └── test_grafana_alerts_api.py
        │
        ├── e2e/                          # сквозные тесты с приемкой SLO и алертов
        │   └── scenarios/
        │       ├── test_slo_breach_to_alert_flow.py
        │       ├── test_trace_log_correlation.py
        │       ├── test_log_metric_ratio_monitor.py
        │       └── test_blackbox_http_probe.py
        │
        ├── replay/                       # регрессионные реплеи сигналов
        │   ├── datasets/
        │   │   ├── trace_replay.json
        │   │   └── loadgen_profiles.yaml
        │   └── test_replay_regression.py
        │
        ├── golden/                       # эталонные слепки для регрессии
        │   ├── baselines/
        │   │   ├── metrics_golden.json
        │   │   ├── logs_golden.jsonl
        │   │   └── traces_golden.json
        │   └── test_golden_outputs.py
        │
        ├── performance/                  # производительность и бюджеты
        │   ├── k6/
        │   │   └── test_metrics_throughput.js
        │   ├── locust/
        │   │   └── locustfile.py
        │   └── test_perf_budget.py
        │
        ├── chaos/                        # устойчивость при сбоях
        │   └── scenarios/
        │       ├── test_collector_drop_spans.py
        │       └── test_backend_latency_spike.py
        │
        ├── security/                     # безопасность observability-контура
        │   ├── test_log_injection.py
        │   ├── test_pii_leakage_blocking.py
        │   └── test_tls_min_version.py
        │
        ├── compliance/                   # ретеншн, GDPR, аудируемость
        │   ├── test_retention_policies.py
        │   └── test_gdpr_erasure_requests.py
        │
        ├── synthetic/                    # синтетические проверки доступности
        │   └── test_synthetic_probes.py
        │
        ├── dataquality/                  # качество и кардинальность меток
        │   ├── test_metric_cardinality_limits.py
        │   └── test_label_cardinality_blowups.py
        │
        ├── smoke/                        # быстрые базовые проверки
        │   ├── test_smoke_startup.py
        │   └── test_smoke_endpoints.py
        │
        └── tools/                        # вспомогательные утилиты тестов
            ├── rule_tester.py            # локальная проверка правил Prometheus
            ├── grafana_dashboard_validator.py
            └── o11y_lint.py              # линтер имен метрик, единиц измерения и лейблов

│
├── red-vs-blue-engine/
│   ├── agents/
│   ├── environment/
│   + ├── scenarios/          # готовые атаки/оборона
core-systems/
└── red-vs-blue-engine/
    └── scenarios/
        ├── README.md
        ├── __init__.py
        ├── models.py                 # Pydantic-модели сценариев/шагов/метрик
        ├── loader.py                 # Загрузка YAML/JSON, мердж оверлеев, нормализация TZ
        ├── validator.py              # Валидация JSON Schema + дополнительные инварианты
        ├── runner.py                 # Безопасный симулятор (dry-run), генерация отчётов
        ├── safety.py                 # Политики safe_mode, запреты, kill-switch
        ├── metrics.py                # Аггрегация метрик сценариев/шагов
        ├── utils/
        │   ├── timebox.py            # Дедлайны шагов/сценариев
        │   └── io.py                 # Безопасный I/O, логирование
        ├── schema/
        │   ├── scenario.schema.json
        │   ├── ttp.schema.json
        │   └── blueplaybook.schema.json
        ├── library/
        │   ├── adversaries/
        │   │   └── apt_sample.yaml   # Профиль условного противника (только метаданные)
        │   ├── ttp/
        │   │   ├── discovery/
        │   │   │   └── inventory_list.yaml
        │   │   ├── credential_access/
        │   │   │   └── password_policy_audit.yaml
        │   │   ├── lateral_movement/
        │   │   │   └── rdp_login_sim.yaml
        │   │   └── exfiltration/
        │   │       └── staged_data_marking.yaml
        │   └── detections/
        │       ├── queries/
        │       │   └── anomalous_logins_generic.yaml  # обобщённые, нон-эксплойт запросы
        │       └── playbooks/
        │           └── triage_and_contain.yaml
        ├── blue/
        │   ├── playbooks/
        │   │   └── endpoint_isolation.yaml
        │   └── runbooks/
        │       └── initial_triage.yaml
        ├── env/
        │   ├── k8s/
        │   │   ├── profiles/small-lab.yaml
        │   │   └── policies/safemode.rego            # пример OPA-политики “ничего не исполнять”
        │   ├── linux/profile.yaml
        │   ├── windows/profile.yaml
        │   └── cloud/aws.yaml
        ├── policy/
        │   ├── safety_gate.yaml      # централизованные запреты (exec, сетевые egress и т.д.)
        │   └── rbac.yaml             # роли исполнения симуляций
        ├── metrics_spec/
        │   └── scoring.yaml          # методика оценки: MTTA/MTTR/precision/recall
        ├── examples/
        │   ├── phishing_exfiltration.yaml
        │   └── ransomware_lm.yaml
        └── tests/
            └── unit/
                └── test_scenario_validation.py

│   + ├── scoring/            # система очков
scoring/
├── README.md                             # назначение, модели очков, инварианты, SLA/SLO
├── OWNERS                                # ответственные за изменения правил/весов
├── VERSION                               
├── CHANGELOG.md                          
├── docs/
│   ├── scoring-model.md                  # формулы, time-decay, античит, примеры расчёта
│   ├── formulas.md                       # детальные формулы и примеры с разбором
│   ├── api.md                            # обзор API (HTTP/gRPC), коды ошибок
│   └── leaderboard.md                    # правила лидерборда, тай-брейки, окна агрегации
├── schema/                               # JSON/YAML-схемы для строгой валидации
│   ├── scoring.schema.json
│   ├── event.schema.json
│   ├── rule.schema.json
│   ├── leaderboard.schema.json
│   └── penalties.schema.json
├── configs/
│   ├── base/
│   │   ├── scoring.yaml                  # базовые веса категорий и коэффициенты
│   │   ├── thresholds.yaml               # пороги уровней, капы, античит-лимиты
│   │   ├── penalties.yaml                # штрафы: запрещённые действия, дубли, токсичность
│   │   ├── rewards.yaml                  # позитивные бонусы: раннее обнаружение и т.п.
│   │   ├── combo_rules.yaml              # kill-chain/мульти-шаговые комбо-бонусы
│   │   ├── decay.yaml                    # time-decay и half-life на баллы
│   │   ├── severity_map.yaml             # маппинг критичности → множители
│   │   ├── stages.yaml                   # этапы учений и их весовые профили
│   │   └── fairness.yaml                 # выравнивание дисбаланса (команд/ресурсов)
│   ├── modes/
│   │   ├── ctf.yaml                      # профиль режима CTF
│   │   ├── purple.yaml                   # совместные учения red+blue
│   │   ├── tabletop.yaml                 # настольные сценарии
│   │   └── live_ops.yaml                 # живые операции/симуляции
│   └── environments/
│       ├── dev.yaml
│       ├── staging.yaml
│       └── prod.yaml
├── rules/                                # декларативные правила начисления
│   ├── offense/
│   │   ├── recon.yaml
│   │   ├── exploit.yaml
│   │   ├── lateral_movement.yaml
│   │   ├── persistence.yaml
│   │   ├── exfiltration.yaml
│   │   └── stealth.yaml
│   ├── defense/
│   │   ├── detection.yaml                # MTTD-бонусы, достоверность детектов
│   │   ├── triage.yaml
│   │   ├── containment.yaml
│   │   ├── eradication.yaml
│   │   ├── hardening.yaml
│   │   └── recovery.yaml                 # MTTR-бонусы
│   └── shared/
│       ├── compliance.yaml               # SOAR/SIEM/Audit-полнота, процедуры
│       ├── safety.yaml                   # безопасность, no-go полигона
│       ├── integrity.yaml                # цепочка целостности артефактов
│       └── sportsmanship.yaml            # анти-токсичность, fair play
├── calculators/                          # вычислительный слой
│   ├── __init__.py
│   ├── scoring_engine.py                 # оркестратор: parse→validate→score→aggregate
│   ├── offense.py                        # функции очков для красной команды
│   ├── defense.py                        # функции очков для синей команды
│   ├── detect_response.py                # детект/реакция, MTTD/MTTR, confidence
│   ├── risk.py                           # риск-модель, множители по критичности
│   ├── time_decay.py                     # экспоненциальный распад очков
│   ├── combo_bonus.py                    # мульти-шаговые бонусы (kill-chain)
│   ├── penalties.py                      # штрафы и подавление фрода
│   ├── normalizer.py                     # нормализация меж-сценариев/команд
│   ├── aggregator.py                     # окна времени, срезы, rolling-агрегации
│   └── leaderboard.py                    # ранжирование, тай-брейки, экспорт
├── plugins/                              # расширения и мапперы к индустр. стандартам
│   ├── mitre_attack/
│   │   ├── mapper.py                     # ATT&CK TTP → веса/категории
│   │   └── ttp_weights.yaml
│   ├── cvss/
│   │   └── adapter.py                    # маппинг CVSS → множители severity
│   ├── sigma/
│   │   └── adapter.py                    # привязка правил Sigma к детектам
│   ├── osquery/
│   │   └── adapter.py
│   └── zeek/
│       └── adapter.py
├── adapters/                             # приём и нормализация событий
│   ├── ingest_event.py                   # валидация event.schema → internal DTO
│   └── mappings/
│       └── event_map.yaml                # маппинг полей из внешних источников
├── events/
│   └── examples/
│       ├── offense_event.json
│       ├── defense_event.json
│       └── detection_event.json
├── api/
│   ├── http/
│   │   └── openapi.yaml                  # REST API: submit events, query scores
│   └── protobuf/
│       └── scoring.proto                 # gRPC: поток событий/результатов
├── exporters/
│   ├── prometheus_metrics.py             # метрики очков/лидборда
│   └── grafana-dashboards/
│       └── scoreboard.json               # дашборд лидерборда/SLI
├── storage/
│   ├── repository.py                     # интерфейсы репозитория очков
│   └── sqlite/
│       └── migrations.sql                # эталон миграций для локального профиля
├── audit/
│   ├── audit_log_format.json             # формат аудита начислений/штрафов
│   └── retention_policy.yaml             # срок хранения и полис редакции PII
├── security/
│   ├── policy.yaml                       # RBAC на операции подсчёта/правил
│   └── trust_boundaries.md               # границы доверия, потоки данных
├── ci/
│   ├── validate-schemas.sh               # jsonschema/yamllint/kubeconform (если нужно)
│   ├── lint-yaml.sh
│   ├── run-unit-tests.sh
│   └── score-smoke.sh                    # smoke-скрипт на пример данных
├── tests/
│   ├── unit/
│   │   ├── test_scoring_engine.py
│   │   ├── test_offense_calc.py
│   │   ├── test_defense_calc.py
│   │   ├── test_penalties.py
│   │   └── test_time_decay.py
│   ├── integration/
│   │   ├── test_rules_loading.py
│   │   ├── test_plugins_mapping.py
│   │   └── test_leaderboard_aggregation.py
│   └── data/
│       ├── sample_events.jsonl
│       └── expected_scores.json
└── scripts/
    ├── backfill_scores.py                # перерасчёт для ретро-ивентов
    └── recompute_leaderboard.py          # реконструкция лидерборда за окно

│   + ├── tests/
core-systems/
└── red-vs-blue-engine/
    └── tests/
        ├── README.md
        ├── pytest.ini
        ├── conftest.py
        ├── coverage.rc
        ├── noxfile.py
        ├── tox.ini
        ├── configs/
        │   ├── test-settings.yaml
        │   ├── secrets.example.yaml
        │   └── docker-compose.test.yml
        ├── unit/
        │   ├── test_scoring_engine.py
        │   ├── test_offense_rules.py
        │   ├── test_defense_rules.py
        │   ├── test_combo_bonus.py
        │   ├── test_time_decay.py
        │   ├── test_penalties_anticheat.py
        │   ├── test_mitre_mapper.py
        │   ├── test_sigma_adapter.py
        │   ├── test_cvss_adapter.py
        │   ├── test_event_ingest_validation.py
        │   ├── test_normalizer.py
        │   ├── test_leaderboard_logic.py
        │   ├── test_repository_memory.py
        │   ├── test_api_schema_contracts.py
        │   └── __init__.py
        ├── integration/
        │   ├── test_http_api_endpoints.py            # OpenAPI контракт, визуальный smoke
        │   ├── test_grpc_streaming.py                # потоковые события/результаты (protobuf)
        │   ├── test_rules_loading_overrides.py       # base + режимы/оверлеи
        │   ├── test_storage_sqlite_roundtrip.py
        │   ├── test_exporters_prometheus.py
        │   ├── test_grafana_dashboard_json.py
        │   └── __init__.py
        ├── e2e/
        │   ├── test_end_to_end_offense_to_leaderboard.py
        │   ├── test_end_to_end_detection_to_scoring.py
        │   ├── test_mode_profiles_ctf_liveops.py
        │   └── __init__.py
        ├── property/
        │   ├── test_scoring_invariants.py            # монотонность штрафов, границы коэффициентов
        │   ├── test_penalties_are_monotonic.py
        │   ├── test_normalization_idempotency.py
        │   └── __init__.py
        ├── fuzz/
        │   ├── test_fuzz_event_ingest.py             # случайные/вредоносные поля
        │   ├── test_fuzz_rule_parser.py
        │   └── __init__.py
        ├── performance/
        │   ├── test_throughput_scoring_benchmark.py  # pytest-benchmark
        │   ├── test_latency_api_benchmark.py
        │   └── __init__.py
        ├── chaos/
        │   ├── test_scoring_under_partial_failures.py
        │   ├── test_leaderboard_under_clock_skew.py
        │   └── __init__.py
        ├── compliance/
        │   ├── test_audit_log_completeness.py
        │   ├── test_retention_policy.py
        │   ├── test_pii_redaction_in_events.py
        │   └── __init__.py
        ├── security/
        │   ├── test_rbac_enforcement.py
        │   ├── test_signature_verification.py
        │   └── __init__.py
        ├── replay/
        │   ├── test_replay_consistency_from_jsonl.py
        │   ├── test_replay_determinism_seeded.py
        │   └── __init__.py
        ├── bdd/
        │   ├── features/
        │   │   ├── offense_flow.feature
        │   │   ├── defense_detection.feature
        │   │   └── leaderboard_ranking.feature
        │   └── steps/
        │       ├── offense_steps.py
        │       ├── defense_steps.py
        │       └── leaderboard_steps.py
        ├── fixtures/
        │   ├── __init__.py
        │   ├── fake_clock.py
        │   ├── fake_repo.py
        │   ├── event_factory.py
        │   ├── sample_rules.py
        │   ├── sample_configs.py
        │   └── auth_tokens.py
        ├── data/
        │   ├── README.md
        │   ├── sample/
        │   │   ├── events.jsonl
        │   │   ├── red_ttp_sequence.json
        │   │   └── blue_detections.json
        │   ├── golden/
        │   │   ├── expected_scores.json
        │   │   ├── expected_leaderboard.json
        │   │   └── expected_audit_log.jsonl
        │   └── schemas/
        │       ├── event.schema.json
        │       ├── scoring.schema.json
        │       └── leaderboard.schema.json
        ├── tools/
        │   ├── generate_synthetic_events.py
        │   ├── validate_golden.py
        │   ├── mutate_rules_for_neg_tests.py
        │   └── api_client.py
        ├── reports/
        │   ├── .gitkeep
        │   └── README.md
        └── scripts/
            ├── run_tests.sh
            ├── run_e2e.sh
            ├── lint_and_typecheck.sh
            └── coverage_report.sh

│   + └── docs/
│
├── web3-defense-layer/
│   ├── airdrop_manager/
│   ├── build_guard/
│   ├── ci_injection/
│   + ├── contracts/          # смарт-контракты (solidity/rust)
core-systems/
└── web3-defense-layer/
    └── contracts/
        ├── README.md                           # обзор, стандарты кодирования/безопасности, матрица поддерживаемых сетей
        ├── SECURITY.md                         # политика ответственного раскрытия, класс угроз, политика апгрейдов
        ├── CODEOWNERS                          # владельцы доменов (access, tokens, upgrades, bridges и т.д.)
        ├── LICENSE
        ├── .gitignore
        │
        ├── evm/                                # Solidity и экосистема EVM
        │   ├── src/
        │   │   ├── access/
        │   │   │   ├── AccessControlExtended.sol
        │   │   │   ├── GuardianCouncil.sol             # совет защитников, emergency-гейты
        │   │   │   └── MultisigGuard.sol
        │   │   ├── security/
        │   │   │   ├── ReentrancyGuardSafe.sol
        │   │   │   ├── PausableGuard.sol
        │   │   │   ├── CircuitBreaker.sol              # глобальный стоп-кран
        │   │   │   ├── RateLimiter.sol                 # лимиты скорости, окна
        │   │   │   ├── FlashLoanGuard.sol
        │   │   │   ├── OracleGuard.sol                 # проверки TWAP/девации/стэйл
        │   │   │   ├── SlippageProtector.sol
        │   │   │   └── MEVProtector.sol                # анти-MEV механизмы (например, commit-reveal)
        │   │   ├── upgrades/
        │   │   │   ├── UUPS/
        │   │   │   │   ├── UUPSUpgradeableBase.sol
        │   │   │   │   └── ProxyAdminUUPS.sol
        │   │   │   └── Transparent/
        │   │   │       ├── TransparentUpgradeableProxy.sol
        │   │   │       └── ProxyAdmin.sol
        │   │   ├── governance/
        │   │   │   ├── TimelockController.sol
        │   │   │   ├── GovernorModule.sol
        │   │   │   └── VotingEscrow.sol
        │   │   ├── tokens/
        │   │   │   ├── ERC20/
        │   │   │   │   ├── ERC20Safe.sol
        │   │   │   │   ├── ERC20Permit.sol             # EIP-2612
        │   │   │   │   ├── ERC20WithSanctions.sol      # allow/deny-lists
        │   │   │   │   └── ERC20Hooks.sol              # хуки/гварды трансферов
        │   │   │   ├── ERC721/
        │   │   │   │   ├── ERC721Safe.sol
        │   │   │   │   └── ERC721Soulbound.sol
        │   │   │   ├── ERC1155/
        │   │   │   │   └── ERC1155Safe.sol
        │   │   │   ├── ERC4626/
        │   │   │   │   └── Vault4626Guarded.sol
        │   │   │   └── ERC4337/
        │   │   │       ├── AccountAbstractionWallet.sol
        │   │   │       └── PaymasterGuard.sol
        │   │   ├── defi/
        │   │   │   ├── SafeRouter.sol                  # безопасные вызовы внешних протоколов
        │   │   │   ├── TWAPOracle.sol
        │   │   │   ├── PriceOracleAdapter_Chainlink.sol
        │   │   │   ├── SafeVault.sol                   # защищенные хранилища активов
        │   │   │   ├── LendingRateLimiter.sol
        │   │   │   └── LiquidationGuardian.sol
        │   │   ├── bridges/
        │   │   │   ├── BridgeGuard.sol                 # гварды мостов, лимиты сумм/частоты
        │   │   │   └── LightClientVerifier.sol         # верификаторы заголовков/доказательств
        │   │   ├── attestations/
        │   │   │   ├── EIP712Verifier.sol
        │   │   │   └── MerkleDistributor.sol
        │   │   ├── zk/
        │   │   │   ├── VerifierGroth16.sol
        │   │   │   └── VerifierPlonk.sol
        │   │   ├── interfaces/
        │   │   │   ├── IAccessControlExtended.sol
        │   │   │   ├── IGuardianCouncil.sol
        │   │   │   ├── IRateLimiter.sol
        │   │   │   └── IOracle.sol
        │   │   ├── libraries/
        │   │   │   ├── SafeCastExt.sol
        │   │   │   ├── SafeTransferLibExt.sol
        │   │   │   ├── FixedPointMathLibExt.sol
        │   │   │   └── AddressBlackWhitelist.sol
        │   │   ├── abstracts/
        │   │   │   ├── GuardedUpgradeable.sol          # базовый класс с гейтами/паузы/ролями
        │   │   │   └── RescueFunds.sol                 # безопасный rescue токенов
        │   │   └── examples/
        │   │       └── ExampleGuardedToken.sol
        │   │
        │   ├── mocks/
        │   │   ├── MockERC20.sol
        │   │   ├── MockOracle.sol
        │   │   └── MockProxy.sol
        │   │
        │   ├── test/
        │   │   ├── foundry/
        │   │   │   ├── Unit/
        │   │   │   │   ├── Access.t.sol
        │   │   │   │   ├── Token.t.sol
        │   │   │   │   └── RateLimiter.t.sol
        │   │   │   ├── Invariants/
        │   │   │   │   └── VaultInvariants.t.sol
        │   │   │   ├── Fuzz/
        │   │   │   │   └── OracleGuardFuzz.t.sol
        │   │   │   └── Integration/
        │   │   │       └── Router_Integration.t.sol
        │   │   └── hardhat/
        │   │       ├── token.spec.ts
        │   │       ├── governance.spec.ts
        │   │       └── upgrades.spec.ts
        │   │
        │   ├── scripts/
        │   │   ├── deploy/
        │   │   │   ├── 001_deploy_vault.s.sol
        │   │   │   ├── 002_set_rate_limits.s.sol
        │   │   │   └── 003_upgrade_proxy.s.sol
        │   │   ├── manage/
        │   │   │   ├── pause_contract.s.sol
        │   │   │   ├── rotate_guardians.s.sol
        │   │   │   └── revoke_suspect_keys.ts
        │   │   └── verify/
        │   │       └── etherscan_verify.ts
        │   │
        │   ├── deployments/
        │   │   ├── mainnet/
        │   │   │   └── addresses.json
        │   │   ├── testnet/
        │   │   │   └── addresses.json
        │   │   └── local/
        │   │       └── addresses.json
        │   │
        │   ├── specs/                              # формальная верификация и статанализ
        │   │   ├── scribble/
        │   │   │   ├── invariants/
        │   │   │   │   └── vault.spec
        │   │   │   └── properties/
        │   │   │       └── access.spec
        │   │   ├── echidna/
        │   │   │   └── echidna.yaml
        │   │   ├── slither/
        │   │   │   └── slither.config.json
        │   │   ├── mythril/
        │   │   │   └── mythril.config.json
        │   │   └── certora/
        │   │       ├── rules.spec
        │   │       └── config.json
        │   │
        │   ├── audit/
        │   │   ├── checklists/
        │   │   │   ├── evm_security.md
        │   │   │   ├── upgradeability.md
        │   │   │   └── bridges_oracles.md
        │   │   ├── reports/
        │   │   │   └── .gitkeep
        │   │   └── findings/
        │   │       └── .gitkeep
        │   │
        │   ├── tools/
        │   │   ├── foundry.toml
        │   │   ├── remappings.txt
        │   │   ├── .solhint.json
        │   │   ├── .prettier.solidity.json
        │   │   ├── .gas-snapshot
        │   │   └── coverage/
        │   │       └── .gitkeep
        │   │
        │   └── README.md
        │
        ├── non-evm/
        │   ├── solana/                          # Rust + Anchor
        │   │   ├── programs/
        │   │   │   └── web3_defense_guard/
        │   │   │       ├── Cargo.toml
        │   │   │       └── src/
        │   │   │           ├── lib.rs
        │   │   │           ├── access.rs                # роли/гвардии
        │   │   │           ├── pause.rs                 # остановка программ
        │   │   │           ├── rate_limit.rs
        │   │   │           ├── multisig.rs
        │   │   │           └── oracle_guard.rs
        │   │   ├── tests/
        │   │   │   └── integration.spec.ts
        │   │   └── Anchor.toml
        │   │
        │   ├── near/                            # Rust (near-sdk)
        │   │   ├── contracts/
        │   │   │   └── guard/
        │   │   │       ├── Cargo.toml
        │   │   │       └── src/
        │   │   │           ├── lib.rs
        │   │   │           ├── access.rs
        │   │   │           └── pause.rs
        │   │   └── tests/
        │   │       └── guard.spec.ts
        │   │
        │   └── substrate/                       # Pallet для Polkadot/Substrate
        │       ├── pallets/
        │       │   └── web3_defense/
        │       │       ├── Cargo.toml
        │       │       └── src/
        │       │           ├── lib.rs
        │       │           ├── weights.rs
        │       │           └── benchmarking.rs
        │       └── tests/
        │           └── pallet_tests.rs
        │
        ├── ci/                                  # конфиги CI для сборки, линта, тестов, отчётов
        │   ├── github-actions.yaml
        │   └── gitlab-ci.yml
        │
        ├── docs/
        │   ├── architecture.md
        │   ├── threat_model.md                  # STRIDE/attack-trees для модулей
        │   ├── adr/
        │   │   └── ADR-0001-Upgradeability-Model.md
        │   └── runbooks/
        │       └── emergency_pause.md
        │
        └── templates/
            ├── DeploymentPlan.md
            ├── ChangeManagement.md
            └── ReleaseChecklist.md

│   + ├── relayer/            # сервис ретрансляции
relayer/
  README.md                                # обзор, потоки данных, инварианты безопасности
  OWNERS                                   
  VERSION                                   
  CHANGELOG.md                              
  LICENSE                                   
  Makefile                                  
  pyproject.toml                            # если Python; при Go/Rust — заменить на go.mod/Cargo.toml
  .editorconfig
  .gitignore

  docs/
    architecture.md                         # слои: API → policy → simulation → routing → signing → submit
    threat-model.md                         # STRIDE, DFD, атаки на ключи/MEV/фишинг/RPC
    dataflow-dfd.png
    runbook.md                              # стандартные операции, SLA/SLO, ручные процедуры
    api-usage.md                            # примеры запросов, лимиты, коды ошибок
    incident-response.md                    # playbooks (reorg, key-compromise, RPC-outage)
    limits-and-quotas.md
    schemas.md

  configs/
    base/
      relayer.yaml                          # основной конфиг: порты, фичи, маршрутизация, таймауты
      policies.yaml                         # включение правил: списки, пороги риска, решения
      risk.yaml                             # веса, источники TI, калькуляторы риска
      rpc.yaml                              # агрегатор провайдеров и приоритеты
      signing.yaml                          # провайдеры подписи: HSM/MPC/hot
      queues.yaml                           # Kafka/NATS топики
      storage.yaml                          # БД, кэш, ретеншн
      observability.yaml                    # otel, метрики, логи, трейсинг
      limits.yaml                           # rate-limits/quotas/anti-abuse
      mev.yaml                              # анти-MEV: приватные каналы, задержки, шедулинг
      simulation.yaml                       # параметры симуляции/эмуляции
    environments/
      dev.yaml
      staging.yaml
      prod.yaml
    modes/
      strict.yaml                           # максимальная защита, консервативные пороги
      balanced.yaml
      permissive.yaml
    secrets.example.yaml                    # шаблон секретов (без значений)

  src/
    relayer/
      __init__.py
      app.py                                # точка входа сервиса
      settings.py                           # загрузка и валидация конфигов
      bootstrap.py                          # wiring: DI контейнер, запуск воркеров

      api/
        http/
          router.py                         # FastAPI/аналог: endpoints /preflight /submit /status
          middlewares.py                    # аутентификация, rate-limit, корреляция запросов
          validators.py                     # схемы входа/выхода
          openapi.yaml                      # контракт REST
        grpc/
          server.py
          interceptors.py
          protos/
            relayer.proto                   # сервисы: Preflight, Submit, Health

      core/
        pipeline.py                        # оркестратор: нормализация → политика → симуляция → подписание
        normalizer.py                      # приведение транзакций к внутренней форме (EVM/TON/…)
        policy_engine.py                   # решения: allow/deny/rewrite; обоснование решения
        risk_engine.py                     # агрегатор риска (санкции, фишинг, поведенческие сигналы)
        simulator/
          evm_simulator.py                 # eth_call/debug_trace эмуляция, оценка газ/эффектов
          ton_simulator.py                 # аналог для TON (estimate, dry-run)
          sandbox_state.py                 # снапшоты состояния для предиктивной симуляции
        mev/
          guard.py                         # стратегии приватной отправки, random-delay, batching
          private_channels.py              # интеграции: Flashbots/MEV-share/аналоги
        router/
          rpc_router.py                    # выбор провайдера RPC по здоровью/цене/латентности
          submitter.py                     # отправка/ретраи/идемпотентность/обход отказов
        signing/
          dispatcher.py                    # выбор способа подписи (HSM/MPC/hot), политика доступа
          mpc_signer.py
          hsm_client.py                    # PKCS#11/KMIP клиенты
          hot_wallet.py                    # ограниченный горячий кошелек (для dev/test)
          nonce_manager.py                 # стратегия нонсов и защита от повторов
        limits/
          rate_limit.py                    # токены-бакеты, клиентские квоты
          quotas.py
          anti_abuse.py                    # эвристики против спама/дубликатов/флуда
        compliance/
          sanctions_screen.py              # OFAC/санкции, адрес-скрининг
          jurisdiction_policies.py         # правила регионов/сетей
        allowlists/
          allowlist.py                     # политика разрешенных адресов/контрактов/меток
          blocklist.py                     # блокирование адресов/байткода/доменно-адресных связок
        analytics/
          detectors/
            phishing.py                    # эвристики фишинга: домены/ENS/подмены
            anomaly.py                     # поведенческие аномалии клиента/сессии
          scorers.py
          features.py
        observability/
          logging.py
          metrics.py                       # экспортер метрик: прометеус/otel
          tracing.py
          audit.py                         # журнал решений политики/подписи/отправки

      adapters/
        rpc/
          evm/
            provider_http.py               # HTTP/WS провайдеры, мультиплексор
            provider_ws.py
          ton/
            provider_http.py
          healthcheck.py                   # активное зондирование и рейтинг провайдеров
        mempool/
          subscriptions.py                 # подписки на мемпул/слоты, если требуется
        threats/
          intel_feeds.py                   # загрузка TI (фиды адресов/доменов/паттернов)
        storage/
          repository.py                    # интерфейсы БД
          migrations/
            0001_init.sql
            0002_add_audit_indexes.sql
          models.py
        cache/
          redis.py
        queues/
          kafka.py
          nats.py
          topics.py                        # перечень топиков: tx.preflight, tx.submitted, alerts
        resolvers/
          ens.py
          ton_dns.py

  policies/
    rules/
      evm.yaml                             # декларативные правила (байткод/метки/селекторы функций)
      ton.yaml
      common.yaml
    lists/
      allow_addresses.txt
      block_addresses.txt
      risky_domains.txt
    transforms/
      rewrites.yaml                        # безопасные переписывания параметров (например, gas caps)

  data/
    samples/
      tx_evm_sample.json
      tx_ton_sample.json
      batch_submit.jsonl
    threat_intel/
      feed_example.csv
    schemas/
      tx.schema.json
      decision.schema.json
      risk_report.schema.json
      audit.schema.json

  deployment/
    docker/
      Dockerfile
      docker-compose.yml
    k8s/
      base/
        kustomization.yaml
        deployment.yaml
        service.yaml
        hpa.yaml
        pdb.yaml
        rbac.yaml
        network-policies.yaml
        configmap.yaml
        secret.example.yaml
      overlays/
        dev/
          kustomization.yaml
          limits-dev.yaml
        staging/
          kustomization.yaml
          limits-staging.yaml
        prod/
          kustomization.yaml
          limits-prod.yaml
          seccomp-apparmor.yaml
    helm/
      Chart.yaml
      values.yaml
      templates/
        deployment.yaml
        service.yaml
        hpa.yaml
        pdb.yaml
        rbac.yaml
        configmap.yaml
        secret.yaml
        networkpolicy.yaml

  security/
    tls/
      relayer-tls.secret.example.yaml
    rbac/
      policy.yaml
    apparmor/
      relayer-apparmor.yaml
    seccomp/
      relayer-seccomp.json
    supply-chain/
      cosign-policy.yaml
      sbom/                                 # SBOM артефакты

  tests/
    pytest.ini
    conftest.py
    unit/
      test_policy_engine.py
      test_risk_engine.py
      test_mev_guard.py
      test_rpc_router.py
      test_signing_dispatcher.py
      test_rate_limit.py
      test_compliance_sanctions.py
      test_allow_block_lists.py
      test_simulator_evm.py
      test_simulator_ton.py
    integration/
      test_http_api_contract.py
      test_grpc_streaming.py
      test_submit_retry_idempotency.py
      test_rpc_failover.py
      test_hsm_mpc_switch.py
      test_audit_log_integrity.py
    e2e/
      test_e2e_preflight_to_submit_evm.py
      test_e2e_preflight_to_submit_ton.py
      test_e2e_privacy_route_mev_protected.py
    performance/
      test_throughput_submit.py
      test_latency_preflight.py
    fuzz/
      test_fuzz_tx_normalizer.py
      test_fuzz_policy_parsing.py
    security/
      test_signature_verification.py
      test_tls_and_rbac.py
      test_anti_abuse_evictions.py
    compliance/
      test_sanctions_feeds_applied.py
      test_policies_jurisdiction_blocks.py
    data/
      sample_requests.jsonl
      golden_decisions.jsonl

  scripts/
    run_dev.sh
    run_migrations.sh
    load_threat_feeds.py
    gen_openapi.sh
    gen_protos.sh
    lint_and_typecheck.sh
    smoke.sh

  ci/
    github/
      workflows/
        relayer-ci.yml                      # lint, type, unit/integration, sbom, cosign verify
        relayer-release.yml                 # build+sign+publish
    checks/
      validate-configs.py                  # проверка схем и целостности конфигов
      prom-rulecheck.sh
      kubeconform.sh

│   + ├── zk_proofs/          # ZK-схемы для проверок
core-systems/
└── web3-defense-layer/
    └── zk_proofs/
        ├── README.md                          # обзор ZK-стека, поддерживаемые схемы, потоки CI/CD
        ├── SECURITY.md                        # политика раскрытия, матрица угроз (сайд-каналы, токсичные входы)
        ├── CODEOWNERS                         # владельцы подсистем (circuits, params, verifiers, services)
        ├── .gitignore
        │
        ├── specs/                             # спецификации нулезнанийных утверждений и интерфейсов
        │   ├── statements/
        │   │   ├── identity_nullifier.md      # приватная идентичность → нуллификатор
        │   │   ├── commit_reveal_guard.md     # анти-MEV commit–reveal
        │   │   ├── rate_limit_proof.md        # лимит частоты без раскрытия
        │   │   ├── proof_of_reserves.md       # PoR (высокоуровнево)
        │   │   └── proof_of_liabilities.md    # PoL (высокоуровнево)
        │   ├── circuits_requirements.md       # целевые кривые, поля, безопасность, газ-бюджеты
        │   ├── interfaces.md                  # форматы witness/proof/vkey, ABI ончейн-верификаторов
        │   └── soundness_completeness.md      # допущения безопасности, границы применения
        │
        ├── params/                            # управление параметрами и ключами
        │   ├── srs/
        │   │   ├── bn254/
        │   │   │   ├── powers_of_tau/
        │   │   │   │   ├── checksums.sha256
        │   │   │   │   └── .gitkeep            # артефакты ptau/SRS хранятся в артефакт-репозитории
        │   │   │   └── srs_manifest.yaml
        │   │   └── bls12_381/
        │   │       ├── powers_of_tau/
        │   │       │   ├── checksums.sha256
        │   │       │   └── .gitkeep
        │   │       └── srs_manifest.yaml
        │   ├── vk/                             # verifying keys
        │   │   ├── groth16/
        │   │   │   └── identity_nullifier.vk.json
        │   │   ├── plonk/
        │   │   │   └── rate_limit.vk.json
        │   │   └── halo2/
        │   │       └── commit_reveal.vk.json
        │   ├── pk/                             # proving keys
        │   │   ├── groth16/
        │   │   │   └── identity_nullifier.pk.bin
        │   │   └── halo2/
        │   │       └── commit_reveal.pk.bin
        │   └── checksums.sha256
        │
        ├── frameworks/                        # реализации схем в разных фреймворках
        │   ├── circom/
        │   │   ├── circuits/
        │   │   │   ├── gadgets/
        │   │   │   │   ├── poseidon.circom
        │   │   │   │   ├── merkle.circom
        │   │   │   │   ├── range.circom
        │   │   │   │   └── eddsa.circom
        │   │   │   ├── use_cases/
        │   │   │   │   ├── identity_nullifier.circom
        │   │   │   │   ├── commit_reveal_guard.circom
        │   │   │   │   └── rate_limit_window.circom
        │   │   │   └── templates/
        │   │   │       └── circuit_skeleton.circom
        │   │   ├── inputs/
        │   │   │   ├── schemas/
        │   │   │   │   ├── identity_nullifier.json
        │   │   │   │   └── rate_limit.json
        │   │   │   └── examples/
        │   │   │       ├── identity_nullifier.input.json
        │   │   │       └── commit_reveal.input.json
        │   │   ├── build/
        │   │   │   ├── scripts/
        │   │   │   │   ├── compile.sh
        │   │   │   │   ├── setup_ptau.sh
        │   │   │   │   ├── gen_witness.sh
        │   │   │   │   ├── prove.sh
        │   │   │   │   └── verify.sh
        │   │   │   └── artifacts/
        │   │   │       └── .gitkeep
        │   │   ├── tests/
        │   │   │   ├── unit/gadgets.test.ts
        │   │   │   └── e2e/identity_nullifier.e2e.ts
        │   │   └── package.json
        │   │
        │   ├── noir/
        │   │   ├── projects/
        │   │   │   ├── identity_nullifier/
        │   │   │   │   ├── Nargo.toml
        │   │   │   │   └── src/main.nr
        │   │   │   └── rate_limiter/
        │   │   │       ├── Nargo.toml
        │   │   │       └── src/main.nr
        │   │   ├── scripts/
        │   │   │   ├── nargo_build.sh
        │   │   │   └── nargo_prove.sh
        │   │   └── tests/identity_nullifier.test.ts
        │   │
        │   ├── halo2/
        │   │   ├── crates/
        │   │   │   └── halo2-circuits/
        │   │   │       ├── Cargo.toml
        │   │   │       └── src/
        │   │   │           ├── lib.rs
        │   │   │           ├── gadgets/
        │   │   │           │   ├── poseidon.rs
        │   │   │           │   ├── merkle.rs
        │   │   │           │   └── range.rs
        │   │   │           ├── circuits/
        │   │   │           │   ├── identity_nullifier.rs
        │   │   │           │   ├── commit_reveal.rs
        │   │   │           │   └── rate_limit.rs
        │   │   │           └── transcript/
        │   │   │               ├── blake2s.rs
        │   │   │               └── keccak.rs
        │   │   ├── benches/proof_time.rs
        │   │   └── tests/integration.rs
        │   │
        │   ├── plonky2/
        │   │   ├── Cargo.toml
        │   │   └── src/
        │   │       ├── lib.rs
        │   │       ├── merkle.rs
        │   │       └── identity_nullifier.rs
        │   │
        │   └── stark/
        │       ├── cairo/
        │       │   ├── programs/identity_nullifier.cairo
        │       │   └── tests/identity_nullifier_test.cairo
        │       └── winterfell/
        │           ├── Cargo.toml
        │           └── src/lib.rs
        │
        ├── recursion/                        # агрегаторы и рекурсивные конструкции
        │   ├── circuits/
        │   │   ├── aggregator.circom
        │   │   └── halo2_recursive.rs
        │   └── verifiers/
        │       └── solidity/AggregatorVerifier.sol
        │
        ├── verifiers/                        # верификаторы для различных рантаймов
        │   ├── evm/
        │   │   ├── solidity/
        │   │   │   ├── Groth16Verifier.sol
        │   │   │   ├── PlonkVerifier.sol
        │   │   │   ├── Halo2Verifier.sol
        │   │   │   ├── libraries/
        │   │   │   │   ├── Pairing.sol
        │   │   │   │   └── Transcript.sol
        │   │   │   └── adapters/
        │   │   │       ├── IdentityNullifierVerifier.sol
        │   │   │       ├── RateLimitVerifier.sol
        │   │   │       └── CommitRevealVerifier.sol
        │   │   └── tests/foundry/Verifier.t.sol
        │   ├── wasm/
        │   │   └── verifier_wasm/
        │   │       ├── Cargo.toml
        │   │       └── src/lib.rs
        │   └── starknet/
        │       ├── cairo/Verifier.cairo
        │       └── tests/verifier_test.cairo
        │
        ├── services/                         # офчейн prover-сервис и воркеры
        │   ├── proverd/
        │   │   ├── Cargo.toml                 # или package.json — выбор стека по проекту
        │   │   └── src/
        │   │       ├── main.rs                # REST/gRPC сервис: очередь задач, лимиты, телеметрия
        │   │       ├── api/openapi.yaml
        │   │       ├── adapters/
        │   │       │   ├── circom_runner.rs
        │   │       │   ├── halo2_runner.rs
        │   │       │   └── noir_runner.rs
        │   │       ├── queue/
        │   │       │   └── memory.rs
        │   │       ├── storage/
        │   │       │   ├── fs.rs
        │   │       │   └── object_store.rs
        │   │       └── telemetry/
        │   │           └── o11y.rs
        │   ├── worker/
        │   │   └── src/main.rs
        │   └── k8s/
        │       ├── deployment.yaml
        │       └── service.yaml
        │
        ├── tools/                            # вспомогательные утилиты и конвертеры
        │   ├── keygen/
        │   │   ├── groth16_keygen.sh
        │   │   └── halo2_keygen.rs
        │   ├── srs/
        │   │   └── derive_srs_manifest.py
        │   ├── convert/
        │   │   ├── circom2solidity.js
        │   │   └── vkey_format_normalizer.py
        │   ├── merkle_tree/
        │   │   └── mt_generator.rs
        │   └── ci/
        │       ├── verify_determinism.sh      # повторяемость доказательств
        │       └── size_budget_check.sh       # бюджет на размер proof/vk
        │
        ├── tests/                             # общий тестовый контур
        │   ├── unit/
        │   │   ├── test_poseidon_vectors.py
        │   │   └── test_merkle_consistency.py
        │   ├── integration/
        │   │   ├── test_proverd_api.py
        │   │   └── test_verifier_evm_bindings.py
        │   ├── e2e/
        │   │   ├── test_identity_nullifier_cross_verification.py   # один witness → разные фреймворки
        │   │   └── test_rate_limit_onchain_flow.py
        │   └── vectors/
        │       ├── poseidon/
        │       │   ├── bn254.json
        │       │   └── bls12_381.json
        │       └── merkle/
        │           ├── sha256.json
        │           └── poseidon.json
        │
        ├── examples/
        │   ├── identity_nullifier/
        │   │   ├── README.md
        │   │   └── inputs.json
        │   └── proof_of_reserve/
        │       ├── README.md
        │       └── inputs.json
        │
        ├── audits/
        │   ├── checklists/
        │   │   ├── zk_circuit_security.md
        │   │   └── verifier_onchain_checks.md
        │   ├── reports/
        │   │   └── .gitkeep
        │   └── findings/
        │       └── .gitkeep
        │
        ├── compliance/
        │   ├── export_controls.md             # криптография и экспортный контроль
        │   └── cryptography_disclaimer.md
        │
        ├── docs/
        │   ├── architecture.md
        │   ├── zk_stack.md
        │   ├── trusted_setup.md
        │   └── ceremonies/
        │       ├── mpc_process.md
        │       └── transcript_format.md
        │
        └── ci/
            ├── github-actions.yaml
            └── gitlab-ci.yml
│   + ├── tests/
core-systems/
└── web3-defense-layer/
    └── tests/
        ├── README.md
        ├── pytest.ini
        ├── conftest.py
        ├── coverage.rc
        ├── noxfile.py
        ├── tox.ini
        ├── configs/
        │   ├── test-settings.yaml
        │   ├── secrets.example.yaml
        │   ├── docker-compose.test.yml              # anvil, ton-local, redis, kafka/nats, otel
        │   └── environments/
        │       ├── dev.yaml
        │       ├── staging.yaml
        │       └── prod.yaml
        ├── unit/
        │   ├── test_policy_engine.py
        │   ├── test_risk_engine.py
        │   ├── test_mev_guard_strategies.py
        │   ├── test_rpc_router_selection.py
        │   ├── test_nonce_manager.py
        │   ├── test_signing_dispatcher.py           # HSM/MPC/hot policy
        │   ├── test_simulator_evm.py                # gas/side-effects estimation
        │   ├── test_simulator_ton.py
        │   ├── test_rate_limit_and_quotas.py
        │   ├── test_anti_abuse_filters.py
        │   ├── test_allow_block_lists.py
        │   ├── test_sanctions_screening.py
        │   ├── test_jurisdiction_policies.py
        │   ├── test_observability_metrics.py
        │   └── __init__.py
        ├── integration/
        │   ├── test_http_api_contract.py            # OpenAPI контракт/round-trip
        │   ├── test_grpc_streams_contract.py        # protobuf/gRPC
        │   ├── test_submit_retry_idempotency.py
        │   ├── test_rpc_failover_and_health.py
        │   ├── test_hsm_mpc_fallbacks.py
        │   ├── test_audit_log_integrity.py
        │   ├── test_sanctions_feeds_update.py
        │   ├── test_event_queue_pipeline.py         # Kafka/NATS топики
        │   └── __init__.py
        ├── e2e/
        │   ├── test_e2e_evm_preflight_to_submit.py  # anvil + приватная отправка
        │   ├── test_e2e_ton_preflight_to_submit.py
        │   ├── test_e2e_reorg_resilience.py         # замер поведения при reorg
        │   ├── test_e2e_privacy_mev_protection.py   # private channels / delays / batching
        │   ├── test_e2e_gas_bump_and_replace.py     # replacement txn / nonce-gap
        │   └── __init__.py
        ├── property/
        │   ├── test_decision_determinism.py         # seed → стабильные решения
        │   ├── test_risk_score_invariants.py        # монотонность/границы
        │   ├── test_policy_idempotency.py
        │   └── __init__.py
        ├── fuzz/
        │   ├── test_fuzz_tx_normalizer.py           # ABI/BOC/field fuzz
        │   ├── test_fuzz_policy_parsing.py
        │   ├── test_fuzz_rpc_responses.py
        │   └── __init__.py
        ├── chaos/
        │   ├── test_rpc_flaps_partition.py          # сетевые флап/partition
        │   ├── test_clock_skew_effects.py
        │   ├── test_queue_backpressure.py
        │   └── __init__.py
        ├── performance/
        │   ├── test_throughput_submit.py            # pytest-benchmark
        │   ├── test_latency_preflight.py
        │   └── k6/
        │       ├── preflight_scenario.js
        │       └── submit_scenario.js
        ├── security/
        │   ├── test_signature_verification.py
        │   ├── test_tls_min_version_and_ciphers.py
        │   ├── test_rbac_enforcement.py
        │   ├── test_secret_leakage_in_logs.py
        │   └── __init__.py
        ├── compliance/
        │   ├── test_pii_redaction_logs.py
        │   ├── test_retention_policy.py
        │   ├── test_jurisdiction_blocks.py
        │   └── __init__.py
        ├── bdd/
        │   ├── features/
        │   │   ├── preflight_policy.feature
        │   │   ├── private_submit.feature
        │   │   └── reorg_resilience.feature
        │   └── steps/
        │       ├── preflight_steps.py
        │       ├── private_submit_steps.py
        │       └── reorg_steps.py
        ├── replay/
        │   ├── test_replay_from_jsonl_evm.py        # детерминизм решений
        │   ├── test_replay_from_jsonl_ton.py
        │   └── __init__.py
        ├── fixtures/
        │   ├── __init__.py
        │   ├── fake_clock.py
        │   ├── fake_rpc_evm.py
        │   ├── fake_rpc_ton.py
        │   ├── fake_hsm.py
        │   ├── fake_mpc.py
        │   ├── fake_kafka.py
        │   ├── fake_nats.py
        │   ├── fake_repo.py
        │   ├── sample_keys.py
        │   └── sample_policies.py
        ├── data/
        │   ├── README.md
        │   ├── samples/
        │   │   ├── tx_evm_sample.json
        │   │   ├── tx_ton_sample.json
        │   │   └── batch_submit.jsonl
        │   ├── threat_intel/
        │   │   └── feed_example.csv
        │   ├── schemas/
        │   │   ├── tx.schema.json
        │   │   ├── decision.schema.json
        │   │   ├── risk_report.schema.json
        │   │   └── audit.schema.json
        │   └── golden/
        │       ├── expected_decisions.jsonl
        │       ├── expected_risk_scores.json
        │       └── expected_audit_log.jsonl
        ├── tools/
        │   ├── validate_openapi.py
        │   ├── validate_protos.py
        │   ├── generate_synthetic_txs.py
        │   ├── mutate_policies_neg.py
        │   ├── validate_golden.py
        │   └── api_client.py
        ├── reports/
        │   ├── .gitkeep
        │   └── README.md
        └── scripts/
            ├── run_unit.sh
            ├── run_integration.sh
            ├── run_e2e.sh
            ├── run_k6.sh
            ├── lint_and_typecheck.sh
            └── coverage_report.sh

│   + └── docs/
│
└── zk-auth/
    ├── identity/
    ├── validation/
    + ├── circuits/           # схемы ZK-доказательств
    circuits/
├── README.md                              # обзор, модели угроз, инварианты корректности
├── OWNERS
├── VERSION
├── CHANGELOG.md
├── LICENSE
├── docs/
│   ├── architecture.md                    # слои: gadgets → circuits → recursion → artifacts
│   ├── inputs-outputs.md                  # форматы публичных/приватных сигналов
│   ├── proofs-lifecycle.md                # build → prove → verify → rotate keys
│   └── security-notes.md                  # ограничения, рекомендации по параметрам
├── schema/                                # схемы валидации конфигов/входов
│   ├── circuit.config.schema.json
│   ├── inputs.membership.schema.json
│   ├── inputs.credential.schema.json
│   ├── inputs.age.schema.json
│   ├── inputs.rln.schema.json
│   └── artifacts.schema.json              # r1cs/zkey/vk/wasm метаданные
├── configs/
│   ├── global.yaml                        # целевые кривые, бэкенды, уровни безопасности
│   ├── srs.yaml                           # параметры SRS/PoT (размеры схем)
│   ├── backend.circom.yaml                # флаги компиляции circom/snarkjs
│   ├── backend.halo2.yaml                 # параметры Halo2 (k, lookup, region)
│   └── backend.gnark.yaml                 # настройки gnark/plonk/groth16
├── toolchain/                             # воспроизводимые сборки для разных бэкендов
│   ├── circom/
│   │   ├── Dockerfile
│   │   ├── package.json
│   │   ├── circom.config.json
│   │   └── scripts/
│   │       ├── compile.sh                 # circom → r1cs/wasm/sym
│   │       ├── setup_groth16.sh           # powers of tau → zkey → vk
│   │       ├── setup_plonk.sh             # universal SRS → vk
│   │       ├── prove.sh                   # gen witness → proof.json
│   │       └── verify.sh                  # verify proof
│   ├── halo2/
│   │   ├── Cargo.toml
│   │   ├── benches/
│   │   │   └── poseidon_bench.rs
│   │   └── src/
│   │       ├── lib.rs
│   │       ├── gadgets/                   # Halo2-реализации гаджетов
│   │       └── circuits/                  # Halo2-реализации схем
│   └── gnark/
│       ├── go.mod
│       ├── go.sum
│       └── src/
│           ├── gadgets/                   # gnark-реализации гаджетов
│           └── circuits/                  # gnark-реализации схем
├── common/
│   ├── gadgets/                           # переиспользуемые компоненты
│   │   ├── hash/
│   │   │   ├── poseidon.circom
│   │   │   ├── mimc.circom
│   │   │   ├── keccak.circom
│   │   │   └── blake2s.circom
│   │   ├── ecc/
│   │   │   ├── eddsa.circom               # EdDSA on BabyJubJub
│   │   │   └── ecdsa_secp256k1.circom     # упрощенный или через внеш. хэш
│   │   ├── merkle/
│   │   │   ├── merkle_poseidon.circom
│   │   │   └── merkle_sha256.circom
│   │   ├── range/
│   │   │   ├── range_check.circom
│   │   │   └── less_than.circom
│   │   ├── bits/
│   │   │   ├── bit_decomposition.circom
│   │   │   └── boolean.circom
│   │   ├── accumulators/
│   │   │   ├── rsa_accumulator.circom     # membership с RSA-аккумулятором (паблик-модуль)
│   │   │   └── merkle_accumulator.circom
│   │   ├── nullifier/
│   │   │   ├── nullifier.circom           # RLN/семафор-стиль nullifier
│   │   │   └── linkability.circom         # опциональная линкуемость
│   │   └── utils/
│   │       ├── poseidon_params.json
│   │       └── constraints.circom         # assert/require хелперы
│   ├── params/
│   │   ├── curves.yaml                    # bn254, bls12-381, pasta
│   │   └── srs/
│   │       ├── bn254/
│   │       │   ├── powersOfTau28_hez_final_*.ptau # SRS слоты (placeholder)
│   │       │   └── README.md              # политика хранения/загрузки
│   │       └── bls12-381/
│   │           └── universal.srs          # PLONK universal SRS
│   └── transcripts/
│       └── fiat_shamir.md                 # выбранные домены/транскрипты
├── circuits/                              # доменные схемы ZK-аутентификации
│   ├── membership/
│   │   ├── group_merkle.circom            # доказательство членства по мерклю
│   │   ├── group_rsa_accumulator.circom   # доказательство членства по RSA-аккум.
│   │   └── config.yaml
│   ├── credentials/
│   │   ├── selective_disclosure.circom    # выборочное раскрытие атрибутов
│   │   ├── anon_credential.circom         # анонимные креды с vk-проверкой
│   │   ├── rln_rate_limit.circom          # rate-limit nullifier
│   │   └── config.yaml
│   ├── kyc_age/
│   │   ├── age_over_threshold.circom      # возраст > T без раскрытия DOB
│   │   ├── residency_proof.circom         # страна ∈ allowlist без раскрытия адреса
│   │   └── config.yaml
│   ├── login/
│   │   ├── eddsa_passkey.circom           # доказательство владения passkey (EdDSA)
│   │   ├── ecdsa_wallet_ownership.circom  # доказательство владения EOA (secp256k1)
│   │   └── config.yaml
│   ├── device/
│   │   ├── device_binding.circom          # привязка к устройству/TPM-префиксам
│   │   └── config.yaml
│   ├── privacy/
│   │   ├── zk_email_domain.circom         # домен почты ∈ allowlist без раскрытия адреса
│   │   └── zk_phone_prefix.circom
│   ├── revocation/
│   │   ├── accumulator_membership.circom  # проверка статуса не-отозван
│   │   └── merkle_revocation.circom
│   └── recursion/
│       ├── proof_aggregator.circom        # агрегация нескольких доказательств
│       └── pairing_batch_verify.circom
├── examples/
│   ├── membership_example/
│   │   ├── input.json                     # пример входов
│   │   ├── run.sh                         # compile→setup→prove→verify
│   │   └── README.md
│   └── rln_example/
│       ├── input.json
│       ├── run.sh
│       └── README.md
├── fixtures/
│   ├── inputs/
│   │   ├── membership.inputs.json
│   │   ├── credential.inputs.json
│   │   ├── age.inputs.json
│   │   └── rln.inputs.json
│   ├── witnesses/                         # deterministically generated
│   │   ├── membership.wtns
│   │   └── rln.wtns
│   └── keys/
│       ├── membership/
│       │   ├── circuit_final.zkey
│       │   └── verification_key.json
│       └── rln/
│           ├── circuit_final.zkey
│           └── verification_key.json
├── artifacts/                             # собранные артефакты (версионируемые)
│   ├── membership/
│   │   ├── membership.r1cs
│   │   ├── membership.wasm
│   │   └── metadata.json                  # хэш, размер SRS, commit-id
│   └── rln/
│       ├── rln.r1cs
│       ├── rln.wasm
│       └── metadata.json
├── tests/
│   ├── pytest.ini
│   ├── conftest.py
│   ├── unit/
│   │   ├── test_poseidon_params.py
│   │   ├── test_merkle_constraints.py
│   │   ├── test_range_checks.py
│   │   ├── test_nullifier_uniqueness.py
│   │   └── test_eddsa_gadget.py
│   ├── integration/
│   │   ├── test_membership_prove_verify.py
│   │   ├── test_rln_slashability.py
│   │   ├── test_selective_disclosure_flow.py
│   │   └── test_ecdsa_wallet_ownership.py
│   ├── vectors/
│   │   ├── membership.case1.json          # вход→ожидаемый публичный сигнал→валидный proof hash
│   │   ├── rln.case1.json
│   │   └── age.case1.json
│   └── security/
│       ├── test_soundness_negative_inputs.py
│       ├── test_malleability_rejection.py
│       └── test_param_mismatch.py
├── scripts/
│   ├── gen_witness.js                     # snarkjs: wasm → witness.wtns
│   ├── prove_groth16.sh
│   ├── prove_plonk.sh
│   ├── verify.sh
│   ├── bench_halo2.rs                     # запуск бенчей Halo2
│   └── check_artifacts.py                 # сверка хэшей, размеров, схем
├── security/
│   ├── threat-model.md                    # STRIDE для схем/артефактов
│   ├── ceremonies/
│   │   ├── pot_mpc_runbook.md             # регламент MPC
│   │   ├── contributions.log              # журналы вкладов (хэши/коммиты)
│   │   └── entropy_guidelines.md
│   └── audits/
│       ├── checklist.md                   # статические проверки, линтеры, размеры контекстов
│       └── findings.template.md
└── ci/
    ├── github/
    │   └── workflows/
    │       ├── circuits-ci.yml            # compile, prove small, verify, vectors, size limits
    │       └── artifacts-sign.yml         # подпись артефактов (cosign/sha256)
    └── checks/
        ├── validate-configs.py            # JSON-schema валидации inputs/configs
        ├── hash-artifacts.sh              # контроль целостности
        └── srs-policy.sh                  # проверка соответствия SRS размерам схем

    + ├── prover/             # генерация доказательств
    core-systems/
└── zk-auth/
    └── prover/
        ├── README.md                          # обзор, SLA/SLI/SLO, модели угроз, схемы потоков
        ├── SECURITY.md                        # политика раскрытия, hardening, supply-chain
        ├── CODEOWNERS
        ├── .gitignore
        ├── LICENSE
        ├── Cargo.toml                         # пример на Rust; допустим иной стек (Go/Python) — по проекту
        │
        ├── configs/
        │   ├── prover.yaml                    # порты, бэкенды, лимиты, флаги детерминизма
        │   ├── tenants.yaml                   # мультиарендность: квоты, политики, RBAC
        │   ├── limits.yaml                    # таймауты, память, CPU/GPU квоты, rate-limits
        │   ├── routes.yaml                    # маршрутизация API, версии
        │   └── secrets.example.env            # шаблон переменных окружения (без секретов)
        │
        ├── manifests/                         # реестр артефактов схем
        │   ├── circuits/
        │   │   ├── login_nullifier.manifest.json
        │   │   ├── rate_limit.manifest.json
        │   │   └── device_binding.manifest.json
        │   ├── vkeys/
        │   │   └── bn254/
        │   │       ├── login_nullifier.vk.json
        │   │       └── rate_limit.vk.json
        │   └── srs/
        │       ├── bn254/ptau.manifest.json
        │       └── bls12_381/srs.manifest.json
        │
        ├── api/
        │   ├── http/
        │   │   ├── openapi.yaml               # контракт REST (prove/prepare/status/metrics)
        │   │   └── controllers.rs             # прием запросов, валидация, аудирование
        │   ├── grpc/
        │   │   ├── proto/prover.proto         # контракт gRPC
        │   │   └── server.rs
        │   └── auth/
        │       ├── mtls.rs                    # клиентские сертификаты
        │       ├── jwt.rs                     # сервисные JWT/OIDC
        │       └── rbac.rs                    # роли и политики на методы/тенанты
        │
        ├── witness/
        │   ├── schema/
        │   │   ├── login_nullifier.json       # входы: nonce, pub, коммитменты
        │   │   ├── rate_limit.json
        │   │   └── device_binding.json
        │   ├── builders/
        │   │   ├── login.rs                   # сборка witness из challenge/nonce
        │   │   ├── rate_limit.rs
        │   │   └── device_binding.rs
        │   └── validators/
        │       ├── boundary_checks.rs         # диапазоны/длины/домены полей
        │       └── semantics.rs               # семантика протокола (anti-replay/expiry)
        │
        ├── queue/
        │   ├── mod.rs                         # интерфейс очереди задач доказательства
        │   ├── inmem.rs                       # in-memory для dev
        │   ├── redis.rs                       # продовый бэкенд
        │   └── nats.rs                        # альтернативный транспорт
        │
        ├── orchestration/
        │   ├── scheduler.rs                   # планирование/приоритеты/SLAs
        │   ├── worker_pool.rs                 # пулы CPU/GPU, NUMA-aware
        │   ├── resource_manager.rs            # бюджет ОЗУ/времени/ядра/GPU
        │   ├── retry.rs                       # стратегии повторов с idempotency-key
        │   ├── dedup.rs                       # дедупликация одинаковых запросов (same witness hash)
        │   ├── idempotency.rs
        │   └── admission_control.rs           # admission по квотам/тенантам
        │
        ├── adapters/                          # бриджи к фреймворкам/бэкендам ZK
        │   ├── circom.rs
        │   ├── noir.rs
        │   ├── halo2.rs
        │   ├── plonky2.rs
        │   └── formats/
        │       ├── groth16.rs                 # нормализация/пакетирование proof
        │       ├── plonk.rs
        │       └── stark.rs
        │
        ├── hardware/
        │   ├── cpu.rs
        │   ├── gpu.rs                         # CUDA/OpenCL; graceful-degrade на CPU
        │   └── rng_isolation.rs               # устойчивость PRNG и изоляция сеансов
        │
        ├── storage/
        │   ├── blobs/
        │   │   ├── fs.rs                      # хранение proof/witness артефактов
        │   │   ├── s3.rs
        │   │   └── ipfs.rs
        │   ├~~ kv/
        │   │   ├── sqlite.rs
        │   │   ├── postgres.rs
        │   │   └── redis.rs
        │   ├── cache/
        │   │   ├── lru.rs
        │   │   └── memcached.rs
        │   └── registry/
        │       ├── circuits.rs                # версия схем → артефакты/ключи
        │       └── vkeys.rs
        │
        ├── keys/
        │   ├── keystore.rs                    # запечатанное локальное хранилище
        │   ├── kms/
        │   │   ├── aws_kms.rs
        │   │   └── gcp_kms.rs
        │   └── srs/
        │       ├── loader.rs                  # верификация чексумм/размеров
        │       └── verifier.rs                # аудит происхождения SRS/PTAU
        │
        ├── workflows/
        │   ├── login_proof.rs                 # end-to-end маршрут prove() для логина
        │   ├── rate_limit_proof.rs
        │   └── device_binding_proof.rs
        │
        ├── security/
        │   ├── nonce.rs                       # генерация/валидация nonce, TTL
        │   ├── replay_protection.rs           # anti-replay, одноразовые челленджи
        │   ├── partitioning.rs                # изоляция тенантов/сеансов
        │   ├── pii_redaction.rs               # зачистка PII в логах/артефактах
        │   └── secrets_scanner.rs
        │
        ├── telemetry/
        │   ├── metrics.rs                     # Prometheus: latency, queue_depth, fails, determinism
        │   ├── tracing.rs                     # OpenTelemetry: спаны prove/prepare
        │   └── health.rs                      # /healthz, /readyz, /livez
        │
        ├── server/
        │   ├── http.rs                        # axum/actix warp — HTTP сервер
        │   ├── grpc.rs                        # gRPC сервер
        │   ├── middlewares/
        │   │   ├── rate_limit.rs
        │   │   ├── audit.rs
        │   │   └── request_id.rs
        │   └── bootstrap.rs                   # загрузка конфигов, wiring, graceful shutdown
        │
        ├── determinism/
        │   ├── hash_inputs.rs                 # детерминизация witness
        │   ├── proof_canonical.rs             # каноническая сериализация proof
        │   └── budget.rs                      # контроль размера/времени/памяти
        │
        ├── errors.rs
        ├── types.rs
        ├── main.rs
        │
        ├── tests/
        │   ├── unit/
        │   │   ├── test_witness_login.rs
        │   │   ├── test_adapters_groth16.rs
        │   │   └── test_nonce_replay.rs
        │   ├── integration/
        │   │   ├── test_prove_login_http.rs
        │   │   ├── test_queue_backends.rs
        │   │   └── test_storage_blobs.rs
        │   ├── e2e/
        │   │   ├── test_login_flow.rs         # challenge→witness→prove→verify
        │   │   └── test_rate_limit_flow.rs
        │   ├── fuzz/
        │   │   └── fuzz_witness_builder.rs
        │   ├── perf/
        │   │   ├── bench_prover_cpu.rs
        │   │   └── bench_prover_gpu.rs
        │   └── security/
        │       ├── test_api_authz.rs
        │       └── test_pii_redaction.rs
        │
        ├── testdata/
        │   ├── witnesses/
        │   │   ├── login_nullifier.input.json
        │   │   └── rate_limit.input.json
        │   ├── proofs/
        │   │   └── login_nullifier.proof.json
        │   └── vectors/
        │       └── poseidon_bn254.json
        │
        ├── ci/
        │   ├── github-actions.yaml             # линт, тесты, fuzz, SBOM, контейнер
        │   ├── gitlab-ci.yml
        │   └── policies/
        │       └── required_statuses.yaml
        │
        ├── k8s/
        │   ├── deployment.yaml                 # ресурсы/лимиты, под-аннотации NUMA/GPU
        │   ├── hpa.yaml                        # авто-скейлинг по queue_depth/latency
        │   ├── service.yaml
        │   ├── pdb.yaml
        │   ├── networkpolicy.yaml
        │   ├── configmap.yaml
        │   └── secret.yaml
        │
        ├── docker/
        │   ├── Dockerfile
        │   └── docker-compose.yaml
        │
        ├── observability/
        │   ├── dashboards/
        │   │   └── grafana/prover_ops.json    # latency p50/p95/p99, queue, errors
        │   └── alerts/
        │       └── prometheus.rules.yml       # SLO нарушители/ошибка детерминизма
        │
        ├── scripts/
        │   ├── dev_run.sh
        │   ├── seed_demo.sh
        │   ├── migrate_db.sql
        │   └── verify_determinism.sh
        │
        ├── docs/
        │   ├── architecture.md
        │   ├── threat_model.md                # STRIDE/сайд-каналы/PRNG/harvest-now-decrypt-later
        │   ├── sequence_diagrams.puml
        │   ├── srs_management.md
        │   └── runbook.md                     # эксплуатация/инциденты/ротации ключей
        │
        └── audits/
            ├── checklists/
            │   ├── prover_security.md
            │   └── determinism_compliance.md
            ├── findings/
            │   └── .gitkeep
            └── reports/
                └── .gitkeep

    + ├── verifier/           # проверка (offchain/onchain)
    core-systems/
└── zk-auth/
    └── verifier/
        ├── README.md
        ├── configs/
        │   └── verifier.example.yaml
        ├── offchain/
        │   ├── __init__.py
        │   ├── models.py              # Pydantic: пруфы, публичные сигналы, политики
        │   ├── calldata.py            # Генерация Solidity calldata (Groth16)
        │   ├── nullifier.py           # Вычисление nullifier/signalHash (keccak-256)
        │   ├── verifier_engine.py     # Единый интерфейс верификации (заглушка/интеграция)
        │   ├── errors.py
        │   └── cli/
        │       └── verify_cli.py      # CLI: загрузка JSON, валидация, вывод calldata
        ├── onchain/
        │   ├── foundry.toml
        │   ├── contracts/
        │   │   ├── IVerifier.sol
        │   │   ├── VerifierRouter.sol
        │   │   ├── ZkAuthRegistry.sol
        │   │   └── mocks/
        │   │       └── MockVerifier.sol
        │   ├── script/
        │   │   └── Deploy.s.sol
        │   └── test/
        │       └── Verifier.t.sol
        └── artifacts/
            └── vk/
                └── login.g16.vkey.json    # пример верификационного ключа (заглушка-структура)

    + ├── sdk/                # клиенты TS/Python
    core-systems/
└── zk-auth/
    └── sdk/
        ├── README.md
        ├── CHANGELOG.md
        ├── LICENSE
        ├── SECURITY.md
        ├── CONTRIBUTING.md
        ├── CODE_OF_CONDUCT.md
        ├── VERSION
        ├── .editorconfig
        ├── .gitignore
        ├── Makefile
        ├── docs/
        │   ├── overview.md
        │   ├── api/
        │   │   ├── ts.md
        │   │   └── python.md
        │   ├── security-model.md
        │   ├── threat-model.md
        │   └── diagrams/
        │       ├── dataflow.d2
        │       └── sequence-auth.d2
        ├── schemas/
        │   ├── credential/
        │   │   ├── verifiable_credential.schema.json
        │   │   └── presentation.schema.json
        │   ├── proof/
        │   │   ├── groth16_proof.schema.json
        │   │   ├── plonk_proof.schema.json
        │   │   └── linkability.schema.json
        │   └── policy/
        │       ├── auth_policy.schema.json
        │       └── key_manifest.schema.json
        ├── artifacts/                       # общие ZK-артефакты, версионируемые
        │   ├── circuits/
        │   │   ├── login/
        │   │   │   ├── login.wasm
        │   │   │   ├── login.zkey
        │   │   │   └── login.json           # описание сигналов
        │   │   ├── age_over_18/
        │   │   │   ├── age.wasm
        │   │   │   └── age.zkey
        │   │   └── membership/
        │   │       ├── member.wasm
        │   │       └── member.zkey
        │   ├── vkeys/
        │   │   ├── login.vkey.json
        │   │   ├── age.vkey.json
        │   │   └── member.vkey.json
        │   └── params/
        │       └── powers_of_tau.ptau
        ├── fixtures/                        # тестовые векторы
        │   ├── test_vectors.json
        │   ├── sample_credentials.json
        │   └── sample_presentations.json
        ├── examples/
        │   ├── ts/
        │   │   ├── nextjs-app/
        │   │   │   ├── app/
        │   │   │   ├── pages/
        │   │   │   ├── api/
        │   │   │   └── README.md
        │   │   └── node-express/
        │   │       ├── src/
        │   │       └── README.md
        │   └── python/
        │       ├── fastapi-app/
        │       │   ├── app/
        │       │   └── README.md
        │       └── cli-demo/
        │           ├── zk_login.py
        │           └── README.md
        ├── integrations/
        │   ├── web/
        │   │   ├── nextjs/
        │   │   │   └── adapter.ts
        │   │   └── express/
        │   │       └── middleware.ts
        │   └── backend/
        │       ├── fastapi/
        │       │   └── dependency.py
        │       └── django/
        │           └── middleware.py
        ├── tests/
        │   ├── e2e/
        │   │   ├── zk_login_flow.md
        │   │   └── docker-compose.yml       # окружение для полноценных прогонов
        │   ├── conformance/
        │   │   ├── proofs_against_schemas/
        │   │   └── vectors_compat/
        │   └── security/
        │       ├── negative_cases.md
        │       └── linkability_checks.md
        ├── release/
        │   ├── signing/
        │   │   ├── gpg_policy.yaml
        │   │   └── trusted_keys/
        │   │       └── sdk_release.asc
        │   └── sbom/
        │       ├── ts.spdx.json
        │       └── py.spdx.json
        └── packages/
            ├── ts/
            │   ├── package.json
            │   ├── tsconfig.json
            │   ├── tsconfig.build.json
            │   ├── vitest.config.ts
            │   ├── rollup.config.mjs        # или tsup.config.ts
            │   ├── .eslintrc.cjs
            │   ├── .prettierrc
            │   ├── src/
            │   │   ├── index.ts
            │   │   ├── client/
            │   │   │   ├── http.ts
            │   │   │   └── websocket.ts
            │   │   ├── auth/
            │   │   │   ├── oidc.ts          # обёртка над классическим OIDC
            │   │   │   ├── zk_login.ts      # ZK-логин и сессии
            │   │   │   └── device_binding.ts
            │   │   ├── proofs/
            │   │   │   ├── groth16.ts
            │   │   │   ├── plonk.ts
            │   │   │   └── loader.ts        # загрузка wasm/zkey/vkey
            │   │   ├── credentials/
            │   │   │   ├── issuer.ts
            │   │   │   ├── verifier.ts
            │   │   │   └── schemas.ts
            │   │   ├── crypto/
            │   │   │   ├── bbs.ts
            │   │   │   ├── eddsa.ts
            │   │   │   └── hash.ts          # Poseidon/Blake3 обёртки
            │   │   ├── storage/
            │   │   │   ├── session_store.ts
            │   │   │   └── key_store.ts
            │   │   ├── adapters/
            │   │   │   ├── node.ts
            │   │   │   └── browser.ts
            │   │   ├── utils/
            │   │   │   ├── encoding.ts      # base58/bech32/hex
            │   │   │   └── schema_validate.ts
            │   │   └── errors/
            │   │       └── index.ts
            │   ├── wasm/
            │   │   ├── README.md
            │   │   ├── bindings.d.ts
            │   │   └── prebuilt/            # предсобранные wasm (копии из artifacts/)
            │   ├── test/
            │   │   ├── unit/
            │   │   │   ├── proofs.spec.ts
            │   │   │   └── auth.spec.ts
            │   │   ├── integration/
            │   │   │   └── end_to_end.spec.ts
            │   │   └;;fixtures/             # заглушки и примеры входов
            │   └── scripts/
            │       ├── build.mjs
            │       ├── gen-types.mjs
            │       └── verify-artifacts.mjs
            └── py/
                ├── pyproject.toml
                ├── README.md
                ├── src/
                │   └── zk_auth/
                │       ├── __init__.py
                │       ├── client.py
                │       ├── auth/
                │       │   ├── oidc.py
                │       │   ├── zk_login.py
                │       │   └── device_binding.py
                │       ├── proofs/
                │       │   ├── groth16.py
                │       │   ├── plonk.py
                │       │   └── loader.py     # загрузка wasm/zkey/vkey
                │       ├── credentials/
                │       │   ├── issuer.py
                │       │   ├── verifier.py
                │       │   └── schemas.py
                │       ├── crypto/
                │       │   ├── bbs.py
                │       │   ├── eddsa.py
                │       │   └── hash.py
                │       ├── storage/
                │       │   ├── session_store.py
                │       │   └── key_store.py
                │       ├── adapters/
                │       │   ├── fastapi.py
                │       │   └── aiohttp.py
                │       ├── utils/
                │       │   ├── encoding.py
                │       │   └── schema_validate.py
                │       └── errors.py
                ├── tests/
                │   ├── unit/
                │   │   ├── test_proofs.py
                │   │   └── test_auth.py
                │   ├── integration/
                │   │   └── test_end_to_end.py
                │   └── fixtures/
                └── scripts/
                    ├── build_wheels.sh
                    ├── gen_stubs.py
                    └── verify_artifacts.py

    + ├── api/                # REST/gRPC endpoints
    core-systems/
  zk-auth/
    api/
      README.md                       # назначение, матрица совместимости, SLA
      Makefile                        # gen-openapi, gen-proto, lint, test, build
      .env.example                    # переменные для локалки (без секретов)
      scripts/
        gen_openapi.sh                # сборка/валидация OpenAPI
        gen_proto.sh                  # buf build/lint/generate
        verify_contract_compat.sh     # проверка backward-compat
        run_dev.sh                    # запуск локального стека
      common/
        config/
          default.yaml
          dev.yaml
          stage.yaml
          prod.yaml
        policies/
          rbac.policies.yaml          # роли/правила на методы/скоупы
          rate_limit.policies.yaml    # лимиты per-route/per-identity
          cors.yaml
        security/
          jwks/.gitkeep               # каталог для JWKS-публикации
          mtls/
            ca.crt.example
            server.crt.example
            server.key.example
        observability/
          otel.yaml                   # экспортеры OTLP, семплеры, атрибуты
        errors/
          error_catalog.md            # коды/семантика ошибок API
      contracts/
        openapi/
          v1/
            openapi.yaml              # единый контракт REST v1
            examples/
              nonce_issue_request.json
              proof_verify_request.json
              session_exchange_request.json
              jwks_response.json
            schemas/
              zk_proof.schema.json    # JSON Schema пруфа
              nonce.schema.json
              token.schema.json
          v2/
            openapi.yaml              # будущая версия
        proto/
          buf.yaml
          buf.gen.yaml
          v1/
            zk_auth.proto             # gRPC сервисы: Nonce, Proof, Session, Health
            options.proto
          v2/
            zk_auth.proto
      rest/
        app/
          __init__.py
          main.py                     # создание ASGI-приложения, маршрутизация
          settings.py                 # конфиг (pydantic/энв)
          bootstrap.py                # wiring: DI, клиенты, логгер, трассировка
          routes/
            v1/
              __init__.py
              health.py               # GET /v1/health
              well_known.py           # GET /.well-known/jwks.json, oidc-config
              nonce.py                # POST /v1/nonce/issue
              proofs.py               # POST /v1/proof/verify
              session.py              # POST /v1/session/exchange (ZK → OIDC/JWT)
              credentials.py          # POST /v1/credentials/issue (опц.)
            v2/
              __init__.py             # заглушки/миграции
          controllers/
            v1/
              nonce_controller.py
              proofs_controller.py
              session_controller.py
              credentials_controller.py
          dto/
            v1/
              request/
                nonce_issue.py
                proof_verify.py
                session_exchange.py
              response/
                nonce_issued.py
                proof_verification.py
                token_pair.py
          middlewares/
            request_id.py
            mtls_enforcer.py
            oidc_bearer.py
            rbac_enforcer.py
            rate_limit.py
            cors.py
            payload_size_guard.py
          validators/
            zk_proof_validator.py     # схема/каноникализация, размер/полевая проверка
            nonce_validator.py
          security/
            jwks_cache.py             # кэш/публикация ключей подписи
            signer.py                 # подпись JWT/DPoP/псевдонимов
            verifier.py               # верификация входящих токенов
            nonce_store.py            # хранение nonce + TTL
            replay_protection.py      # защита от повторов (nonce/временные метки)
          adapters/
            engine_client.py          # клиент ZK-движка (verify_proof)
            kms_client.py             # подпись ключами (HSM/KMS)
            audit_client.py           # аудит/события
          observability/
            logging.py
            metrics.py                # пром/OTLP метрики per-endpoint
            tracing.py                # спаны: доказ-во, выпуск токена
          errors/
            handlers.py               # маппинг исключений → HTTP
            codes.py                  # систематизация ошибок
        tests/
          rest/
            unit/
              test_nonce_validation.py
              test_proof_validator.py
              test_session_controller.py
              test_error_mapping.py
            integration/
              test_rest_nonce_issue.py
              test_rest_proof_verify.py
              test_rest_session_exchange.py
              test_jwks_publish.py
            contract/
              test_openapi_examples.py  # прогон примеров через схему
      grpc/
        server/
          __init__.py
          main.py                     # запуск gRPC, health/reflection
          interceptors/
            auth_interceptor.py
            rbac_interceptor.py
            rate_limit_interceptor.py
            tracing_interceptor.py
          services/
            v1/
              zk_auth_service.py      # Nonce, ProofVerify, SessionExchange
              health_service.py
        generated/
          v1/                          # артефакты генерации (в .gitignore)
            .gitkeep
        tests/
          grpc/
            unit/
              test_interceptors.py
            integration/
              test_grpc_proof_verify.py
              test_grpc_session_exchange.py
            contract/
              test_proto_compatibility.py
      gateway/
        envoy/
          envoy.yaml                  # маршруты, мTLS, rate-limit, authz, jwks
        kong/
          kong.yaml                   # альтернативная конфигурация
        traefik/
          traefik.yaml
      ci/
        workflows/
          contract_check.yml          # buf + openapi-compat
          api_tests.yml               # матрица версий Python/OS
        contract_tests/
          pact/
            zk_auth_rest_pact.py
            zk_auth_grpc_pact.py
      compliance/
        pii_manifest.yaml             # поля с PII и режим редактирования логов
        data_retention.yaml           # сроки хранения артефактов и логов
        logging_policy.yaml           # маскирование полей пруфа/токенов
      docs/
        API_CONTRACT.md               # гайд по контрактам/версированию/депрекейту
        THREAT_MODEL.md               # STRIDE/LINDDUN для ZK-потоков
        RUNBOOK.md                    # runbook SRE/OnCall для инцидентов
        CHANGELOG.md

    + ├── tests/
    core-systems/
└── zk-auth/
    └── tests/
        ├── README.md                          # правила запуска, маркеры, профили CI
        ├── conftest.py                        # глобальные фикстуры и хуки
        ├── pytest.ini                         # локальные маркеры: unit,integration,e2e,property,fuzz,perf,security,compliance,interop
        ├── __init__.py
        │
        ├── data/                              # статические данные для тестов
        │   ├── wycheproof/                    # официальные векторы Wycheproof (ECDSA, Ed25519 и т.п.)
        │   ├── kat/                           # Known-Answer Tests (JSON/CBOR)
        │   ├── vectors/                       # поля/кривые: BN254, BLS12-381, Ed25519
        │   └── corpora/                       # корпуса для фаззинга (AFL/libFuzzer)
        │
        ├── fixtures/                          # динамически генерируемые артефакты/фикстуры
        │   ├── keys/                          # тестовые ключи и сиды
        │   ├── transcripts/                   # расшифровки протокола (Merlin/Fiat–Shamir)
        │   └── generators.py                  # фабрики параметров/цепочек доверия
        │
        ├── pytest_plugins/                    # плагины/расширения pytest
        │   ├── __init__.py
        │   └── zk_fixtures.py                 # кастомные фикстуры: поле, кривая, прувер/верифаер
        │
        ├── unit/                              # модульные тесты (быстрые)
        │   ├── __init__.py
        │   ├── test_fields.py                 # арифметика полей
        │   ├── test_curves.py                 # группа точек, законы группы
        │   ├── test_hash_to_curve.py          # hash-to-curve (RFC9380)
        │   ├── test_poseidon.py               # Poseidon/МиМC/Педерсен коммитменты
        │   ├── test_merkle.py                 # мерклизация/пруфы включения
        │   ├── test_transcript_merlin.py      # стенограмма протокола
        │   ├── test_fiat_shamir.py            # преобразование Фиат–Шамира
        │   ├── test_serde.py                  # сериализация/десериализация
        │   ├── test_signature_schemes.py      # Ed25519/ECDSA/K256 и пр.
        │   ├── test_zk_snark_prover.py
        │   └── test_zk_snark_verifier.py
        │
        ├── property/                          # property-based тесты (Hypothesis)
        │   ├── __init__.py
        │   ├── strategies/
        │   │   ├── bytes_strategies.py
        │   │   ├── field_strategies.py
        │   │   └── curve_strategies.py
        │   ├── test_field_arith_prop.py
        │   ├── test_group_laws_prop.py
        │   ├── test_merkle_prop.py
        │   └── test_soundness_prop.py
        │
        ├── integration/                       # интеграционные тесты (модули вместе)
        │   ├── __init__.py
        │   ├── test_prover_verifier_roundtrip.py
        │   ├── test_plonk_vk_compat.py        # совместимость верификационных ключей
        │   ├── test_ipa_commitments.py        # IPA/KZG (если применимо)
        │   ├── test_ffi_bindings.py           # Python↔Rust/С/Go биндинги
        │   ├── test_prom_metrics_exposed.py   # метрики Prometheus
        │   ├── test_otel_tracing_emission.py  # следы OTel
        │   ├── test_rest_api_endpoints.py     # REST/gRPC API контракты
        │   ├── test_storage_backends.py       # Redis/Postgres/FS
        │   └── test_hw_accel_backends.py      # AVX2/NEON/BLST
        │
        ├── e2e/                               # сквозные сценарии
        │   ├── __init__.py
        │   ├── scenarios/
        │   │   ├── sign_in_proof.json
        │   │   ├── passwordless_proof.json
        │   │   └── mpc_setup.json
        │   ├── test_user_auth_flow.py
        │   ├── test_revocation_and_rotation.py
        │   ├── test_rate_limits_and_dos.py
        │   └── test_cross_chain_verification.py # проверка валидации на разных сетях
        │
        ├── fuzz/                              # фаззинг и харнесы
        │   ├── test_fuzz_transcript.py        # Hypothesis/pyfuzz
        │   ├── test_fuzz_proof_encoding.py
        │   ├── test_fuzz_api.py
        │   └── harness/
        │       ├── afl_harness.c
        │       ├── libFuzzer_harness.cc
        │       └── python_hypofuzz.py
        │
        ├── perf/                              # производительность/бенчмарки
        │   ├── bench_prover.py
        │   ├── bench_verifier.py
        │   ├── bench_poseidon.py
        │   ├── bench_merkle.py
        │   └── baseline/
        │       └── 2025-08-29.json            # эталонные показатели
        │
        ├── security/                          # тесты безопасности
        │   ├── test_constant_time.py          # отсутствие ветвлений по секретам
        │   ├── test_side_channel_timing.py    # тайминг-анализ
        │   ├── test_rng_quality.py            # NIST SP800-90B эвристики
        │   ├── test_entropy_sources.py
        │   └── test_key_management_policies.py
        │
        ├── compliance/                        # соответствие стандартам/векторным наборам
        │   ├── test_kat_vectors.py            # Known-Answer Tests
        │   ├── test_wycheproof_curves.py
        │   ├── test_sp800_56a_kdf.py
        │   ├── test_sp800_108_kdf.py
        │   ├── test_sp800_90a_drbg.py
        │   ├── test_rfc8032_ed25519.py
        │   └── test_rfc6979_deterministic_k.py
        │
        ├── interoperability/                  # межплатформенная совместимость
        │   ├── test_circom_artifacts.py
        │   ├── test_snarkjs_compat.py
        │   ├── test_ethereum_verifier_contract.py
        │   ├── test_solana_verifier_program.py
        │   └── test_ton_verifier_contract.py
        │
        ├── mocks/                             # двойники и подмены
        │   ├── __init__.py
        │   ├── mock_rng.py
        │   ├── mock_storage.py
        │   └── mock_network.py
        │
        └── tools/                             # вспомогательные утилиты
            ├── generate_vectors.py            # генерация тест-векторов
            ├── check_coverage.py              # анализ покрытия
            ├── dump_proofs.py                 # декодирование пруфов
            └── visualize_merkle.py            # визуализация дерева/путей

└── core-systems/platform-security-core/
  anon-privacy/
    communications/
      secure-messenger/
        protocol/
        transport/
        storage/
        identity/
        api/
        tests/
        README.md




