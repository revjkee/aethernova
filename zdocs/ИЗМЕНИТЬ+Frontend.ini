1. Отсутствие types/ или общего декларативного слоя
Проблема:
Нет централизованного места для типов, интерфейсов, контрактов.
Типы разбросаны по разным фичам.

Решение:
Добавить:

ts
Копировать
Редактировать
src/shared/types/
├── api.ts
├── models.ts
└── index.ts
2. Отсутствует alias-настройка (@app/, @shared/, @features/ и т.д.)
Проблема:
Все импорты вида ../../../ — быстро ломаются, не маштабируются.

Решение:

В vite.config.ts и tsconfig.json настроить алиасы:

ts
Копировать
Редактировать
// vite.config.ts
resolve: {
  alias: {
    '@app': '/src/app',
    '@shared': '/src/shared',
    '@features': '/src/features',
    '@pages': '/src/pages',
  }
}
3. Внутри shared/ отсутствует ui/ слой
Проблема:
Компоненты UI и утилиты находятся в одной папке components/.

Решение:
Разделить:

bash
Копировать
Редактировать
shared/
├── ui/               # Кнопки, иконки, inputs, layouts
├── utils/            # dateFormat, validators, etc.
└── config/
4. Отсутствует entities/ слой
Проблема:
Фичи типа agents, payments содержат не только бизнес-логику, но и сущности.

Решение:
Ввести слой entities/:

bash
Копировать
Редактировать
src/entities/
├── Agent/
├── User/
└── Payment/
Каждая сущность содержит API, модели, компоненты, типы, slice (если нужно).

5. features/ содержит слишком широкую бизнес-логику (например, payments)
Проблема:
payments/ может содержать и методы оплаты, и обработку чеков, и отображение баланса. Это 3 фичи, а не одна.

Решение:
Разделить:

bash
Копировать
Редактировать
features/
├── payments/
├── invoices/
└── balance/
6. Нет структуры работы с формами
Проблема:
Работа с формами (formik/zod/react-hook-form) не вынесена в общий слой, нет formFactory или formAdapters.

Решение:
В shared/forms/:

bash
Копировать
Редактировать
shared/forms/
├── useFormAdapter.ts
├── validators/
├── schemas/
7. Нет lib/ или kernel/ как хранилища core-функций
Проблема:
Повторяемые функции (например debounce, mergeDeep, createUUID) раскиданы по проекту.

Решение:
Добавить:

bash
Копировать
Редактировать
shared/lib/
├── debounce.ts
├── uuid.ts
├── objectTools.ts
8. Нет layout/ и theme/ структуры — всё в app/
Проблема:
Темы, layout-компоненты (Header, Sidebar, AppShell) смешаны с роутингом.

Решение:
Выделить:

bash
Копировать
Редактировать
shared/layout/
shared/theme/
9. Нет разделения на мобильные/десктоп компоненты
Проблема:
Если проект кроссплатформенный, должны быть адаптивные компоненты с HOC/условиями.

Решение:
Ввести shared/ui/Button/ с подкаталогами:

bash
Копировать
Редактировать
shared/ui/Button/
├── Mobile.tsx
├── Desktop.tsx
└── index.tsx
Готовая дополнительная структура (расширение FSD)
bash
Копировать
Редактировать
src/
├── app/
├── shared/
│   ├── ui/
│   ├── utils/
│   ├── lib/
│   ├── forms/
│   ├── types/
│   ├── config/
│   ├── layout/
│   └── theme/
├── entities/
│   ├── Agent/
│   ├── Payment/
│   └── User/
├── features/
│   ├── payments/
│   ├── invoices/
│   └── balance/
├── widgets/
├── pages/




genius-core/
├── intent_resolver.py         # выбор доминирующего намерения
├── agent_governor.py          # контроль и иерархия агентов
├── contradiction_checker.py   # выявление логических конфликтов между модулями






performance-monitoring/, platform_ops/, platform_security/

plugins/, predictive-maintenance/ или pq_tests/




airdrop-manager/
├── contracts/
│   ├── AirdropManager.sol     !         # Главный контракт управления
│   ├── MerkleDistributor.sol     !     # Распределение с проверкой по MerkleRoot
│   ├── ParticipationOracle.sol     !   # DAO-оценка активности (zk+offchain)
│   └── interfaces/
│       ├── IVerifier.sol    !
│       └── IParticipationOracle.sol  !

├── scripts/
│   ├── deploy_airdrop.ts          !    # Деплой менеджера + корней
│   ├── generate_merkle_tree.ts    !    # Генерация и валидация дерева
│   └── claim_simulator.ts       !      # Проверка/тест реквестов

├── data/
│   └── claims_round1.json    !         # Индексированные eligible адреса

└── test/
    ├── AirdropManager.t.sol
    └── MerkleDistributor.t.sol




zk-identity/
├── circuits/
│   ├── zk_identity.circom       !        # Основной circuit (identity commitments, nullifiers)
│   ├── zk_identity_input.json   !        # Пример входов: identityTrapdoor, nullifier, Merkle path
│   ├── circuit_constants.json   !       # Размер дерева, уровни, фиксированные параметры
│   ├── compile.sh               !        # Шаги: circom → r1cs → zkey → verifier
│   ├── setup.sh                 !        # Powers of Tau и zkey инициализация
│   ├── verifier_groth16.zkey            # Ключ для Groth16
│   ├── verifier_plonk.zkey              # Альтернативный proving key (PLONK)
│   └── README.md                        # Документация схемы, входов и trusted setup

├── contracts/
│   ├── ZkIdentity.sol            !       # Контракт Semaphore-совместимый
│   ├── ZkIdentityStorage.sol      !      # Логика хранения коммитов
│   ├── VerifierGroth16.sol        !     # Верификатор для Groth16
│   ├── VerifierPlonk.sol           !    # Верификатор для PLONK
│   └── interfaces/
│       ├── IZkIdentity.sol   !
│       └── IVerifier.sol   !

├── test/
│   ├── ZkIdentity.test.ts       !       # Тесты: регистрация, генерация доказательства, верификация
│   ├── MerkleUtils.test.ts      !       # Проверка дерева, вставки и маршрутов
│   ├── Fixtures.ts              !       # Преднастроенные identities, дерева и inputs
│   └── utils.ts                 !       # Функции генерации prf, hash, inputs

├── scripts/
│   ├── generate_proof.ts        !       # Offchain proof generation (Groth16, snarkjs)
│   ├── verify_proof.ts          !       # Проверка proof локально
│   ├── deploy_identity.ts       !       # Деплой смарт-контракта
│   └── register_identity.ts     !       # Регистрация нового identity

├── integrations/
│   ├── telegram_zk_adapter.ts    !      # Вход через Telegram и создание identity
│   └── wallet_connect_proof.ts   !      # Генерация proof на основе wallet session

├── ci/
│   ├── test-circuits.yml        !       # GitHub CI: проверка компиляции схем
│   └── test-contracts.yml       !       # GitHub CI: тесты и деплой в Hardhat

├── docs/
│   ├── architecture.md                 # Архитектура: ZK → EVM → Auth
│   ├── usage.md                        # Как использовать с wallet, Telegram, DAO
│   └── protocol_flow.png               # Диаграмма взаимодействия

├── .gitignore                   ! 
└── README.md






hr_ai/
├── intake/
│   ├── cv_parser.py             !
│   ├── skill_matcher.py         !
│   ├── semantic_matcher.py      !
│   └── intake_pipeline.yaml     !

├── prediction/
│   ├── performance_model.py     !
│   ├── predictor_service.py     !
│   ├── retraining_loop.py       !
│   └── feature_engineering.py   !

├── comms/
│   ├── dialog_agent.py          !
│   ├── softskills_estimator.py  ! 
│   ├── language_localizer.py    !
│   └── ethics_filter.py         !

├── governance/
│   ├── ideal_candidate_generator.py    !
│   ├── team_fit_analyzer.py            !
│   ├── policy_rules.yaml               !
│   └── decision_explainer.py           !

├── dashboard/
│   ├── dashboard.tsx                   !
│   ├── funnel_view.tsx                 !
│   ├── diversity_tracker.tsx           !
│   └── live_analytics.tsx              !
├── audit/
│   ├── logs.db    !
│   ├── anomaly_guard.py    !
│   └── bias_auditor.py     !

├── config/
│   ├── weights.json        !
│   ├── pipeline.yaml       !
│   └── access_matrix.yaml  !

├── db/                                 # NEW
│   ├── models.py                   !    # SQLAlchemy/Pydantic модели кандидатов и вакансий
│   ├── candidate_store.py          !    # CRUD-профили кандидатов
│   └── job_postings.py             !    # Работа с вакансиями

├── security/                           # NEW
│   ├── auth_service.py             !    # Авторизация через JWT/Session
│   ├── rbac_checker.py             !    # Проверка разрешений
│   └── secrets_manager.py          !    # Безопасная работа с ключами и токенами

├── integrations/                       # NEW
│   ├── job_board_api.py           !     # Публикация на внешних платформах (LinkedIn/HH)
│   ├── interview_scheduler.py     !     # Планирование через календарь
│   └── export_to_hris.py          !     # Выгрузка данных в HRIS-систему

├── feedback/                           # NEW
│   ├── hr_labels.py               !     # Метки от HR (оценка, статус, причины)
│   └── feedback_collector.py      !     # Сбор данных для обучения моделей

└── tests/
    ├── test_parser.py             !
    ├── test_predictor.py          !
    ├── test_governance.py         !
    ├── test_bot_comms.py          !
    ├── test_auth.py               !      # NEW
    ├── test_db_models.py          !     # NEW
    └── test_integrations.py       !     # NEW





did_integration.py — ✅ хорошее начало. Совет: добавить ZK-интеграцию через Semaphore.  !

governance_rules_engine.py — очень важно для XAI-респонсов.   !

zk_voting.py — если ты используешь circom — желательно вынести proofs отдельно.  !

voting_rules.json — можно расширить до политики с весами голосов NFT, reputation и $NEURO.

metadata_schema.json — нужно добавить "proof_level": "zk-snark" | "open"

metadata_template.json — шаблон можно связать с NFT-профилем агента


governance.sol — ✅ ядро

token_contract.sol — ERC20 или ERC777 — проверь на поддержку permit (EIP-2612)

nft_marketplace.sol — стоит разбить на:

NFT Identity (soulbound)

NFT Utility (торговые, игровые)



 zkp-layers/
private_nft.circom — важно проверить на reveal-proof unlinkability

treasury_allocator.py — критичный AI-модуль: делегирование бюджета DAO через эвристику/голосование

🧠 Что добавить (рекомендуется):
1. gasless-voting/
Поддержка подписей с Relayer (EIP-712) → экономия газа DAO-участников

2. zk-identity/
Отдельный zk_identity.circom и .sol — минимальный идентификатор на основе Merkle tree и Semaphore

3. airdrop-manager/
Контракты и скрипты для DAO-наград: airdrop по участию, голосованию, активности   !

4. bridging/
Модуль bridge/ton_bridge.sol — интеграция TON и zkVM (для TON-пользователей)   !

onchain/neuro_token/contracts/

NEUROToken.sol — основной ERC-20 (добавить symbol, permit, burn)  ! 

TokenMinter.sol — интерфейс для AI-модулей генерации  !

GovernanceModule.sol — исполнение решений DAO  !

SupplyController.sol — адаптивная инфляция через AI (напр. RL или KPI-based)  !


 SupplyController → AI-регулируемый минтинг через Webhook или oracle  !
  
 DAO-модуль голосования через GovernanceModule   !

 Web3Modal / RainbowKit для подключения кошельков   !

 NFT-доступ к панели по soulbound-токену




src/
├── app/ 
│   ├── router.tsx        !
│   └── App.tsx           !

├── pages/
│   ├── HomePage.tsx      !
│   ├── HRDashboard.tsx    !
│   ├── AgentControl.tsx   !
│   ├── GovernancePanel.tsx   !
│   ├── ZKVoteInterface.tsx   !
│   ├── DIDManager.tsx        ! 
│   ├── AnomalyTracker.tsx    !
│   ├── XAIInspector.tsx      !
│   ├── SystemMonitor.tsx     !
│   ├── TokenStatsView.tsx    !
│   ├── TreasuryFlow.tsx      !
│   ├── WorldEditor.tsx       !
│   ├── Game3DView.tsx        !         # NEW: three.js-сцена
│   ├── MarketplaceView.tsx   !
│   ├── MarketplaceAdmin.tsx  !
│   ├── StudentTracker.tsx    !
│   ├── KeyVaultDashboard.tsx !
│   ├── PrivacyStatus.tsx     !
│   ├── EthicsAnalyzer.tsx    !
│   ├── IntelDashboard.tsx    !
│   ├── LogsExplorer.tsx      !
│   ├── LatencyStats.tsx      ! 
│   ├── LLMOpsMonitor.tsx     !
│   ├── QuantumLabPanel.tsx   !
│   ├── CoreSystemsDashboard.tsx  !
│   ├── DAOGovernance.tsx         !
│   ├── BehavioralAnalytics.tsx   !
│   ├── SecurityOverview.tsx      !
│   ├── PluginManager.tsx         !
│   ├── CTFConsole.tsx            !
│   ├── CapletController.tsx      !
│   ├── ExploitManager.tsx        !
│   ├── TelegramAdmin.tsx         !
│   ├── ThreatSimPanel.tsx        !
│   ├── AIOverrideDashboard.tsx   !
│   ├── AuditMatrix.tsx           !
│   ├── AgentSentinel.tsx         !
│   ├── DeploymentHub.tsx         !
│   ├── EthicsControlPanel.tsx    !
│   ├── CrisisSimulator.tsx       !
│   ├── StrategicIntel.tsx        !

src/
├── widgets/
│   ├── HR/
        ├── ApplicantListWidget.tsx       !        # Виджет списка заявок
        ├── CandidateProfileCard.tsx      !        # Карточка профиля кандидата
        ├── CompetencyMatrixChart.tsx     !        # Граф оценки компетенций
        ├── TeamInsightsWidget.tsx        !        # Визуализация команды и ИИ-аналитики
        ├── AIInterviewFeedback.tsx       !        # Модуль AI-фидбека по интервью
        ├── HRQuickActionsPanel.tsx       !        # Быстрые действия HR (принять, отклонить, вызвать)
        ├── AgentAssignmentWidget.tsx     !        # Привязка AI-наставника или ревьюера
        ├── SkillRadarGraph.tsx           !        # Radar-граф навыков
        ├── PersonalityDiagnosticsPanel.tsx  !      # Анализ психопрофиля кандидата
        ├── ApplicantTimelineView.tsx        !     # Хронология взаимодействий
        ├── HRKPIWidget.tsx                  !     # Метрики HR эффективности
        ├── BackgroundCheckStatus.tsx        !     # Статус проверки background
        ├── PolicyComplianceIndicator.tsx    !     # Индикатор соблюдения политики
        ├── HRPrivacyStatusBadge.tsx         !     # Статус приватности кандидата
        ├── EthicsCompatibilityView.tsx      !    # Совместимость с AI-этическими стандартами
        ├── SalaryRangeVisualizer.tsx        !     # График диапазона зарплат
        ├── RoleFitPredictor.tsx             !     # Предсказание соответствия роли
        ├── CandidateRankIndicator.tsx       !     # Рейтинг по модели отбора
        ├── OnboardingReadiness.tsx          !     # Готовность к онбордингу
        ├── AccessClearanceLevelView.tsx     !     # Уровень доступа кандидата
        ├── AnomalyFlagMarker.tsx            !     # Маркер аномалий в поведении/данных
        ├── HRReviewCommentBox.tsx           !     # Блок комментариев от HR
        ├── CultureMatchWidget.tsx           !    # Совпадение с корпоративной культурой
        ├── Candidate360Overview.tsx         !     # Панорамный обзор кандидата
        ├── ReferralInfoTag.tsx              !     # Информация о реферале
        ├── WidgetLoader.tsx                 !     # Динамическая загрузка HR-виджетов (общая точка входа)
        └── index.ts                         !     # Централизованный экспорт всех виджетов

│   ├── Agents/
        ├── AgentActivityChart.tsx           !       # Граф активности агента (по времени/типам задач)
        ├── AgentAvatarCard.tsx              !       # Визуальная карточка агента с аватаром
        ├── AgentPerformanceWidget.tsx       !       # KPI-панель агента (успешность, отклонения)
        ├── AgentBehaviorMonitor.tsx         !       # Виджет поведения: отклонения, импульсы
        ├── AgentTrustScore.tsx              !       # Уровень доверия к агенту (AI-based)
        ├── AgentEnergyUsage.tsx             !       # Энергопрофиль и нагрузка агента
        ├── AgentMemoryUsage.tsx             !       # Использование памяти и логов
        ├── AgentGovernanceStatus.tsx        !       # Статус подчинённости агенту-наставнику
        ├── AgentRoleTag.tsx                 !       # Отображение роли агента (observer, planner и т.д.)
        ├── AgentOverrideFlag.tsx            !       # Индикатор вручную переопределённых действий
        ├── AgentLogSnippet.tsx              !       # Последние действия и логи
        ├── AgentEthicsCompliance.tsx        !       # Статус соответствия этическому ядру
        ├── AgentDecisionLatency.tsx         !       # Задержка принятия решений
        ├── AgentRLModeStatus.tsx            !       # Индикатор RL/Simulation режима
        ├── AgentAnomalyBadge.tsx            !       # Знак аномалий (флаг + описание)
        ├── AgentZKVerifiedTag.tsx           !       # Проверка через Zero-Knowledge доказательства
        ├── AgentExecutionPreview.tsx        !       # Предпросмотр следующего действия
        ├── AgentAssignmentBox.tsx           !       # Привязка агента к задаче/пользователю
        ├── AgentIntentGraph.tsx             !       # Граф намерений (AI-логика целей)
        ├── AgentConsciousnessTrace.tsx      !       # Последовательность reasoning (XAI визуализация)
        ├── AgentLoadBalancerIndicator.tsx   !       # Метка нагрузочной балансировки агента
        ├── AgentRuntimeModeTag.tsx          !       # Текущий режим работы (active, idle, sandboxed)
        ├── AgentShutdownControl.tsx         !       # Виджет отключения/заморозки агента
        ├── AgentUpdateStatus.tsx            !       # Статус обновления ядра/алгоритма
        ├── AgentUptimeClock.tsx             !       # Аптайм агента (часы/дни)
        ├── AgentPersonaEditor.tsx           !       # Виджет редактирования "личности" или prompt-набора
        ├── AgentForkButton.tsx              !       # Кнопка форка/клонирования агента
        ├── AgentNetworkMap.tsx              !       # Связи между агентами (граф взаимодействий)
        ├── WidgetLoader.tsx                 !       # Централизованный загрузчик всех виджетов (lazy)
        └── index.ts                         !       # Индексный файл экспорта всех компонентов
(CSS)????????


│   ├── Governance/
        ├── GovernanceOverviewPanel.tsx        !css         # Общая панель статуса управления
        ├── ProposalListWidget.tsx             !css         # Список предложений с фильтрацией
        ├── ProposalDetailsView.tsx            !css         # Просмотр деталей предложения
        ├── VoteResultChart.tsx                !css         # Диаграмма результатов голосования
        ├── VoteActionButtons.tsx              !css         # Кнопка: голосовать
        ├── VoterEligibilityBadge.tsx          !css         # Метка допустимости голоса (по токенам, DAO, KYC)
        ├── ZKVoteVerifier.tsx                 !         # Zero-Knowledge proof-проверка голосов
        ├── DelegateListWidget.tsx             !         # Список делегатов и их мандатов
        ├── DelegateActivityChart.tsx          !         # График активности делегатов
        ├── DelegateTrustScore.tsx             !         # Оценка надёжности/этики делегата
        ├── GovernanceTimeline.tsx             !         # Хронология всех действий в DAO
        ├── GovernanceKPIWidget.tsx            !         # Метрики DAO: активность, влияние, ценность
        ├── TreasuryImpactGraph.tsx            !         # Влияние решений на токеномику
        ├── ProposalImpactForecast.tsx         !         # AI-предсказание последствий предложения
        ├── QuorumStatusIndicator.tsx          !         # Информер кворума и условий легитимности
        ├── VoteIntegrityStatus.tsx            !         # ИИ-оценка аномалий в голосовании
        ├── GovernanceComplianceChecker.tsx    !         # Проверка соответствия уставу/этике
        ├── ProposalCreatorPanel.tsx           !         # UI создания предложения (фаза, привязка, AI-хинты)
        ├── MultiChainVoteBridgeStatus.tsx     !         # Мостовое голосование в мультичейн DAO
        ├── AgentGovernanceHeatmap.tsx         !         # Тепловая карта влияния агентов на решения
        ├── EthicsApprovalMeter.tsx            !         # Этический допуск предложения (AI filter)
        ├── VoterReputationIndicator.tsx       !         # Репутация голосующих по системе баллов
        ├── PolicyAmendmentTracker.tsx         !         # Отслеживание изменений в политике DAO
        ├── DAOHealthScoreWidget.tsx           !         # Интегральный показатель здоровья DAO
        ├── GovernanceActionLog.tsx            !         # Журнал всех действий по управлению
        ├── ProposalVotingCountdown.tsx        !         # Таймер до окончания голосования
        ├── VotingModeSelector.tsx             !         # Переключение между голосовыми/делегатными/AI режимами
        ├── ConstitutionReferencePanel.tsx     !         # Быстрый доступ к своду DAO-положений
        ├── DAOEmergencyActionsPanel.tsx       !         # UI для экстренных действий (AI+человеческий протокол)
        ├── ProposalSimulationPreview.tsx      !         # AI-просмотр последствий (sandbox execution)
        ├── GovernanceNotificationBadge.tsx    !         # Индикатор новых событий/тревог
        ├── ConsensusThresholdVisualizer.tsx   !         # Визуализация порогов консенсуса
        ├── ProposalStakeRequirement.tsx       !         # Показывает требуемый stake для инициирования
        ├── WidgetLoader.tsx                   !         # Динамический загрузчик Governance-компонентов
        └── index.ts                           !         # Центральный экспорт всех Governance-виджетов

│   ├── Voting/
        ├── VotingPanel.tsx                 !        # Главная панель интерфейса голосования
        ├── BallotList.tsx                  !        # Список доступных бюллетеней
        ├── VoteCastButton.tsx              !        # Кнопка голосования
        ├── VoteRevokeButton.tsx            !        # Кнопка отзыва голоса
        ├── VoterStatusCard.tsx             !        # Карточка статуса избирателя
        ├── VotingEligibilityIndicator.tsx  !        # Допуск к голосованию (по токену, KYC, DAO)
        ├── VoteTallyProgress.tsx           !        # Прогресс подсчёта голосов
        ├── VoteBarChart.tsx                !        # Графическое отображение голосов
        ├── ZKProofVerifier.tsx             !        # Проверка голосов через Zero-Knowledge
        ├── VotingCountdownTimer.tsx        !        # Таймер окончания голосования
        ├── VoterWeightCalculator.tsx       !        # Расчёт веса голоса по токенам/правам
        ├── DelegatedVoteStatus.tsx         !        # Отображение делегированного голоса
        ├── VoteHistoryViewer.tsx           !        # История голосований пользователя
        ├── ProposalBallotSummary.tsx       !        # Резюме голосования по конкретному предложению
        ├── AIResultPrediction.tsx          !       # AI-прогноз результата на основе текущих данных
        ├── VoterReputationScore.tsx        !       # Индикатор репутации голосующего
        ├── VoteImpactRadar.tsx             !        # Оценка системного воздействия результатов
        ├── AnonymousVoteToggle.tsx         !        # Переключатель анонимного голосования
        ├── VotingIntegrityWarning.tsx      !        # Предупреждение о нарушениях
        ├── AbstainVoteButton.tsx           !        # Кнопка "воздержаться"
        ├── VotingAccessDenied.tsx          !        # Страница блокировки голосования
        ├── AgentVoteTag.tsx                !        # Индикатор голосов от ИИ-агентов
        ├── VoteConfirmationModal.tsx       !        # Подтверждение перед отправкой голоса
        ├── LiveVoteFeed.tsx                !        # Live-поток голосов (обновление в реальном времени)
        ├── EmergencyVoteAlert.tsx          !        # Информер экстренного голосования (при угрозе)
        ├── ConstitutionReferenceLink.tsx   !       # Быстрый доступ к уставу перед голосованием
        ├── VotingSimulationPreview.tsx     !        # Симуляция исхода (AI + sandbox)
        ├── VoterRightRevocationWarning.tsx !      # Уведомление об аннулировании прав
        ├── VoteAuditLogSnippet.tsx         !        # Фрагмент логов голосования
        ├── VoteConsensusStatus.tsx         !        # Текущий статус достижения консенсуса
        ├── VotingMethodSelector.tsx        !        # UI выбора метода голосования (DAO, токен, NFT)
        ├── ReVoteOpportunityAlert.tsx      !        # Уведомление о повторной возможности голосования
        ├── VoteAnomalyFlag.tsx             !        # Флаг аномального поведения
        ├── WidgetLoader.tsx                !        # Lazy loader всех Voting-виджетов
        └── index.ts                        !        # Центральный экспорт

│   ├── XAI/
        ├── XAIInsightPanel.tsx             !            # Главная панель объяснений
        ├── DecisionTraceTree.tsx           !             # Дерево reasoning агента (AI→Action)
        ├── CounterfactualExplorer.tsx      !             # Контрфактический анализ: "что если"
        ├── AttentionMapViewer.tsx          !             # Отображение внимания модели (NLP/vision)
        ├── TokenAttributionHeatmap.tsx     !             # Карта влияния токенов (для LLM)
        ├── AgentIntentionVisualizer.tsx    ! + 2 вспом. # Отображение намерений агента
        ├── ExplanationConfidenceMeter.tsx  !             # Индикатор надёжности объяснения
        ├── ExplainabilityScoreBadge.tsx    !             # XAI-оценка модуля
        ├── RuleChainViewer.tsx             !             # Отображение цепочки логических правил
        ├── XAIRationaleOverlay.tsx         !             # Всплывающие комментарии к решению AI
        ├── TrustworthinessGauge.tsx        !             # Оценка доверия к конкретному выводу
        ├── XAIModelSelector.tsx            !             # Переключатель между XAI-фреймворками (SHAP, LIME и т.д.)
        ├── ExplanationTimeline.tsx         !             # История объяснений по времени
        ├── AgentCausalChain.tsx            !             # Причинно-следственная цепочка
        ├── XAISandboxSimulator.tsx         !             # Симуляция решений модели с интерпретацией
        ├── ZKExplainVerifier.tsx           !             # Zero-Knowledge доказательство корректности объяснения
        ├── ExplanationDeltaViewer.tsx      !             # Сравнение объяснений разных версий модели
        ├── DecisionHighlightMap.tsx        !             # Визуальная карта ключевых факторов выбора
        ├── AgentBiasInspector.tsx          !             # UI выявления и объяснения bias в действиях ИИ
        ├── LayerActivationPlot.tsx         !             # График активаций слоёв модели
        ├── ExplanationExportPanel.tsx      !             # Выгрузка объяснений для аудита
        ├── EthicalJustificationBox.tsx     !             # Этическое обоснование (интеграция с ethics-core)
        ├── ActionTransparencyBadge.tsx     !             # Значок прозрачности принятого действия
        ├── InfluenceGraphViewer.tsx        !             # Граф влияния факторов и данных
        ├── ExplanationValidator.tsx        !             # Валидатор XAI по утверждённым правилам
        ├── ExplainabilityComplianceTag.tsx !             # Тег XAI-комплаенса (по стандарту ISO/IEEE)
        ├── ExplanationWatchlist.tsx        !             # Монитор подозрительных/тревожных объяснений
        ├── RealTimeExplanationFeed.tsx     !             # Live-канал XAI-объяснений
        ├── CausalImpactMeter.tsx           !             # Метрика причинного влияния каждого параметра
        ├── MultimodalExplanationCombiner.tsx    !        # Объединение XAI из vision, text, logic
        ├── TransparentPolicyRenderer.tsx        !        # Интерпретируемое отображение policy-правил RL-агентов
        ├── XAIUserOverrideNotice.tsx            !        # Уведомление: пользователь переопределил AI-решение
        ├── TraceabilityChainViewer.tsx          !        # Сквозной trace ID от запроса до действия
        ├── XAIIntentComparator.tsx              !        # Сравнение намерений агентов перед выбором
        ├── WidgetLoader.tsx                     !        # Lazy-loader XAI компонентов
        └── index.ts                             !        # Экспорт всех XAI-виджетов

│   ├── Vault/
        ├── VaultAccessPanel.tsx                 !     # Главная панель доступа к хранилищу
        ├── KeyListView.tsx                      !     # Список всех ключей (с фильтрами и ролями)
        ├── SecretInspector.tsx                  !     # Просмотр и дешифровка секретов (в пределах разрешений)
        ├── VaultUsageGraph.tsx                  !    # График использования хранилища
        ├── VaultSearchBar.tsx                   !     # Поиск по ключам, ID, метаданным
        ├── VaultCreateKeyModal.tsx              !     # Модалка генерации нового ключа
        ├── VaultDeleteConfirmation.tsx          !     # Подтверждение удаления ключа/секрета
        ├── SecretVersionHistory.tsx             !     # История версий зашифрованных данных
        ├── VaultEncryptionStatus.tsx            !     # Индикатор статуса шифрования
        ├── VaultAuditLogView.tsx                !     # Просмотр действий пользователей/агентов с ключами
        ├── KeyMetadataEditor.tsx                !     # UI для редактирования метаданных ключей
        ├── VaultRoleAssignment.tsx              !     # Привязка ролей и прав к ключам/папкам
        ├── GPGSignatureManager.tsx              !    # Управление GPG-подписями
        ├── VaultAccessRequestModal.tsx          !     # Заявка на доступ к секретам
        ├── KeyRotationScheduler.tsx             !     # Планировщик автоматической ротации ключей
        ├── VaultSyncStatus.tsx                  !     # Состояние синхронизации с backend
        ├── VaultPolicyViewer.tsx                !     # Визуализатор политик доступа
        ├── VaultZKProofVerifier.tsx             !     # Проверка ZK-доказательств при доступе
        ├── VaultAccessGraph.tsx                 !     # Граф прав и их связей
        ├── VaultTokenGenerator.tsx              !     # Генерация временных токенов доступа
        ├── AgentKeyUsageTrace.tsx               !     # Где и как AI-агенты использовали ключи
        ├── VaultContextMenu.tsx                 !     # Контекстное меню управления объектами
        ├── VaultSecurityLevelBadge.tsx          !     # Отображение уровня защищённости объекта
        ├── EncryptedBlobPreview.tsx             !     # Просмотр бинарных зашифрованных данных
        ├── KeySharingLinkModal.tsx              !     # UI генерации ссылок на безопасный обмен ключами
        ├── VaultZeroAccessViewer.tsx            !     # Логи и действия при политике Zero Access
        ├── HSMIntegrationBadge.tsx              !     # Поддержка HSM-модулей (при наличии)
        ├── VaultTagManager.tsx                  !     # Управление тегами (классификация ключей)
        ├── VaultComplianceIndicator.tsx         !     # Отображение соответствия стандартам (FIPS, ISO)
        ├── VaultAnomalyDetector.tsx             !     # AI-детектор подозрительных действий с ключами
        ├── VaultBackupManager.tsx               !     # Менеджер создания и восстановления бэкапов
        ├── VaultSnapshotComparator.tsx          !     # Сравнение двух состояний хранилища
        ├── VaultWidgetLoader.tsx                !     # Lazy-loader компонентов
        └── index.ts                             !     # Централизованный экспорт компонентов


│   ├── Monitoring/
        ├── SystemOverviewPanel.tsx             !       # Главная панель мониторинга
        ├── AgentStatusGrid.tsx                 !       # Сетка статусов всех AI-агентов
        ├── NodeHealthMeter.tsx                 !       # Здоровье вычислительных нод
        ├── DataFlowTracker.tsx                 !       # Визуализация потоков данных (input/output)
        ├── LatencyMap.tsx                      !       # Карта задержек по системам
        ├── RealtimeLogViewer.tsx               !       # Логгирование в реальном времени
        ├── AgentHeartbeatIndicator.tsx         !       # Пульс/жизнь агента
        ├── AlertNotificationPanel.tsx          !       # Панель системных уведомлений
        ├── AnomalyEventFeed.tsx                !       # Live-фид обнаруженных аномалий
        ├── SecurityThreatMonitor.tsx           !       # Виджет мониторинга угроз
        ├── SystemUsageDashboard.tsx            !       # Общая панель загрузки ресурсов
        ├── MemoryConsumptionChart.tsx          !       # График потребления памяти
        ├── CPULoadDistribution.tsx             !       # CPU нагрузка по нодам
        ├── NetworkIOGraph.tsx                  !       # График сетевого трафика
        ├── GPUUsageHeatmap.tsx                 !       # Интенсивность загрузки GPU
        ├── AgentErrorTrace.tsx                 !       # Отображение ошибок и стеков агентов
        ├── LogSeverityFilter.tsx               !       # Фильтр по уровням логов
        ├── IncidentTimeline.tsx                !       # Хронология инцидентов
        ├── DowntimeTracker.tsx                 !       # История и графы простоев
        ├── SLAComplianceGauge.tsx              !       # Индикатор соответствия SLA
        ├── HealthStatusBadge.tsx               !       # Значки статуса подсистем
        ├── ServiceDependencyMap.tsx            !       # Граф зависимостей микросервисов
        ├── RealtimeMetricsChart.tsx            !       # Графики времени выполнения / IO
        ├── LogSearchAutocomplete.tsx           !       # Умный поиск по логам
        ├── AlertSeverityDashboard.tsx          !       # Панель критичности событий
        ├── AIActionAuditTrail.tsx              !      # Журнал AI-действий
        ├── AgentRuntimeState.tsx               !      # Текущая фаза исполнения каждого агента
        ├── PredictiveFailureRadar.tsx          !       # AI-прогноз сбоев
        ├── LogCorrelationInspector.tsx         !       # Поиск взаимосвязей между логами
        ├── ThreatActorTraceMap.tsx             !       # Граф трассировки возможных атакующих
        ├── ZeroTrustAlertIndicator.tsx         !       # Интеграция с Zero-Trust системой
        ├── TelemetryDecoder.tsx                !       # Дешифровка нестандартных метрик
        ├── MetricAggregationSelector.tsx       !       # UI выбора агрегации
        ├── HeatSignatureMap.tsx                !       # Тепловая карта аномалий
        ├── EventPatternRecognizer.tsx          !       # Обнаружение паттернов по событиям
        ├── AIBehaviorMonitor.tsx               !      # Поведенческий трекер AI
        ├── WatchdogOverridePanel.tsx           !       # Вмешательство надзора
        ├── MultiAgentSyncViewer.tsx            !       # Монитор синхронности агентов
        ├── AlertMuteControl.tsx                !       # Управление приглушением оповещений
        ├── MetricReplaySlider.tsx              !       # Воспроизведение по времени
        ├── DeepSystemTraceExplorer.tsx         !       # Полный трассировщик исполнения
        ├── InternalBusMonitor.tsx              !       # Визуализация внутренних очередей и событий
        ├── MetricDriftAnalyzer.tsx             !       # Анализ отклонения метрик
        ├── MonitoringWidgetLoader.tsx          !       # Lazy-loader всех компонентов
        └── index.ts                            !       # Централизованный экспорт

│   ├── Marketplace/
        ├── ProductCard.tsx                   !       # Карточка товара (NFT/AI/цифровой/реальный)
        ├── ProductListView.tsx               !       # Основной список товаров
        ├── MarketplaceFilterPanel.tsx        !       # Панель фильтрации и сортировки
        ├── MarketplaceSearchBar.tsx          !       # Строка поиска по названию, тегам, ID
        ├── ProductTagBadge.tsx               !       # Отображение категории, NFT, AI и др.
        ├── ProductDetailModal.tsx            !       # Детальный просмотр товара
        ├── MarketplacePagination.tsx         !       # Пагинация для длинных списков
        ├── MarketplaceLoader.tsx             !       # Лоадер при асинхронной загрузке
        ├── PriceAnalyticsChart.tsx           !       # Анализ цен (динамика, прогноз)
        ├── ProductAvailabilityStatus.tsx     !       # Индикатор наличия
        ├── TokenPaymentButton.tsx            !       # Кнопка оплаты токеном $NEURO
        ├── BuyNowPanel.tsx                   !       # Панель мгновенной покупки
        ├── AddToCartButton.tsx               !       # Кнопка добавления в корзину
        ├── ShoppingCartSidebar.tsx           !       # UI корзины
        ├── CheckoutFlow.tsx                  !       # Модуль оформления заказа
        ├── MarketplaceTransactionStatus.tsx  !       # Отображение статуса onchain-транзакции
        ├── ProductRatingStars.tsx            !       # Система рейтингов/оценок
        ├── UserReviewList.tsx                !       # Список отзывов покупателей
        ├── ReviewSubmissionForm.tsx          !       # Форма оставления отзыва
        ├── MarketplaceAdminControl.tsx       !       # Управление каталогом (admin-only)
        ├── ProductVisibilityToggle.tsx       !       # Переключатель видимости
        ├── ProductModerationFlag.tsx         !       # Метка на модерацию
        ├── DynamicPriceAdjuster.tsx          !       # AI-логика динамического ценообразования
        ├── MarketplaceSubscriptionBadge.tsx  !       # Товар с подпиской
        ├── AIProductTypeIcon.tsx             !       # Значок AI-генерируемого товара
        ├── ProductInventoryEditor.tsx        !      # UI редактирования количества/статуса
        ├── ProductOwnershipBadge.tsx         !       # Информация о владельце (NFT/DAO)
        ├── ProductDigitalDelivery.tsx        !       # UI выдачи цифрового товара (ключи, файлы)
        ├── AIRecommendationsPanel.tsx        !       # Панель рекомендаций (на основе интересов)
        ├── MarketplaceBanner.tsx             !       # Промо-баннер/рекламные места
        ├── PurchaseHistoryTimeline.tsx       !       # История покупок пользователя
        ├── OnchainOfferLink.tsx              !       # Ссылка на смарт-контракт предложения
        ├── MarketplaceZeroFeeBadge.tsx       !       # Отображение нулевой комиссии
        ├── RestrictedProductNotice.tsx       !       # Уведомление о региональных или KYC-ограничениях
        ├── ProductAccessControl.tsx          !       # RBAC-доступ к товарам (например, только VIP)
        ├── ProductCategorySelector.tsx       !       # UI выбора категории при создании
        ├── MarketplaceAIValidatorStatus.tsx  !       # Статус AI-проверки товара
        ├── WalletConnectPrompt.tsx           !       # UI подключения кошелька
        ├── MarketplaceTokenSwapPanel.tsx     !       # UI обмена токенов перед покупкой
        ├── MarketplaceOnboardingTour.tsx     !       # Интерактивный onboarding для пользователей
        ├── MobileMarketplaceToolbar.tsx      !       # Версия тулбара для мобильного UX
        ├── Marketplace3DPreview.tsx          !       # Просмотр 3D-товаров (WebGL/Three.js)
        ├── MarketplaceMultiLangSupport.tsx   !       # Виджет мультиязычной локализации
        ├── MarketplaceDebugPanel.tsx         !       # Панель отладки (для DevOps/Admin)
        ├── index.ts                          !       # Централизованный экспорт всех компонентов

│   ├── Edu/
        ├── CourseCard.tsx                    !      # Отображение краткой информации о курсе
        ├── CourseListView.tsx                !      # Список доступных курсов
        ├── LessonViewer.tsx                  !      # Просмотр уроков (текст/видео/AI)
        ├── LessonProgressTracker.tsx         !      # Трекер прогресса по уроку
        ├── ModuleAccordion.tsx               !      # Сгруппированные модули внутри курса
        ├── QuizInterface.tsx                 !      # Тестирование с выбором, AI-пояснениями
        ├── QuizResultFeedback.tsx            !      # Результат теста + объяснения
        ├── StudentPerformanceChart.tsx       !      # Графики успеваемости по темам
        ├── AIExplanationPanel.tsx            !      # XAI-пояснение ошибки ученика
        ├── AssignmentUploader.tsx            !      # Загрузка заданий
        ├── PeerReviewPanel.tsx               !      # Механизм peer-to-peer оценки
        ├── CourseEnrollmentButton.tsx        !      # Кнопка записаться на курс
        ├── LessonCompletionBadge.tsx         !      # Значок за прохождение
        ├── AIHintButton.tsx                  !      # Получить подсказку от ИИ
        ├── KnowledgeGapRadar.tsx             !      # Радар выявления слабых зон
        ├── HomeworkReviewInterface.tsx       !      # Интерфейс для проверки домашки
        ├── LearningPathSelector.tsx          !      # Выбор траектории обучения
        ├── EduProgressDonutChart.tsx         !      # Кольцевая диаграмма прогресса
        ├── AIAdaptiveLessonPlanner.tsx       !      # Генератор следующих шагов обучения
        ├── AIContentGenerationPanel.tsx      !      # Создание уроков и тестов через ИИ
        ├── StudySessionTimer.tsx             !      # Таймер концентрации
        ├── AIFlashcardGenerator.tsx          !      # Генерация флеш-карт
        ├── LiveSessionJoinButton.tsx         !      # Кнопка входа в прямой эфир
        ├── RecordedSessionPlayer.tsx         !      # Плеер записанных сессий
        ├── StudentNotesEditor.tsx            !      # Встроенный редактор заметок
        ├── MotivationTracker.tsx             !      # Трекинг вовлечённости и мотивации
        ├── AIStudyCompanionChat.tsx          !      # Чат с GPT 4-помощником
        ├── EduCertificateGenerator.tsx       !      # Генерация сертификатов по курсу
        ├── CourseCompletionProgressBar.tsx   !      # Прогресс-бар по курсу
        ├── StudentLeaderboard.tsx            !      # Рейтинг студентов по активности
        ├── TeacherFeedbackPanel.tsx          !      # UI обратной связи преподавателя
        ├── SkillTreeMap.tsx                  !      # Визуализация дерева навыков
        ├── EduNotificationBell.tsx           !      # Уведомления о событиях курса
        ├── AssignmentDeadlineAlert.tsx       !     # Предупреждение о дедлайне
        ├── EduSettingsPanel.tsx              !      # Настройки персонализированного обучения
        ├── ClassroomSelector.tsx             !      # Переключатель между "группами"
        ├── AIQuizGeneratorModal.tsx          !      # Генератор викторин по теме
        ├── EduOfflineSupportHint.tsx         !      # Информация о поддержке офлайн-доступа
        ├── MultilangEduSupport.tsx           !      # Поддержка мультиязычности
        ├── EduXRIntegrationNotice.tsx        !      # Поддержка AR/VR-курсов
        ├── index.ts                          !      # Централизованный экспорт

Game3D/
├── engine/
│   ├── GameInitializer.ts                     # Инициализация движка и сцен
│   ├── SceneManager.ts                        # Управление сценами и переходами
│   ├── GameLoop.ts                            # Главный игровой цикл
│   ├── PerformanceMonitor.ts                  # FPS, лаги, ресурсы
│   └── XRSupport.ts                           # VR/AR совместимость (WebXR API)

├── world/
│   ├── CityBuilder.ts                         # Генерация города AI
│   ├── TerrainManager.ts                      # Поверхность, коллизии
│   ├── WeatherSystem.ts                       # Динамическая погода
│   ├── TimeCycleController.ts                 # День/ночь, часы
│   ├── AIEnvironmentEvents.ts                 # Взаимодействие AI и окружения
│   └── CrisisSimulation.ts                    # Имитации катастроф, кризисов

├── characters/
│   ├── AgentSpawner.ts                        # Появление/управление NPC
│   ├── AvatarController.ts                    # Пользовательский аватар
│   ├── NPCBehaviorGraph.ts                    # Поведение ИИ-агентов (XState/BehaviourTree)
│   ├── EmotionEngine.ts                       # Эмоции, реакции
│   └── SkillInteractionManager.ts             # Навыки и взаимодействия

├── ai/
│   ├── IntentRouter.ts                        # Выбор действия AI
│   ├── MetaGovernor.ts                        # Контроль над AI-группами
│   ├── EthicalAIOverlay.ts                    # Этические ограничения
│   ├── RLAgentTrainer.ts                      # Обучение агентов в симуляции
│   └── AIVisibilityOptimizer.ts               # Оптимизация обработки AI

├── assets/
│   ├── models/
│   │   ├── buildings/
│   │   ├── vehicles/
│   │   ├── agents/
│   │   └── items/
│   ├── textures/
│   └── shaders/

├── ui/
│   ├── GameHUD.tsx                            # Основный интерфейс HUD
│   ├── ActionMenu.tsx                         # Меню взаимодействий
│   ├── CrisisDashboard.tsx                    # Панель управления катастрофами
│   ├── DAOControlPanel.tsx                    # DAO голосование в игре
│   ├── TokenWalletDisplay.tsx                 # Баланс токенов / NFT
│   └── NFTClaimModal.tsx                      # Получение игровых NFT

├── integration/
│   ├── BlockchainEventsHandler.ts             # Game-to-Chain события
│   ├── NFTInventorySync.ts                    # Синхронизация NFT-предметов
│   ├── TokenBurnManager.ts                    # Использование токенов в геймплее
│   └── WebSocketRealtimeUpdates.ts            # События в реальном времени

├── devtools/
│   ├── DebugCameraController.ts               # Свободная камера для дебага
│   ├── SceneInspector.ts                      # Инспекция объектов
│   └── AIBehaviorVisualizer.ts                # Отображение мыслей AI

├── config/
│   ├── gameSettings.ts                        # Глобальные настройки игры
│   ├── assetRegistry.ts                       # Регистрация моделей
│   └── physicsConfig.ts                       # Параметры физики

├── hooks/
│   ├── useSceneLoader.ts                      # Загрузка сцен
│   ├── useXRInput.ts                          # Поддержка XR-контроллеров
│   └── useCrisisTrigger.ts                    # Запуск катастроф по сценарию

├── constants/
│   ├── GameEvents.ts                          # События игры
│   ├── CrisisTypes.ts                         # Типы кризисов
│   └── WorldConfig.ts                         # Параметры мира

└── index.ts                                   # Централизованный экспорт

│   ├── Privacy/
        ├── PrivacyStatusIndicator.tsx       !       # Иконка-индикатор состояния приватности
        ├── PrivacyLevelSelector.tsx         !       # Выпадающий список выбора уровня конфиденциальности
        ├── SessionPrivacyToggler.tsx        !       # Включение/отключение слежения сессии
        ├── AIPrivacyRiskAlert.tsx           !       # Предупреждение ИИ о рисках утечки данных
        ├── PrivacySettingsPanel.tsx         !       # Центральная панель всех настроек
        ├── DeviceAccessManager.tsx          !       # UI-менеджер разрешений устройствам
        ├── DataRetentionTimer.tsx           !      # Таймер хранения пользовательских данных
        ├── ConsentManager.tsx               !      # Управление пользовательскими согласиями
        ├── ThirdPartyTrackerBlocker.tsx     !       # Блокировщик сторонних трекеров
        ├── GeoPrivacyControl.tsx            !       # Управление геолокацией
        ├── PrivacyBadgeDisplay.tsx          !       # Отображение значков конфиденциальности (например, "Do Not Track")
        ├── EncryptedSessionInfo.tsx         !       # Статус шифрования и сессии
        ├── PrivacyModeSwitch.tsx            !       # Быстрое переключение режима приватности (стандартный / анонимный)
        ├── AIDataUsageVisualizer.tsx        !       # Визуализация того, как ИИ использует пользовательские данные
        ├── PrivacyViolationLogViewer.tsx    !       # Просмотр лога нарушений
        ├── BiometricTogglePanel.tsx         !       # Контроль использования биометрии
        ├── AnonymityScoreWidget.tsx         !       # Виджет оценки анонимности пользователя
        ├── AIIntentTransparencyModal.tsx    !       # Раскрытие намерений ИИ в отношении приватных данных
        ├── PrivacyPolicyReader.tsx          !       # Встроенный просмотр и поиск по политике конфиденциальности
        ├── GPGKeyManager.tsx                !       # Интерфейс управления пользовательскими ключами подписи
        ├── AIPrivacyAgentChat.tsx           !       # Чат с ИИ-агентом приватности для разъяснений
        ├── PrivacyAuditTriggerButton.tsx    !       # Кнопка инициации локального AI-аудита приватности
        ├── ZeroTrustAccessPanel.tsx         !       # Просмотр/управление правилами доступа Zero Trust
        ├── DIDExposureMonitor.tsx           !       # Мониторинг публичной активности DID-идентичности
        ├── DataErasureRequestForm.tsx       !       # Форма запроса на удаление данных
        ├── PrivacyIncidentAlert.tsx         !       # Уведомление об инцидентах
        ├── AIPrivacyScoreGraph.tsx          !       # Диаграмма оценки приватности от AI
        ├── PrivacySandboxToggle.tsx         !       # Переключатель изолированной песочницы
        ├── PrivacyComplianceMeter.tsx       !       # Шкала соответствия GDPR / CCPA / local law
        ├── PrivacyMetricsOverview.tsx       !      # Обзор ключевых метрик приватности
        ├── index.ts                         !       # Централизованный экспорт компонентов

│   ├── Core/
        ├── GlobalStatusBar.tsx              !       # Глобальный статусбар проекта
        ├── SystemLoadBalancerIndicator.tsx  !       # Индикация загрузки системных компонентов
        ├── ActiveAgentPulse.tsx             !       # Пульс активности ИИ-агентов
        ├── GeniusCoreStatus.tsx             !       # Статус модуля genius-core
        ├── AnomalyWatchOverlay.tsx          !       # Перекрытие предупреждений об аномалиях
        ├── CriticalEventTicker.tsx          !       # Строка последних критических событий
        ├── WebSocketHealthBeacon.tsx        !       # Отображение статуса связи с бэкендом
        ├── SystemOverheatAlert.tsx          !       # UI-модуль для контроля перегрузок
        ├── LiveNodeLinkMap.tsx              !      # Визуальное отображение связанных нод
        ├── ZeroTrustLayerInfo.tsx           !       # Состояние доверенных зон
        ├── RealTimeAlertOverlay.tsx         !       # Быстрые алерты поверх всех страниц
        ├── QuantumSyncIndicator.tsx         !       # Синхронизация с quantum-core
        ├── EthicalComplianceSignal.tsx      !       # Сигнал о соответствии этике (AI Ethics)
        ├── MetaOverlayRoot.tsx                     # Корневой слой оверлеев
        ├── ContextIntentScope.tsx                  # Контекстный диспетчер намерений
        ├── GlobalDataHealth.tsx                    # Статус целостности и корректности данных
        ├── SigintSessionWatcher.tsx                # Контроль сеансов SIGINT внутри платформы
        ├── UptimeMonitor.tsx                       # Сводка аптайма систем
        ├── AIOverrideDetector.tsx                  # Обнаружение внешнего вмешательства
        ├── InternalDiagnosticPanel.tsx             # Панель внутренних проверок
        ├── LivePingTracer.tsx                      # UI для трассировки AI-пинга
        ├── EmergencyShutdownButton.tsx             # Кнопка аварийной остановки
        ├── CoreWatchdogTimer.tsx                   # Таймер-хранитель ядра
        ├── FocusAgentDisplay.tsx                   # Индикатор текущего активного агента
        ├── AgentPathResolver.tsx                   # Компонент, отображающий путь активации агента
        ├── CoreLatencyStats.tsx                    # Виджет метрик задержки в ядре
        ├── ObserverSwitch.tsx                      # Переключатель режима наблюдателя
        ├── AIConflictResolver.tsx                  # UI-компонент разрешения конфликтов намерений
        ├── EthicalViolationSignal.tsx              # Виджет отображения нарушений этики
        ├── index.ts                                # Централизованный экспорт всех компонентов

│   ├── LLMOps/
        ├── LLMControlPanel.tsx                  # Основная панель управления LLM-инстансами
        ├── LLMInstanceSelector.tsx              # Компонент выбора активной модели (по ID, версии)
        ├── PromptAuditStream.tsx                # Реалтайм лента всех входящих prompt'ов
        ├── PromptInjectionShield.tsx            # Визуализация защиты от prompt-инъекций
        ├── TokenFlowVisualizer.tsx              # Отображение токенов во времени
        ├── ContextWindowUsage.tsx               # Использование контекстного окна (token usage)
        ├── AttentionHeadMap.tsx                 # Карта внимания головы трансформера
        ├── LLMCallTracer.tsx                    # UI трассировки внутренних вызовов модели
        ├── ChainOfThoughtInspector.tsx          # Инспекция цепочек рассуждения (CoT)
        ├── TemperatureControl.tsx               # Регулировка параметра temperature
        ├── TopPSelector.tsx                     # Параметр Top-P sampling
        ├── MaxTokensLimiter.tsx                 # Компонент ограничения длины ответа
        ├── LLMVersionDiffViewer.tsx             # Сравнение двух версий моделей
        ├── LLMEmbeddingMonitor.tsx              # Визуализация эмбеддингов в latent space
        ├── LatencyHeatmap.tsx                   # Карта задержек выполнения
        ├── LLMErrorBoundary.tsx                 # UI обработка исключений в LLM
        ├── FineTuneSnapshotViewer.tsx           # Просмотр состояний во время обучения
        ├── LLMOverloadGuard.tsx                 # Защита от перегрузки инстанса
        ├── LLMPolicySwitch.tsx                  # Переключение между стратегиями (RL, safety, etc.)
        ├── LLMSystemPromptViewer.tsx            # Отображение системных инструкций
        ├── MemorySlotViewer.tsx                 # Отладка модулей памяти LLM
        ├── LLMOpsDashboardHeader.tsx            # Заголовок и статус дашборда
        ├── LLMPerformanceRing.tsx               # Интерактивная круговая метрика нагрузки
        ├── LLMGuardrailsStatus.tsx              # Состояние guardrails (фильтров, ограничителей)
        ├── LLMOverrideIndicator.tsx             # Показывает наличие внешнего вмешательства
        ├── LLMTokenEntropyMeter.tsx             # Измерение энтропии распределения токенов
        ├── index.ts                             # Централизованный экспорт всех виджетов

│   ├── DAO/
        ├── DAODashboardHeader.tsx                # Заголовок, статус, активный раунд DAO
        ├── DAOGovernanceSummary.tsx              # Краткое резюме: активные предложения, казна
        ├── DAOMemberList.tsx                     # Участники DAO и их стейк/вес
        ├── DAOVoteStatus.tsx                     # Графическое отображение текущего голосования
        ├── DAOVotePanel.tsx                      # Форма и UI для голосования за/против
        ├── ProposalCard.tsx                      # Отдельная карточка одного предложения
        ├── ProposalFeed.tsx                      # Список всех предложений DAO
        ├── ProposalDetailModal.tsx               # Модальное окно с полным описанием предложения
        ├── DAOProposalEditor.tsx                 # Редактор для создания нового предложения
        ├── DAOTreasuryOverview.tsx               # Обзор текущей казны и распределений
        ├── DAOZKProofViewer.tsx                  # Отображение zk-доказательств голосов (если ZK-DAO)
        ├── DAOTokenomicsPanel.tsx                # График распределения токенов DAO
        ├── DAOPermissionMatrix.tsx               # Матрица ролей и полномочий в DAO
        ├── DAOQuorumStatus.tsx                   # Проверка кворума и статуса по метрикам
        ├── DAOExecutionQueue.tsx                 # Очередь для выполнения прошедших предложений
        ├── DAOHistoricalLog.tsx                  # История прошедших голосований/предложений
        ├── DAOActivityTimeline.tsx               # Временная шкала активности DAO
        ├── DAOAgentDelegation.tsx                # Доверенное делегирование голосов агентам
        ├── DAOInteractionStats.tsx               # Графики активности: голосов, предложений
        ├── DAOTagCloud.tsx                       # Семантический тег-клауд по темам DAO
        ├── DAOAutoGovernSwitch.tsx               # Автоматический режим ИИ-управления DAO
        ├── DAOOnchainSyncStatus.tsx              # Синхронизация состояния DAO с блокчейном
        ├── DAONetworkMap.tsx                     # Графовая визуализация связи участников
        ├── DAOProposalFilter.tsx                 # Фильтрация предложений по статусу, тегу
        ├── index.ts                              # Центральный экспорт всех виджетов

│   ├── UEBA/
        ├── UEBAOverviewPanel.tsx                # Общая панель состояния поведенческого анализа
        ├── UEBAUserProfileCard.tsx              # Карточка поведения конкретного пользователя
        ├── UEBAEntityProfileCard.tsx            # Карточка поведения не-человеческой сущности
        ├── UEBAAnomalyStream.tsx                # Лента текущих поведенческих аномалий
        ├── UEBAThreatScoreIndicator.tsx         # Визуализация UEBA-скорингов и угроз
        ├── UEBATimelineGraph.tsx                # Поведенческая временная шкала активности
        ├── UEBAHeatmapMatrix.tsx                # Матрица активности и отклонений
        ├── UEBAPatternRecognizer.tsx            # Модуль выявления повторяющихся поведенческих паттернов
        ├── UEBARiskEvolutionGraph.tsx           # Граф изменения риска по времени
        ├── UEBADrilldownView.tsx                # Детальный анализ подозрительного события
        ├── UEBATaggedAnomaly.tsx                # Представление аномалий с тегами (AI + сигнатуры)
        ├── UEBAAIInferencePanel.tsx             # Панель объяснений решений AI UEBA-агента
        ├── UEBAZeroTrustScoreChart.tsx          # Интеграция с Zero Trust: доверие/риски
        ├── UEBASessionCorrelator.tsx            # Модуль корреляции сессий и связей между ними
        ├── UEBARealTimeMonitor.tsx              # Реалтайм отслеживание поведения в интерфейсе
        ├── UEBAAgentTraceTree.tsx               # Дерево действий агента/пользователя
        ├── UEBAGraphViewer.tsx                  # Визуализация поведения в виде графа
        ├── UEBAClusterInsightPanel.tsx          # Обнаружение поведенческих кластеров
        ├── UEBAAutoMitigationControl.tsx        # Интерфейс запуска автодействий (sandbox, block)
        ├── UEBALogSearchWidget.tsx              # Поиск по логам поведения
        ├── UEBAAlertFeed.tsx                    # Поток алертов от AI/UEBA-движка
        ├── UEBAComplianceAuditView.tsx          # Проверка поведения на соответствие политике
        ├── UEBAIsolationControl.tsx             # Мгновенное помещение в изоляцию
        ├── index.ts                             # Централизованный экспорт компонентов

│   ├── Security/
        ├── SecurityStatusCard.tsx        !          # Карточка текущего состояния безопасности
        ├── ThreatHuntingDashboard.tsx    !          # Интерфейс охоты за угрозами и ручного анализа
        ├── ZeroTrustAccessControl.tsx    !          # Виджет управления ZTNA-доступом
        ├── SecurityScoreRadar.tsx        !         # Радар оценки безопасности по метрикам
        ├── IncidentResponsePanel.tsx     !          # Панель управления инцидентами безопасности
        ├── AttackSurfaceMap.tsx          !          # Карта атакуемых зон системы
        ├── RealTimeAlertsFeed.tsx        !          # Поток оповещений об угрозах в реальном времени
        ├── VulnerabilityScannerResults.tsx    !     # Отображение результатов сканирования уязвимостей
        ├── ThreatIntelWidget.tsx              !     # Интеграция с внешними TI-источниками
        ├── AccessAnomalyTracker.tsx           !     # Трекер аномального поведения доступа
        ├── PolicyViolationLog.tsx             !     # Интерфейс логов нарушений политик
        ├── SecureConfigManager.tsx            !     # Настройка безопасных конфигураций
        ├── SignatureAnalysisPanel.tsx         !     # Анализ поведения и сигнатур
        ├── ForensicTimelineViewer.tsx         !     # Просмотр временных цепочек событий для анализа
        ├── IdentitySecurityMatrix.tsx         !     # Матрица уровней безопасности по пользователям/агентам
        ├── AuditRiskHeatmap.tsx                    # Тепловая карта аудита и уровней риска
        ├── SandboxActionControl.tsx                # Виджет запуска песочницы или блокировки
        ├── IsolationCommandConsole.tsx             # Инструмент изоляции узлов/сессий
        ├── ComplianceWidget.tsx                    # Проверка на соответствие нормам (GDPR, ISO и др.)
        ├── CredentialLeakInspector.tsx             # Интерфейс отслеживания утечек и скомпрометированных данных
        ├── AIThreatPredictionGraph.tsx             # Граф предсказанных угроз от AI-модели
        ├── RBACMatrixViewer.tsx                    # Просмотр и настройка ролевых политик доступа
        ├── HashScanWidget.tsx                      # Проверка хэшей на известные IOC
        ├── AlertSeverityPanel.tsx                  # Группировка алертов по степени опасности
        ├── QuantumThreatVisualizer.tsx             # Отображение угроз квантового уровня
        ├── GPGKeyValidator.tsx                     # Виджет проверки и управления GPG-подписями
        ├── BreachSimulatorLauncher.tsx             # Тестирование реакции системы на моделируемый взлом
        ├── index.ts                                # Централизованный экспорт компонентов

│   ├── Plugins/
        ├── PluginListTable.tsx                     # Основная таблица с плагинами
        ├── PluginCard.tsx                          # Отображение плагина в карточном виде
        ├── PluginStatusBadge.tsx                   # Значок состояния (активен, отключён, скомпрометирован)
        ├── PluginUploadForm.tsx                    # Интерфейс загрузки новых плагинов
        ├── PluginManifestViewer.tsx                # Просмотр манифеста/метаданных плагина
        ├── PluginPermissionsMatrix.tsx             # Матрица запрошенных прав и доступов
        ├── PluginSignatureVerifier.tsx             # Верификация цифровых подписей плагинов
        ├── PluginSandboxExecutor.tsx               # Изолированный запуск плагина
        ├── PluginLogViewer.tsx                     # Просмотр логов активности плагина
        ├── PluginAIAnalyzer.tsx                    # AI-модуль анализа поведения и угроз от плагина
        ├── PluginUpdateManager.tsx                 # Обновление и контроль версий плагинов
        ├── PluginDependencyGraph.tsx               # Граф зависимостей между плагинами и системами
        ├── PluginIntegrationTester.tsx             # Тестирование на совместимость перед установкой
        ├── PluginRollbackControl.tsx               # Панель отката плагинов к предыдущим версиям
        ├── PluginIsolationSwitch.tsx               # Управление режимом песочницы/изоляции
        ├── PluginCompatibilityReport.tsx           # Отчёт по совместимости (с ядром, API и т.д.)
        ├── PluginMarketplaceLinker.tsx             # Интеграция с внешним маркетплейсом (если разрешено)
        ├── PluginExecutionPolicyViewer.tsx         # Политики выполнения и ограничения плагинов
        ├── PluginTelemetryDashboard.tsx            # Дашборд телеметрии плагина в реальном времени
        ├── PluginAnomalyDetector.tsx               # AI-анализ аномалий в работе плагинов
        ├── PluginDeleteConfirmationModal.tsx       # Модалка удаления с подтверждением
        ├── PluginSearchBar.tsx                     # Поиск по плагинам
        ├── PluginErrorBoundary.tsx                 # Ошибки исполнения — изоляция
        ├── index.ts                                # Центральный экспорт компонентов

│   ├── CTF/
        ├── CTFChallengeCard.tsx                     # Карточка задания CTF
        ├── CTFChallengeList.tsx                     # Список всех активных заданий
        ├── CTFCategorySelector.tsx                  # Фильтрация по категориям (Web, Crypto, Pwn, etc.)
        ├── CTFTeamPanel.tsx                         # Панель управления командой
        ├── CTFScoreboard.tsx                        # Таблица лидеров
        ├── CTFFlagSubmitForm.tsx                    # Форма отправки флага
        ├── CTFChallengeDetailsModal.tsx             # Подробности задания (описание, вложения)
        ├── CTFTimer.tsx                              # Таймер до конца соревнования
        ├── CTFHintRequest.tsx                       # Механизм запроса подсказок
        ├── CTFProgressTracker.tsx                   # Трекер выполнения заданий
        ├── CTFNotificationCenter.tsx                # Уведомления по флагам/событиям
        ├── CTFRealTimeLog.tsx                       # Логи активности команды/платформы
        ├── CTFAgentReplayViewer.tsx                 # Повтор действий AI или игроков (реалтайм или история)
        ├── CTFReplayTimeline.tsx                    # Временная шкала симуляции
        ├── CTFThreatActorSimulator.tsx              # Эмуляция действий атакующего (AI-персона)
        ├── CTFChallengeCreator.tsx                  # UI-конструктор заданий CTF
        ├── CTFAdminConsole.tsx                      # Консоль админа соревнования (бан, рестарт, флаги)
        ├── CTFUploadArtifact.tsx                    # Загрузка вложений и инфраструктурных файлов
        ├── CTFInfraValidator.tsx                    # Проверка корректности загрузки инфраструктуры
        ├── CTFChatPanel.tsx                         # Общение между командами/админами (опционально)
        ├── CTFZeroDayInject.tsx                     # Внедрение неожиданных задач/Zero-Day по ходу игры
        ├── CTFAIChallengeEvaluator.tsx              # AI-модуль оценки оригинальных решений и нестандартных флагов
        ├── CTFFlagForgeViewer.tsx                   # Проверка подлинности/фальсификации флагов
        ├── index.ts                                 # Централизованный экспорт всех компонентов

│   ├── Caplets/
        ├── CapletListView.tsx                      # Общий список всех доступных каплетов
        ├── CapletDetailView.tsx                    # Подробный просмотр информации о каплете
        ├── CapletInstallButton.tsx                 # Кнопка установки/активации каплета
        ├── CapletStatusIndicator.tsx               # Индикация состояния каплета (on/off/faulted)
        ├── CapletCategoryTabs.tsx                  # Переключение между категориями (Security, AI, Network, etc.)
        ├── CapletSearchInput.tsx                   # Поиск по названию/функциональности каплетов
        ├── CapletDeployForm.tsx                    # Форма развертывания кастомного каплета
        ├── CapletPolicyManager.tsx                 # Управление политиками активации/изолирования
        ├── CapletLogsViewer.tsx                    # Просмотр логов работы конкретного каплета
        ├── CapletResourceMeter.tsx                 # Отображение потребления ресурсов каплетом
        ├── CapletVersionManager.tsx                # Обновление и откат каплетов
        ├── CapletIntegrityChecker.tsx              # Проверка целостности (hash, подписанность)
        ├── CapletGPGSignatureVerifier.tsx          # Подпись и проверка каплетов GPG-ключами
        ├── CapletSandboxControl.tsx                # Управление изолированной средой для запуска
        ├── CapletAutoUpdateSwitch.tsx              # Переключатель автоматического обновления
        ├── CapletExecutionGraph.tsx                # Визуализация цепочки вызовов каплетов
        ├── CapletEventEmitter.tsx                  # Модуль уведомлений и реакций на события
        ├── CapletErrorBoundary.tsx                 # Защита от ошибок рендеринга каплетов
        ├── CapletAgentContextBridge.tsx            # Интеграция с агентами/AI-контекстами
        ├── CapletAccessControlPanel.tsx            # Управление правами и доступом к каплетам
        ├── CapletRuleEngineVisualizer.tsx          # Визуализация и отладка правил поведения
        ├── CapletThreatDetectionOverlay.tsx        # Перекрытие с индикацией угроз/аномалий
        ├── index.ts                                # Центральный экспорт всех компонентов

│   ├── Hacking/
        ├── ExploitDeployPanel.tsx                  # Панель запуска эксплойтов в изолированной среде
        ├── PayloadBuilder.tsx                      # Конструктор полезной нагрузки с параметрами
        ├── ShellSessionViewer.tsx                  # Web-интерфейс для интерактивной сессии (reverse shell, meterpreter)
        ├── AttackVectorGraph.tsx                   # Визуализация возможных векторов атаки (связи между узлами)
        ├── NetworkScanner.tsx                      # Сканирование сети, портов и служб
        ├── TargetProfiler.tsx                      # Сбор и отображение информации о цели
        ├── ExploitTemplateSelector.tsx             # Выбор шаблонов эксплойтов и модулей атаки
        ├── HackingLogConsole.tsx                   # Лог всех событий: атаки, откаты, предупреждения
        ├── CVEImportWizard.tsx                     # Импорт и симуляция CVE-уязвимостей по ID
        ├── ExploitChainEditor.tsx                  # Редактор цепочек атак (chained exploits)
        ├── AIReconAssistant.tsx                    # AI-модуль помощи при разведке целей (OSINT + логика)
        ├── ZeroDaySimRunner.tsx                    # Симулятор нулевого дня в sandbox-режиме
        ├── ReverseEngineeringSuite.tsx             # Модуль реверса бинарников и скриптов
        ├── PayloadEncoder.tsx                      # Кодировщик и шифровщик полезной нагрузки
        ├── SessionHijackEmulator.tsx               # Модуль для перехвата и симуляции сессий
        ├── MITMAttackSimulator.tsx                 # Атака "Man-In-The-Middle"
        ├── CredentialSnifferOverlay.tsx            # Инструмент визуального перехвата учетных данных
        ├── BrowserExploitLauncher.tsx              # XSS, CSRF и другие web-уязвимости
        ├── PhishingScenarioBuilder.tsx             # Конструктор фишинговых кампаний (учебные цели)
        ├── ContainerEscapeVisualizer.tsx           # Визуализация атак на Docker, LXC и Kubernetes
        ├── GPGKeyCrackerEmulator.tsx               # Эмулятор атак на слабые криптоключи
        ├── RedTeamAIBridge.tsx                     # Интерфейс связи с AI-помощником для red-teaming
        ├── index.ts                                # Центральный экспорт компонентов

│   ├── TelegramBot/
        ├── BotStatusPanel.tsx                  # Общее состояние и диагностика бота (webhook, polling, ошибки)
        ├── UserInteractionFlow.tsx             # Визуальный редактор сценариев взаимодействия (диалоги, FSM)
        ├── MessageTemplateManager.tsx          # Управление шаблонами сообщений и команд
        ├── CommandRegistryViewer.tsx           # Просмотр всех зарегистрированных команд и обработчиков
        ├── ChatLogStream.tsx                   # Поток живых сообщений, фильтрация, поиск
        ├── AIResponderConfigurator.tsx         # Интерфейс настройки ИИ-ответов (ChatGPT, Gemini, Claude)
        ├── SubscriptionManager.tsx             # Интерфейс управления платными подписками (TON, Stripe)
        ├── BotAnalyticsDashboard.tsx           # Аналитика по пользователям, активностям, удержанию
        ├── RolePermissionsEditor.tsx           # Редактор ролей пользователей (admin, premium, trial)
        ├── MessageFlowDebugger.tsx             # Отладка сценариев и ловушек FSM / хендлеров
        ├── ButtonInlineBuilder.tsx             # Визуальный редактор inline-кнопок и меню
        ├── TelegramSettingsForm.tsx            # Форма конфигурации токенов, API, webhook
        ├── ErrorMonitoringPanel.tsx            # Модуль отслеживания ошибок и логирования
        ├── AITrainingPromptEditor.tsx          # Промпт-редактор для AI-модулей Telegram-бота
        ├── TranslationManager.tsx              # Мультиязычные тексты, переключение локалей
        ├── BotTokenVaultConnector.tsx          # Безопасное подключение к Vault для токенов бота
        ├── FileAttachmentManager.tsx           # Управление файлами, документами, media (фото, видео)
        ├── InlineQueryPreviewer.tsx            # Отладка и предпросмотр inline-запросов
        ├── DialogMemoryInspector.tsx           # Просмотр истории диалога с сохранённой памятью
        ├── index.ts                            # Экспорт всех компонентов

│   ├── CI_CD/
        ├── PipelineOverview.tsx                 # Обзор всех активных и исторических CI/CD пайплайнов
        ├── PipelineGraphViewer.tsx              # Визуализация DAG-графа CI/CD-процесса
        ├── StepLogsViewer.tsx                   # Просмотр логов конкретных шагов пайплайна
        ├── BuildStatusPanel.tsx                 # Текущий статус билдов (успешно, неуспешно, в прогрессе)
        ├── TriggerConfigEditor.tsx              # Управление триггерами: push, merge, cron, webhook
        ├── PipelineEditor.tsx                   # Визуальный редактор `.gitlab-ci.yml`, `.github/workflows`, etc.
        ├── SecretsIntegrationPanel.tsx          # Интеграция с Vault / Secret Manager для CI
        ├── ArtifactManager.tsx                  # Управление артефактами сборки, публикация
        ├── RunnerMonitor.tsx                    # Мониторинг CI/CD раннеров (нагрузка, статус)
        ├── AuditTrailViewer.tsx                 # Журнал аудита действий в CI/CD системе
        ├── DeploymentTargetsPanel.tsx           # Настройка окружений (dev/stage/prod)
        ├── NotificationsConfigurator.tsx        # Настройка уведомлений в Slack, Telegram, Email
        ├── TestCoverageDashboard.tsx            # Покрытие тестами по каждому пайплайну
        ├── QualityGateVisualizer.tsx            # Визуализация метрик качества и стоп-гейтов (SonarQube, etc.)
        ├── RollbackController.tsx               # Быстрое откатное развертывание
        ├── ContainerRegistryViewer.tsx          # Интерфейс для анализа Docker образов
        ├── CommitLinker.tsx                     # Связь коммитов с пайплайнами и логами
        ├── index.ts                             # Централизованный экспорт компонентов

│   ├── Simulation/
        ├── CrisisScenarioPlayer.tsx              # Игровой проигрыватель кризисов (атаки, аварии, сбои)
        ├── CrisisEditorPanel.tsx                 # Создание и редактирование кризисных сценариев
        ├── SimulationTimeline.tsx                # Хронология событий симуляции с интерактивным управлением
        ├── ScenarioSelector.tsx                  # Выбор готовых сценариев (из DAO/генератора/архива)
        ├── SimulationControlPanel.tsx            # Старт/пауза/сброс симуляции, скорость, масштаб
        ├── AgentDeploymentWidget.tsx             # Отображение агентов, участвующих в симуляции
        ├── EnvironmentConfigViewer.tsx           # Настройки среды: температура, ресурсы, погодные условия
        ├── AnomalyEventTrigger.tsx               # Создание событий, приводящих к сбоям/аномалиям
        ├── SimulationMetricsPanel.tsx            # Метрики симуляции: последствия, убытки, влияние
        ├── ImpactAssessmentViewer.tsx            # Анализ воздействия на экономику, инфраструктуру, людей
        ├── DisasterPlaybackPanel.tsx             # Повтор/запись симуляций в реальном времени
        ├── QuantumSimulationBridge.tsx           # Интеграция с quantum-core симуляцией вероятностей
        ├── AIResponseStrategyView.tsx            # Визуализация ответов ИИ на симулированные события
        ├── SimulationPresetManager.tsx           # Управление сохранёнными конфигурациями симуляций
        ├── index.ts                              # Центральный экспорт виджетов симуляции

│   ├── Intel/
        ├── IntelFeedPanel.tsx                  # Основная лента разведданных с фильтрами, тегами, источниками
        ├── IntelItemCard.tsx                   # Карточка конкретного разведывательного события или отчёта
        ├── SourceTrustScore.tsx                # Оценка доверия к источнику, используется XAI-модель
        ├── ThreatLevelBadge.tsx                # Иконки и уровни угрозы (низкий, умеренный, критический)
        ├── RegionMapOverlay.tsx                # Геоинформационное наложение на карту (сектора, очаги)
        ├── IntelSearchBar.tsx                  # Поисковая панель по тегам, агентам, ключевым словам
        ├── DataCorrelationGraph.tsx            # Визуализация взаимосвязей между источниками и событиями
        ├── SignalAnomalyHighlighter.tsx        # Подсветка аномалий в паттернах поведения/данных
        ├── IntelExportButton.tsx               # Экспорт данных для DAO, внешних структур или хранилища
        ├── RealtimeStreamWidget.tsx            # Поток реального времени: агентские отчёты, IoT, SIGINT
        ├── RawIntelViewer.tsx                  # Просмотр необработанных (сырых) разведданных
        ├── IntelReportGenerator.tsx            # Создание итогового разведывательного отчёта (PDF, JSON)
        ├── CounterIntelPanel.tsx               # Панель контрразведки: выявление фальсификаций и ловушек
        ├── IntelTagManager.tsx                 # Управление тегами, категориями и типами информации
        ├── StrategicAssessmentChart.tsx        # Оценка стратегического влияния (диаграммы, графики)
        ├── AIInferencePanel.tsx                # Вывод AI на основе анализа разведданных
        ├── IntelAgentSummary.tsx               # Обзор действий агентов-разведчиков (виртуальных/реальных)
        ├── index.ts                            # Центральный экспорт всех intel-виджетов

└── threejs/
    └── engine/
        ├── SceneManager.ts                      # Центральный менеджер сцены: загрузка, инициализация, рендер
        ├── WorldInitializer.ts                  # Первичная сборка мира, координатных осей, источников света
        ├── CameraController.ts                  # Контроллер камеры (режимы free, orbit, follow, drone)
        ├── LightingSystem.ts                    # Полная настройка освещения (ambient, directional, point, spot)
        ├── AssetLoader.ts                       # Асинхронная загрузка 3D-объектов, моделей, текстур
        ├── PhysicsEngineBridge.ts               # Интеграция с физикой (Cannon.js / Rapier / Ammo.js)
        ├── AIEntityRenderer.ts                  # Отображение AI-агентов, их анимаций, состояний и маршрутов
        ├── EventDispatcher.ts                   # Шина событий трёхмерной сцены (ввод, UI, взаимодействие)
        ├── InteractionHandler.ts                # Управление взаимодействием с объектами (клики, навед.)
        ├── PostProcessingPipeline.ts            # Эффекты: bloom, SSAO, depth of field, glitch, film grain
        ├── EnvironmentMapManager.ts             # Обработка кубических карт и отражений в сцене
        ├── AnimationSystem.ts                   # Поддержка скелетной и процедурной анимации
        ├── ObjectRegistry.ts                    # Реестр активных 3D-объектов в сцене
        ├── AIOverlayRenderer.ts                 # Рендер наложений от ИИ: зоны, опасности, цели, пути
        ├── ResourceMonitor.ts                   # Отслеживание GPU/CPU нагрузки и performance трекинг
        ├── SceneSerializer.ts                   # Сохранение/загрузка сцен в формате JSON или бинарном
        ├── LODManager.ts                        # Уровни детализации (LOD) для оптимизации сцен
        ├── VRARBridge.ts                        # Поддержка WebXR (VR/AR) с синхронизацией сцены
        ├── RenderLoop.ts                        # Главный цикл отрисовки с requestAnimationFrame
        ├── DebugOverlay.ts                      # Панель отладки (фреймрейт, объекты, камера, физика)
        ├── constants.ts                         # Глобальные константы трёхмерного движка
        ├── index.ts                             # Центральный экспорт всех компонентов движка

│   ├── components/
        ├── HUD/
        │   ├── HUDContainer.tsx                   # Общий контейнер для Head-Up Display (HUD)
        │   ├── AgentStatusBar.tsx                 # Панель состояния выбранного агента (hp, status, etc.)
        │   ├── MiniMap.tsx                        # Миникарта 2D/3D с отображением зон и агентов
        │   ├── TelemetryFeed.tsx                  # Поток телеметрии: скорость, маршрут, цель
        │   ├── AlertFeed.tsx                      # Реальные AI-предупреждения, всплывающие в HUD
        │   └── Compass.tsx                        # 3D-компас направления камеры
        │
        ├── Controls/
        │   ├── OrbitController.tsx                # Контроллер Orbital управления камерой
        │   ├── FlyController.tsx                  # Управление в режиме "дрона"
        │   ├── FirstPersonController.tsx          # Режим от первого лица
        │   └── CameraSwitchPanel.tsx              # Панель переключения видов камеры
        │
        ├── Debug/
        │   ├── AxisHelper.tsx                     # XYZ-визуализация для дебага сцены
        │   ├── GridHelper.tsx                     # Координатная сетка
        │   └── PhysicsDebugger.tsx                # Визуализатор физики объектов
        │
        ├── SceneUI/
        │   ├── SceneLoaderPanel.tsx               # UI-панель для загрузки сцен, моделей и шаблонов
        │   ├── ObjectInspector.tsx                # Панель свойств выбранного объекта
        │   ├── LayerTogglePanel.tsx               # Включение/отключение слоёв сцены (AI, события, etc.)
        │   └── SimulationControlBar.tsx           # Панель управления симуляцией в 3D
        │
        ├── AIOverlay/
        │   ├── ThreatZonesRenderer.tsx            # Отображение опасных зон, угроз
        │   ├── PathPredictionLines.tsx            # AI-пути движения агентов
        │   ├── AOIHighlighter.tsx                 # Зоны внимания (Areas of Interest)
        │   └── ObjectiveMarkers.tsx               # Метки целей и задач
        │
        ├── Assets/
        │   ├── AssetSelector.tsx                  # UI выбора 3D-объектов
        │   ├── AssetPreviewer.tsx                 # Предпросмотр моделей перед добавлением в сцену
        │   └── AssetUploadDialog.tsx              # Загрузка кастомных моделей
        │
        ├── Analytics/
        │   ├── FrameRateMonitor.tsx               # Отображение FPS
        │   ├── GPUStatsPanel.tsx                  # Панель с нагрузкой на GPU
        │   └── SceneMetrics.tsx                   # Кол-во объектов, draw calls, triangles
        │
        ├── common/
        │   ├── Button3D.tsx                       # Кнопка в трёхмерной среде
        │   ├── Panel3D.tsx                        # Обёртка для 3D-интерфейсов
        │   ├── Label3D.tsx                        # Подписи, названия, UI-теги
        │   └── Billboard.tsx                      # Объекты, повернутые к камере
        │
        └── index.ts                               # Экспорт всех компонентов

    └── utils/
        ├── math/
        │   ├── degreesToRadians.ts                # Преобразование градусов в радианы
        │   ├── radiansToDegrees.ts                # Преобразование радиан в градусы
        │   ├── clamp.ts                           # Ограничение значения в диапазоне
        │   ├── lerp.ts                            # Линейная интерполяция
        │   └── mapRange.ts                        # Перевод значения из одного диапазона в другой
        │
        ├── camera/
        │   ├── getCameraPosition.ts               # Получить позицию камеры из текущей матрицы
        │   ├── setCameraFocus.ts                  # Направить камеру на заданную точку
        │   └── animateCameraTo.ts                 # Плавное перемещение камеры
        │
        ├── geometry/
        │   ├── getCenterOfObject.ts               # Центр объекта (bounding box)
        │   ├── computeBoundingBox.ts              # Bounding box объекта
        │   ├── generateGrid.ts                    # Генерация координатной сетки
        │   └── mergeGeometries.ts                 # Объединение нескольких геометрий
        │
        ├── interaction/
        │   ├── getIntersections.ts                # Перехват курсора/клика (raycasting)
        │   ├── setupRaycaster.ts                  # Инициализация raycaster-а
        │   └── getHoveredObject.ts                # Получение объекта под курсором
        │
        ├── animation/
        │   ├── tween.ts                           # Tween-анимации
        │   ├── animateRotation.ts                 # Плавный поворот объекта
        │   └── animatePosition.ts                 # Плавное перемещение объекта
        │
        ├── performance/
        │   ├── monitorFrameRate.ts                # Мониторинг FPS
        │   ├── throttle.ts                        # Ограничение частоты вызовов
        │   ├── debounce.ts                        # Отложенный вызов
        │   └── profiler.ts                        # Профайлер: рендер, draw calls, geometry
        │
        ├── ai/
        │   ├── calculatePath.ts                   # Расчёт AI-маршрута
        │   ├── highlightAOI.ts                    # Подсветка зоны интереса
        │   └── simulateSensorRange.ts             # Зона восприятия AI
        │
        ├── scene/
        │   ├── loadScene.ts                       # Загрузка и парсинг сцены из JSON/GLTF
        │   ├── unloadScene.ts                     # Очистка сцены
        │   ├── getSceneObjects.ts                 # Все объекты текущей сцены
        │   └── tagSceneObject.ts                  # Назначение тегов объектам
        │
        ├── utils3D/
        │   ├── convertLatLngToPosition.ts         # GPS → XYZ в сцене
        │   ├── convertPositionToLatLng.ts         # XYZ → GPS
        │   └── projectToScreen.ts                 # Проекция 3D-точки на 2D-экран
        │
        ├── const/
        │   ├── colors.ts                          # Цветовая палитра
        │   ├── sizes.ts                           # Стандартные размеры объектов
        │   └── defaults.ts                        # Значения по умолчанию
        │
        └── index.ts                               # Экспорт всех утилит


├── features/
│   ├── governance/
        ├── api/
        │   ├── fetchProposals.ts              # Загрузка всех предложений DAO
        │   ├── submitProposal.ts              # Создание нового предложения
        │   ├── voteOnProposal.ts              # Отправка голоса
        │   └── getGovernanceStats.ts          # Статистика участия и активности
        │
        ├── components/
        │   ├── ProposalList.tsx               # Список всех предложений
        │   ├── ProposalDetails.tsx            # Просмотр и обсуждение предложения
        │   ├── VotingPowerIndicator.tsx       # Показатель силы голоса
        │   ├── DelegateSelector.tsx           # Выбор делегата
        │   ├── ResolutionViewer.tsx           # Просмотр итогов голосования
        │   └── GovernanceChart.tsx            # График активности и решений
        │
        ├── hooks/
        │   ├── useGovernanceFeed.ts           # Хук получения обновлений по DAO
        │   ├── useProposalById.ts             # Хук загрузки конкретного предложения
        │   ├── useVotingEligibility.ts        # Проверка, может ли голосовать
        │   └── useDelegationStatus.ts         # Статус делегирования
        │
        ├── models/
        │   ├── Proposal.ts                    # Модель DAO-предложения
        │   ├── Vote.ts                        # Модель голоса
        │   ├── Delegation.ts                 # Модель делегирования
        │   └── GovernanceStats.ts             # Аггрегированные метрики управления
        │
        ├── services/
        │   ├── governanceService.ts           # Общая логика DAO-интеграции
        │   └── signatureVerifier.ts           # Проверка криптографических подписей голосов
        │
        ├── types/
        │   ├── ProposalStatus.ts              # Перечень возможных статусов
        │   ├── VoteType.ts                    # Типы голосов (For, Against, Abstain)
        │   └── GovernanceEvent.ts             # Типы событий в системе управления
        │
        ├── utils/
        │   ├── calculateQuorum.ts             # Расчёт кворума
        │   ├── validateProposalForm.ts        # Валидация создания предложений
        │   └── transformProposalData.ts       # Преобразование данных с API
        │
        ├── store/
        │   ├── governanceSlice.ts             # Redux-срез управления
        │   └── selectors.ts                   # Селекторы для получения данных
        │
        └── index.ts                           # Экспорт всех компонентов и функций

│   ├── auth/
        ├── api/
        │   ├── login.ts                      # Авторизация по email/паролю
        │   ├── logout.ts                     # Завершение сессии
        │   ├── refreshToken.ts               # Обновление access токена
        │   ├── register.ts                   # Регистрация нового пользователя
        │   ├── verifyEmail.ts                # Подтверждение email
        │   ├── sendOtp.ts                    # Отправка OTP кода
        │   ├── verifyOtp.ts                  # Проверка OTP
        │   └── connectWallet.ts              # Web3 аутентификация через кошелёк
        │
        ├── components/
        │   ├── LoginForm.tsx                 # Форма логина
        │   ├── RegisterForm.tsx              # Форма регистрации
        │   ├── OtpVerification.tsx           # UI ввода OTP
        │   ├── Web3Connect.tsx               # Кнопка подключения Web3-кошелька
        │   └── AuthProvider.tsx              # Провайдер авторизации для context
        │
        ├── context/
        │   └── AuthContext.tsx               # React context + provider
        │
        ├── hooks/
        │   ├── useAuth.ts                    # Общий доступ к auth state
        │   ├── useSession.ts                 # Работа с сессией пользователя
        │   └── useWeb3Auth.ts                # Хук подключения Web3-кошелька
        │
        ├── models/
        │   ├── User.ts                       # Модель пользователя
        │   ├── Session.ts                    # Модель сессии
        │   └── AuthPayload.ts                # Payload токена
        │
        ├── services/
        │   ├── authService.ts                # Работа с API + логика
        │   └── web3AuthService.ts            # Подключение кошельков и подписи
        │
        ├── store/
        │   ├── authSlice.ts                  # Redux slice
        │   └── selectors.ts                  # Селекторы
        │
        ├── types/
        │   ├── AuthStatus.ts                 # Статусы авторизации
        │   ├── UserRole.ts                   # Роли пользователей (Admin, Agent, Guest)
        │   └── AuthError.ts                  # Возможные ошибки авторизации
        │
        ├── utils/
        │   ├── tokenUtils.ts                 # Декодирование/хранение токенов
        │   └── passwordValidator.ts          # Проверка пароля на сложность
        │
        └── index.ts                          # Централизованный экспорт

│   ├── agents/
        ├── api/
        │   ├── fetchAgents.ts                # Получение списка агентов
        │   ├── createAgent.ts                # Создание нового агента
        │   ├── updateAgent.ts                # Обновление конфигурации
        │   ├── deleteAgent.ts                # Удаление агента
        │   ├── agentHeartbeat.ts             # Пинг от агента
        │   └── agentMetrics.ts               # Метрики и логи агента
        │
        ├── components/
        │   ├── AgentCard.tsx                 # Карточка агента с иконкой, статусом
        │   ├── AgentList.tsx                 # Таблица агентов
        │   ├── AgentForm.tsx                 # UI создания/редактирования
        │   ├── AgentStatusBadge.tsx          # Индикатор статуса
        │   └── AgentPermissions.tsx          # Роли, допуски, границы
        │
        ├── context/
        │   └── AgentContext.tsx              # Глобальный контекст агентов
        │
        ├── hooks/
        │   ├── useAgents.ts                  # Подгрузка и управление агентами
        │   ├── useAgentHeartbeat.ts          # Обработка сигналов
        │   └── useAgentStatus.ts             # Интерпретация состояния
        │
        ├── models/
        │   ├── Agent.ts                      # Основная модель агента
        │   ├── AgentState.ts                 # JSON-состояние: idle, busy, offline
        │   ├── Capability.ts                 # Возможности агента
        │   └── AgentRole.ts                  # Типы: Executor, Planner, Validator
        │
        ├── registry/
        │   ├── AgentRegistry.ts              # Центральный реестр
        │   └── CapabilityMatrix.ts           # Матрица компетенций
        │
        ├── services/
        │   ├── agentService.ts               # Основная логика работы с API
        │   ├── agentPolicyEngine.ts          # Политики разрешений и взаимодействий
        │   └── agentLifecycle.ts             # Обработка статуса, смерти и рестартов
        │
        ├── store/
        │   ├── agentSlice.ts                 # Redux slice
        │   └── selectors.ts                  # Селекторы
        │
        ├── types/
        │   ├── AgentId.ts                    # Уникальный идентификатор агента
        │   ├── AgentStatus.ts                # Типизация состояния
        │   └── MessageBusChannel.ts          # Каналы взаимодействия
        │
        ├── utils/
        │   ├── agentUtils.ts                 # Хелперы: генерация ID, фильтры
        │   └── agentValidator.ts             # Проверка входных данных
        │
        └── index.ts                          # Централизованный экспорт

│   ├── voting/
        ├── api/
        │   ├── fetchProposals.ts             # Получение списка предложений
        │   ├── fetchProposalById.ts          # Детали одного предложения
        │   ├── submitVote.ts                 # Отправка голоса
        │   ├── createProposal.ts             # Создание нового голосования
        │   └── voteProof.ts                  # Подпись или ZK-доказательство
        │
        ├── components/
        │   ├── ProposalList.tsx              # Таблица всех активных голосований
        │   ├── ProposalCard.tsx              # Карточка голосования с описанием
        │   ├── ProposalDetails.tsx           # UI подробностей и статистики
        │   ├── VoteForm.tsx                  # Выбор варианта + подпись
        │   └── VotingStats.tsx               # Статистика голосов, диаграммы
        │
        ├── context/
        │   └── VotingContext.tsx             # Контекст голосования (state/provider)
        │
        ├── hooks/
        │   ├── useVoting.ts                  # Обработка логики голосования
        │   ├── useProposal.ts                # Обработка одной темы
        │   └── useZKVote.ts                  # Поддержка zero-knowledge голосов
        │
        ├── models/
        │   ├── Proposal.ts                   # Структура предложения
        │   ├── Vote.ts                       # Структура одного голоса
        │   ├── Option.ts                     # Опции голосования
        │   └── VotingPolicy.ts               # Конфигурация DAO-правил
        │
        ├── store/
        │   ├── votingSlice.ts                # Redux slice
        │   └── selectors.ts                  # Выборки по статусу, роли, id
        │
        ├── services/
        │   ├── votingService.ts              # Интерфейс к DAO-ядру или Web3
        │   ├── snapshotStrategy.ts           # Off-chain Snapshot голосование
        │   └── zkVotingEngine.ts             # Поддержка ZK/zkSNARK голосов
        │
        ├── types/
        │   ├── ProposalId.ts                 # Уникальный идентификатор
        │   ├── VoteType.ts                   # "single", "weighted", "ranked"
        │   └── VoteSignature.ts              # Подпись/доказательство
        │
        ├── utils/
        │   ├── votingUtils.ts                # Преобразования, сортировка, фильтры
        │   └── quorumCalculator.ts           # Вычисление порога принятия
        │
        └── index.ts                          # Централизованный экспорт

│   ├── ai_insight/
        ├── api/
        │   ├── fetchInsights.ts               # Получение списка аналитик
        │   ├── fetchExplanationById.ts        # Получение одной XAI-интерпретации
        │   ├── submitFeedback.ts              # Отправка оценки/замечаний
        │   ├── getModelAuditTrail.ts          # История действий модели
        │   └── getCounterfactuals.ts          # Альтернативные исходы
        │
        ├── components/
        │   ├── InsightPanel.tsx               # Панель аналитики
        │   ├── XAIResultView.tsx              # Отображение объяснения
        │   ├── CounterfactualExplorer.tsx     # Анализ "что если"
        │   ├── FeatureImpactGraph.tsx         # Граф важности признаков
        │   └── ModelTraceView.tsx             # Трассировка действий модели
        │
        ├── context/
        │   └── AiInsightContext.tsx           # Контекст текущей AI-аналитики
        │
        ├── hooks/
        │   ├── useAiInsights.ts               # Хук для списка XAI-анализов
        │   ├── useExplanation.ts              # Хук конкретного объяснения
        │   └── useCounterfactuals.ts          # Анализ альтернатив
        │
        ├── models/
        │   ├── Insight.ts                     # Основная модель XAI-аналитики
        │   ├── Explanation.ts                 # Выводы модели
        │   ├── FeatureImpact.ts               # Влияние признаков
        │   ├── ModelTrace.ts                  # Логика AI-действий
        │   └── Counterfactual.ts              # Альтернативные исходы
        │
        ├── services/
        │   ├── aiInsightService.ts            # Интерфейс XAI-ядра
        │   └── auditBridge.ts                 # Интеграция с аудитором
        │
        ├── types/
        │   ├── InsightType.ts                 # Классификация аналитики
        │   ├── ModelId.ts                     # AI-модель
        │   └── AuditTrailEntry.ts             # Одна запись журнала
        │
        ├── utils/
        │   ├── normalization.ts               # Нормализация фичей
        │   ├── impactCalculator.ts            # Расчёт значимости
        │   └── xaiExport.ts                   # Экспорт анализа
        │
        └── index.ts                           # Точка экспорта

│   ├── monitoring/
        ├── api/
        │   ├── fetchAgentStatus.ts              # Статус агентов
        │   ├── fetchLatencyMetrics.ts           # Латентность
        │   ├── fetchSystemHealth.ts             # Состояние системы
        │   ├── fetchSecurityAlerts.ts           # Инциденты безопасности
        │   └── fetchResourceUsage.ts            # CPU, память, сеть
        │
        ├── components/
        │   ├── AgentStatusOverview.tsx          # Отображение агентов
        │   ├── LatencyHeatmap.tsx               # Тепловая карта задержек
        │   ├── HealthWidget.tsx                 # Панель состояния
        │   ├── AlertFeed.tsx                    # Поток предупреждений
        │   └── ResourceUsageChart.tsx           # График нагрузки
        │
        ├── context/
        │   └── MonitoringContext.tsx            # Глобальный контекст
        │
        ├── hooks/
        │   ├── useSystemHealth.ts               # Состояние системы
        │   ├── useLatencyStats.ts               # Метрики задержек
        │   ├── useSecurityFeed.ts               # Хук оповещений
        │   └── useResourceStats.ts              # Статистика ресурсов
        │
        ├── models/
        │   ├── AgentStatus.ts                   # Модель состояния агента
        │   ├── SystemHealth.ts                  # Модель здоровья
        │   ├── SecurityAlert.ts                 # Предупреждение
        │   └── ResourceUsage.ts                 # Загрузка системы
        │
        ├── services/
        │   ├── monitoringService.ts             # Работа с API и WebSocket
        │   └── metricsFormatter.ts              # Преобразование данных
        │
        ├── types/
        │   ├── Metric.ts                        # Универсальные метрики
        │   ├── AlertLevel.ts                    # Типы алертов
        │   └── AgentId.ts                       # Идентификаторы агентов
        │
        ├── utils/
        │   ├── formatUptime.ts                  # Преобразование времени
        │   ├── anomalyDetection.ts              # Поиск аномалий
        │   └── colorScale.ts                    # Цветовая шкала тепловых карт
        │
        └── index.ts                             # Точка экспорта

│   ├── keyvault/
        ├── api/
        │   ├── getKeys.ts                     # Получение списка ключей
        │   ├── getKeyDetail.ts                # Детали по ключу
        │   ├── generateKeyPair.ts             # Генерация ключа
        │   ├── revokeKey.ts                   # Удаление/аннулирование
        │   ├── signData.ts                    # Подпись данных
        │   └── verifySignature.ts             # Проверка подписи
        │
        ├── components/
        │   ├── KeyList.tsx                    # Список всех ключей
        │   ├── KeyDetailCard.tsx              # Панель детального просмотра
        │   ├── CreateKeyModal.tsx             # Модалка генерации
        │   ├── SignaturePanel.tsx             # Подпись/верификация
        │   └── KeyUsageChart.tsx              # Статистика использования
        │
        ├── context/
        │   └── KeyVaultContext.tsx            # Глобальный контекст ключей
        │
        ├── hooks/
        │   ├── useKeyList.ts                  # Получение списка
        │   ├── useKeyActions.ts               # Создание, удаление
        │   ├── useSignVerify.ts               # Подпись и верификация
        │   └── useKeyAudit.ts                 # Журнал действий
        │
        ├── models/
        │   ├── VaultKey.ts                    # Модель ключа
        │   ├── Signature.ts                   # Модель подписи
        │   ├── KeyAuditEntry.ts               # Модель аудита
        │   └── MultisigPolicy.ts              # Политика мультиподписи
        │
        ├── services/
        │   ├── keyVaultService.ts             # Работа с API
        │   ├── cryptoEngine.ts                # Подпись, генерация
        │   └── auditLogger.ts                 # Отправка аудита
        │
        ├── types/
        │   ├── KeyType.ts                     # GPG, JWT, RSA, Ed25519 и др
        │   ├── KeyStatus.ts                   # Valid, Revoked, Expired
        │   └── UserAccessLevel.ts             # Полномочия пользователя
        │
        ├── utils/
        │   ├── keyFormatter.ts                # Отображение ключей
        │   ├── keyValidator.ts                # Проверка валидности
        │   └── multisigUtils.ts               # Обработка multisig
        │
        └── index.ts                           # Точка входа в модуль

│   ├── marketplace/
        ├── api/
        │   ├── getProductList.ts              # Получение всех товаров
        │   ├── getProductDetail.ts            # Подробности товара
        │   ├── createOrder.ts                 # Создание заказа
        │   ├── getOrderStatus.ts              # Статус по заказу
        │   ├── cancelOrder.ts                 # Отмена заказа
        │   └── processPayment.ts              # Инициация оплаты (TON, $NEURO)
        │
        ├── components/
        │   ├── ProductCard.tsx                # Отображение товара
        │   ├── ProductGrid.tsx                # Сетка товаров
        │   ├── ProductDetail.tsx              # Детальная страница
        │   ├── CheckoutForm.tsx               # Оформление покупки
        │   ├── PaymentStatus.tsx              # Подтверждение оплаты
        │   ├── OrderHistory.tsx               # История заказов
        │   └── RatingStars.tsx                # Компонент оценки товара
        │
        ├── context/
        │   └── MarketplaceContext.tsx         # Контекст: корзина, заказы, авторизация
        │
        ├── hooks/
        │   ├── useMarketplace.ts              # Общий хук работы
        │   ├── useCart.ts                     # Корзина пользователя
        │   ├── useOrder.ts                    # Работа с заказами
        │   └── usePayment.ts                  # Работа с платёжкой
        │
        ├── models/
        │   ├── Product.ts                     # Модель товара
        │   ├── Order.ts                       # Модель заказа
        │   ├── Payment.ts                     # Модель оплаты
        │   └── Rating.ts                      # Модель пользовательского рейтинга
        │
        ├── services/
        │   ├── productService.ts              # API по товарам
        │   ├── orderService.ts                # API по заказам
        │   ├── paymentService.ts              # Оплата и web3
        │   └── aiRecommender.ts               # AI-модуль персонализации
        │
        ├── types/
        │   ├── ProductCategory.ts             # Категории: физ. товар, NFT, подписка
        │   ├── Currency.ts                    # $NEURO, TON, USDT
        │   └── OrderStatus.ts                 # Draft, Paid, Shipped, Cancelled
        │
        ├── utils/
        │   ├── priceFormatter.ts              # Форматирование цены
        │   ├── ratingUtils.ts                 # Оценка товара
        │   └── deliveryEstimator.ts           # Расчёт доставки
        │
        └── index.ts                           # Точка входа в модуль

│   ├── quantum/
        ├── api/
        │   ├── getQuantumJobs.ts                  # Получение списка квантовых задач
        │   ├── submitQuantumCircuit.ts            # Отправка схемы в backend
        │   ├── getExecutionResult.ts              # Получение результатов
        │   └── fetchProviders.ts                  # Поддержка Amazon Braket, IBM, IonQ
        │
        ├── components/
        │   ├── QuantumCircuitBuilder.tsx          # Конструктор квантовых схем
        │   ├── QuantumExecutionPanel.tsx          # Панель запуска задач
        │   ├── QuantumResultViewer.tsx            # Просмотр результатов
        │   ├── QubitStateVisualizer.tsx           # Отображение состояний кубитов
        │   └── FallbackWarning.tsx                # Переключение на симулятор
        │
        ├── context/
        │   └── QuantumContext.tsx                 # Состояние квантовой сессии
        │
        ├── hooks/
        │   ├── useQuantumJob.ts                   # Работа с задачами
        │   ├── useCircuitBuilder.ts               # Интерфейс построения схем
        │   ├── useQPUFallback.ts                  # Логика fallback на симулятор
        │   └── useQuantumProvider.ts              # Менеджмент провайдеров
        │
        ├── models/
        │   ├── QuantumCircuit.ts                  # Модель схемы
        │   ├── QuantumResult.ts                   # Результаты
        │   └── QuantumProvider.ts                 # Структура провайдера
        │
        ├── services/
        │   ├── qpuService.ts                      # Работа с квантовыми API
        │   ├── circuitService.ts                  # Построение и проверка схем
        │   ├── resultService.ts                   # Парсинг и обработка результатов
        │   └── quantumCompiler.ts                 # Компиляция в QASM/OpenQASM
        │
        ├── types/
        │   ├── GateType.ts                        # Типы гейтов: H, CNOT, etc
        │   ├── QPUStatus.ts                       # Статусы QPU
        │   └── QuantumBackend.ts                  # Типы backends: real/simulator
        │
        ├── utils/
        │   ├── qasmFormatter.ts                   # Форматирование кода схем
        │   ├── qubitMatrixUtils.ts                # Визуализация и матрицы
        │   └── resultNormalizer.ts                # Унификация результата
        │
        └── index.ts                               # Точка входа

│   ├── llmops/
        ├── api/
        │   ├── getModelStats.ts
        │   ├── submitInference.ts
        │   ├── loadFinetunedModel.ts
        │   └── getLLMRoute.ts
        │
        ├── components/
        │   ├── LLMOpsDashboard.tsx                # Общая панель
        │   ├── FinetuneManager.tsx                # Управление дообучением
        │   ├── PromptInspector.tsx                # Просмотр промптов и токенов
        │   ├── ModelSwitchControl.tsx             # Управление модельным роутером
        │   └── LLMABTestPanel.tsx                 # A/B тестирование моделей
        │
        ├── context/
        │   └── LLMOpsContext.tsx
        │
        ├── hooks/
        │   ├── useModelStats.ts
        │   ├── useFinetune.ts
        │   ├── useABTesting.ts
        │   └── usePromptInspector.ts
        │
        ├── services/
        │   ├── llmRouter.ts                       # Логика выбора модели
        │   ├── finetuneService.ts                 # Запуск дообучения
        │   ├── promptSanitizer.ts                 # Очистка и фильтрация
        │   └── tokenLogger.ts                     # Логирование токенов
        │
        ├── models/
        │   ├── LLMRoute.ts
        │   ├── FinetuneConfig.ts
        │   ├── InferenceLog.ts
        │   └── ModelInfo.ts
        │
        ├── types/
        │   ├── LLMProvider.ts                     # OpenAI, Anthropic, Mistral и др.
        │   ├── PromptType.ts
        │   ├── FinetuneStatus.ts
        │   └── LLMMetric.ts
        │
        ├── utils/
        │   ├── routeOptimizer.ts                  # Алгоритм выбора оптимальной модели
        │   ├── tokenUtils.ts
        │   └── latencyTracker.ts
        │
        ├── guards/
        │   └── promptGuard.ts                     # Валидатор безопасности
        │
        └── index.ts

│   ├── dao/
        ├── api/
        │   ├── getProposals.ts
        │   ├── submitProposal.ts
        │   ├── voteProposal.ts
        │   ├── getVotingResults.ts
        │   ├── getDelegations.ts
        │   └── executeProposal.ts
        │
        ├── components/
        │   ├── DAODashboard.tsx
        │   ├── ProposalList.tsx
        │   ├── ProposalDetail.tsx
        │   ├── VotingPanel.tsx
        │   ├── GovernanceTokenInfo.tsx
        │   └── DelegationManager.tsx
        │
        ├── context/
        │   └── DAOContext.tsx
        │
        ├── hooks/
        │   ├── useProposals.ts
        │   ├── useVote.ts
        │   ├── useDelegation.ts
        │   ├── useQuorum.ts
        │   └── useWalletConnection.ts
        │
        ├── contracts/
        │   ├── GovernanceABI.json
        │   ├── TreasuryABI.json
        │   ├── DAORegistryABI.json
        │   └── types.ts
        │
        ├── services/
        │   ├── proposalService.ts
        │   ├── votingService.ts
        │   ├── delegationService.ts
        │   ├── quorumCalculator.ts
        │   └── onchainExecutor.ts
        │
        ├── models/
        │   ├── Proposal.ts
        │   ├── Vote.ts
        │   ├── Delegation.ts
        │   └── GovernanceToken.ts
        │
        ├── types/
        │   ├── ProposalStatus.ts
        │   ├── VoteType.ts
        │   ├── ExecutionStatus.ts
        │   └── WalletProvider.ts
        │
        ├── guards/
        │   └── proposalGuard.ts                   # Проверка допустимости предложений
        │
        ├── utils/
        │   ├── proposalFormatter.ts
        │   ├── quorumUtils.ts
        │   ├── snapshotAdapter.ts                 # Поддержка Snapshot.org
        │   └── signatureVerifier.ts               # Подписи голосов
        │
        └── index.ts

│   ├── ueba/
        ├── api/
        │   ├── getUserBehavior.ts
        │   ├── getAnomalies.ts
        │   ├── postFeedback.ts
        │   ├── getEntityProfile.ts
        │   └── streamLiveThreats.ts
        │
        ├── components/
        │   ├── UEBADashboard.tsx
        │   ├── BehaviorTimeline.tsx
        │   ├── RiskHeatmap.tsx
        │   ├── AnomalyTable.tsx
        │   ├── EntityProfileCard.tsx
        │   └── RiskScoreGauge.tsx
        │
        ├── models/
        │   ├── BehaviorEvent.ts
        │   ├── RiskScore.ts
        │   ├── Anomaly.ts
        │   └── EntityProfile.ts
        │
        ├── context/
        │   └── UebaContext.tsx
        │
        ├── services/
        │   ├── behaviorAnalysisService.ts
        │   ├── anomalyDetectionService.ts
        │   ├── riskCalculationService.ts
        │   └── feedbackService.ts
        │
        ├── hooks/
        │   ├── useLiveThreats.ts
        │   ├── useEntityRisk.ts
        │   ├── useBehaviorTrends.ts
        │   └── useUebaContext.ts
        │
        ├── algorithms/
        │   ├── behavioralModel.ts
        │   ├── anomalyDetector.ts
        │   ├── riskEngine.ts
        │   └── patternCorrelator.ts
        │
        ├── utils/
        │   ├── normalizeBehavior.ts
        │   ├── riskColorScale.ts
        │   ├── anomalyUtils.ts
        │   └── entityMapper.ts
        │
        ├── types/
        │   ├── AnomalyType.ts
        │   ├── EntityType.ts
        │   ├── RiskLevel.ts
        │   └── FeedbackType.ts
        │
        └── index.ts

│   ├── plugins/
        ├── api/
        │   ├── getPluginList.ts
        │   ├── installPlugin.ts
        │   ├── removePlugin.ts
        │   ├── getPluginConfig.ts
        │   └── updatePlugin.ts
        │
        ├── components/
        │   ├── PluginListView.tsx
        │   ├── PluginCard.tsx
        │   ├── PluginUpload.tsx
        │   ├── PluginInstallModal.tsx
        │   ├── PluginSettingsPanel.tsx
        │   └── PluginPermissionsAudit.tsx
        │
        ├── context/
        │   └── PluginContext.tsx
        │
        ├── services/
        │   ├── pluginManager.ts
        │   ├── pluginRegistry.ts
        │   ├── pluginSandbox.ts
        │   └── pluginValidator.ts
        │
        ├── hooks/
        │   ├── usePluginStore.ts
        │   ├── usePluginContext.ts
        │   ├── usePluginHealth.ts
        │   └── usePluginPermissions.ts
        │
        ├── plugins_runtime/
        │   ├── manifest.schema.ts
        │   ├── PluginExecutor.ts
        │   ├── PluginBridge.ts
        │   └── PluginSandboxHost.ts
        │
        ├── utils/
        │   ├── pluginSigner.ts
        │   ├── pluginHasher.ts
        │   ├── pluginLoader.ts
        │   └── pluginVerifier.ts
        │
        ├── types/
        │   ├── PluginMeta.ts
        │   ├── PluginPermission.ts
        │   ├── PluginStatus.ts
        │   └── PluginManifest.ts
        │
        └── index.ts

│   ├── ctf/
        ├── api/
        │   ├── getChallenges.ts
        │   ├── getChallengeById.ts
        │   ├── submitFlag.ts
        │   ├── getScoreboard.ts
        │   └── getUserProgress.ts
        │
        ├── components/
        │   ├── ChallengeList.tsx
        │   ├── ChallengeCard.tsx
        │   ├── ChallengeSolveView.tsx
        │   ├── Scoreboard.tsx
        │   ├── TeamStatsPanel.tsx
        │   ├── ChallengeHints.tsx
        │   └── FlagSubmissionModal.tsx
        │
        ├── context/
        │   └── CTFContext.tsx
        │
        ├── services/
        │   ├── challengeEngine.ts
        │   ├── flagValidator.ts
        │   ├── scoreboardEngine.ts
        │   └── userStats.ts
        │
        ├── hooks/
        │   ├── useCTF.ts
        │   ├── useChallengeState.ts
        │   └── useScoreboard.ts
        │
        ├── types/
        │   ├── Challenge.ts
        │   ├── FlagSubmission.ts
        │   ├── ScoreboardEntry.ts
        │   └── TeamProfile.ts
        │
        ├── utils/
        │   ├── obfuscateFlag.ts
        │   ├── challengeTimer.ts
        │   └── scoringAlgorithm.ts
        │
        └── index.ts

│   ├── caplets/
        ├── api/
        │   ├── listCaplets.ts
        │   ├── getCapletById.ts
        │   ├── installCaplet.ts
        │   ├── removeCaplet.ts
        │   ├── updateCaplet.ts
        │   └── verifyCapletSignature.ts
        │
        ├── components/
        │   ├── CapletManager.tsx
        │   ├── CapletList.tsx
        │   ├── CapletDetails.tsx
        │   ├── CapletInstallForm.tsx
        │   ├── CapletSignatureViewer.tsx
        │   └── CapletPermissions.tsx
        │
        ├── context/
        │   └── CapletContext.tsx
        │
        ├── services/
        │   ├── capletLoader.ts
        │   ├── capletExecutor.ts
        │   ├── capletValidator.ts
        │   ├── capletRegistry.ts
        │   └── capletSandbox.ts
        │
        ├── hooks/
        │   ├── useCaplets.ts
        │   ├── useCapletInstall.ts
        │   ├── useCapletSecurity.ts
        │   └── useCapletActivity.ts
        │
        ├── types/
        │   ├── Caplet.ts
        │   ├── CapletMeta.ts
        │   ├── CapletPermission.ts
        │   └── CapletExecutionTrace.ts
        │
        ├── utils/
        │   ├── gpgVerifier.ts
        │   ├── capletHasher.ts
        │   ├── permissionMatrix.ts
        │   └── executionLogger.ts
        │
        └── index.ts

│   ├── security/
        ├── api/
        │   ├── fetchAuditLog.ts
        │   ├── fetchAccessMatrix.ts
        │   ├── getSecurityProfile.ts
        │   ├── updateSecurityPolicy.ts
        │   ├── rotateKeys.ts
        │   ├── scanThreats.ts
        │   └── verifyIntegrity.ts
        │
        ├── components/
        │   ├── SecurityDashboard.tsx
        │   ├── AccessMatrixTable.tsx
        │   ├── RBACEditor.tsx
        │   ├── ThreatIntelSummary.tsx
        │   ├── KeyRotationPanel.tsx
        │   ├── GuardrailPolicyEditor.tsx
        │   └── IntegrityStatusBar.tsx
        │
        ├── hooks/
        │   ├── useSecurityProfile.ts
        │   ├── useAuditTrail.ts
        │   ├── useThreatScan.ts
        │   ├── useRBAC.ts
        │   ├── useKeyRotation.ts
        │   └── usePolicyDraft.ts
        │
        ├── context/
        │   └── SecurityContext.tsx
        │
        ├── guards/
        │   ├── AIIntentGuard.ts
        │   ├── ZeroTrustGate.tsx
        │   └── RBACGate.tsx
        │
        ├── services/
        │   ├── securityEvaluator.ts
        │   ├── rbacEngine.ts
        │   ├── anomalyScanner.ts
        │   ├── integrityMonitor.ts
        │   └── policyManager.ts
        │
        ├── utils/
        │   ├── keySigner.ts
        │   ├── sandboxHashing.ts
        │   ├── signatureVerifier.ts
        │   └── accessRuleCompiler.ts
        │
        ├── types/
        │   ├── SecurityPolicy.ts
        │   ├── RBACMatrix.ts
        │   ├── GuardrailRule.ts
        │   ├── AuditEntry.ts
        │   └── KeySignature.ts
        │
        └── index.ts

│   ├── hacking/
        ├── api/
        │   ├── launchExploit.ts
        │   ├── fetchTargets.ts
        │   ├── getReconData.ts
        │   ├── runPayload.ts
        │   ├── fetchZeroDays.ts
        │   └── submitPoCReport.ts
        │
        ├── components/
        │   ├── HackingControlPanel.tsx
        │   ├── TargetMap.tsx
        │   ├── ExploitLauncher.tsx
        │   ├── PayloadEditor.tsx
        │   ├── ReconScanner.tsx
        │   └── VulnTimeline.tsx
        │
        ├── services/
        │   ├── exploitEngine.ts
        │   ├── reconOrchestrator.ts
        │   ├── zeroDayResolver.ts
        │   ├── fuzzingManager.ts
        │   └── sessionHandler.ts
        │
        ├── hooks/
        │   ├── useRecon.ts
        │   ├── useExploit.ts
        │   ├── usePayloadRunner.ts
        │   ├── useTargetScan.ts
        │   └── usePoCGenerator.ts
        │
        ├── utils/
        │   ├── obfuscatePayload.ts
        │   ├── encodeShellcode.ts
        │   ├── dnsTunnelBuilder.ts
        │   └── exploitValidator.ts
        │
        ├── types/
        │   ├── Exploit.ts
        │   ├── TargetProfile.ts
        │   ├── ReconResult.ts
        │   ├── Payload.ts
        │   └── PoCReport.ts
        │
        ├── context/
        │   └── HackingSessionContext.tsx
        │
        ├── guards/
        │   ├── RedTeamModeGuard.tsx
        │   └── PoCIntegrityGuard.ts
        │
        └── index.ts

│   ├── telegram_admin/
        ├── api/
        │   ├── getBotStatus.ts
        │   ├── fetchUsers.ts
        │   ├── toggleSubscription.ts
        │   ├── sendBroadcast.ts
        │   ├── fetchLogs.ts
        │   ├── setPermissions.ts
        │   └── updateBotSettings.ts
        │
        ├── components/
        │   ├── TelegramAdminPanel.tsx
        │   ├── BotStatusIndicator.tsx
        │   ├── UserTable.tsx
        │   ├── BroadcastForm.tsx
        │   ├── LogsViewer.tsx
        │   └── PermissionsEditor.tsx
        │
        ├── services/
        │   ├── telegramAPIClient.ts
        │   ├── sessionManager.ts
        │   ├── subscriptionService.ts
        │   └── adminLogParser.ts
        │
        ├── hooks/
        │   ├── useTelegramUsers.ts
        │   ├── useBotStatus.ts
        │   ├── useBroadcast.ts
        │   ├── useLogs.ts
        │   └── usePermissions.ts
        │
        ├── types/
        │   ├── TelegramUser.ts
        │   ├── BotStatus.ts
        │   ├── AdminLog.ts
        │   ├── BroadcastPayload.ts
        │   └── UserPermissions.ts
        │
        ├── context/
        │   └── TelegramAdminContext.tsx
        │
        ├── guards/
        │   ├── AdminOnlyGuard.tsx
        │   └── RoleAccessGuard.ts
        │
        ├── utils/
        │   ├── formatTelegramUser.ts
        │   ├── sanitizeMessage.ts
        │   └── permissionMatrix.ts
        │
        └── index.ts

│   ├── ci_cd/
        ├── api/
        │   ├── getPipelineStatus.ts
        │   ├── triggerPipeline.ts
        │   ├── fetchBuildLogs.ts
        │   ├── cancelPipeline.ts
        │   └── getEnvironments.ts
        │
        ├── components/
        │   ├── CICDDashboard.tsx
        │   ├── PipelineList.tsx
        │   ├── BuildLogViewer.tsx
        │   ├── PipelineTriggerForm.tsx
        │   ├── EnvironmentSwitcher.tsx
        │   └── PipelineStatusCard.tsx
        │
        ├── services/
        │   ├── cicdAPIClient.ts
        │   ├── pipelineManager.ts
        │   ├── logFetcher.ts
        │   ├── deploymentHooks.ts
        │   └── environmentRegistry.ts
        │
        ├── context/
        │   └── CICDContext.tsx
        │
        ├── hooks/
        │   ├── usePipelineStatus.ts
        │   ├── useTriggerPipeline.ts
        │   ├── useLogs.ts
        │   ├── useEnvironment.ts
        │   └── useAutoDeploy.ts
        │
        ├── types/
        │   ├── Pipeline.ts
        │   ├── BuildLog.ts
        │   ├── Environment.ts
        │   └── DeploymentResult.ts
        │
        ├── utils/
        │   ├── parseLogs.ts
        │   ├── formatDuration.ts
        │   ├── generatePipelineID.ts
        │   └── validatePipelineConfig.ts
        │
        ├── guards/
        │   ├── DeploymentGuard.tsx
        │   └── EnvironmentAccessGuard.tsx
        │
        ├── config/
        │   ├── ci-cd.env.ts
        │   └── cicd_defaults.ts
        │
        └── index.ts

│   ├── ai_ethics/
        ├── components/
        │   ├── EthicsPanel.tsx
        │   ├── AIBehaviorOverview.tsx
        │   ├── MoralConflictDetector.tsx
        │   ├── ComplianceRadar.tsx
        │   ├── EthicsRuleEditor.tsx
        │   └── EthicsScoreGauge.tsx
        │
        ├── engine/
        │   ├── ethicsEngineCore.ts
        │   ├── moralEvaluator.ts
        │   ├── ethicalConflictResolver.ts
        │   ├── intentPolicyMatcher.ts
        │   └── behaviorPredictor.ts
        │
        ├── api/
        │   ├── getEthicsScore.ts
        │   ├── getEthicsViolations.ts
        │   ├── updateEthicsRule.ts
        │   └── getMoralAuditTrail.ts
        │
        ├── services/
        │   ├── ethicsPolicyService.ts
        │   ├── conflictAnalyzer.ts
        │   ├── auditLogger.ts
        │   └── aiBehaviorFetcher.ts
        │
        ├── types/
        │   ├── EthicsRule.ts
        │   ├── AIAction.ts
        │   ├── Violation.ts
        │   ├── MoralProfile.ts
        │   └── EthicsScore.ts
        │
        ├── context/
        │   └── EthicsContext.tsx
        │
        ├── hooks/
        │   ├── useEthicsScore.ts
        │   ├── useEthicalAnalysis.ts
        │   ├── useMoralConflicts.ts
        │   └── useRuleValidation.ts
        │
        ├── guards/
        │   ├── EthicsAccessGuard.tsx
        │   └── RuleModificationGuard.tsx
        │
        ├── utils/
        │   ├── normalizeMoralVectors.ts
        │   ├── extractAIIntents.ts
        │   ├── ethicsRuleLinter.ts
        │   └── decisionImpactEstimator.ts
        │
        ├── data/
        │   ├── ethics_dataset.json
        │   ├── training_samples.yaml
        │   └── ethical_cases.db
        │
        ├── config/
        │   ├── ethics.conf.ts
        │   └── thresholds.ts
        │
        └── index.ts

│   ├── crisis_simulator/
        ├── components/
        │   ├── CrisisControlPanel.tsx
        │   ├── ScenarioConfigurator.tsx
        │   ├── SimulationDashboard.tsx
        │   ├── RiskGauge.tsx
        │   └── SimulationPlayback.tsx
        │
        ├── engine/
        │   ├── crisisCore.ts
        │   ├── crisisPropagation.ts
        │   ├── scenarioBuilder.ts
        │   ├── entityBehaviorModel.ts
        │   ├── impactCalculator.ts
        │   └── rollbackManager.ts
        │
        ├── api/
        │   ├── startSimulation.ts
        │   ├── stopSimulation.ts
        │   ├── getCurrentScenario.ts
        │   └── applyIntervention.ts
        │
        ├── hooks/
        │   ├── useSimulationState.ts
        │   ├── useCrisisEntities.ts
        │   ├── useRiskAnalysis.ts
        │   └── useTimeTravel.ts
        │
        ├── services/
        │   ├── scenarioService.ts
        │   ├── interventionService.ts
        │   ├── crisisLogger.ts
        │   └── metricsAggregator.ts
        │
        ├── types/
        │   ├── Scenario.ts
        │   ├── CrisisEvent.ts
        │   ├── SimulationResult.ts
        │   ├── EntityState.ts
        │   └── Intervention.ts
        │
        ├── utils/
        │   ├── generateScenarioSeed.ts
        │   ├── interpolateImpactCurve.ts
        │   ├── validateScenario.ts
        │   └── simulateEntityResponse.ts
        │
        ├── config/
        │   ├── constants.ts
        │   └── thresholds.ts
        │
        ├── context/
        │   └── CrisisSimulatorContext.tsx
        │
        ├── data/
        │   ├── prebuilt_scenarios/
        │   │   ├── blackout.json
        │   │   ├── pandemic.json
        │   │   ├── cyber_attack.json
        │   │   └── flood_emergency.json
        │   └── agents_config.yaml
        │
        └── index.ts

│   └── intel_analytics/
        ├── components/
        │   ├── IntelDashboard.tsx
        │   ├── ThreatGraph.tsx
        │   ├── EntityProfileCard.tsx
        │   ├── SignalMap.tsx
        │   ├── AnomalyFeed.tsx
        │   ├── TimelineView.tsx
        │   └── IntelWidgetSummary.tsx
        │
        ├── api/
        │   ├── fetchIntelData.ts
        │   ├── queryThreatEntity.ts
        │   ├── fetchAnomalies.ts
        │   └── intelReportExport.ts
        │
        ├── services/
        │   ├── intelStreamParser.ts
        │   ├── graphBuilder.ts
        │   ├── anomalyDetector.ts
        │   ├── threatClassifier.ts
        │   └── geopositionTracker.ts
        │
        ├── models/
        │   ├── IntelEntity.ts
        │   ├── ThreatNode.ts
        │   ├── Alert.ts
        │   ├── GeoSignal.ts
        │   └── ReportMetadata.ts
        │
        ├── context/
        │   └── IntelAnalyticsContext.tsx
        │
        ├── hooks/
        │   ├── useIntelStream.ts
        │   ├── useThreatGraph.ts
        │   ├── useAnomalyAnalysis.ts
        │   └── useGeoSignal.ts
        │
        ├── utils/
        │   ├── normalizeIntelPayload.ts
        │   ├── parseOSINTFeed.ts
        │   ├── generateRiskScore.ts
        │   ├── deduplicateIntel.ts
        │   └── matchEntitySignature.ts
        │
        ├── store/
        │   └── intelSlice.ts
        │
        ├── config/
        │   ├── intelSources.json
        │   ├── feedMappings.yaml
        │   └── severityThresholds.ts
        │
        ├── types/
        │   ├── IntelEntry.ts
        │   ├── SourceType.ts
        │   ├── RiskLevel.ts
        │   └── GeoLocation.ts
        │
        ├── assets/
        │   └── threat-icons/
        │       ├── malware.svg
        │       ├── phishing.svg
        │       ├── ddos.svg
        │       └── unknown.svg
        │
        └── index.ts
├── shared/
│   ├── ui/
        ├── layout/
        │   ├── PageLayout.tsx
        │   ├── PanelContainer.tsx
        │   ├── ResponsiveGrid.tsx
        │   └── SectionDivider.tsx

        ├── elements/
        │   ├── Button.tsx
        │   ├── IconButton.tsx
        │   ├── Tooltip.tsx
        │   ├── Badge.tsx
        │   ├── Avatar.tsx
        │   └── Spinner.tsx

        ├── data/
        │   ├── Table.tsx
        │   ├── DataCard.tsx
        │   ├── DataTag.tsx
        │   ├── StatBlock.tsx
        │   └── InfoGrid.tsx

        ├── charts/
        │   ├── LineChart.tsx
        │   ├── BarChart.tsx
        │   ├── RadarChart.tsx
        │   ├── AreaChart.tsx
        │   └── PieChart.tsx

        ├── inputs/
        │   ├── TextInput.tsx
        │   ├── Select.tsx
        │   ├── MultiSelect.tsx
        │   ├── DatePicker.tsx
        │   ├── Toggle.tsx
        │   └── Slider.tsx

        ├── navigation/
        │   ├── Sidebar.tsx
        │   ├── Breadcrumbs.tsx
        │   ├── TabBar.tsx
        │   └── Pagination.tsx

        ├── overlays/
        │   ├── Modal.tsx
        │   ├── Drawer.tsx
        │   ├── Popover.tsx
        │   └── ContextMenu.tsx

        ├── feedback/
        │   ├── Alert.tsx
        │   ├── Notification.tsx
        │   ├── Toast.tsx
        │   └── StatusIndicator.tsx

        ├── skeletons/
        │   ├── TableSkeleton.tsx
        │   ├── ChartSkeleton.tsx
        │   └── CardSkeleton.tsx

        ├── theme/
        │   ├── ThemeProvider.tsx
        │   ├── useTheme.ts
        │   └── darkModeToggle.tsx

        ├── icons/
        │   ├── index.ts
        │   └── (все SVG-иконки, импортируемые как React-компоненты)

        ├── animations/
        │   ├── TransitionWrapper.tsx
        │   ├── FadeIn.tsx
        │   └── SlideIn.tsx

        └── index.ts

│   ├── components/
        ├── AgentCard/
        │   ├── AgentCard.tsx
        │   ├── AgentAvatar.tsx
        │   ├── AgentStatusBadge.tsx
        │   └── index.ts

        ├── GovernanceWidget/
        │   ├── ProposalList.tsx
        │   ├── ProposalDetail.tsx
        │   ├── VoteDistributionChart.tsx
        │   └── index.ts

        ├── KeyVault/
        │   ├── KeyList.tsx
        │   ├── KeyDetailCard.tsx
        │   ├── KeySecurityTag.tsx
        │   └── index.ts

        ├── AnalyticsPanel/
        │   ├── MetricTile.tsx
        │   ├── MetricTrend.tsx
        │   ├── AnalyticsChart.tsx
        │   └── index.ts

        ├── XAIBlock/
        │   ├── Explanation.tsx
        │   ├── SaliencyMap.tsx
        │   ├── FeatureImportanceChart.tsx
        │   └── index.ts

        ├── TokenStats/
        │   ├── TokenPriceCard.tsx
        │   ├── LiquidityInfo.tsx
        │   ├── TransactionVolumeChart.tsx
        │   └── index.ts

        ├── ThreatAnalysis/
        │   ├── ThreatTimeline.tsx
        │   ├── ThreatLevelGauge.tsx
        │   ├── ThreatMatrix.tsx
        │   └── index.ts

        ├── CrisisSim/
        │   ├── CrisisControlPanel.tsx
        │   ├── ScenarioMap.tsx
        │   ├── ResponseSimulator.tsx
        │   └── index.ts

        ├── DIDManager/
        │   ├── DIDCard.tsx
        │   ├── DIDStatus.tsx
        │   ├── DIDTimeline.tsx
        │   └── index.ts

        ├── WorldEditor/
        │   ├── RegionSelector.tsx
        │   ├── ObjectConfigurator.tsx
        │   ├── ViewportController.tsx
        │   └── index.ts

        ├── AIControlPanel/
        │   ├── AgentOverrideSwitch.tsx
        │   ├── AIIntentLog.tsx
        │   ├── OverrideDialog.tsx
        │   └── index.ts

        ├── EthicsEngine/
        │   ├── EthicalRuleCard.tsx
        │   ├── MoralConflictChart.tsx
        │   ├── SanctionLevelTag.tsx
        │   └── index.ts

        ├── DAOInterface/
        │   ├── ProposalCreator.tsx
        │   ├── TreasuryDashboard.tsx
        │   ├── VoterActivityHeatmap.tsx
        │   └── index.ts

        └── index.ts

│   └── layout/
src/
└── shared/
    └── layout/
        ├── AppLayout/
        │   ├── AppLayout.tsx                     # Главный layout приложения
        │   ├── Sidebar.tsx                       # Навигационная боковая панель
        │   ├── Header.tsx                        # Верхняя панель (с AI-статусом)
        │   ├── Footer.tsx                        # Нижняя часть (метаинфо, статус)
        │   ├── MobileNav.tsx                     # Адаптивное мобильное меню
        │   └── index.ts

        ├── AuthLayout/
        │   ├── AuthLayout.tsx                    # Layout для логина/регистрации
        │   ├── AuthHeader.tsx
        │   ├── AuthFooter.tsx
        │   └── index.ts

        ├── DashboardLayout/
        │   ├── DashboardLayout.tsx               # Layout дашбордов/панелей
        │   ├── TopBar.tsx
        │   ├── NavigationMenu.tsx
        │   ├── ContentWrapper.tsx
        │   └── index.ts

        ├── PageContainer/
        │   ├── PageContainer.tsx                 # Контейнер страницы с padding/scroll
        │   ├── PageTitle.tsx
        │   ├── PageMeta.tsx
        │   └── index.ts

        ├── SplitScreenLayout/
        │   ├── SplitScreenLayout.tsx             # Лэйаут с разделённым экраном
        │   ├── LeftPane.tsx
        │   ├── RightPane.tsx
        │   └── index.ts

        ├── GridLayouts/
        │   ├── ResponsiveGrid.tsx                # Grid-сетка с адаптацией
        │   ├── MetricsGrid.tsx                   # Для метрик и KPI
        │   ├── GridItem.tsx
        │   └── index.ts

        ├── FullscreenLayouts/
        │   ├── FullscreenMap.tsx                 # Отображение карты или симуляции
        │   ├── Fullscreen3D.tsx                  # Интеграция с three.js сценами
        │   └── index.ts

        ├── TabsLayout/
        │   ├── TabsLayout.tsx                    # Универсальный табовый layout
        │   ├── TabHeader.tsx
        │   ├── TabPanel.tsx
        │   └── index.ts

        ├── AdaptiveLayout/
        │   ├── CollapseSidebarWrapper.tsx        # Адаптивное поведение sidebar
        │   ├── ResponsiveWrapper.tsx             # Переключение layout по ширине
        │   └── index.ts

        └── index.ts                               # Глобальный экспорт всех layout-модулей

├── utils/
    ├── ai/
    │   ├── aiTools.ts                         # Общие AI-функции: генерация, валидация
    │   ├── promptBuilder.ts                   # Построение промптов (XAI, GPT, Claude)
    │   ├── intentResolver.ts                  # Разбор намерений из текста
    │   └── modelUtils.ts                      # Поддержка нескольких моделей

    ├── analytics/
    │   ├── timeSeriesUtils.ts                 # Утилиты для временных рядов (KPI)
    │   ├── anomalyDetection.ts                # Примитивные методы для UEBA/анализов
    │   ├── stats.ts                           # Среднее, медиана, квантиль и др.
    │   └── modelEvaluation.ts                 # Метрики для ML-инференса

    ├── crypto/
    │   ├── encryption.ts                      # Шифрование/дешифрование (AES, RSA)
    │   ├── hashUtils.ts                       # Хеш-функции (SHA256, Keccak и др.)
    │   ├── signature.ts                       # Подписи (ECDSA, GPG)
    │   └── zeroTrust.ts                       # Валидация по Zero Trust-архитектуре

    ├── date/
    │   ├── formatDate.ts                      # Форматирование дат (локализация)
    │   ├── dateDiff.ts                        # Разница между датами
    │   ├── timezones.ts                       # Работа с временными зонами
    │   └── now.ts                             # Секундная/милисекундная точность

    ├── formatting/
    │   ├── numberFormat.ts                    # Формат чисел: валюты, разделители
    │   ├── truncate.ts                        # Усечение строк с суффиксом
    │   ├── bytesToSize.ts                     # Перевод байтов в KB/MB/GB
    │   └── sanitizeText.ts                    # Удаление нежелательных символов

    ├── logger/
    │   ├── devLogger.ts                       # Логирование в dev-режиме
    │   ├── prodLogger.ts                      # Логирование в проде (LogRocket, Sentry)
    │   ├── logFormatter.ts                    # Форматирование логов (JSON)
    │   └── index.ts                           # Универсальный экспорт логгера

    ├── network/
    │   ├── fetchWrapper.ts                    # Обёртка над fetch с логикой ошибок
    │   ├── retry.ts                           # Повтор запроса с backoff
    │   ├── socketUtils.ts                     # Поддержка WebSocket / Socket.IO
    │   └── apiRoutes.ts                       # Централизованные пути API

    ├── security/
    │   ├── rbac.ts                            # Role-Based Access Control
    │   ├── inputValidator.ts                  # Валидация пользовательского ввода
    │   ├── permissions.ts                     # Проверка прав доступа
    │   └── maskSensitive.ts                   # Маскирование данных (email, токены)

    ├── store/
    │   ├── sessionStorage.ts                  # Работа с sessionStorage
    │   ├── localStorage.ts                    # Работа с localStorage
    │   └── memoryCache.ts                     # Временное кэширование

    ├── system/
    │   ├── env.ts                             # Проверка окружения: prod/dev/test
    │   ├── detectPlatform.ts                  # iOS, Android, Desktop
    │   └── runtimeCheck.ts                    # Проверка на наличие браузерных API

    ├── workers/
    │   ├── taskQueue.ts                       # Очередь задач в UI
    │   ├── schedule.ts                        # Планирование задач (cron-like)
    │   └── defer.ts                           # Отложенное выполнение

    ├── constants/
    │   ├── colors.ts                          # Глобальные цвета UI
    │   ├── config.ts                          # Конфигурации проекта
    │   └── regex.ts                           # Регулярные выражения

    └── index.ts                               # Централизованный экспорт утилит

