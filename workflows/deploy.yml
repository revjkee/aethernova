name: TeslaAI Genesis — Production Deploy Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'telegram_bot/**'
      - '.github/workflows/deploy.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/teslaai-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/teslaai-frontend
  DEPLOY_ENV: production

jobs:
  preflight-checks:
    name: Static & Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Run Secret Scan
        uses: trufflesecurity/trufflehog@v3

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: python, javascript

      - name: Perform Dependency Audit
        run: |
          pip install safety
          safety check -r telegram_bot/backend/requirements.txt || true
          npm audit --prefix telegram_bot/frontend || true

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: preflight-checks
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          pip install -r telegram_bot/backend/requirements.txt
      - name: Run Backend tests
        run: |
          pytest telegram_bot/backend/tests

      - name: Install Node dependencies
        run: |
          cd telegram_bot/frontend
          npm install
      - name: Run Frontend tests
        run: |
          cd telegram_bot/frontend
          npm run test

  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Build and push backend image
        run: |
          docker build -t $REGISTRY/${{ env.IMAGE_NAME_BACKEND }}:latest -f telegram_bot/backend/Dockerfile .
          docker push $REGISTRY/${{ env.IMAGE_NAME_BACKEND }}:latest

      - name: Build and push frontend image
        run: |
          docker build -t $REGISTRY/${{ env.IMAGE_NAME_FRONTEND }}:latest -f telegram_bot/frontend/frontend.Dockerfile .
          docker push $REGISTRY/${{ env.IMAGE_NAME_FRONTEND }}:latest

  deploy:
    name: Deploy via Ansible
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy using Ansible
        run: |
          cd orchestrator/deployment_scripts/ansible
          ansible-playbook -i inventory.ini playbook.yml --extra-vars "env=production"

  post-deploy:
    name: Notify and verify
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Send Slack Notification
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "*TeslaAI Genesis* успешно задеплоен в `production` :rocket:"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Healthcheck
        run: |
          curl --fail https://yourdomain.com/api/health || exit 1
