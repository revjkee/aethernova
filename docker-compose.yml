
version: "3.9"
services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: backend
    restart: always
    env_file:
      - .env
    ports:
      - "8000:8000"
    volumes:
      - ./backend/src:/app/src:ro
      - backend-data:/app/data
      - ./logs/backend:/app/logs
    depends_on:
      - db
      - redis
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db/${POSTGRES_DB}
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
    container_name: frontend
    restart: always
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api
    volumes:
      - ./frontend/src:/app/src:ro
    networks:
      - app-network

  db:
    image: postgres:15-alpine
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: always
    volumes:
      - redis-data:/data
    networks:
      - app-network

  grafana:
    image: grafana/grafana:9.5.2
    container_name: grafana
    restart: always
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "${GRAFANA_ADMIN_PASSWORD}"
    depends_on:
      - prometheus
    networks:
      - monitoring-network

  prometheus:
    image: prom/prometheus:v2.44.0
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - monitoring-network

  zabbix-server:
    image: zabbix/zabbix-server-pgsql:alpine-latest
    container_name: zabbix-server
    ports:
      - "10051:10051"
    environment:
      DB_SERVER_HOST: postgres
      POSTGRES_USER: zabbix
      POSTGRES_PASSWORD: zabbix_pass
    networks:
      - app-network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
    ports:
      - "9200:9200"
    networks:
      - app-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.1
    container_name: kibana
    ports:
      - "5601:5601"
    networks:
      - app-network

  zabbix-web:
    image: zabbix/zabbix-web-nginx-pgsql:alpine-latest
    container_name: zabbix-web
    ports:
      - "8080:8080"
    environment:
      ZBX_SERVER_HOST: zabbix-server
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
  monitoring-network:
    driver: bridge

volumes:
  db-data:
    driver: local
  redis-data:
    driver: local
  grafana-data:
    driver: local
  prometheus-data:
    driver: local
  backend-data:
    driver: local
