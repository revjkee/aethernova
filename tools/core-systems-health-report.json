[
  {
    "name": "aethernova-chain-core",
    "path": "/workspaces/aethernova/core-systems/aethernova-chain-core",
    "has_Makefile": true,
    "Makefile_targets": [
      "test"
    ],
    "has_package_json": false,
    "package_scripts": {},
    "has_pyproject": false,
    "scripts_with_health": [
      "ops/terraform/modules/k8s-observability/grafana/dashboards/consensus/consensus-liveness.json",
      "ops/terraform/modules/policies/kyverno/policies/clusterpolicies/best-practices/enforce-probes-liveness-readiness.yaml"
    ],
    "docker_healthcheck": true,
    "readme_mentions": [],
    "candidate_commands": [
      "make -C /workspaces/aethernova/core-systems/aethernova-chain-core test"
    ]
  },
  {
    "name": "ai-platform-core",
    "path": "/workspaces/aethernova/core-systems/ai-platform-core",
    "has_Makefile": false,
    "Makefile_targets": [],
    "has_package_json": false,
    "package_scripts": {},
    "has_pyproject": false,
    "scripts_with_health": [],
    "docker_healthcheck": false,
    "readme_mentions": [],
    "candidate_commands": []
  },
  {
    "name": "automation-core",
    "path": "/workspaces/aethernova/core-systems/automation-core",
    "has_Makefile": true,
    "Makefile_targets": [
      "typecheck",
      "test",
      "check"
    ],
    "has_package_json": false,
    "package_scripts": {},
    "has_pyproject": true,
    "scripts_with_health": [],
    "docker_healthcheck": true,
    "readme_mentions": [],
    "candidate_commands": [
      "make -C /workspaces/aethernova/core-systems/automation-core check",
      "make -C /workspaces/aethernova/core-systems/automation-core test",
      "make -C /workspaces/aethernova/core-systems/automation-core typecheck"
    ]
  },
  {
    "name": "avm-core",
    "path": "/workspaces/aethernova/core-systems/avm-core",
    "has_Makefile": true,
    "Makefile_targets": [
      "typecheck",
      "test",
      "check"
    ],
    "has_package_json": false,
    "package_scripts": {},
    "has_pyproject": true,
    "scripts_with_health": [
      "avm_core/api/routes/health.py"
    ],
    "docker_healthcheck": false,
    "readme_mentions": [],
    "candidate_commands": [
      "bash /workspaces/aethernova/core-systems/avm-core/avm_core/api/routes/health.py",
      "make -C /workspaces/aethernova/core-systems/avm-core check",
      "make -C /workspaces/aethernova/core-systems/avm-core test",
      "make -C /workspaces/aethernova/core-systems/avm-core typecheck"
    ]
  },
  {
    "name": "blackvault-core",
    "path": "/workspaces/aethernova/core-systems/blackvault-core",
    "has_Makefile": false,
    "Makefile_targets": [],
    "has_package_json": false,
    "package_scripts": {},
    "has_pyproject": false,
    "scripts_with_health": [
      "blackvault-core/api/rest/handlers/health.py"
    ],
    "docker_healthcheck": false,
    "readme_mentions": [],
    "candidate_commands": [
      "bash /workspaces/aethernova/core-systems/blackvault-core/blackvault-core/api/rest/handlers/health.py"
    ]
  },
  {
    "name": "chronowatch-core",
    "path": "/workspaces/aethernova/core-systems/chronowatch-core",
    "has_Makefile": true,
    "Makefile_targets": [
      "typecheck",
      "test"
    ],
    "has_package_json": true,
    "package_scripts": {
      "sdks/typescript/package.json": [
        "clean",
        "build",
        "dev",
        "typecheck",
        "lint",
        "lint:fix",
        "format",
        "format:fix",
        "test",
        "test:ci",
        "docs",
        "prepare",
        "prepublishOnly"
      ]
    },
    "has_pyproject": true,
    "scripts_with_health": [
      "schemas/proto/v1/chronowatch/health.proto",
      "api/http/routers/v1/health.py"
    ],
    "docker_healthcheck": false,
    "readme_mentions": [],
    "candidate_commands": [
      "bash /workspaces/aethernova/core-systems/chronowatch-core/api/http/routers/v1/health.py",
      "cd /workspaces/aethernova/core-systems/chronowatch-core && npm run test",
      "make -C /workspaces/aethernova/core-systems/chronowatch-core test",
      "make -C /workspaces/aethernova/core-systems/chronowatch-core typecheck"
    ]
  },
  {
    "name": "compliance-core",
    "path": "/workspaces/aethernova/core-systems/compliance-core",
    "has_Makefile": false,
    "Makefile_targets": [],
    "has_package_json": false,
    "package_scripts": {},
    "has_pyproject": false,
    "scripts_with_health": [],
    "docker_healthcheck": false,
    "readme_mentions": [],
    "candidate_commands": []
  },
  {
    "name": "cybersecurity-core",
    "path": "/workspaces/aethernova/core-systems/cybersecurity-core",
    "has_Makefile": true,
    "Makefile_targets": [
      "fmt-check",
      "typecheck",
      "test"
    ],
    "has_package_json": true,
    "package_scripts": {
      "sdks/typescript/package.json": [
        "clean",
        "build",
        "build:prod",
        "dev",
        "typecheck",
        "lint",
        "format",
        "test",
        "test:watch",
        "coverage",
        "docs",
        "prepublishOnly",
        "release",
        "prepare"
      ]
    },
    "has_pyproject": true,
    "scripts_with_health": [
      "schemas/proto/v1/cybersecurity/health.proto",
      "api/http/routers/v1/health.py"
    ],
    "docker_healthcheck": true,
    "readme_mentions": [],
    "candidate_commands": [
      "bash /workspaces/aethernova/core-systems/cybersecurity-core/api/http/routers/v1/health.py",
      "cd /workspaces/aethernova/core-systems/cybersecurity-core && npm run test",
      "make -C /workspaces/aethernova/core-systems/cybersecurity-core fmt-check",
      "make -C /workspaces/aethernova/core-systems/cybersecurity-core test",
      "make -C /workspaces/aethernova/core-systems/cybersecurity-core typecheck"
    ]
  },
  {
    "name": "datafabric-core",
    "path": "/workspaces/aethernova/core-systems/datafabric-core",
    "has_Makefile": true,
    "Makefile_targets": [
      "fmt-check",
      "test",
      "docker-test"
    ],
    "has_package_json": true,
    "package_scripts": {
      "sdks/typescript/package.json": [
        "clean",
        "build",
        "dev",
        "lint",
        "format",
        "test",
        "test:watch",
        "typecheck",
        "generate:graphql",
        "generate:proto",
        "generate:jsonschema",
        "release",
        "security:audit",
        "ci:verify"
      ]
    },
    "has_pyproject": true,
    "scripts_with_health": [
      "api/http/routers/v1/health.py"
    ],
    "docker_healthcheck": true,
    "readme_mentions": [
      "README.md"
    ],
    "candidate_commands": [
      "bash /workspaces/aethernova/core-systems/datafabric-core/api/http/routers/v1/health.py",
      "cd /workspaces/aethernova/core-systems/datafabric-core && npm run test",
      "make -C /workspaces/aethernova/core-systems/datafabric-core docker-test",
      "make -C /workspaces/aethernova/core-systems/datafabric-core fmt-check",
      "make -C /workspaces/aethernova/core-systems/datafabric-core test"
    ]
  },
  {
    "name": "engine-core",
    "path": "/workspaces/aethernova/core-systems/engine-core",
    "has_Makefile": true,
    "Makefile_targets": [
      "typecheck",
      "test"
    ],
    "has_package_json": true,
    "package_scripts": {
      "sdks/typescript/package.json": [
        "clean",
        "build",
        "build:types",
        "dev",
        "lint",
        "lint:fix",
        "format",
        "format:fix",
        "typecheck",
        "test",
        "test:watch",
        "size",
        "prepack",
        "release",
        "version-pack",
        "audit"
      ]
    },
    "has_pyproject": true,
    "scripts_with_health": [
      "api/http/routers/v1/health.py"
    ],
    "docker_healthcheck": false,
    "readme_mentions": [
      "README.md"
    ],
    "candidate_commands": [
      "bash /workspaces/aethernova/core-systems/engine-core/api/http/routers/v1/health.py",
      "cd /workspaces/aethernova/core-systems/engine-core && npm run test",
      "grep -n \"health\" /workspaces/aethernova/core-systems/engine-core/pyproject.toml",
      "make -C /workspaces/aethernova/core-systems/engine-core test",
      "make -C /workspaces/aethernova/core-systems/engine-core typecheck"
    ]
  },
  {
    "name": "evolution-core",
    "path": "/workspaces/aethernova/core-systems/evolution-core",
    "has_Makefile": false,
    "Makefile_targets": [],
    "has_package_json": false,
    "package_scripts": {},
    "has_pyproject": false,
    "scripts_with_health": [],
    "docker_healthcheck": false,
    "readme_mentions": [],
    "candidate_commands": []
  },
  {
    "name": "forgemind-core",
    "path": "/workspaces/aethernova/core-systems/forgemind-core",
    "has_Makefile": false,
    "Makefile_targets": [],
    "has_package_json": false,
    "package_scripts": {},
    "has_pyproject": false,
    "scripts_with_health": [],
    "docker_healthcheck": false,
    "readme_mentions": [],
    "candidate_commands": []
  },
  {
    "name": "genesisops-core",
    "path": "/workspaces/aethernova/core-systems/genesisops-core",
    "has_Makefile": false,
    "Makefile_targets": [],
    "has_package_json": false,
    "package_scripts": {},
    "has_pyproject": false,
    "scripts_with_health": [],
    "docker_healthcheck": false,
    "readme_mentions": [],
    "candidate_commands": []
  },
  {
    "name": "genius-core",
    "path": "/workspaces/aethernova/core-systems/genius-core",
    "has_Makefile": false,
    "Makefile_targets": [],
    "has_package_json": false,
    "package_scripts": {},
    "has_pyproject": false,
    "scripts_with_health": [],
    "docker_healthcheck": false,
    "readme_mentions": [],
    "candidate_commands": []
  },
  {
    "name": "graph-core",
    "path": "/workspaces/aethernova/core-systems/graph-core",
    "has_Makefile": false,
    "Makefile_targets": [],
    "has_package_json": true,
    "package_scripts": {
      "examples/20/telegram_bot/package.json": [
        "dev",
        "build",
        "preview",
        "lint"
      ],
      "examples/20/frontend/package.json": [
        "dev",
        "build",
        "preview",
        "lint",
        "format",
        "test",
        "test:ci",
        "cypress:open",
        "cypress:run"
      ]
    },
    "has_pyproject": false,
    "scripts_with_health": [
      "examples/20/game/ux_interface/hud/healthBar.js",
      "examples/20/plugins/health/health_check.py",
      "examples/20/core-systems/ledger-core/schemas/proto/v1/ledger/health.proto",
      "examples/20/core-systems/ledger-core/api/http/routers/v1/health.py",
      "examples/20/core-systems/platform_ops-core/deployment_scripts/fabric/observers/health_monitor.py",
      "examples/20/core-systems/omnimind-core/api/http/routers/v1/health.py",
      "examples/20/core-systems/resilience-core/schemas/proto/v1/resilience/health.proto",
      "examples/20/core-systems/resilience-core/resilience/failover/healthcheck.py",
      "examples/20/core-systems/resilience-core/api/http/routers/v1/health.py",
      "examples/20/core-systems/datafabric-core/api/http/routers/v1/health.py",
      "examples/20/core-systems/physical-integration-core/physical_integration/workers/health_monitor.py",
      "examples/20/core-systems/phantommesh-core/relay_stabilizer/node_health_monitor.py",
      "examples/20/core-systems/security-core/schemas/proto/v1/security/health.proto",
      "examples/20/core-systems/security-core/api/http/routers/v1/health.py",
      "examples/20/core-systems/engine-core/api/http/routers/v1/health.py",
      "examples/20/core-systems/offensive-security-core/autopwn-framework/core/health_check.py",
      "examples/20/frontend/src/utils/widgets/HR/OnboardingReadiness.tsx",
      "examples/20/frontend/src/widgets/governance/DAOHealthScoreWidget.tsx",
      "examples/20/frontend/src/widgets/core/WebSocketHealthBeacon.tsx",
      "examples/20/frontend/src/widgets/monitoring/HealthStatusBadge.tsx",
      "examples/20/frontend/src/widgets/monitoring/NodeHealthMeter.tsx",
      "examples/20/launch/diagnostics/ai_healthcheck.py"
    ],
    "docker_healthcheck": false,
    "readme_mentions": [],
    "candidate_commands": [
      "bash /workspaces/aethernova/core-systems/graph-core/examples/20/core-systems/datafabric-core/api/http/routers/v1/health.py",
      "bash /workspaces/aethernova/core-systems/graph-core/examples/20/core-systems/engine-core/api/http/routers/v1/health.py",
      "bash /workspaces/aethernova/core-systems/graph-core/examples/20/core-systems/ledger-core/api/http/routers/v1/health.py",
      "bash /workspaces/aethernova/core-systems/graph-core/examples/20/core-systems/offensive-security-core/autopwn-framework/core/health_check.py",
      "bash /workspaces/aethernova/core-systems/graph-core/examples/20/core-systems/omnimind-core/api/http/routers/v1/health.py",
      "bash /workspaces/aethernova/core-systems/graph-core/examples/20/core-systems/phantommesh-core/relay_stabilizer/node_health_monitor.py",
      "bash /workspaces/aethernova/core-systems/graph-core/examples/20/core-systems/physical-integration-core/physical_integration/workers/health_monitor.py",
      "bash /workspaces/aethernova/core-systems/graph-core/examples/20/core-systems/platform_ops-core/deployment_scripts/fabric/observers/health_monitor.py",
      "bash /workspaces/aethernova/core-systems/graph-core/examples/20/core-systems/resilience-core/api/http/routers/v1/health.py",
      "bash /workspaces/aethernova/core-systems/graph-core/examples/20/core-systems/resilience-core/resilience/failover/healthcheck.py",
      "bash /workspaces/aethernova/core-systems/graph-core/examples/20/core-systems/security-core/api/http/routers/v1/health.py",
      "bash /workspaces/aethernova/core-systems/graph-core/examples/20/launch/diagnostics/ai_healthcheck.py",
      "bash /workspaces/aethernova/core-systems/graph-core/examples/20/plugins/health/health_check.py",
      "cd /workspaces/aethernova/core-systems/graph-core && npm run test"
    ]
  },
  {
    "name": "identity-access-core",
    "path": "/workspaces/aethernova/core-systems/identity-access-core",
    "has_Makefile": false,
    "Makefile_targets": [],
    "has_package_json": false,
    "package_scripts": {},
    "has_pyproject": false,
    "scripts_with_health": [],
    "docker_healthcheck": false,
    "readme_mentions": [],
    "candidate_commands": []
  },
  {
    "name": "intel_core",
    "path": "/workspaces/aethernova/core-systems/intel_core",
    "has_Makefile": false,
    "Makefile_targets": [],
    "has_package_json": false,
    "package_scripts": {},
    "has_pyproject": false,
    "scripts_with_health": [],
    "docker_healthcheck": false,
    "readme_mentions": [],
    "candidate_commands": []
  },
  {
    "name": "ledger-core",
    "path": "/workspaces/aethernova/core-systems/ledger-core",
    "has_Makefile": true,
    "Makefile_targets": [
      "test"
    ],
    "has_package_json": true,
    "package_scripts": {
      "sdks/typescript/package.json": [
        "prebuild",
        "build",
        "build:watch",
        "check",
        "lint",
        "lint:fix",
        "format",
        "format:write",
        "test",
        "test:watch",
        "coverage",
        "prepare",
        "release",
        "clean",
        "validate"
      ]
    },
    "has_pyproject": true,
    "scripts_with_health": [
      "schemas/proto/v1/ledger/health.proto",
      "api/http/routers/v1/health.py"
    ],
    "docker_healthcheck": true,
    "readme_mentions": [
      "README.md"
    ],
    "candidate_commands": [
      "bash /workspaces/aethernova/core-systems/ledger-core/api/http/routers/v1/health.py",
      "cd /workspaces/aethernova/core-systems/ledger-core && npm run check",
      "cd /workspaces/aethernova/core-systems/ledger-core && npm run test",
      "make -C /workspaces/aethernova/core-systems/ledger-core test"
    ]
  },
  {
    "name": "mythos-core",
    "path": "/workspaces/aethernova/core-systems/mythos-core",
    "has_Makefile": true,
    "Makefile_targets": [
      "test"
    ],
    "has_package_json": true,
    "package_scripts": {
      "sdks/typescript/package.json": [
        "clean",
        "build",
        "build:watch",
        "typecheck",
        "lint",
        "lint:fix",
        "format",
        "format:fix",
        "test",
        "test:watch",
        "coverage",
        "docs",
        "prepare",
        "prepublishOnly",
        "release",
        "release:auto"
      ]
    },
    "has_pyproject": true,
    "scripts_with_health": [
      "api/http/routers/v1/health.py"
    ],
    "docker_healthcheck": true,
    "readme_mentions": [],
    "candidate_commands": [
      "bash /workspaces/aethernova/core-systems/mythos-core/api/http/routers/v1/health.py",
      "cd /workspaces/aethernova/core-systems/mythos-core && npm run test",
      "make -C /workspaces/aethernova/core-systems/mythos-core test"
    ]
  },
  {
    "name": "neuroforge-core",
    "path": "/workspaces/aethernova/core-systems/neuroforge-core",
    "has_Makefile": true,
    "Makefile_targets": [
      "fmt-check",
      "typecheck",
      "test",
      "test-integration",
      "ci-check"
    ],
    "has_package_json": true,
    "package_scripts": {
      "sdks/typescript/package.json": [
        "clean",
        "build",
        "dev",
        "typecheck",
        "lint",
        "lint:fix",
        "format",
        "format:write",
        "test",
        "test:watch",
        "coverage",
        "docs",
        "prepublishOnly",
        "prepare"
      ]
    },
    "has_pyproject": true,
    "scripts_with_health": [
      "schemas/proto/v1/neuroforge/health.proto",
      "api/http/routers/v1/health.py"
    ],
    "docker_healthcheck": true,
    "readme_mentions": [],
    "candidate_commands": [
      "bash /workspaces/aethernova/core-systems/neuroforge-core/api/http/routers/v1/health.py",
      "cd /workspaces/aethernova/core-systems/neuroforge-core && npm run test",
      "make -C /workspaces/aethernova/core-systems/neuroforge-core ci-check",
      "make -C /workspaces/aethernova/core-systems/neuroforge-core fmt-check",
      "make -C /workspaces/aethernova/core-systems/neuroforge-core test",
      "make -C /workspaces/aethernova/core-systems/neuroforge-core test-integration",
      "make -C /workspaces/aethernova/core-systems/neuroforge-core typecheck"
    ]
  },
  {
    "name": "oblivionvault-core",
    "path": "/workspaces/aethernova/core-systems/oblivionvault-core",
    "has_Makefile": true,
    "Makefile_targets": [
      "test"
    ],
    "has_package_json": true,
    "package_scripts": {
      "sdks/typescript/package.json": [
        "clean",
        "build",
        "dev",
        "typecheck",
        "lint",
        "lint:fix",
        "fmt",
        "fmt:check",
        "test",
        "test:watch",
        "coverage",
        "check",
        "docs",
        "prepack"
      ]
    },
    "has_pyproject": true,
    "scripts_with_health": [
      "schemas/proto/v1/oblivion/health.proto",
      "api/http/routers/v1/health.py"
    ],
    "docker_healthcheck": true,
    "readme_mentions": [],
    "candidate_commands": [
      "bash /workspaces/aethernova/core-systems/oblivionvault-core/api/http/routers/v1/health.py",
      "cd /workspaces/aethernova/core-systems/oblivionvault-core && npm run check",
      "cd /workspaces/aethernova/core-systems/oblivionvault-core && npm run test",
      "make -C /workspaces/aethernova/core-systems/oblivionvault-core test"
    ]
  },
  {
    "name": "observability-core",
    "path": "/workspaces/aethernova/core-systems/observability-core",
    "has_Makefile": false,
    "Makefile_targets": [],
    "has_package_json": false,
    "package_scripts": {},
    "has_pyproject": false,
    "scripts_with_health": [],
    "docker_healthcheck": false,
    "readme_mentions": [],
    "candidate_commands": []
  },
  {
    "name": "offensive-security-core",
    "path": "/workspaces/aethernova/core-systems/offensive-security-core",
    "has_Makefile": false,
    "Makefile_targets": [],
    "has_package_json": false,
    "package_scripts": {},
    "has_pyproject": false,
    "scripts_with_health": [
      "autopwn-framework/core/health_check.py"
    ],
    "docker_healthcheck": false,
    "readme_mentions": [],
    "candidate_commands": [
      "bash /workspaces/aethernova/core-systems/offensive-security-core/autopwn-framework/core/health_check.py"
    ]
  },
  {
    "name": "omnimind-core",
    "path": "/workspaces/aethernova/core-systems/omnimind-core",
    "has_Makefile": true,
    "Makefile_targets": [
      "typecheck",
      "test"
    ],
    "has_package_json": true,
    "package_scripts": {
      "sdks/typescript/package.json": [
        "clean",
        "build",
        "build:watch",
        "typecheck",
        "lint",
        "lint:fix",
        "format",
        "format:write",
        "test",
        "test:watch",
        "test:cov",
        "docs",
        "release",
        "prepare",
        "prepublishOnly"
      ]
    },
    "has_pyproject": true,
    "scripts_with_health": [
      "ops/ansible/roles/omnimind-core/tasks/healthcheck.yml",
      "ops/ansible/roles/omnimind-core/files/scripts/healthcheck.sh",
      "api/http/routers/v1/health.py"
    ],
    "docker_healthcheck": true,
    "readme_mentions": [],
    "candidate_commands": [
      "bash /workspaces/aethernova/core-systems/omnimind-core/api/http/routers/v1/health.py",
      "bash /workspaces/aethernova/core-systems/omnimind-core/ops/ansible/roles/omnimind-core/files/scripts/healthcheck.sh",
      "cd /workspaces/aethernova/core-systems/omnimind-core && npm run test",
      "make -C /workspaces/aethernova/core-systems/omnimind-core test",
      "make -C /workspaces/aethernova/core-systems/omnimind-core typecheck"
    ]
  },
  {
    "name": "onchain-core",
    "path": "/workspaces/aethernova/core-systems/onchain-core",
    "has_Makefile": true,
    "Makefile_targets": [],
    "has_package_json": false,
    "package_scripts": {},
    "has_pyproject": false,
    "scripts_with_health": [],
    "docker_healthcheck": false,
    "readme_mentions": [],
    "candidate_commands": []
  },
  {
    "name": "phantommesh-core",
    "path": "/workspaces/aethernova/core-systems/phantommesh-core",
    "has_Makefile": false,
    "Makefile_targets": [],
    "has_package_json": false,
    "package_scripts": {},
    "has_pyproject": false,
    "scripts_with_health": [
      "relay_stabilizer/node_health_monitor.py"
    ],
    "docker_healthcheck": false,
    "readme_mentions": [],
    "candidate_commands": [
      "bash /workspaces/aethernova/core-systems/phantommesh-core/relay_stabilizer/node_health_monitor.py"
    ]
  },
  {
    "name": "physical-integration-core",
    "path": "/workspaces/aethernova/core-systems/physical-integration-core",
    "has_Makefile": true,
    "Makefile_targets": [
      "check-poetry",
      "test"
    ],
    "has_package_json": true,
    "package_scripts": {
      "sdks/typescript/package.json": [
        "clean",
        "build",
        "dev",
        "typecheck",
        "lint",
        "lint:fix",
        "format",
        "format:write",
        "test",
        "test:watch",
        "prepublishOnly",
        "prepare",
        "release"
      ]
    },
    "has_pyproject": true,
    "scripts_with_health": [
      "schemas/proto/v1/physical/health.proto",
      "physical_integration/workers/health_monitor.py",
      "api/http/routers/v1/health.py"
    ],
    "docker_healthcheck": true,
    "readme_mentions": [
      "README.md"
    ],
    "candidate_commands": [
      "bash /workspaces/aethernova/core-systems/physical-integration-core/api/http/routers/v1/health.py",
      "bash /workspaces/aethernova/core-systems/physical-integration-core/physical_integration/workers/health_monitor.py",
      "cd /workspaces/aethernova/core-systems/physical-integration-core && npm run test",
      "make -C /workspaces/aethernova/core-systems/physical-integration-core check-poetry",
      "make -C /workspaces/aethernova/core-systems/physical-integration-core test"
    ]
  },
  {
    "name": "platform-security-core",
    "path": "/workspaces/aethernova/core-systems/platform-security-core",
    "has_Makefile": false,
    "Makefile_targets": [],
    "has_package_json": false,
    "package_scripts": {},
    "has_pyproject": false,
    "scripts_with_health": [
      "threat-intel/service/controllers/health_controller.py",
      "anon-privacy/tor/monitors/healthcheck.py"
    ],
    "docker_healthcheck": false,
    "readme_mentions": [],
    "candidate_commands": [
      "bash /workspaces/aethernova/core-systems/platform-security-core/anon-privacy/tor/monitors/healthcheck.py",
      "bash /workspaces/aethernova/core-systems/platform-security-core/threat-intel/service/controllers/health_controller.py"
    ]
  },
  {
    "name": "platform_ops-core",
    "path": "/workspaces/aethernova/core-systems/platform_ops-core",
    "has_Makefile": true,
    "Makefile_targets": [
      "test"
    ],
    "has_package_json": false,
    "package_scripts": {},
    "has_pyproject": false,
    "scripts_with_health": [
      "deployment_scripts/fabric/observers/health_monitor.py"
    ],
    "docker_healthcheck": false,
    "readme_mentions": [],
    "candidate_commands": [
      "bash /workspaces/aethernova/core-systems/platform_ops-core/deployment_scripts/fabric/observers/health_monitor.py",
      "make -C /workspaces/aethernova/core-systems/platform_ops-core test"
    ]
  },
  {
    "name": "policy-core",
    "path": "/workspaces/aethernova/core-systems/policy-core",
    "has_Makefile": true,
    "Makefile_targets": [
      "test",
      "policy-test"
    ],
    "has_package_json": true,
    "package_scripts": {
      "sdks/typescript/package.json": [
        "clean",
        "build",
        "dev",
        "typecheck",
        "lint",
        "lint:fix",
        "format",
        "format:write",
        "test",
        "test:watch",
        "audit",
        "prepare",
        "prepublishOnly",
        "release"
      ]
    },
    "has_pyproject": true,
    "scripts_with_health": [
      "schemas/proto/v1/policy/health.proto",
      "api/http/routers/v1/health.py"
    ],
    "docker_healthcheck": true,
    "readme_mentions": [
      "README.md"
    ],
    "candidate_commands": [
      "bash /workspaces/aethernova/core-systems/policy-core/api/http/routers/v1/health.py",
      "cd /workspaces/aethernova/core-systems/policy-core && npm run test",
      "make -C /workspaces/aethernova/core-systems/policy-core policy-test",
      "make -C /workspaces/aethernova/core-systems/policy-core test"
    ]
  },
  {
    "name": "quantum-core",
    "path": "/workspaces/aethernova/core-systems/quantum-core",
    "has_Makefile": false,
    "Makefile_targets": [],
    "has_package_json": false,
    "package_scripts": {},
    "has_pyproject": false,
    "scripts_with_health": [],
    "docker_healthcheck": false,
    "readme_mentions": [],
    "candidate_commands": []
  },
  {
    "name": "quantumpulse-core",
    "path": "/workspaces/aethernova/core-systems/quantumpulse-core",
    "has_Makefile": false,
    "Makefile_targets": [],
    "has_package_json": false,
    "package_scripts": {},
    "has_pyproject": false,
    "scripts_with_health": [],
    "docker_healthcheck": false,
    "readme_mentions": [],
    "candidate_commands": []
  },
  {
    "name": "resilience-core",
    "path": "/workspaces/aethernova/core-systems/resilience-core",
    "has_Makefile": true,
    "Makefile_targets": [],
    "has_package_json": false,
    "package_scripts": {},
    "has_pyproject": true,
    "scripts_with_health": [
      "schemas/proto/v1/resilience/health.proto",
      "resilience/failover/healthcheck.py",
      "api/http/routers/v1/health.py"
    ],
    "docker_healthcheck": false,
    "readme_mentions": [],
    "candidate_commands": [
      "bash /workspaces/aethernova/core-systems/resilience-core/api/http/routers/v1/health.py",
      "bash /workspaces/aethernova/core-systems/resilience-core/resilience/failover/healthcheck.py"
    ]
  },
  {
    "name": "sageai-core",
    "path": "/workspaces/aethernova/core-systems/sageai-core",
    "has_Makefile": false,
    "Makefile_targets": [],
    "has_package_json": false,
    "package_scripts": {},
    "has_pyproject": false,
    "scripts_with_health": [],
    "docker_healthcheck": false,
    "readme_mentions": [],
    "candidate_commands": []
  },
  {
    "name": "security-core",
    "path": "/workspaces/aethernova/core-systems/security-core",
    "has_Makefile": true,
    "Makefile_targets": [
      "test"
    ],
    "has_package_json": true,
    "package_scripts": {
      "sdks/typescript/package.json": [
        "clean",
        "build",
        "dev",
        "lint",
        "format",
        "format:fix",
        "test",
        "test:coverage",
        "typecheck",
        "audit",
        "security:scan",
        "prepare",
        "release"
      ]
    },
    "has_pyproject": true,
    "scripts_with_health": [
      "schemas/proto/v1/security/health.proto",
      "api/http/routers/v1/health.py"
    ],
    "docker_healthcheck": true,
    "readme_mentions": [],
    "candidate_commands": [
      "bash /workspaces/aethernova/core-systems/security-core/api/http/routers/v1/health.py",
      "cd /workspaces/aethernova/core-systems/security-core && npm run test",
      "make -C /workspaces/aethernova/core-systems/security-core test"
    ]
  },
  {
    "name": "sentinelwatch-core",
    "path": "/workspaces/aethernova/core-systems/sentinelwatch-core",
    "has_Makefile": false,
    "Makefile_targets": [],
    "has_package_json": false,
    "package_scripts": {},
    "has_pyproject": false,
    "scripts_with_health": [],
    "docker_healthcheck": false,
    "readme_mentions": [],
    "candidate_commands": []
  },
  {
    "name": "silentlink-core",
    "path": "/workspaces/aethernova/core-systems/silentlink-core",
    "has_Makefile": false,
    "Makefile_targets": [],
    "has_package_json": false,
    "package_scripts": {},
    "has_pyproject": false,
    "scripts_with_health": [],
    "docker_healthcheck": false,
    "readme_mentions": [],
    "candidate_commands": []
  },
  {
    "name": "veilmind-core",
    "path": "/workspaces/aethernova/core-systems/veilmind-core",
    "has_Makefile": true,
    "Makefile_targets": [],
    "has_package_json": true,
    "package_scripts": {
      "sdks/typescript/package.json": [
        "clean",
        "build",
        "build:watch",
        "typecheck",
        "lint",
        "lint:fix",
        "format",
        "format:write",
        "test",
        "test:watch",
        "docs",
        "prepare",
        "prepublishOnly",
        "release:dry",
        "release"
      ]
    },
    "has_pyproject": true,
    "scripts_with_health": [
      "schemas/proto/v1/veilmind/health.proto",
      "api/http/routers/v1/health.py"
    ],
    "docker_healthcheck": true,
    "readme_mentions": [],
    "candidate_commands": [
      "bash /workspaces/aethernova/core-systems/veilmind-core/api/http/routers/v1/health.py",
      "cd /workspaces/aethernova/core-systems/veilmind-core && npm run test",
      "grep -n \"health\" /workspaces/aethernova/core-systems/veilmind-core/pyproject.toml"
    ]
  },
  {
    "name": "zero-trust-core",
    "path": "/workspaces/aethernova/core-systems/zero-trust-core",
    "has_Makefile": true,
    "Makefile_targets": [
      "test"
    ],
    "has_package_json": true,
    "package_scripts": {
      "sdks/typescript/package.json": [
        "clean",
        "build",
        "build:ci",
        "typecheck",
        "lint",
        "lint:fix",
        "format",
        "format:fix",
        "test",
        "test:watch",
        "docs",
        "prepare",
        "prepublishOnly",
        "release",
        "check"
      ]
    },
    "has_pyproject": true,
    "scripts_with_health": [
      "schemas/proto/v1/zero_trust/health.proto",
      "api/http/routers/v1/health.py"
    ],
    "docker_healthcheck": true,
    "readme_mentions": [],
    "candidate_commands": [
      "bash /workspaces/aethernova/core-systems/zero-trust-core/api/http/routers/v1/health.py",
      "cd /workspaces/aethernova/core-systems/zero-trust-core && npm run check",
      "cd /workspaces/aethernova/core-systems/zero-trust-core && npm run test",
      "make -C /workspaces/aethernova/core-systems/zero-trust-core test"
    ]
  },
  {
    "name": "zk-core",
    "path": "/workspaces/aethernova/core-systems/zk-core",
    "has_Makefile": false,
    "Makefile_targets": [],
    "has_package_json": false,
    "package_scripts": {},
    "has_pyproject": false,
    "scripts_with_health": [],
    "docker_healthcheck": false,
    "readme_mentions": [],
    "candidate_commands": []
  }
]
