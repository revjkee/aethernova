# keyvault/storage/backup_exporter.py

import os
import json
import logging
import tempfile
import subprocess
import pysqlcipher3.dbapi2 as sql
from datetime import datetime

from keyvault.config.vault_config_loader import get_storage_config
from keyvault.utils.context_utils import get_current_context_hash
from keyvault.core.signing_engine import sign_payload_cli

logger = logging.getLogger("vault_backup_exporter")
logger.setLevel(logging.INFO)

DB_PATH = "keyvault/storage/vault_db.sqlite"
BACKUP_FILE = "keyvault/storage/vault_backup.json.gpg"
GPG_RECIPIENT = os.environ.get("KEYVAULT_GPG_IDENTITY")
DB_KEY = get_storage_config()["encryption_key"]


def fetch_secrets_from_db():
    conn = sql.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(f"PRAGMA key = '{DB_KEY}'")
    cursor.execute("SELECT key, value, scope, metadata, created_at FROM secrets")
    rows = cursor.fetchall()
    conn.close()

    data = []
    for r in rows:
        data.append({
            "key": r[0],
            "value": r[1],
            "scope": r[2],
            "metadata": json.loads(r[3]) if r[3] else None,
            "created_at": r[4]
        })

    return data


def export_backup():
    logger.info("Экспорт секретов в JSON...")
    secrets = fetch_secrets_from_db()

    backup_payload = {
        "exported_at": datetime.utcnow().isoformat() + "Z",
        "context_hash": get_current_context_hash("cli-agent"),
        "data": secrets,
    }
    backup_payload["signature"] = sign_payload_cli(json.dumps(backup_payload["data"]).encode("utf-8"))

    with tempfile.NamedTemporaryFile("w+", delete=False, suffix=".json") as tf:
        json.dump(backup_payload, tf, indent=2)
        tf.flush()
        encrypted_file = BACKUP_FILE

        logger.info("Шифрование резервной копии с помощью GPG...")
        subprocess.run([
            "gpg", "--yes", "--encrypt",
            "--recipient", GPG_RECIPIENT,
            "--output", encrypted_file,
            tf.name
        ], check=True)

        os.unlink(tf.name)
        logger.info(f"Резервная копия сохранена: {encrypted_file}")


if __name__ == "__main__":
    if not GPG_RECIPIENT:
        logger.error("Переменная окружения KEYVAULT_GPG_IDENTITY не установлена.")
        exit(1)

    export_backup()
