# Скрипт для создания и обновления db_creds.enc
# Используется AES-256-GCM с ключом, хранящимся в HashiCorp Vault Transit Engine

#!/bin/bash
set -euo pipefail

# Конфигурация
VAULT_ADDR="https://vault.example.com"
VAULT_TOKEN_FILE="$HOME/.vault-token"
TRANSIT_KEY="db-enc-key"
PLAIN_FILE="db_creds.json"
ENC_FILE="db_creds.enc"

# Проверка наличия токена
if [[ ! -f "$VAULT_TOKEN_FILE" ]]; then
  echo "Vault token file not found: $VAULT_TOKEN_FILE"
  exit 1
fi

VAULT_TOKEN=$(cat "$VAULT_TOKEN_FILE")

# Пример файла с данными для БД (JSON)
cat > "$PLAIN_FILE" << EOF
{
  "username": "dbuser",
  "password": "SuperSecretPassword123!",
  "host": "db.prod.internal",
  "port": 5432,
  "dbname": "production_db"
}
EOF

# Шифрование через Vault Transit API
ENC_RESULT=$(curl -s --header "X-Vault-Token: $VAULT_TOKEN" \
  --request POST \
  --data "{\"plaintext\":\"$(base64 -w0 $PLAIN_FILE)\"}" \
  "$VAULT_ADDR/v1/transit/encrypt/$TRANSIT_KEY")

# Извлечение зашифрованного текста
CIPHER_TEXT=$(echo "$ENC_RESULT" | jq -r '.data.ciphertext')

if [[ -z "$CIPHER_TEXT" || "$CIPHER_TEXT" == "null" ]]; then
  echo "Encryption failed, response:"
  echo "$ENC_RESULT"
  exit 1
fi

echo "$CIPHER_TEXT" > "$ENC_FILE"
rm -f "$PLAIN_FILE"

echo "Encrypted db_creds saved to $ENC_FILE"
