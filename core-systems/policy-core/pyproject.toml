[build-system]
requires = ["hatchling>=1.25.0", "hatch-vcs>=0.4.0"]
build-backend = "hatchling.build"

[project]
name = "policy-core"
# Версия берётся из VCS-тегов через hatch-vcs: v1.2.3 => 1.2.3
dynamic = ["version"]
description = "Policy Core: guardrails, ethics, permissions, validations for Aethernova/NeuroCity."
readme = "README.md"
requires-python = ">=3.11,<3.13"
license = { text = "Apache-2.0" }
authors = [
  { name = "Aethernova / NeuroCity Council", email = "dev@aethernova.local" }
]
keywords = ["policy", "guardrails", "ethics", "zero-trust", "ai-governance", "validation"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: Apache Software License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Typing :: Typed",
]

dependencies = [
  "pydantic>=2.7.0",
  "pydantic-settings>=2.2.1",
  "pyyaml>=6.0.1",
  "jsonschema>=4.21.1",
  "rich>=13.7.1",
  "cryptography>=42.0.5",
  "typing-extensions>=4.12.0",
]

[project.optional-dependencies]
grpc = [
  "grpcio>=1.62.0",
  "grpcio-tools>=1.62.0",
  "protobuf>=4.25.3",
]
web = [
  "fastapi>=0.111.0",
  "uvicorn[standard]>=0.29.0",
  "httpx>=0.27.0",
]
zk = [
  "py-ecc>=6.0.0",
  "pycryptodome>=3.20.0",
]
dev = [
  "pytest>=8.2.0",
  "pytest-asyncio>=0.23.0",
  "pytest-cov>=5.0.0",
  "coverage>=7.5.0",
  "black>=24.4.0",
  "ruff>=0.5.0",
  "mypy>=1.10.0",
  "types-PyYAML>=6.0.12.20240808",
  "bandit>=1.7.9",
  "pyright>=1.1.377",
  "hatch>=1.12.0",
]

[project.scripts]
policyctl = "policy_core.cli:main"

[project.urls]
# Укажите реальные ссылки репозитория/документации при наличии
# "Homepage" = "https://REPLACE-ME"
# "Repository" = "https://REPLACE-ME"

[tool.hatch.version]
source = "vcs"
raw-options = { local_scheme = "no-local-version" }

[tool.hatch.build]
# Исключаем мусор и тяжелые артефакты
ignore-vcs = false

[tool.hatch.build.targets.wheel]
packages = ["src/policy_core"]

[tool.hatch.build.targets.sdist]
include = [
  "/src",
  "/pyproject.toml",
  "/README.md",
  "/LICENSE*",
  "/CHANGELOG*",
  "/examples",
  "/tests",
]

[tool.hatch.envs.default]
features = ["dev"]
python = "3.12"
dependencies = [
  # дубль dev-зависимостей автоматически подтянется через features
]
# Удобные задачи: hatch run <task>
[tool.hatch.envs.default.scripts]
fmt = [
  "ruff check --select I --fix .",
  "black .",
  "ruff format .",
]
lint = [
  "ruff check .",
  "bandit -q -r src -c pyproject.toml",
]
typecheck = [
  "mypy --config-file pyproject.toml",
  "pyright",
]
test = [
  "pytest -q --maxfail=1",
]
cov = [
  "pytest --cov=policy_core --cov-report=term-missing --cov-report=xml:coverage.xml --cov-report=html",
]
all = [
  "fmt",
  "lint",
  "typecheck",
  "cov",
]

[tool.hatch.envs.ci]
python = "3.11"
features = ["dev"]
[tool.hatch.envs.ci.scripts]
ci = [
  "ruff check .",
  "black --check .",
  "mypy --config-file pyproject.toml",
  "pytest --cov=policy_core --cov-report=xml:coverage.xml",
]

# ---------------- Formatting & Lint ----------------

[tool.black]
line-length = 100
target-version = ["py311", "py312"]
skip-string-normalization = true
preview = true

[tool.ruff]
target-version = "py311"
line-length = 100

[tool.ruff.format]
# Используем форматтер Ruff для согласованности с Black (оставлен Black как основной)
docstring-code-format = true
quote-style = "preserve"

[tool.ruff.lint]
# Набор правил: основные ошибки, импорты, баги, апгрейды, производительность и т.п.
select = [
  "E",  # pycodestyle errors
  "F",  # pyflakes
  "I",  # isort (импорт-упорядочивание)
  "B",  # flake8-bugbear
  "UP", # pyupgrade
  "SIM",# flake8-simplify
  "PERF", # perflint
  "RUF",# ruff-specific
  "PL", # pylint (подмножество)
  "RET",# returns
  "ARG",# unused args
]
ignore = [
  "E203", # совместимость с black по срезам
  "E501", # длина строки контролируем через line-length
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["PLR2004", "ARG002", "ARG001"]

# ---------------- Type Checking ----------------

[tool.mypy]
python_version = "3.11"
strict = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
disallow_any_generics = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
no_implicit_optional = true
check_untyped_defs = true
show_error_codes = true
pretty = true
exclude = [
  "^build/",
  "^dist/",
  "^.venv/",
  "^.tox/",
]
plugins = []

[mypy-tests.*]
# Тесты могут быть слабее по типам
disallow_untyped_defs = false
disallow_incomplete_defs = false

# Дополнительный статический анализ от Pyright
[tool.pyright]
pythonVersion = "3.11"
typeCheckingMode = "strict"
venvPath = "."
reportMissingTypeStubs = "warning"
reportPrivateUsage = "none"
reportIncompatibleMethodOverride = "error"
exclude = [
  "**/build",
  "**/dist",
  ".venv",
]

# ---------------- Tests & Coverage ----------------

[tool.pytest.ini_options]
addopts = "-ra"
testpaths = ["tests"]
xfail_strict = true
filterwarnings = [
  "error::DeprecationWarning",
  "ignore::UserWarning",
]
asyncio_mode = "auto"
log_cli = true
log_cli_level = "INFO"

[tool.coverage.run]
branch = true
source = ["src/policy_core"]
omit = [
  "tests/*",
  "**/__init__.py",
]
relative_files = true

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 90

[tool.coverage.html]
directory = "htmlcov"

# ---------------- Security ----------------

[tool.bandit]
skips = ["B101"]  # assert-use допустим в тестах
exclude = ["tests"]

# ---------------- Commit / Release discipline (optional) ----------------

[tool.commitizen]
name = "cz_conventional_commits"
version_provider = "pep621"
tag_format = "v$version"
update_changelog_on_bump = true
