# policy-core/configs/rbac.yaml
# Prod-grade RBAC с принципом наименьших привилегий.
# Совместим с Kustomize base (namespace задаётся в overlay).

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: policy-core
  labels:
    app.kubernetes.io/name: policy-core
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: policy-core
    app.kubernetes.io/managed-by: kustomize
# В большинстве случаев приложению нужен токен для работы с API (events/leases).
# automountServiceAccountToken можно переопределить в PodSpec при необходимости.
automountServiceAccountToken: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: policy-core
  labels:
    app.kubernetes.io/name: policy-core
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: policy-core
    app.kubernetes.io/managed-by: kustomize
rules:
  # Чтение конфигурации
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "watch"]

  # Ограниченное чтение секрета по имени (при необходимости заменить имя на фактическое)
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["policy-core-secrets"]  # Замените в overlay на актуальный Secret
    verbs: ["get"]

  # Лидер-элекция через coordination.k8s.io/Lease
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]

  # Логирование событий приложения
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch", "update"]

  # Сервис-дискавери (в рамках namespace)
  - apiGroups: [""]
    resources: ["endpoints", "services"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["discovery.k8s.io"]
    resources: ["endpointslices"]
    verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: policy-core
  labels:
    app.kubernetes.io/name: policy-core
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: policy-core
    app.kubernetes.io/managed-by: kustomize
subjects:
  - kind: ServiceAccount
    name: policy-core
    # namespace не указываем — будет подставлен текущий при применении в overlay
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: policy-core

# -----------------------------------------------------------------------------
# ОПЦИОНАЛЬНО: межнеймспейсное чтение сервис-дискавери (например, если policy-core
# должен наблюдать сервисы в нескольких namespace). По умолчанию выключено.
# Раскомментируйте блоки ниже ТОЛЬКО при явной необходимости.
# -----------------------------------------------------------------------------
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRole
# metadata:
#   name: policy-core-cross-namespace-read
#   labels:
#     app.kubernetes.io/name: policy-core
#     app.kubernetes.io/component: api
#     app.kubernetes.io/part-of: policy-core
#     app.kubernetes.io/managed-by: kustomize
# rules:
#   - apiGroups: [""]
#     resources: ["endpoints", "services"]
#     verbs: ["get", "list", "watch"]
#   - apiGroups: ["discovery.k8s.io"]
#     resources: ["endpointslices"]
#     verbs: ["get", "list", "watch"]
#
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRoleBinding
# metadata:
#   name: policy-core-cross-namespace-read
#   labels:
#     app.kubernetes.io/name: policy-core
#     app.kubernetes.io/component: api
#     app.kubernetes.io/part-of: policy-core
#     app.kubernetes.io/managed-by: kustomize
# subjects:
#   - kind: ServiceAccount
#     name: policy-core
#     namespace: default  # Переопределите на фактический namespace в overlay
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: ClusterRole
#   name: policy-core-cross-namespace-read
