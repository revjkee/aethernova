# ======================================================================
# policy-core / mypy.ini — Industrial-grade configuration
# ======================================================================
# Цели:
# - Максимально строгая типизация для prod-кода policy_core.*
# - Плагины для Pydantic и SQLAlchemy (в т.ч. async usage)
# - Ослабления для tests/, examples/, migrations/
# - Стабильный вывод для CI: цвет, коды ошибок, сводка
# - Предсказуемые пути кэша, исключения .venv/build/dist/generated
# ----------------------------------------------------------------------

[mypy]
# Версия таргетного Python (при необходимости скорректируйте под проект)
python_version = 3.11

# Основной набор строгих инвариантов
strict = True
no_implicit_optional = True
strict_equality = True
warn_return_any = True
warn_unused_ignores = True
warn_redundant_casts = True
warn_unreachable = True
disallow_any_generics = True
disallow_untyped_defs = True
disallow_incomplete_defs = True
disallow_untyped_calls = True
disallow_untyped_decorated_calls = True
check_untyped_defs = True
implicit_reexport = False
local_partial_types = True

# Обработка импортов
follow_imports = normal
ignore_missing_imports = False
namespace_packages = True
explicit_package_bases = True

# Плагины (актуально для Pydantic и SQLAlchemy)
plugins = pydantic.mypy, sqlalchemy.ext.mypy.plugin

# Кэш и производительность
incremental = True
cache_dir = .mypy_cache/policy-core
sqlite_cache = True
show_column_numbers = True

# Вывод/удобство чтения
show_error_codes = True
pretty = True
color_output = True
error_summary = True

# Включаем дополнительные коды ошибок (если доступны в вашей версии mypy)
enable_error_code = ignore-without-code, redundant-cast, truthy-bool, unreachable, redundant-expr

# Контроль конфигурации
warn_unused_configs = True

# Ограничиваем область анализа по умолчанию только нашим пакетом (если запускается из репо)
# Можете закомментировать, если конфиг используется глобально.
files = policy_core

# Исключаем сгенерированные и внешние артефакты
exclude = (?x)(
    ^\.venv/|
    ^venv/|
    ^env/|
    ^build/|
    ^dist/|
    ^\.mypy_cache/|
    ^\.pytest_cache/|
    /generated/|
    ^docs/_build/
)$

# ----------------------------------------------------------------------
# PROD: максимально строгий режим для основного пакета
# ----------------------------------------------------------------------
[mypy-policy_core.*]
# Дополнительно усиливаем (на случай локальных ослаблений)
disallow_any_unimported = True
warn_no_return = True

# ----------------------------------------------------------------------
# Модули с «пограничной» типизацией (внешние интеграции) — мягче импорт
# При необходимости добавьте сюда конкретные адаптеры/SDK
# ----------------------------------------------------------------------
[mypy-policy_core.integrations.*]
ignore_missing_imports = True

# ----------------------------------------------------------------------
# Alembic / migrations: как правило, автогенерируемый и динамический код
# ----------------------------------------------------------------------
[mypy-*-migrations.*]
disallow_untyped_defs = False
disallow_incomplete_defs = False
disallow_untyped_calls = False
warn_return_any = False
ignore_errors = False
# Некоторые импорты в миграциях могут не иметь тайпингов
ignore_missing_imports = True

[mypy-alembic.*]
ignore_missing_imports = True

# ----------------------------------------------------------------------
# Тесты: допускаем частично неаннотированный код, но сохраняем базовую строгость
# ----------------------------------------------------------------------
[mypy-tests.*]
disallow_untyped_defs = False
disallow_incomplete_defs = False
disallow_untyped_calls = False
warn_return_any = False
ignore_missing_imports = True

# ----------------------------------------------------------------------
# Примеры / демонстрационные скрипты — не блокируем релиз
# ----------------------------------------------------------------------
[mypy-examples.*]
disallow_untyped_defs = False
disallow_incomplete_defs = False
ignore_missing_imports = True
warn_return_any = False

# ----------------------------------------------------------------------
# CLI/скрипты обслуживания — чуть мягче, но без «дыр»
# ----------------------------------------------------------------------
[mypy-scripts.*]
disallow_untyped_defs = False
disallow_incomplete_defs = False
ignore_missing_imports = True

# ----------------------------------------------------------------------
# Точечные ослабления для часто проблемных внешних пакетов без тайпингов
# Добавляйте по мере необходимости, чтобы не включать глобальный ignore_missing_imports
# ----------------------------------------------------------------------
[mypy-uvicorn.*]
ignore_missing_imports = True

[mypy-fastapi.*]
ignore_missing_imports = False  # FastAPI имеет тайпинги; держим строгим

[mypy-starlette.*]
ignore_missing_imports = False

[mypy-pydantic.*]
ignore_missing_imports = False

[mypy-sqlalchemy.*]
ignore_missing_imports = False

# ----------------------------------------------------------------------
# Полезные подсказки разработчикам:
# - Включайте аннотации для всех публичных функций/методов.
# - Используйте TypedDict/Protocol/Параметризованные Generic-типы там, где это улучшает контракт.
# - Для корутин/async API добавляйте точные возвращаемые типы (Coroutine[Any, Any, T]).
# - Избегайте Any: превращайте «сырые» словари в датаклассы/TypedDict/п модели Pydantic.
# ----------------------------------------------------------------------
