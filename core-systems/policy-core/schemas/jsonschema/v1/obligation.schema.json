{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://aethernova.io/policy-core/schemas/jsonschema/v1/obligation.schema.json",
  "title": "Policy Obligation (v1)",
  "description": "Схема единого обязательства (obligation) Policy Core. Совместима с protobuf Aethernova.Policy.V1.Obligation.",
  "type": "object",
  "additionalProperties": false,
  "unevaluatedProperties": false,

  "properties": {
    "type": {
      "type": "string",
      "description": "Тип обязательства",
      "enum": [
        "audit",
        "notify",
        "watermark",
        "masking",
        "aggregation_required",
        "break_glass",
        "correlate"
      ]
    },

    "params": {
      "type": "object",
      "description": "Параметры, зависящие от типа обязательства",
      "default": {},
      "additionalProperties": true
    },

    "sinks": {
      "type": "array",
      "description": "Целевые каналы/хранилища, куда применяется обязательство",
      "items": {
        "type": "string",
        "enum": [
          "audit",
          "security",
          "pager",
          "email",
          "slack",
          "webhook",
          "loki",
          "syslog",
          "log"
        ]
      },
      "minItems": 0,
      "uniqueItems": true,
      "default": []
    },

    "critical": {
      "type": "boolean",
      "description": "Критичность выполнения: при true нарушение трактуется как ошибка исполнения политики",
      "default": false
    }
  },

  "required": ["type"],

  "allOf": [
    {
      "if": { "properties": { "type": { "const": "audit" } }, "required": ["type"] },
      "then": {
        "properties": {
          "params": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "level": { "type": "string", "enum": ["basic", "full"], "default": "full" },
              "redact": { "type": "boolean", "default": false },
              "include_payload": { "type": "boolean", "default": true }
            }
          }
        }
      }
    },

    {
      "if": { "properties": { "type": { "const": "notify" } }, "required": ["type"] },
      "then": {
        "properties": {
          "params": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "recipients": {
                "type": "array",
                "items": { "$ref": "#/$defs/recipient" },
                "minItems": 1,
                "uniqueItems": true
              },
              "channel": { "type": "string", "enum": ["pager", "email", "slack", "webhook"] },
              "severity": { "type": "string", "enum": ["low", "medium", "high", "critical"], "default": "medium" },
              "template_id": { "$ref": "#/$defs/nonEmptyString" },
              "webhook_url": { "type": "string", "format": "uri" },
              "throttle_sec": { "$ref": "#/$defs/positiveInt" }
            },
            "allOf": [
              {
                "if": { "properties": { "channel": { "const": "webhook" } }, "required": ["channel"] },
                "then": { "required": ["recipients", "channel", "webhook_url"] },
                "else": { "required": ["recipients", "channel"] }
              }
            ]
          }
        }
      }
    },

    {
      "if": { "properties": { "type": { "const": "watermark" } }, "required": ["type"] },
      "then": {
        "properties": {
          "params": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "scope": {
                "type": "array",
                "items": { "type": "string", "enum": ["export", "render"] },
                "minItems": 1,
                "uniqueItems": true
              },
              "value": { "$ref": "#/$defs/nonEmptyString" },
              "opacity": { "type": "number", "minimum": 0.0, "maximum": 1.0, "default": 0.15 },
              "position": { "type": "string", "enum": ["center", "tile", "top_left", "top_right", "bottom_left", "bottom_right"], "default": "center" }
            },
            "required": ["scope", "value"]
          }
        }
      }
    },

    {
      "if": { "properties": { "type": { "const": "masking" } }, "required": ["type"] },
      "then": {
        "properties": {
          "params": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "columns": {
                "type": "array",
                "items": { "$ref": "#/$defs/maskColumn" },
                "minItems": 1,
                "uniqueItems": true
              },
              "salt_id": { "$ref": "#/$defs/nonEmptyString" }
            },
            "required": ["columns"]
          }
        }
      }
    },

    {
      "if": { "properties": { "type": { "const": "aggregation_required" } }, "required": ["type"] },
      "then": {
        "properties": {
          "params": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "min_k_anonymity": { "type": "integer", "minimum": 2, "default": 25 },
              "allowed_funcs": {
                "type": "array",
                "items": { "type": "string", "enum": ["count", "sum", "avg", "min", "max", "approx_distinct"] },
                "uniqueItems": true,
                "default": ["count", "avg"]
              }
            }
          }
        }
      }
    },

    {
      "if": { "properties": { "type": { "const": "break_glass" } }, "required": ["type"] },
      "then": {
        "properties": {
          "params": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "expires_sec": { "type": "integer", "minimum": 60, "maximum": 86400, "default": 900 },
              "reason": { "$ref": "#/$defs/nonEmptyString" },
              "mandatory_ticket": { "type": "boolean", "default": true },
              "ticket_id": { "$ref": "#/$defs/nonEmptyString" }
            },
            "required": ["expires_sec", "reason", "mandatory_ticket"]
          },
          "critical": { "const": true }
        }
      }
    },

    {
      "if": { "properties": { "type": { "const": "correlate" } }, "required": ["type"] },
      "then": {
        "properties": {
          "params": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "trace": { "type": "boolean", "default": true },
              "include_span_events": { "type": "boolean", "default": false }
            }
          }
        }
      }
    }
  ],

  "$defs": {
    "nonEmptyString": {
      "type": "string",
      "minLength": 1
    },
    "positiveInt": {
      "type": "integer",
      "minimum": 1
    },
    "recipient": {
      "oneOf": [
        { "type": "string", "format": "email" },
        {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "type": { "type": "string", "enum": ["team", "user", "email"] },
            "id": { "$ref": "#/$defs/nonEmptyString" },
            "address": { "type": "string", "format": "email" }
          },
          "allOf": [
            {
              "if": { "properties": { "type": { "const": "email" } }, "required": ["type"] },
              "then": { "required": ["type", "address"] }
            },
            {
              "if": { "properties": { "type": { "enum": ["team", "user"] } }, "required": ["type"] },
              "then": { "required": ["type", "id"] }
            }
          ]
        }
      ]
    },
    "maskColumn": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "column": { "$ref": "#/$defs/nonEmptyString" },
        "mask": {
          "type": "string",
          "enum": ["hash", "tokenize", "partial", "nullify"]
        },
        "params": {
          "type": "object",
          "additionalProperties": true,
          "properties": {
            "hash_alg": { "type": "string", "enum": ["sha256", "sha512", "blake2b"] },
            "token_provider": { "$ref": "#/$defs/nonEmptyString" },
            "partial_keep_last": { "type": "integer", "minimum": 0, "maximum": 12 }
          }
        }
      },
      "required": ["column", "mask"]
    }
  },

  "examples": [
    {
      "type": "audit",
      "params": { "level": "full", "redact": false, "include_payload": true },
      "sinks": ["audit", "security"],
      "critical": false
    },
    {
      "type": "notify",
      "params": {
        "recipients": [ { "type": "team", "id": "data_owner" } ],
        "channel": "pager",
        "severity": "high",
        "throttle_sec": 300
      },
      "sinks": ["pager"],
      "critical": true
    },
    {
      "type": "watermark",
      "params": { "scope": ["export"], "value": "user-1234", "opacity": 0.2, "position": "center" },
      "sinks": ["log"],
      "critical": false
    },
    {
      "type": "masking",
      "params": {
        "columns": [
          { "column": "email", "mask": "hash", "params": { "hash_alg": "sha256" } },
          { "column": "phone", "mask": "partial", "params": { "partial_keep_last": 4 } }
        ],
        "salt_id": "pii-salt-01"
      },
      "sinks": ["log"],
      "critical": true
    },
    {
      "type": "aggregation_required",
      "params": { "min_k_anonymity": 25, "allowed_funcs": ["count", "avg"] },
      "sinks": [],
      "critical": false
    },
    {
      "type": "break_glass",
      "params": { "expires_sec": 900, "reason": "emergency_access", "mandatory_ticket": true, "ticket_id": "IR-12345" },
      "sinks": ["audit", "security"],
      "critical": true
    },
    {
      "type": "correlate",
      "params": { "trace": true, "include_span_events": false },
      "sinks": [],
      "critical": false
    }
  ]
}
