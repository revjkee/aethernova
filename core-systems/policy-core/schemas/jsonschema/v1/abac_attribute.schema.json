{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://neurocity.example/policy-core/schemas/v1/abac_attribute.schema.json",
  "title": "ABAC Attribute Definition (v1)",
  "description": "Определение одного атрибута для ABAC: тип, кардинальность, ограничения, безопасность, источники, аудит и версия.",
  "type": "object",
  "additionalProperties": false,
  "unevaluatedProperties": false,
  "patternProperties": {
    "^x-[A-Za-z0-9_.-]+$": {}
  },
  "required": ["key", "kind"],
  "properties": {
    "key": {
      "type": "string",
      "description": "Уникальный ключ атрибута (snake/camel/kebab допускаются).",
      "pattern": "^[A-Za-z][A-Za-z0-9_.-]{0,63}$",
      "examples": ["dept", "user.clearance", "geo-region"]
    },
    "displayName": {
      "type": "string",
      "description": "Человекочитаемое имя атрибута.",
      "maxLength": 120
    },
    "description": {
      "type": "string",
      "description": "Описание назначения атрибута."
    },
    "kind": {
      "type": "string",
      "description": "Семантический вид атрибута (определяет допустимые ограничения).",
      "enum": [
        "string",
        "integer",
        "number",
        "boolean",
        "timestamp",
        "date",
        "ip",
        "cidr",
        "email",
        "uri",
        "uuid",
        "country",
        "array",
        "object"
      ]
    },
    "cardinality": {
      "type": "string",
      "description": "Кардинальность значения атрибута.",
      "enum": ["one", "many"],
      "default": "one"
    },
    "itemsKind": {
      "type": "string",
      "description": "Семантический вид элементов, если cardinality=many.",
      "enum": [
        "string",
        "integer",
        "number",
        "boolean",
        "timestamp",
        "date",
        "ip",
        "cidr",
        "email",
        "uri",
        "uuid",
        "country",
        "object"
      ]
    },
    "nullable": {
      "type": "boolean",
      "description": "Разрешено ли null как значение.",
      "default": false
    },
    "default": {
      "description": "Значение по умолчанию (при отсутствии источника)."
    },
    "tags": {
      "type": "array",
      "items": { "type": "string", "minLength": 1, "maxLength": 64 },
      "uniqueItems": true,
      "maxItems": 32
    },
    "sensitivity": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "pii": { "type": "boolean", "default": false },
        "classification": {
          "type": "string",
          "description": "Классификация данных.",
          "enum": ["public", "internal", "confidential", "restricted"],
          "default": "internal"
        }
      }
    },
    "mapping": {
      "type": "object",
      "description": "Маппинг атрибута на внешние источники значений.",
      "additionalProperties": false,
      "properties": {
        "source": {
          "type": "string",
          "enum": ["context", "jwt", "header", "query", "body", "computed", "const"]
        },
        "path": {
          "type": "string",
          "description": "Путь до значения в источнике (dot/JSONPath-подобный).",
          "pattern": "^[A-Za-z0-9_$.\\-\\[\\]\\*]{1,256}$"
        },
        "jwtClaim": {
          "type": "string",
          "description": "Имя JWT claim, если source=jwt.",
          "pattern": "^[A-Za-z0-9_.:-]{1,128}$"
        },
        "const": {
          "description": "Константное значение, если source=const."
        }
      },
      "allOf": [
        {
          "if": { "properties": { "source": { "const": "jwt" } }, "required": ["source"] },
          "then": { "required": ["jwtClaim"] }
        },
        {
          "if": { "properties": { "source": { "const": "const" } }, "required": ["source"] },
          "then": { "required": ["const"] }
        }
      ]
    },
    "compute": {
      "type": "object",
      "description": "Вычисление значения на лету.",
      "additionalProperties": false,
      "properties": {
        "language": { "type": "string", "enum": ["cel", "rego", "jq", "jsonata"] },
        "expression": { "type": "string", "minLength": 1, "maxLength": 4000 },
        "dependsOn": {
          "type": "array",
          "items": { "type": "string", "pattern": "^[A-Za-z][A-Za-z0-9_.-]{0,63}$" },
          "uniqueItems": true,
          "maxItems": 32
        }
      },
      "required": ["language", "expression"]
    },
    "constraints": {
      "type": "object",
      "description": "Ограничения значений (зависят от kind).",
      "additionalProperties": false
    },
    "index": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "enabled": { "type": "boolean", "default": true },
        "type": { "type": "string", "enum": ["btree", "hash"], "default": "btree" },
        "unique": { "type": "boolean", "default": false }
      }
    },
    "audit": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "log": { "type": "boolean", "default": true },
        "redact": { "type": "boolean", "default": false },
        "hash": { "type": "boolean", "default": false },
        "retentionDays": { "type": "integer", "minimum": 1, "maximum": 3650, "default": 365 }
      }
    },
    "lifecycle": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "version": { "type": "integer", "minimum": 1, "default": 1 },
        "deprecated": { "type": "boolean", "default": false },
        "replacedBy": { "type": "string", "pattern": "^[A-Za-z][A-Za-z0-9_.-]{0,63}$" }
      }
    },
    "examples": {
      "type": "array",
      "items": {},
      "maxItems": 8
    }
  },

  "allOf": [
    {
      "if": { "properties": { "cardinality": { "const": "many" } }, "required": ["cardinality"] },
      "then": {
        "required": ["itemsKind", "constraints"],
        "properties": {
          "constraints": { "$ref": "#/$defs/arrayConstraints" }
        }
      }
    },
    {
      "if": { "properties": { "kind": { "const": "string" } }, "required": ["kind"] },
      "then": { "properties": { "constraints": { "$ref": "#/$defs/stringConstraints" } } }
    },
    {
      "if": { "properties": { "kind": { "const": "integer" } }, "required": ["kind"] },
      "then": { "properties": { "constraints": { "$ref": "#/$defs/integerConstraints" } } }
    },
    {
      "if": { "properties": { "kind": { "const": "number" } }, "required": ["kind"] },
      "then": { "properties": { "constraints": { "$ref": "#/$defs/numberConstraints" } } }
    },
    {
      "if": { "properties": { "kind": { "const": "boolean" } }, "required": ["kind"] },
      "then": { "properties": { "constraints": { "$ref": "#/$defs/booleanConstraints" } } }
    },
    {
      "if": { "properties": { "kind": { "const": "timestamp" } }, "required": ["kind"] },
      "then": { "properties": { "constraints": { "$ref": "#/$defs/timestampConstraints" } } }
    },
    {
      "if": { "properties": { "kind": { "const": "date" } }, "required": ["kind"] },
      "then": { "properties": { "constraints": { "$ref": "#/$defs/dateConstraints" } } }
    },
    {
      "if": { "properties": { "kind": { "const": "email" } }, "required": ["kind"] },
      "then": { "properties": { "constraints": { "$ref": "#/$defs/emailConstraints" } } }
    },
    {
      "if": { "properties": { "kind": { "const": "uri" } }, "required": ["kind"] },
      "then": { "properties": { "constraints": { "$ref": "#/$defs/uriConstraints" } } }
    },
    {
      "if": { "properties": { "kind": { "const": "uuid" } }, "required": ["kind"] },
      "then": { "properties": { "constraints": { "$ref": "#/$defs/uuidConstraints" } } }
    },
    {
      "if": { "properties": { "kind": { "const": "ip" } }, "required": ["kind"] },
      "then": { "properties": { "constraints": { "$ref": "#/$defs/ipConstraints" } } }
    },
    {
      "if": { "properties": { "kind": { "const": "cidr" } }, "required": ["kind"] },
      "then": { "properties": { "constraints": { "$ref": "#/$defs/cidrConstraints" } } }
    },
    {
      "if": { "properties": { "kind": { "const": "country" } }, "required": ["kind"] },
      "then": { "properties": { "constraints": { "$ref": "#/$defs/countryConstraints" } } }
    },
    {
      "if": { "properties": { "kind": { "const": "object" } }, "required": ["kind"] },
      "then": { "properties": { "constraints": { "$ref": "#/$defs/objectConstraints" } } }
    }
  ],

  "$defs": {
    "stringConstraints": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "minLength": { "type": "integer", "minimum": 0, "maximum": 65535 },
        "maxLength": { "type": "integer", "minimum": 1, "maximum": 65535 },
        "pattern": { "type": "string" },
        "enum": {
          "type": "array",
          "items": { "type": "string" },
          "uniqueItems": true,
          "maxItems": 2048
        },
        "format": {
          "type": "string",
          "enum": ["none", "email", "uri", "uuid", "ipv4", "ipv6"],
          "default": "none"
        }
      },
      "allOf": [
        {
          "if": { "required": ["minLength", "maxLength"] },
          "then": { "properties": { "maxLength": { "minimum": { "$data": "1/minLength" } } } }
        }
      ]
    },

    "integerConstraints": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "minimum": { "type": "integer" },
        "maximum": { "type": "integer" },
        "exclusiveMinimum": { "type": "integer" },
        "exclusiveMaximum": { "type": "integer" },
        "multipleOf": { "type": "integer", "minimum": 1 },
        "enum": {
          "type": "array",
          "items": { "type": "integer" },
          "uniqueItems": true,
          "maxItems": 2048
        }
      },
      "allOf": [
        {
          "if": { "required": ["minimum", "maximum"] },
          "then": { "properties": { "maximum": { "minimum": { "$data": "1/minimum" } } } }
        }
      ]
    },

    "numberConstraints": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "minimum": { "type": "number" },
        "maximum": { "type": "number" },
        "exclusiveMinimum": { "type": "number" },
        "exclusiveMaximum": { "type": "number" },
        "multipleOf": { "type": "number", "exclusiveMinimum": 0 },
        "enum": {
          "type": "array",
          "items": { "type": "number" },
          "uniqueItems": true,
          "maxItems": 2048
        }
      },
      "allOf": [
        {
          "if": { "required": ["minimum", "maximum"] },
          "then": { "properties": { "maximum": { "minimum": { "$data": "1/minimum" } } } }
        }
      ]
    },

    "booleanConstraints": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "const": { "type": "boolean" }
      }
    },

    "timestampConstraints": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "format": { "type": "string", "enum": ["date-time"], "default": "date-time" },
        "min": { "type": "string", "format": "date-time" },
        "max": { "type": "string", "format": "date-time" }
      },
      "allOf": [
        {
          "if": { "required": ["min", "max"] },
          "then": { "properties": { "max": { "minLength": 1 } } }
        }
      ]
    },

    "dateConstraints": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "format": { "type": "string", "enum": ["date"], "default": "date" },
        "min": { "type": "string", "format": "date" },
        "max": { "type": "string", "format": "date" }
      }
    },

    "emailConstraints": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "format": { "type": "string", "const": "email" }
      }
    },

    "uriConstraints": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "format": { "type": "string", "const": "uri" }
      }
    },

    "uuidConstraints": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "format": { "type": "string", "const": "uuid" }
      }
    },

    "ipConstraints": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "version": { "type": "string", "enum": ["ipv4", "ipv6", "any"], "default": "any" }
      }
    },

    "cidrConstraints": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "version": { "type": "string", "enum": ["ipv4", "ipv6", "any"], "default": "any" },
        "pattern": {
          "type": "string",
          "description": "Переопределение регулярного выражения CIDR при необходимости."
        }
      }
    },

    "countryConstraints": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "format": { "type": "string", "enum": ["iso-3166-1-alpha-2"], "default": "iso-3166-1-alpha-2" },
        "uppercase": { "type": "boolean", "default": true }
      }
    },

    "objectConstraints": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "schema": {
          "description": "Вложенная JSON Schema для объекта.",
          "type": "object"
        },
        "additionalProperties": { "type": "boolean", "default": false }
      },
      "required": ["schema"]
    },

    "arrayConstraints": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "minItems": { "type": "integer", "minimum": 0, "maximum": 100000 },
        "maxItems": { "type": "integer", "minimum": 1, "maximum": 100000 },
        "uniqueItems": { "type": "boolean", "default": true },
        "itemsConstraints": { "type": "object" }
      },
      "allOf": [
        {
          "if": { "required": ["minItems", "maxItems"] },
          "then": { "properties": { "maxItems": { "minimum": { "$data": "1/minItems" } } } }
        }
      ]
    }
  },

  "examples": [
    {
      "key": "dept",
      "displayName": "Department",
      "kind": "string",
      "cardinality": "one",
      "constraints": { "minLength": 2, "maxLength": 32, "pattern": "^[A-Za-z-]+$" },
      "sensitivity": { "pii": false, "classification": "internal" },
      "mapping": { "source": "context", "path": "user.dept" },
      "audit": { "log": true, "redact": false }
    },
    {
      "key": "login_ip",
      "displayName": "Login IP",
      "kind": "ip",
      "cardinality": "one",
      "constraints": { "version": "any" },
      "sensitivity": { "pii": true, "classification": "confidential" },
      "mapping": { "source": "header", "path": "X-Forwarded-For" },
      "audit": { "log": true, "redact": true, "hash": true, "retentionDays": 180 }
    },
    {
      "key": "scopes",
      "displayName": "OAuth Scopes",
      "kind": "array",
      "cardinality": "many",
      "itemsKind": "string",
      "constraints": {
        "minItems": 0,
        "maxItems": 64,
        "uniqueItems": true,
        "itemsConstraints": { "enum": ["pii_read", "pii_write", "policy_read", "policy_write"] }
      },
      "mapping": { "source": "jwt", "jwtClaim": "scope" }
    }
  ]
}
