// policy-core/schemas/proto/v1/policy/schema.proto
// Статус: НЕ ВЕРИФИЦИРОВАНО — доменные коды и состав полей зависят от вашей реализации.
// Контракт ориентирован на стабильность (reserved номера/имена) и низкие внешние зависимости.

syntax = "proto3";

package aethernova.policy.v1;

option go_package       = "github.com/aethernova/policy-core/gen/proto/policy/v1;policyv1";
option java_package     = "io.aethernova.policy.v1";
option java_multiple_files = true;
option csharp_namespace = "Aethernova.Policy.V1";
option php_namespace    = "Aethernova\\Policy\\V1";
option objc_class_prefix = "ANP";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "google/rpc/status.proto";

// -------------------------
// БАЗОВЫЕ ENUM'Ы
// -------------------------

// Эффект решения политики.
enum DecisionEffect {
  DECISION_EFFECT_UNSPECIFIED = 0;
  DECISION_EFFECT_DENY        = 1;
  DECISION_EFFECT_ALLOW       = 2;
}

// Уровень серьёзности причины/диагностики.
enum Severity {
  SEVERITY_UNSPECIFIED = 0;
  SEVERITY_INFO        = 1;
  SEVERITY_WARNING     = 2;
  SEVERITY_ERROR       = 3;
}

// Типы обязательств (примерный перечень, расширяем).
enum ObligationType {
  OBLIGATION_TYPE_UNSPECIFIED      = 0;
  OBLIGATION_REQUIRE_MFA           = 1;
  OBLIGATION_REQUIRE_JUSTIFICATION = 2;
  OBLIGATION_STEP_UP_AUTH          = 3;
  OBLIGATION_SESSION_RECERTIFY     = 4;
}

// -------------------------
// БАЗОВЫЕ СУЩНОСТИ
// -------------------------

// Информация об устройстве субъекта.
message Device {
  string platform     = 1;  // ios|android|windows|macos|linux|web и т.п.
  bool   jailbroken   = 2;  // true, если jailbreak/root обнаружен.
  string os_version   = 3;  // "17.5.1", "14.04", и т.д.
  string app_version  = 4;  // версия клиента.
  string device_id    = 5;  // устойчивый хэш/идентификатор устройства.
  // Резерв под future-поля:
  reserved 100 to 119;
  reserved "secure_element_id", "attestation";
}

// Сетевая обстановка запроса.
message Network {
  bool   vpn   = 1;
  bool   tor   = 2;
  uint64 asn   = 3;       // Autonomous System Number (если доступен).
  string ip    = 4;       // IPv4/IPv6 в текстовом виде.
  string isp   = 5;       // Провайдер (если доступен).
  reserved 100 to 119;
}

// Геопозиция.
message GeoLocation {
  double lat        = 1;  // в градусах
  double lon        = 2;  // в градусах
  uint32 accuracy_m = 3;  // 0..N, радиус точности в метрах
  reserved 100 to 119;
}

// Окружение выполнения (environment).
message Environment {
  google.protobuf.Timestamp now           = 1; // Время запроса в UTC.
  string                    country_code  = 2; // ISO 3166-1 alpha-2, верхний регистр.
  GeoLocation               geolocation   = 3;
  Network                   network       = 4;
  sint32                    tz_offset_min = 5; // Сдвиг локального времени, минуты.
  reserved 100 to 119;
}

// Субъект доступа.
message Subject {
  string           id            = 1; // Устойчивый ID пользователя/сервиса.
  repeated string  roles         = 2; // Роли субъекта.
  bool             mfa           = 3; // Пройдена ли MFA к моменту запроса.
  string           country_code  = 4; // ISO 3166-1 alpha-2 (по профилю).
  Device           device        = 5;
  map<string,string> attributes  = 10; // Доп. атрибуты (dept, cost_center и т.д.)
  reserved 100 to 149;
}

// Ресурс и требуемое действие.
message Resource {
  string id                 = 1;  // Устойчивый идентификатор ресурса.
  string type               = 2;  // Тип/класс ресурса (например, "policy", "record", "dataset").
  string action             = 3;  // Действие (например, "read", "write", "delete", "approve").
  string required_geo_zone  = 4;  // Если доступ ограничен конкретной зоной (опционально).
  map<string,string> labels = 10; // Метки ресурса для матчей политик.
  reserved 100 to 149;
}

// Причина (объяснение) решения.
message DecisionReason {
  string  code              = 1;  // Машиночитаемый код причины (например, "outside_zone").
  string  message           = 2;  // Человеко-читаемое пояснение.
  Severity severity         = 3;  // Уровень серьёзности.
  google.protobuf.Struct details = 10; // Произвольные детали (path, ожидания, факты).
  reserved 100 to 119;
}

// Обязательство, накладываемое решением (например, потребовать MFA).
message Obligation {
  ObligationType           type    = 1;
  google.protobuf.Struct   params  = 10; // Параметры (срок, уровень, причина и т.д.)
  reserved 100 to 119;
}

// Техническая мета-информация решения.
message DecisionMeta {
  string  policy_id        = 1;  // Идентификатор сработавшей политики/набора.
  string  policy_version   = 2;  // Версия политики.
  uint32  risk             = 3;  // 0..100 агрегированный риск.
  repeated string zones_considered = 4; // Идентификаторы зон, рассмотренных движком.
  repeated string zones_valid      = 5; // Идентификаторы зон, прошедших все проверки.
  google.protobuf.Duration evaluation_time = 6; // Длительность вычисления.
  reserved 100 to 139;
}

// -------------------------
// ЗАПРОС/ОТВЕТ
// -------------------------

// Запрос на оценку политики.
message PolicyEvaluationRequest {
  string    request_id  = 1;  // Идентификатор запроса (идемпотентность/трейсинг).
  string    tenant_id   = 2;  // Мульти-тенант контекст (если есть).
  Subject   subject     = 3;
  Resource  resource    = 4;
  Environment env       = 5;

  // Дополнительные атрибуты контекста (OPA-совместимая форма).
  google.protobuf.Struct attributes = 10;

  bool      dry_run         = 11; // true — не применять side-effects.
  bool      include_explain = 12; // true — расширенное объяснение (дороже по вычислению).

  // Резерв под расширения:
  reserved 100 to 149;
  reserved "session_id", "traceparent";
}

// Ответ движка политики.
message PolicyEvaluationResponse {
  DecisionEffect          effect      = 1;  // Итог: ALLOW/DENY.
  repeated DecisionReason reasons     = 2;  // Диагностика (может быть пустой при ALLOW).
  repeated Obligation     obligations = 3;  // Наложенные обязательства (например, MFA).
  DecisionMeta            meta        = 4;  // Технические метаданные.

  // Транспортные/системные ошибки (если возникли) — не путать с бизнес-отказом.
  google.rpc.Status       status      = 9;

  reserved 100 to 149;
}

// Батч-оценка (атомарность не гарантируется; порядок ответов соответствует порядку запросов).
message BatchEvaluateRequest {
  repeated PolicyEvaluationRequest requests = 1;
}

message BatchEvaluateResponse {
  repeated PolicyEvaluationResponse responses = 1;
}

// -------------------------
// gRPC-СЕРВИС
// -------------------------

service PolicyEngine {
  // Оценка одной политики.
  rpc Evaluate(PolicyEvaluationRequest) returns (PolicyEvaluationResponse);

  // Пакетная оценка нескольких запросов.
  rpc BatchEvaluate(BatchEvaluateRequest) returns (BatchEvaluateResponse);
}
