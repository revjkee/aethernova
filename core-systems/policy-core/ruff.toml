# policy-core/ruff.toml
# Индустриальный конфиг Ruff для модуля policy-core

# Базовые параметры
line-length = 100
target-version = "py311"
respect-gitignore = true

# Исключения по дереву проекта
exclude = [
  ".git",
  ".hg",
  ".mypy_cache",
  ".ruff_cache",
  ".venv",
  "venv",
  "build",
  "dist",
  "node_modules",
  "docs/_build",
  "site-packages",
  "**/migrations/**",
  "**/alembic/**",
  "**/generated/**",
]

# Дополнительно включаем служебные скрипты
extend-include = ["scripts/**/*.py"]

# Форматер Ruff (единый стиль для репозитория)
[format]
quote-style = "preserve"
indent-style = "space"
line-ending = "auto"
skip-magic-trailing-comma = false
docstring-code-format = true
docstring-code-line-length = 100

# Линтер: набор правил и стратегия фиксов
[lint]
preview = true
select = [
  "E",   # pycodestyle
  "F",   # pyflakes
  "W",   # pycodestyle warnings
  "I",   # isort
  "B", "BLE",          # flake8-bugbear (+ B9xx)
  "A",                  # flake8-builtins
  "C4", "C90",          # comprehensions + mccabe
  "COM", "ISC",         # commas + implicit-str-concat
  "G",                  # logging format
  "Q",                  # quotes
  "UP",                 # pyupgrade
  "ANN",                # annotations
  "ARG",                # unused arguments
  "DTZ",                # timezone-aware datetimes
  "ERA",                # eradicate commented-out code
  "ICN",                # import conventions
  "INP",                # no PEP 420
  "NPY",                # numpy rules (безопасность массивов)
  "PD",                 # pandas-vet (на будущее)
  "PIE",                # flake8-pie
  "PL", "PLE", "PLR", "PLW", # pylint families
  "PT",                 # pytest-style
  "PTH",                # use-pathlib
  "RET",                # returns
  "RSE",                # raise
  "RUF",                # ruff-specific
  "SIM",                # simplify
  "SLF",                # private member access
  "S",                  # flake8-bandit (безопасность)
  "TCH",                # type-checking imports
  "T20",                # print debug (T201, T203)
  "TRY",                # tryceratops
  "YTT",                # flake8-2020 (устаревш. паттерны)
]
ignore = [
  "E203",  # конфликтует с форматером по срезам
  "E266",  # допускаем плотные комментарии для политики
  "E501",  # длину строк контролирует форматер
  "D203",  # конфликтует с D211
  "D213",  # конфликтует с D212 (Google-стиль)
]
fix = true
unsafe-fixes = false

# Что не автофиксить (риски для API/отладки)
unfixable = [
  "B006", # mutable default args
  "F401", # unused imports — часть публичного API в __init__
  "F841", # unused variable — может использоваться в отладке/tests
]

# isort-профиль (через Ruff)
[lint.isort]
known-first-party = ["policy_core"]
combine-as-imports = true
force-sort-within-sections = true
order-by-type = true
lines-after-imports = 2
required-imports = ["from __future__ import annotations"]

# Докстринги по Google
[lint.pydocstyle]
convention = "google"

# Контроль сложности
[lint.mccabe]
max-complexity = 10

# Именование и декораторы (актуально для Pydantic v1/v2)
[lint.pep8-naming]
classmethod-decorators = ["classmethod", "validator", "root_validator", "field_validator", "model_validator"]
staticmethod-decorators = ["staticmethod"]

# Аннотации типов
[lint.flake8-annotations]
suppress-none-returning = true
suppress-dummy-args = true
mypy-init-return = true
allow-star-arg-any = false
allow-untyped-defs = false
allow-untyped-nested = false

# Кавычки
[lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"
multiline-quotes = "double"
avoid-escape = true

# Импорты, выносимые под TYPE_CHECKING
[lint.flake8-type-checking]
strict = true
runtime-evaluated-base-classes = ["pydantic.BaseModel", "typing.Protocol"]
runtime-evaluated-decorators = ["pydantic.dataclasses.dataclass", "dataclasses.dataclass"]
exempt-modules = ["typing", "types", "collections.abc"]

# Логирование
[lint.flake8-logging-format]
max-fstring-args = 5

# Политика pylint-порогов (через Ruff)
[lint.pylint]
max-args = 8
max-branches = 12
max-returns = 6
max-statements = 60
allow-magic-value-types = ["int", "str", "bytes"]

# Специальные послабления для отдельных путей
[lint.per-file-ignores]
"tests/**" = [
  "S101",    # assert в тестах
  "D",       # докстринги в тестах не обязательны
  "ANN",     # упрощаем аннотации в тестах
  "ARG001",  # неиспользуемые фикстуры
  "PLR2004", # magic-value в asserts
  "PT009", "PT011", "PT013", # мягкие pytest-стили
]
"**/__init__.py" = ["F401", "D104"]  # публичный API и отсутствие докстринга допустимы
"**/migrations/**" = ["ALL"]          # авто-сгенерированный код
"scripts/**" = ["D", "T201", "T203"]  # разрешаем print/pprint в служебных скриптах
