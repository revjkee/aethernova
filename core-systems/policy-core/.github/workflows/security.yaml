name: Security CI (policy-core)

on:
  push:
    branches: [ "main", "release/**" ]
    paths:
      - "policy-core/**"
      - ".github/workflows/security.yaml"
  pull_request:
    branches: [ "main" ]
    paths:
      - "policy-core/**"
      - ".github/workflows/security.yaml"
  schedule:
    - cron: "0 2 * * 1" # еженедельно по понедельникам 02:00 UTC
  workflow_dispatch: {}

concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: read
  security-events: write  # для загрузки SARIF

env:
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PYTHON_DEFAULT: "3.11"
  WORKDIR: "policy-core"
  ARTIFACT_RETENTION_DAYS: "14"

jobs:
  codeql:
    name: CodeQL (Python)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          queries: security-extended

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Analyze
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"

  deps:
    name: Dependency Scan (pip-audit & Safety) [py${{ matrix.python }}]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        python: [ "3.10", "3.11", "3.12" ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('policy-core/requirements*.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-${{ matrix.python }}-
            pip-${{ runner.os }}-

      - name: Install project deps (best-effort)
        working-directory: ${{ env.WORKDIR }}
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          elif [ -f pyproject.toml ]; then
            pip install .
          fi

      - name: Install scanners
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit safety

      - name: pip-audit (requirements if present, else environment)
        id: pip_audit
        continue-on-error: ${{ github.event_name == 'pull_request' }}
        working-directory: ${{ env.WORKDIR }}
        run: |
          set -e
          if [ -f requirements.txt ]; then
            pip-audit -r requirements.txt -l -o ../pip-audit.json -f json
          else
            pip-audit -l -o ../pip-audit.json -f json
          fi

      - name: Safety scan (JSON report)
        id: safety
        continue-on-error: ${{ github.event_name == 'pull_request' }}
        working-directory: ${{ env.WORKDIR }}
        run: |
          if [ -f requirements.txt ]; then
            safety check -r requirements.txt --full-report --json > ../safety.json || true
          else
            safety check --full-report --json > ../safety.json || true
          fi

      - name: Upload dependency reports
        uses: actions/upload-artifact@v4
        with:
          name: deps-reports-py${{ matrix.python }}
          path: |
            pip-audit.json
            safety.json
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      - name: Enforce on push
        if: github.event_name == 'push'
        run: |
          # Если pip-audit шаг помечен как неудачный — проваливаем джобу
          if [ "${{ steps.pip_audit.outcome }}" = "failure" ]; then
            echo "pip-audit found vulnerabilities. Failing on push."
            exit 1
          fi

  sast:
    name: SAST (Bandit & Semgrep)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_DEFAULT }}

      - name: Install linters
        run: |
          python -m pip install --upgrade pip
          pip install bandit semgrep

      - name: Bandit (SARIF)
        working-directory: ${{ env.WORKDIR }}
        run: |
          bandit -q -r . -f sarif -o ../bandit.sarif || true

      - name: Semgrep (SARIF, ruleset p/ci)
        continue-on-error: ${{ github.event_name == 'pull_request' }}
        working-directory: ${{ env.WORKDIR }}
        run: |
          semgrep --config p/ci --sarif --output ../semgrep.sarif || true

      - name: Upload SARIF (Bandit)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit.sarif

      - name: Upload SARIF (Semgrep)
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

  secrets:
    name: Secret Scanning (Gitleaks & TruffleHog)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Gitleaks
        id: gitleaks
        continue-on-error: ${{ github.event_name == 'pull_request' }}
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source=. --report-format=json --report-path=gitleaks.json

      - name: TruffleHog (filesystem)
        id: trufflehog
        continue-on-error: ${{ github.event_name == 'pull_request' }}
        uses: trufflesecurity/trufflehog@v3
        with:
          path: .
          extra_args: "--json --no-update --fail"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload secret scan reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: secrets-reports
          path: |
            gitleaks.json
            trufflehog_results.json
          if-no-files-found: ignore
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

      - name: Enforce on push
        if: github.event_name == 'push' && (steps.gitleaks.outcome == 'failure' || steps.trufflehog.outcome == 'failure')
        run: |
          echo "Secret scanners reported issues. Failing on push."
          exit 1

  sbom:
    name: SBOM (CycloneDX & Syft)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_DEFAULT }}

      - name: Install CycloneDX CLI
        run: |
          python -m pip install --upgrade pip
          pip install cyclonedx-bom

      - name: Generate CycloneDX from requirements (if exists)
        working-directory: ${{ env.WORKDIR }}
        run: |
          if [ -f requirements.txt ]; then
            cyclonedx-bom -r requirements.txt -o ../sbom-cyclonedx.json
          else
            cyclonedx-bom -e -o ../sbom-cyclonedx.json
          fi

      - name: Syft SBOM of repository (SPDX JSON)
        uses: anchore/sbom-action@v0
        with:
          path: .
          output-file: sbom-spdx.json
          format: spdx-json

      - name: Upload SBOMs
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: |
            sbom-cyclonedx.json
            sbom-spdx.json
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  policy-gate:
    name: Policy Gate
    runs-on: ubuntu-latest
    needs: [ codeql, deps, sast, secrets, sbom ]
    if: always()
    steps:
      - name: Gate summary
        run: |
          echo "Policy gate: summarizing job outcomes."
          echo "codeql:  ${{ needs.codeql.result }}"
          echo "deps:    ${{ needs.deps.result }}"
          echo "sast:    ${{ needs.sast.result }}"
          echo "secrets: ${{ needs.secrets.result }}"
          echo "sbom:    ${{ needs.sbom.result }}"

      - name: Enforce failure on push if any required job failed
        if: github.event_name == 'push' && (needs.codeql.result != 'success' || needs.deps.result != 'success' || needs.sast.result != 'success' || needs.secrets.result != 'success' || needs.sbom.result != 'success')
        run: |
          echo "One or more security jobs failed on push. Blocking merge."
          exit 1
