from qiskit import QuantumCircuit, execute, Aer
from qiskit.circuit.library import QFT
from qiskit.visualization import plot_histogram
import matplotlib.pyplot as plt
import numpy as np

def create_hybrid_crypto_circuit(message_bits: int):
    """
    Создаёт гибридную криптографическую схему на квантовом регистре
    с использованием QFT и классического шифрования.

    :param message_bits: количество бит для кодирования сообщения
    :return: QuantumCircuit
    """
    qc = QuantumCircuit(message_bits)

    # Пример: Инициализация состояния в равномерной суперпозиции
    for q in range(message_bits):
        qc.h(q)

    # Применение QFT для криптооперации (преобразование Фурье)
    qc.append(QFT(message_bits), range(message_bits))

    # Допустим, добавим фазовый сдвиг, зависящий от ключа (гибридный элемент)
    key = np.pi / 4  # пример ключа
    for q in range(message_bits):
        qc.p(key * (q + 1), q)

    # Обратное QFT для дешифровки
    qc.append(QFT(message_bits).inverse(), range(message_bits))

    # Измерение всех кубитов
    qc.measure_all()

    return qc

if __name__ == "__main__":
    bits = 4
    circuit = create_hybrid_crypto_circuit(bits)

    simulator = Aer.get_backend('qasm_simulator')
    result = execute(circuit, backend=simulator, shots=1024).result()
    counts = result.get_counts()

    print("Результаты измерений:")
    print(counts)

    plot_histogram(counts)
    plt.show()
