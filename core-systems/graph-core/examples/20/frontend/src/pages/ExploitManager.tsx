// path: src/pages/ExploitManager.tsx

import { useEffect, useMemo, useState } from "react";
import { useAuth } from "@/features/auth/hooks/useAuth";
import { useExploitQuery, useExploitStream } from "@/features/exploit/exploitAPI";
import { AccessGuard } from "@/shared/components/AccessGuard";
import { ROLE } from "@/shared/constants/roles";
import { Helmet } from "react-helmet";
import { Spinner } from "@/shared/components/Spinner";
import { Button } from "@/shared/components/Button";
import { useDebounce } from "@/shared/hooks/useDebounce";
import { toast } from "react-toastify";
import { Modal } from "@/shared/components/Modal";
import { ExploitTable } from "@/features/exploit/components/ExploitTable";
import { ExploitFilterPanel } from "@/features/exploit/components/ExploitFilterPanel";
import { ExploitStatusRadar } from "@/features/exploit/components/ExploitStatusRadar";
import { ExploitDetailModal } from "@/features/exploit/components/ExploitDetailModal";
import { ZKProofBadge } from "@/shared/components/ZKProofBadge";
import { ExploitEventLog } from "@/features/exploit/components/ExploitEventLog";
import { ExploitRunnerModal } from "@/features/exploit/components/ExploitRunnerModal";

const ExploitManager = () => {
  const { user } = useAuth();
  const [selectedExploitId, setSelectedExploitId] = useState<string | null>(null);
  const [runnerOpen, setRunnerOpen] = useState(false);

  const [filters, setFilters] = useState({
    severity: "all",
    status: "all",
    module: "all",
    tag: "",
  });

  const debouncedFilters = useDebounce(filters, 400);
  const { data: exploits, isLoading, refetch } = useExploitQuery(debouncedFilters);
  const { stream, connect, disconnect, zkVerified } = useExploitStream();

  useEffect(() => {
    connect();
    return () => disconnect();
  }, []);

  const handleSelect = (id: string) => {
    setSelectedExploitId(id);
  };

  const handleExport = async () => {
    try {
      await navigator.clipboard.writeText(JSON.stringify(exploits, null, 2));
      toast.success("Список эксплойтов экспортирован");
    } catch {
      toast.error("Ошибка экспорта");
    }
  };

  const exploitStats = useMemo(() => {
    if (!exploits) return { active: 0, testing: 0, deprecated: 0 };
    return exploits.reduce(
      (acc, exp) => {
        if (exp.status === "ACTIVE") acc.active++;
        else if (exp.status === "TESTING") acc.testing++;
        else acc.deprecated++;
        return acc;
      },
      { active: 0, testing: 0, deprecated: 0 }
    );
  }, [exploits]);

  return (
    <AccessGuard roles={[ROLE.ADMIN, ROLE.REDTEAM, ROLE.EXPLOIT_ENGINEER]}>
      <Helmet>
        <title>Exploit Manager | TeslaAI NeuroCity</title>
        <meta name="description" content="Интерфейс управления эксплойтами, запуск, аудит, жизненный цикл, результаты атак." />
      </Helmet>

      <div className="px-6 py-8 min-h-screen">
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-3xl font-bold">Exploit Manager</h1>
          <div className="flex gap-2">
            <Button onClick={refetch}>Обновить</Button>
            <Button onClick={handleExport}>Экспорт JSON</Button>
            <Button onClick={() => setRunnerOpen(true)}>Запустить эксплойт</Button>
          </div>
        </div>

        <div className="mb-6">
          <ExploitFilterPanel filters={filters} onChange={setFilters} />
        </div>

        {isLoading ? (
          <div className="flex justify-center items-center h-[200px]">
            <Spinner />
          </div>
        ) : (
          <>
            <section className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6 mb-10">
              <div className="bg-white dark:bg-zinc-900 p-6 rounded-lg shadow">
                <h3 className="text-lg font-semibold mb-2">ZK Подтверждение выполнения</h3>
                <ZKProofBadge verified={zkVerified} />
              </div>

              <div className="bg-white dark:bg-zinc-900 p-6 rounded-lg shadow">
                <h3 className="text-lg font-semibold mb-2">Распределение по статусу</h3>
                <ExploitStatusRadar stats={exploitStats} />
              </div>

              <div className="bg-white dark:bg-zinc-900 p-6 rounded-lg shadow">
                <h3 className="text-lg font-semibold mb-2">Журнал атак и операций</h3>
                <ExploitEventLog logs={stream.logs} />
              </div>
            </section>

            <section className="mb-10">
              <h2 className="text-xl font-semibold mb-4">Зарегистрированные эксплойты</h2>
              <ExploitTable exploits={exploits ?? []} onSelect={handleSelect} />
            </section>
          </>
        )}

        <Modal open={!!selectedExploitId} onClose={() => setSelectedExploitId(null)}>
          {selectedExploitId && <ExploitDetailModal exploitId={selectedExploitId} />}
        </Modal>

        <Modal open={runnerOpen} onClose={() => setRunnerOpen(false)}>
          <ExploitRunnerModal onExecuted={refetch} />
        </Modal>
      </div>
    </AccessGuard>
  );
};

export default ExploitManager;
