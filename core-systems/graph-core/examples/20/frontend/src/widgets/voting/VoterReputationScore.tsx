import React, { useEffect, useState, useMemo } from 'react';
import { fetchReputationFactors } from '@/services/governance/reputationEngine';
import { useZKIdentity } from '@/shared/hooks/useZKIdentity';
import { useAuditLogger } from '@/shared/hooks/useAuditLogger';
import { ReputationRadarChart } from '@/shared/components/ReputationRadarChart';
import { ReputationLevelBadge } from '@/shared/components/ReputationLevelBadge';
import { Loader } from '@/shared/components/Loader';
import { Tooltip } from '@/shared/components/Tooltip';
import { formatPercent } from '@/utils/formatters';
import { getTimeAgo } from '@/utils/timeUtils';

type VoterReputationScoreProps = {
  userAddress: string;
};

type ReputationData = {
  totalScore: number;
  scoreLevel: 'Low' | 'Medium' | 'High' | 'Elite';
  lastUpdated: string;
  zkVerified: boolean;
  components: {
    consistency: number;
    participation: number;
    impact: number;
    endorsement: number;
    alignment: number;
  };
};

const VoterReputationScore: React.FC<VoterReputationScoreProps> = ({ userAddress }) => {
  const [reputation, setReputation] = useState<ReputationData | null>(null);
  const [loading, setLoading] = useState(true);

  const { identityHash, zkProof } = useZKIdentity(userAddress);
  const logAudit = useAuditLogger();

  useEffect(() => {
    const loadReputation = async () => {
      try {
        setLoading(true);
        const rep = await fetchReputationFactors(userAddress);
        setReputation(rep);

        logAudit({
          type: 'REPUTATION_VIEWED',
          user: userAddress,
          identityHash,
          zkVerified: rep.zkVerified,
          totalScore: rep.totalScore,
          scoreLevel: rep.scoreLevel,
        });
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏:', err);
        logAudit({
          type: 'REPUTATION_VIEW_ERROR',
          user: userAddress,
          error: err.message
        });
      } finally {
        setLoading(false);
      }
    };

    loadReputation();
  }, [userAddress]);

  const levelColor = useMemo(() => {
    switch (reputation?.scoreLevel) {
      case 'Elite': return 'bg-purple-600';
      case 'High': return 'bg-green-600';
      case 'Medium': return 'bg-yellow-500';
      case 'Low': return 'bg-red-600';
      default: return 'bg-gray-400';
    }
  }, [reputation]);

  if (loading || !reputation) {
    return <Loader label="–ê–Ω–∞–ª–∏–∑ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –≥–æ–ª–æ—Å—É—é—â–µ–≥–æ..." />;
  }

  return (
    <div className="bg-white dark:bg-gray-900 border border-gray-300 dark:border-gray-700 rounded-lg p-5 shadow-sm">
      <h3 className="text-lg font-bold text-gray-900 dark:text-white mb-4">
        –†–µ–ø—É—Ç–∞—Ü–∏—è –≥–æ–ª–æ—Å—É—é—â–µ–≥–æ
      </h3>

      <div className="flex items-center gap-4 mb-3">
        <ReputationLevelBadge level={reputation.scoreLevel} />
        <div className="text-sm text-gray-700 dark:text-gray-300">
          –û–±—â–∏–π –±–∞–ª–ª: <strong>{reputation.totalScore.toFixed(2)}</strong><br />
          –û–±–Ω–æ–≤–ª–µ–Ω–æ: {getTimeAgo(reputation.lastUpdated)}<br />
          –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ ZK: {reputation.zkVerified ? '–¥–∞' : '–Ω–µ—Ç'}
        </div>
      </div>

      <ReputationRadarChart
        data={{
          Consistency: reputation.components.consistency,
          Participation: reputation.components.participation,
          Impact: reputation.components.impact,
          Endorsement: reputation.components.endorsement,
          Alignment: reputation.components.alignment
        }}
      />

      <div className="grid grid-cols-2 gap-4 mt-5 text-sm text-gray-600 dark:text-gray-400">
        <Tooltip label="–ù–∞—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–ª–æ—Å—É–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å–≤–æ–∏–º–∏ –ø—Ä–æ—à–ª—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏.">
          <div>üìà –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {formatPercent(reputation.components.consistency)}</div>
        </Tooltip>
        <Tooltip label="–î–æ–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.">
          <div>üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {formatPercent(reputation.components.participation)}</div>
        </Tooltip>
        <Tooltip label="–ù–∞—Å–∫–æ–ª—å–∫–æ –µ–≥–æ –≥–æ–ª–æ—Å –∏–∑–º–µ–Ω—è–ª –∏—Ç–æ–≥ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (–≤–µ—Å/—Ä–µ—à–∞—é—â–∏–π –≤–∫–ª–∞–¥).">
          <div>‚öñÔ∏è –í–ª–∏—è–Ω–∏–µ: {formatPercent(reputation.components.impact)}</div>
        </Tooltip>
        <Tooltip label="–£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –≥–æ–ª–æ—Å–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏).">
          <div>ü§ù –û–¥–æ–±—Ä–µ–Ω–∏–µ: {formatPercent(reputation.components.endorsement)}</div>
        </Tooltip>
        <Tooltip label="–ù–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–ª–æ—Å—É–µ—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –º–∏—Å—Å–∏–µ–π DAO.">
          <div>üß≠ –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ: {formatPercent(reputation.components.alignment)}</div>
        </Tooltip>
      </div>
    </div>
  );
};

export default VoterReputationScore;
