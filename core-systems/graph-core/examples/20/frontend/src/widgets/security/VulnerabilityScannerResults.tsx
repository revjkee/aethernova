// src/widgets/Security/VulnerabilityScannerResults.tsx
import React, { useState, useEffect } from "react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import { ShieldAlert, CheckCircle2, Loader2 } from "lucide-react";
import dayjs from "dayjs";
import { useVulnerabilityFeed } from "@/hooks/security/useVulnerabilityFeed";

type Severity = "low" | "medium" | "high" | "critical";
type Status = "open" | "in_progress" | "remediated";

interface Vulnerability {
  id: string;
  cve: string;
  description: string;
  severity: Severity;
  discoveredAt: string;
  affectedAsset: string;
  remediation?: string;
  status: Status;
  tags: string[];
}

const severityColor: Record<Severity, string> = {
  low: "bg-green-100 text-green-800",
  medium: "bg-yellow-100 text-yellow-800",
  high: "bg-orange-100 text-orange-800",
  critical: "bg-red-100 text-red-800",
};

const statusIcon = {
  open: <ShieldAlert className="w-4 h-4 text-red-600" />,
  in_progress: <Loader2 className="w-4 h-4 animate-spin text-yellow-500" />,
  remediated: <CheckCircle2 className="w-4 h-4 text-green-500" />,
};

export const VulnerabilityScannerResults: React.FC = () => {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const { feed, isLoading, refetch } = useVulnerabilityFeed();

  useEffect(() => {
    if (feed) setVulnerabilities(feed);
  }, [feed]);

  const renderVuln = (v: Vulnerability) => (
    <div
      key={v.id}
      className={cn(
        "border p-4 rounded-md bg-background shadow-sm",
        v.status === "remediated" && "opacity-50"
      )}
    >
      <div className="flex items-center justify-between mb-1">
        <div className="flex items-center gap-2 font-semibold text-base">
          {statusIcon[v.status]}
          <span>{v.cve}</span>
          <Badge className={cn("ml-2", severityColor[v.severity])}>{v.severity.toUpperCase()}</Badge>
        </div>
        <span className="text-xs text-muted-foreground">
          Обнаружено: {dayjs(v.discoveredAt).format("DD MMM YYYY")}
        </span>
      </div>
      <p className="text-sm text-foreground mb-2">{v.description}</p>
      <div className="flex flex-wrap gap-2 mb-2">
        {v.tags.map((tag, i) => (
          <Badge key={i} variant="secondary" className="text-xs">
            {tag}
          </Badge>
        ))}
      </div>
      <div className="text-xs text-muted-foreground mb-2">
        Атакуемый компонент: {v.affectedAsset}
      </div>
      {v.remediation && (
        <div className="text-sm text-green-900 bg-green-50 border-l-4 border-green-400 pl-3 py-2 rounded">
          Рекомендация: {v.remediation}
        </div>
      )}
    </div>
  );

  return (
    <Card className="w-full h-full border bg-background">
      <CardHeader className="flex flex-row items-center justify-between">
        <CardTitle className="text-lg">Результаты сканирования уязвимостей</CardTitle>
        <Button onClick={refetch} variant="outline" size="sm">
          Обновить
        </Button>
      </CardHeader>
      <CardContent className="h-[540px] overflow-hidden">
        <ScrollArea className="h-full pr-2">
          <div className="flex flex-col gap-3">
            {isLoading ? (
              <div className="text-center text-muted-foreground">Загрузка...</div>
            ) : vulnerabilities.length === 0 ? (
              <div className="text-center text-muted-foreground">Нет обнаруженных уязвимостей.</div>
            ) : (
              vulnerabilities.map(renderVuln)
            )}
          </div>
        </ScrollArea>
      </CardContent>
    </Card>
  );
};
