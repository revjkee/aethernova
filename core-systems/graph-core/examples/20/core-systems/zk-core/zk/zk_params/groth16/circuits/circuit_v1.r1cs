pragma circom 2.0.0;

template HashInputVerifier(n) {
    signal input in[n];         // Входные значения
    signal input hash;          // Ожидаемый хеш
    signal output isValid;      // Результат проверки

    component hashFn = Poseidon(n);
    for (var i = 0; i < n; i++) {
        hashFn.inputs[i] <== in[i];
    }

    hashFn.out --> isHash;
    isValid <== isHash === hash;
}

template SignatureVerifier() {
    signal input pubKey[2];      // Публичный ключ
    signal input signature[2];   // Подпись
    signal input messageHash;    // Сообщение (уже хешированное)
    signal output isValid;

    component eddsa = EdDSA();
    eddsa.enableR1CS = true;
    eddsa.pubKey <== pubKey;
    eddsa.sig <== signature;
    eddsa.msg <== messageHash;

    isValid <== eddsa.out;
}

template UserProofCircuit() {
    signal input userData[8];        // Пользовательские данные (например, идентификатор, метка времени, ID NFT и т.п.)
    signal input hash;               // Ожидаемый хеш от данных
    signal input pubKey[2];          // Публичный ключ
    signal input signature[2];       // Подпись

    signal output isAuth;            // Полная проверка подлинности

    component hashCheck = HashInputVerifier(8);
    for (var i = 0; i < 8; i++) {
        hashCheck.in[i] <== userData[i];
    }
    hashCheck.hash <== hash;

    component sigCheck = SignatureVerifier();
    sigCheck.pubKey <== pubKey;
    sigCheck.signature <== signature;
    sigCheck.messageHash <== hash;

    isAuth <== hashCheck.isValid * sigCheck.isValid;
}

component main = UserProofCircuit();
