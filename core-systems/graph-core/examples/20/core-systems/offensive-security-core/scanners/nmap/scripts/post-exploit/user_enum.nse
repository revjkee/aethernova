-- user_enum.nse
--
-- Перечисляет пользователей в скомпрометированной системе через SMB или SSH.
-- Может выявлять локальных и доменных пользователей, SID/UID, группы и привилегии.
--
-- Автор: TeslaAI Red Team
-- Лицензия: Same as Nmap

local nmap = require "nmap"
local stdnse = require "stdnse"
local string = require "string"
local shortport = require "shortport"
local smb = require "smb"
local ssh2 = require "ssh2"
local creds = require "creds"
local table = require "table"

description = [[
Перечисляет локальных и/или доменных пользователей целевой системы через SMB или SSH.
Находит SID/UID, группы, принадлежности и системные роли. Полезен в фазе постэксплуатации.
]]

author = "TeslaAI Red Team"

license = "Same as Nmap"

categories = {"post-exploit", "auth", "discovery"}

portrule = shortport.port_or_service({22, 445}, {"ssh", "microsoft-ds"})

local function get_windows_users(smb_session)
  local users = {}
  local cmd = "net user"
  local out, err = smb_session:exec(cmd)
  if not out or #out == 0 then return {"Не удалось получить список пользователей: " .. (err or "пустой ответ")} end

  for line in string.gmatch(out, "[^\r\n]+") do
    if line:match("^%s*%w") then
      for user in string.gmatch(line, "%S+") do
        table.insert(users, user)
      end
    end
  end

  return users
end

local function get_unix_users(ssh_session)
  local users = {}
  local passwd = ssh_session:execute("cat /etc/passwd")
  if not passwd then return {"Не удалось прочитать /etc/passwd"} end

  for line in passwd:gmatch("[^\r\n]+") do
    local uname, _, uid, gid, full, home, shell = line:match("([^:]+):[^:]*:([^:]+):([^:]+):([^:]*):([^:]*):([^:]+)")
    if uname and uid then
      table.insert(users, string.format("%s (UID:%s GID:%s) SHELL:%s", uname, uid, gid, shell))
    end
  end

  return users
end

action = function(host, port)
  local out = {}
  local username = stdnse.get_script_args("user_enum.user")
  local password = stdnse.get_script_args("user_enum.pass")

  if port.number == 445 then
    local smb_session = smb.Session:new(host, username, password)
    local ok, err = smb_session:connect()
    if not ok then return "Ошибка подключения к SMB: " .. err end

    stdnse.print_debug("Сбор пользователей через SMB...")
    local users = get_windows_users(smb_session)
    smb_session:disconnect()

    table.insert(out, "Windows Users:")
    for _, user in ipairs(users) do
      table.insert(out, "  " .. user)
    end

  elseif port.number == 22 then
    local ssh_session, err = ssh2.open(host, username, password)
    if not ssh_session then return "Ошибка SSH: " .. err end

    stdnse.print_debug("Сбор пользователей через SSH...")
    local users = get_unix_users(ssh_session)
    ssh_session:close()

    table.insert(out, "Unix Users:")
    for _, user in ipairs(users) do
      table.insert(out, "  " .. user)
    end

  else
    return "Поддерживаются только порты 22 (SSH) и 445 (SMB)"
  end

  return table.concat(out, "\n")
end
