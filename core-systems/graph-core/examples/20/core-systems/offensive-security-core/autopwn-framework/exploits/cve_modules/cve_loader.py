# File: exploits/cve_modules/cve_loader.py

import importlib
import os
import sys
import logging
from typing import Dict, Optional, Type

logger = logging.getLogger(__name__)

class CVELoader:
    """
    Менеджер динамической загрузки CVE-модулей из директории cve_modules.
    Обеспечивает поиск, загрузку и управление CVE-модулями.
    """

    def __init__(self, modules_path: str):
        """
        Инициализация загрузчика.
        :param modules_path: Путь к директории с CVE-модулями.
        """
        self.modules_path = modules_path
        self.modules: Dict[str, Type] = {}
        if self.modules_path not in sys.path:
            sys.path.insert(0, self.modules_path)

    def discover_modules(self):
        """
        Поиск и загрузка всех доступных CVE-модулей в директории.
        """
        logger.debug(f"Начинается поиск CVE-модулей в {self.modules_path}")
        for filename in os.listdir(self.modules_path):
            if filename.endswith(".py") and filename != "__init__.py":
                module_name = filename[:-3]
                try:
                    module = importlib.import_module(module_name)
                    cve_class = getattr(module, 'CVE', None)
                    if cve_class:
                        self.modules[module_name] = cve_class
                        logger.debug(f"Загружен CVE-модуль: {module_name}")
                    else:
                        logger.warning(f"В модуле {module_name} отсутствует класс CVE")
                except Exception as e:
                    logger.error(f"Ошибка при загрузке модуля {module_name}: {e}")

    def get_module(self, name: str) -> Optional[Type]:
        """
        Получить класс CVE-модуля по имени.
        :param name: Имя модуля.
        :return: Класс CVE или None.
        """
        return self.modules.get(name)

    def list_modules(self):
        """
        Список доступных модулей.
        """
        return list(self.modules.keys())
