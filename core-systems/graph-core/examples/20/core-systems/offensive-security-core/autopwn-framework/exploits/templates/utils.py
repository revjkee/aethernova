# File: exploits/templates/utils.py

import os
import re
from typing import Dict, Any


class TemplateUtils:
    """
    Утилиты для работы с шаблонами эксплойтов и генерацией кода.
    """

    @staticmethod
    def load_template(template_path: str) -> str:
        """
        Загружает шаблон из файла.

        :param template_path: путь к файлу шаблона
        :return: содержимое шаблона в виде строки
        """
        if not os.path.isfile(template_path):
            raise FileNotFoundError(f"Template file not found: {template_path}")
        with open(template_path, 'r', encoding='utf-8') as f:
            return f.read()

    @staticmethod
    def save_code(code: str, output_path: str) -> None:
        """
        Сохраняет сгенерированный код в файл.

        :param code: сгенерированный код
        :param output_path: путь для сохранения
        """
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(code)

    @staticmethod
    def render_template(template_str: str, context: Dict[str, Any]) -> str:
        """
        Простейший механизм замены переменных в шаблоне.

        Переменные в шаблоне обозначаются как {{variable_name}}.

        :param template_str: строка шаблона
        :param context: словарь с переменными для замены
        :return: итоговая строка с заменёнными переменными
        """
        def replacer(match):
            key = match.group(1).strip()
            return str(context.get(key, match.group(0)))

        pattern = re.compile(r"\{\{\s*(\w+)\s*\}\}")
        return pattern.sub(replacer, template_str)

    @staticmethod
    def sanitize_identifier(name: str) -> str:
        """
        Преобразует строку в валидный идентификатор Python.

        :param name: исходное имя
        :return: валидный идентификатор
        """
        name = re.sub(r'\W|^(?=\d)', '_', name)
        return name


# Пример использования внутри модуля (без запуска):
# template = TemplateUtils.load_template("exploit_template.py")
# context = {"exploit_name": "ExampleExploit", "author": "YourName"}
# code = TemplateUtils.render_template(template, context)
# TemplateUtils.save_code(code, "generated_exploit.py")
