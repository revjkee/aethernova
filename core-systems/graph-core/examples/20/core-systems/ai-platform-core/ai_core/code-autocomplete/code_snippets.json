{
  "snippets": [
    {
      "id": "cs001",
      "language": "python",
      "description": "Асинхронная функция для запроса к API с обработкой исключений",
      "code": "import aiohttp\nimport asyncio\n\nasync def fetch_data(url: str) -> dict:\n    async with aiohttp.ClientSession() as session:\n        try:\n            async with session.get(url) as response:\n                response.raise_for_status()\n                return await response.json()\n        except aiohttp.ClientError as e:\n            print(f\"Ошибка при запросе: {e}\")\n            return {}\n\n# Использование\n# asyncio.run(fetch_data('https://api.example.com/data'))"
    },
    {
      "id": "cs002",
      "language": "typescript",
      "description": "React хук useState с типизацией и обновлением состояния по событию",
      "code": "import { useState } from 'react';\n\nfunction useCounter(initialValue: number = 0) {\n  const [count, setCount] = useState<number>(initialValue);\n  const increment = () => setCount(prev => prev + 1);\n  const decrement = () => setCount(prev => prev - 1);\n  return { count, increment, decrement };\n}\n\nexport default useCounter;"
    },
    {
      "id": "cs003",
      "language": "python",
      "description": "Контекстный менеджер для открытия и закрытия файла",
      "code": "from contextlib import contextmanager\n\n@contextmanager\ndef open_file(path, mode='r'):\n    f = open(path, mode)\n    try:\n        yield f\n    finally:\n        f.close()"
    },
    {
      "id": "cs004",
      "language": "sql",
      "description": "Запрос для выборки пользователей с пагинацией",
      "code": "SELECT id, username, email\nFROM users\nORDER BY created_at DESC\nLIMIT 20 OFFSET 40;"
    },
    {
      "id": "cs005",
      "language": "python",
      "description": "Асинхронный генератор для постраничной обработки данных",
      "code": "async def async_paginator(fetch_page, page_size=50):\n    page = 0\n    while True:\n        data = await fetch_page(page, page_size)\n        if not data:\n            break\n        yield data\n        page += 1"
    },
    {
      "id": "cs006",
      "language": "javascript",
      "description": "Debounce функция для оптимизации частых вызовов",
      "code": "function debounce(func, wait) {\n  let timeout;\n  return function(...args) {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(this, args), wait);\n  };\n}"
    },
    {
      "id": "cs007",
      "language": "python",
      "description": "Функция для вычисления факториала рекурсивно",
      "code": "def factorial(n: int) -> int:\n    if n <= 1:\n        return 1\n    return n * factorial(n - 1)"
    },
    {
      "id": "cs008",
      "language": "typescript",
      "description": "Интерфейс для описания пользователя с обязательными и опциональными полями",
      "code": "interface IUser {\n  id: number;\n  username: string;\n  email?: string;\n  isActive: boolean;\n}"
    },
    {
      "id": "cs009",
      "language": "python",
      "description": "Асинхронная функция задержки",
      "code": "import asyncio\n\nasync def async_sleep(seconds: int):\n    await asyncio.sleep(seconds)"
    },
    {
      "id": "cs010",
      "language": "python",
      "description": "Логирование исключений с трассировкой стека",
      "code": "import logging\nimport traceback\n\ndef log_exception(e: Exception):\n    logging.error(f\"Exception occurred: {e}\")\n    logging.error(traceback.format_exc())"
    }
  ],
  "meta": {
    "version": "1.0.0",
    "last_updated": "2025-07-11",
    "author": "TeslaAI Code Autocomplete Team"
  }
}
