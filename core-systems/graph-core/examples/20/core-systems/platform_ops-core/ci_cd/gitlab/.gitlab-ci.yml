stages:
  - lint
  - test
  - build
  - deploy

variables:
  DOCKER_TLS_CERTDIR: "/certs"
  CACHE_DIR: ".cache"
  IMAGE_NAME: "$CI_REGISTRY_IMAGE/teslaai"
  IMAGE_TAG: "latest"

default:
  image: python:3.11-slim
  before_script:
    - python -m pip install --upgrade pip
    - pip install poetry
    - poetry config virtualenvs.create false
    - poetry install

cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - .cache/pip
    - .venv/
    - __pycache__/
    - .mypy_cache/

.lint_template: &lint_template
  stage: lint
  script:
    - poetry run flake8 .
    - poetry run black --check .
    - poetry run isort --check-only .
  allow_failure: false

lint:python:
  <<: *lint_template

test:unit:
  stage: test
  script:
    - poetry run pytest --disable-warnings --cov=.
  coverage: '/TOTAL\s+\d+\s+\d+\s+(\d+)%/'
  artifacts:
    when: always
    paths:
      - tests/reports/
    reports:
      junit: tests/reports/junit.xml

build:image:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build -t "$IMAGE_NAME:$IMAGE_TAG" .
    - docker push "$IMAGE_NAME:$IMAGE_TAG"

deploy:staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh
  script:
    - ssh deploy@$STAGING_HOST 'bash /opt/teslaai/deploy.sh staging'
  only:
    - main

deploy:prod:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh
  script:
    - ssh deploy@$PROD_HOST 'bash /opt/teslaai/deploy.sh prod'
  only:
    - tags
