#!/bin/bash
set -euo pipefail

# Конфигурация
VAULT_ADDR="https://vault.example.com"
VAULT_TOKEN_FILE="$HOME/.vault-token"
TRANSIT_KEY="aws-enc-key"
PLAIN_FILE="aws_secrets.json"
ENC_FILE="aws_secrets.enc"

# Проверка наличия токена Vault
if [[ ! -f "$VAULT_TOKEN_FILE" ]]; then
  echo "Vault token file not found: $VAULT_TOKEN_FILE"
  exit 1
fi

VAULT_TOKEN=$(cat "$VAULT_TOKEN_FILE")

# Пример JSON с AWS ключами — заменить реальными данными перед запуском
cat > "$PLAIN_FILE" << EOF
{
  "access_key_id": "AKIAEXAMPLEKEY",
  "secret_access_key": "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY",
  "region": "us-east-1",
  "session_token": "FQoGZXIvYXdzE..."
}
EOF

# Шифрование через Vault Transit API
ENC_RESULT=$(curl -s --header "X-Vault-Token: $VAULT_TOKEN" \
  --request POST \
  --data "{\"plaintext\":\"$(base64 -w0 $PLAIN_FILE)\"}" \
  "$VAULT_ADDR/v1/transit/encrypt/$TRANSIT_KEY")

# Извлечение зашифрованного текста
CIPHER_TEXT=$(echo "$ENC_RESULT" | jq -r '.data.ciphertext')

if [[ -z "$CIPHER_TEXT" || "$CIPHER_TEXT" == "null" ]]; then
  echo "Encryption failed, response:"
  echo "$ENC_RESULT"
  exit 1
fi

echo "$CIPHER_TEXT" > "$ENC_FILE"
rm -f "$PLAIN_FILE"

echo "Encrypted AWS secrets saved to $ENC_FILE"
