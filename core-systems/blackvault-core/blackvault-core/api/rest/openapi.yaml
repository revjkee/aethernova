openapi: 3.0.3
info:
  title: BlackVault Core API
  description: >
    REST API для безопасного хранилища секретов, ключей и политик.
    Поддерживает envelope-шифрование, аудит и Zero-Trust аутентификацию (mTLS, OIDC).
  version: 1.0.0
  contact:
    name: NeuroCity Security Team
    email: security@neurocity.example
servers:
  - url: https://api.blackvault.local/v1
    description: Основной endpoint (MTLS)
  - url: https://staging.api.blackvault.local/v1
    description: Стейджинг окружение

tags:
  - name: Secrets
    description: Управление секретами (создание, чтение, удаление, ротация)
  - name: Keys
    description: Управление ключами и KMS-бэкендами
  - name: Policies
    description: RBAC/ABAC политики
  - name: Audit
    description: Журнал аудита, hash-chain, экспорт событий
  - name: Health
    description: Статус сервиса и метрики

paths:
  /secrets:
    post:
      tags: [Secrets]
      summary: Создать новый секрет
      operationId: createSecret
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecretCreateRequest'
      responses:
        '201':
          description: Секрет создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretResponse'
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }

    get:
      tags: [Secrets]
      summary: Список всех секретов
      operationId: listSecrets
      parameters:
        - in: query
          name: tenant
          schema: { type: string }
          description: Фильтр по тенанту
      responses:
        '200':
          description: Успешно
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/SecretResponse' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /secrets/{id}:
    get:
      tags: [Secrets]
      summary: Получить секрет по ID
      operationId: getSecret
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Успешно
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SecretResponse' }
        '404': { $ref: '#/components/responses/NotFound' }

    delete:
      tags: [Secrets]
      summary: Удалить секрет (shred)
      operationId: deleteSecret
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204':
          description: Успешно удалено
        '404': { $ref: '#/components/responses/NotFound' }

  /keys:
    post:
      tags: [Keys]
      summary: Сгенерировать новый ключ
      operationId: createKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyCreateRequest'
      responses:
        '201':
          description: Ключ создан
          content:
            application/json:
              schema: { $ref: '#/components/schemas/KeyResponse' }

    get:
      tags: [Keys]
      summary: Список ключей
      operationId: listKeys
      responses:
        '200':
          description: Успешно
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/KeyResponse' }

  /policies:
    get:
      tags: [Policies]
      summary: Получить список политик
      operationId: listPolicies
      responses:
        '200':
          description: Успешно
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/PolicyResponse' }

    post:
      tags: [Policies]
      summary: Создать/обновить политику
      operationId: upsertPolicy
      requestBody:
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PolicyRequest' }
      responses:
        '201':
          description: Создано
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PolicyResponse' }

  /audit/events:
    get:
      tags: [Audit]
      summary: Получить события аудита
      operationId: listAuditEvents
      parameters:
        - in: query
          name: tenant
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, default: 100 }
      responses:
        '200':
          description: Успешно
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/AuditEvent' }

  /health:
    get:
      tags: [Health]
      summary: Проверка здоровья сервиса
      operationId: healthCheck
      responses:
        '200':
          description: ОК
          content:
            application/json:
              schema: { $ref: '#/components/schemas/HealthResponse' }

components:
  securitySchemes:
    mtls:
      type: mutualTLS
    oidc:
      type: openIdConnect
      openIdConnectUrl: https://issuer.example.com/.well-known/openid-configuration

  responses:
    BadRequest:
      description: Неверный запрос
    Unauthorized:
      description: Ошибка авторизации
    NotFound:
      description: Объект не найден

  schemas:
    SecretCreateRequest:
      type: object
      required: [data, aad, backend]
      properties:
        data: { type: string, format: byte }
        aad: { type: object, additionalProperties: { type: string } }
        backend: { type: string, enum: [aws-kms, gcp-kms, azure-kv, pkcs11, external-vault] }

    SecretResponse:
      type: object
      properties:
        id: { type: string }
        created_at: { type: string, format: date-time }
        version: { type: string }
        backend: { type: string }
        aad: { type: object, additionalProperties: { type: string } }

    KeyCreateRequest:
      type: object
      required: [purpose, backend]
      properties:
        purpose: { type: string }
        backend: { type: string }

    KeyResponse:
      type: object
      properties:
        id: { type: string }
        created_at: { type: string, format: date-time }
        purpose: { type: string }
        backend: { type: string }

    PolicyRequest:
      type: object
      required: [id, effect, actions, subjects, resources]
      properties:
        id: { type: string }
        effect: { type: string, enum: [allow, deny] }
        actions: { type: array, items: { type: string } }
        subjects: { type: array, items: { type: string } }
        resources: { type: array, items: { type: string } }
        conditions: { type: object }

    PolicyResponse:
      allOf:
        - $ref: '#/components/schemas/PolicyRequest'
        - type: object
          properties:
            created_at: { type: string, format: date-time }
            updated_at: { type: string, format: date-time }

    AuditEvent:
      type: object
      properties:
        id: { type: string }
        tenant: { type: string }
        action: { type: string }
        actor: { type: string }
        timestamp: { type: string, format: date-time }
        hash_prev: { type: string }
        hash_curr: { type: string }

    HealthResponse:
      type: object
      properties:
        status: { type: string, example: "ok" }
        uptime: { type: string }
        version: { type: string }
