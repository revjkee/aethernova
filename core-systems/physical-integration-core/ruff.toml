# =============================================================================
# Ruff: промышленная конфигурация линтера и форматера
# Документация: https://docs.astral.sh/ruff/
# Версия Python целевая: 3.11 (при необходимости поменяйте target-version)
# =============================================================================

# Базовые параметры проекта
line-length = 100
indent-width = 4
target-version = "py311"

# Пути исходников (нужно для корректного разделения first-party/third-party импортов)
src = ["physical_integration_core"]

# Учитывать .gitignore и силой исключать перечисленные пути
respect-gitignore = true
force-exclude = true

# Глобальные исключения (артефакты, окружения, сборки, кеши, миграции и т. п.)
extend-exclude = [
  ".git",
  ".hg",
  ".svn",
  ".tox",
  ".venv",
  "venv",
  ".mypy_cache",
  ".ruff_cache",
  ".pytest_cache",
  "__pycache__",
  "build",
  "dist",
  "site-packages",
  "node_modules",
  "htmlcov",
  "coverage",
  "migrations",
  "docs/_build",
  "examples/_build",
]

# =============================================================================
# Lint
# =============================================================================
[lint]

# Полный набор включенных семейств правил
# E/W (pycodestyle), F (pyflakes), I (isort), N (pep8-naming), D (pydocstyle),
# UP (pyupgrade), B (bugbear), C4 (comprehensions), A (builtins),
# ANN (annotations), S (security/bandit), BLE (blind-except),
# FBT (boolean-trap), Q (quotes), ISC (implicit-str-concat),
# DTZ (naive-datetime), EXE (executable), G (logging-format),
# ICN (import-conventions), INP (no-namespace-packages/pep420),
# NPY (numpy), PD (pandas), PERF (perflint), PGH (pygrep-hooks),
# PIE (pie), PL (pylint-selected), PT (pytest-style), PTH (use-pathlib),
# PYI (typing stubs), RET (returns), RSE (raise), SIM (simplify),
# SLF (private-member access), TCH (type-checking imports), TID (tidy-imports),
# TRY (tryceratops), RUF (ruff-specific)
select = [
  "E", "W", "F", "I", "N", "D", "UP", "B", "C4", "A", "ANN", "Q", "DTZ", "EM", "EXE",
  "S", "BLE", "FBT", "G", "ICN", "INP", "ISC", "NPY", "PD", "PERF", "PGH", "PIE",
  "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY"
]

# Точечные глобальные игноры для несовместимых правил
# D203/D211 и D212/D213 конфликтуют — придерживаемся "no-blank-line-before-class" и "one-line-summary on first line"
ignore = [
  "D203", "D212",
  # pytest: разрешаем assert в обычном коде тестов, но ограничим это per-file-ignores ниже
  # некоторые проекты предпочитают оставлять S101 только в тестах
]

# Автофиксируемые и запрещенные к автофиксу правила
# (оставьте список пустым, чтобы использовать дефолт; примеры — опасные auto-fix)
unfixable = [
  "F401",    # не удалять импорт «на экспорт» автоматически
  "F841",    # не вычищать «неиспользуемые» переменные при отладке автоматически
]

# Порог сложности МакКейба
[lint.mccabe]
max-complexity = 10

# Именование (pep8-naming) — разрешаем декораторы для методов как синонимы @classmethod/@staticmethod (если используются)
[lint.pep8-naming]
classmethod-decorators = ["classmethod", "pydantic.validator", "pydantic.field_validator"]
staticmethod-decorators = ["staticmethod"]

# Аннотации (flake8-annotations)
[lint.flake8-annotations]
suppress-dummy-args = true           # допускаем _ как неаннотируемый «мусорный» аргумент
mypy-init-return = true              # __init__ может не иметь аннотации возвращаемого типа
allow-star-arg-any = true

# Докстринги (pydocstyle)
[lint.pydocstyle]
convention = "google"                # или "numpy" — при необходимости заменить
ignore-decorators = ["overload"]     # не требовать докстринги у @overload

# Цитаты в строках (flake8-quotes) — приводим к одинарным как к стилю проекта
[lint.flake8-quotes]
inline-quotes = "single"
multiline-quotes = "single"
docstring-quotes = "double"

# Импорты (isort внутри Ruff)
[lint.isort]
combine-as-imports = true
force-sort-within-sections = true
lines-after-imports = 2
no-lines-before = ["standard-library", "third-party", "first-party"]
known-first-party = ["physical_integration_core"]
# При необходимости добавьте реальные third-party для стабильного порядка:
known-third-party = [
  "fastapi", "pydantic", "requests", "httpx", "sqlalchemy",
  "numpy", "pandas", "uvicorn",
]

# Pylint‑совместимые подмножества: отключаем наиболее шумные кодстайловые проверки
[lint.pylint]
max-args = 8
max-branches = 12
max-returns = 6
max-statements = 50
# Некоторые правила «магических чисел» и прочие — шумны, глушим глобально
# (их можно включить в CI постепенно)
disable = [
  "PLR2004",  # magic-value-comparison
  "PLR0913",  # too-many-arguments (чуть мягче — ограничение есть выше)
]

# pytest‑гайды (flake8-pytest-style)
[lint.pytest-style]
fixture-parentheses = true
mark-parentheses = true

# tryceratops — запрет bare except, предпочтение исключениям, подсказки по retry
[lint.tryceratops]
# дефолта достаточно

# tidy‑imports — запрещаем циклические/отложенные импорты вне typing.TYPE_CHECKING
[lint.flake8-tidy-imports]
ban-relative-imports = "all"

# type‑checking импорты
[lint.flake8-type-checking]
strict = true

# Security (Bandit): включены через "S" — некоторые проверки требовательны.
# По умолчанию оставляем; специфичные подавления — в per-file-ignores.

# =============================================================================
# Пер‑файловые исключения
# =============================================================================
[lint.per-file-ignores]
# Файлы пакетов: разрешаем реэкспорт (F401) и отсутствие докстринг‑пакета (D104)
"**/__init__.py" = ["F401", "D104"]

# Тесты: позволяем assert (S101), упрощаем требования к докстрингам и аннотациям
"tests/**" = ["D", "ANN", "S101", "PLR2004"]

# Скрипты/миграции/пример кода: ослабляем докстринги и безопасность,
# но оставляем общие ошибки статики
"scripts/**" = ["D", "S"]
"examples/**" = ["D", "S"]

# =============================================================================
# Formatter (Ruff Formatter)
# =============================================================================
[format]
# Стиль кавычек в коде и докстрингах — согласован с [lint.flake8-quotes]
quote-style = "single"
docstring-code-format = true
docstring-code-line-length = 100
indent-style = "space"
line-ending = "lf"
skip-magic-trailing-comma = false

# =============================================================================
# Подсказки по запуску (для CI)
# ruff check --output-format=github .
# ruff format .
# Для автофиксов: ruff check --fix .
# =============================================================================
