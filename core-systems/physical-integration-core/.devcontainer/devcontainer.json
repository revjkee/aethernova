{
  "name": "physical-integration-core",
  "image": "mcr.microsoft.com/devcontainers/python:3.12",
  "remoteUser": "vscode",
  "containerEnv": {
    "PIP_DISABLE_PIP_VERSION_CHECK": "1",
    "PIP_NO_INPUT": "1",
    "PYTHONDONTWRITEBYTECODE": "1",
    "PYTHONUNBUFFERED": "1",
    "POETRY_VIRTUALENVS_IN_PROJECT": "true",
    "POETRY_NO_INTERACTION": "1",
    "UV_SYSTEM_PYTHON": "1"
  },
  "runArgs": [
    "--cap-drop=ALL",
    "--security-opt=no-new-privileges",
    "--pull=missing"
  ],
  "mounts": [
    "source=pic-pip-cache,target=/home/vscode/.cache/pip,type=volume",
    "source=pic-poetry-cache,target=/home/vscode/.cache/pypoetry,type=volume",
    "source=pic-uv-cache,target=/home/vscode/.cache/uv,type=volume"
  ],
  "features": {},
  "forwardPorts": [8080],
  "portsAttributes": {
    "8080": {
      "label": "app/http",
      "onAutoForward": "notify"
    }
  },
  "customizations": {
    "vscode": {
      "extensions": [
        "ms-python.python",
        "ms-python.vscode-pylance",
        "ms-python.black-formatter",
        "charliermarsh.ruff",
        "ms-azuretools.vscode-docker",
        "ms-vscode.makefile-tools",
        "redhat.vscode-yaml",
        "github.vscode-github-actions"
      ],
      "settings": {
        "python.defaultInterpreterPath": "${workspaceFolder}/.venv/bin/python",
        "python.analysis.typeCheckingMode": "basic",
        "python.testing.pytestEnabled": true,
        "python.testing.unittestEnabled": false,
        "python.formatting.provider": "black",
        "ruff.lint.args": [],
        "editor.formatOnSave": true,
        "editor.codeActionsOnSave": {
          "source.organizeImports.ruff": "explicit",
          "source.fixAll.ruff": "explicit"
        },
        "files.exclude": {
          "**/__pycache__": true,
          "**/.pytest_cache": true,
          "**/.mypy_cache": true,
          "htmlcov": true,
          "dist": true,
          "build": true
        },
        "terminal.integrated.defaultProfile.linux": "bash"
      }
    }
  },
  "initializeCommand": "/bin/sh -lc 'echo Init devcontainer for physical-integration-core'",
  "updateContentCommand": "/bin/sh -lc '\n  set -euo pipefail\n  export DEBIAN_FRONTEND=noninteractive\n  sudo apt-get update -y\n  sudo apt-get install -y --no-install-recommends make git ca-certificates curl\n  python3 -m pip install --upgrade pip pipx\n  pipx ensurepath\n  if ! command -v poetry >/dev/null 2>&1; then pipx install poetry; fi\n  poetry --version\n'",
  "postCreateCommand": "/bin/sh -lc '\n  set -euo pipefail\n  # предпочитаем локальные виртуальные окружения\n  poetry config virtualenvs.in-project true\n  # если в проекте есть Makefile — используем промышленный сценарий установки\n  if [ -f Makefile ]; then\n    make install || poetry install --no-root\n  else\n    poetry install --no-root\n  fi\n  # pre-commit опционален: не прерываем создание контейнера, если отсутствует\n  if [ -f .pre-commit-config.yaml ]; then\n    poetry run pre-commit install || true\n  fi\n'",
  "postStartCommand": "/bin/sh -lc '\n  set -euo pipefail\n  # Показать сведения об активной среде для диагностики\n  echo \"Python: $(python -V)\"; echo \"Poetry: $(poetry --version || true)\"\n  echo \"Venv: ${VIRTUAL_ENV:-$(pwd)/.venv}\"\n'",
  "hostRequirements": {
    "cpus": 2,
    "memory": "4gb",
    "storage": "8gb"
  }
}
