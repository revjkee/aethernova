# physical-integration-core/pyproject.toml

[build-system]
requires = ["poetry-core>=1.9.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "physical-integration-core"
version = "0.1.0"
description = "Core library for secure physical systems integration: transport, adapters, telemetry."
authors = ["Your Org <devnull@example.com>"]
readme = "README.md"
license = "Apache-2.0"
homepage = "https://example.com/physical-integration-core"
repository = "https://example.com/physical-integration-core"
keywords = ["integration", "security", "telemetry", "adapters"]
packages = [{ include = "physical_integration" }]

[tool.poetry.dependencies]
python = ">=3.10,<3.14"
pydantic = ">=2.7"
httpx = {version = ">=0.27", extras = ["http2"]}
anyio = ">=4.4"
# логирование — используйте стандартный logging; structlog по желанию:
structlog = {version = ">=24.1", optional = true}

# Опциональные компоненты API/WS
fastapi = {version = ">=0.111", optional = true}
uvicorn = {version = ">=0.30", optional = true, extras = ["standard"]}

# Телеметрия (опционально)
opentelemetry-api = {version = ">=1.26", optional = true}

[tool.poetry.extras]
api = ["fastapi", "uvicorn"]
otel = ["opentelemetry-api"]
structlog = ["structlog"]

[tool.poetry.group.dev.dependencies]
pytest = ">=8.2"
pytest-asyncio = ">=0.23"
respx = ">=0.21"
coverage = ">=7.6"
ruff = ">=0.5.0"
black = ">=24.4.2"
mypy = ">=1.10"
types-requests = ">=2.32.0.20240712"
types-python-dateutil = ">=2.9.0.20240316"

[tool.poetry.scripts]
# Пример CLI; создайте модуль physical_integration/__main__.py или cli.py
pic = "physical_integration.__main__:main"

# -------------------------
#   Ruff (линтинг)
# -------------------------
[tool.ruff]
line-length = 100
target-version = "py310"
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    ".pytest_cache",
    "build",
    "dist",
]
# Включаем наиболее полезные наборы правил
lint.select = ["E", "F", "I", "UP", "B", "PL", "RUF", "SIM", "TRY", "N"]
lint.ignore = [
    "E501",  # длину строк контролируем Black
]
lint.per-file-ignores = {}

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

# -------------------------
#   Black (форматирование)
# -------------------------
[tool.black]
line-length = 100
target-version = ["py310"]

# -------------------------
#   mypy (статический анализ)
# -------------------------
[tool.mypy]
python_version = "3.10"
warn_unused_ignores = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
no_implicit_optional = true
check_untyped_defs = true
strict_equality = true
pretty = true
# Плагины Pydantic v2
plugins = ["pydantic.mypy"]

[[tool.mypy.overrides]]
module = [
  "httpx.*",
  "respx.*",
  "structlog.*",
  "opentelemetry.*",
]
ignore_missing_imports = true

# -------------------------
#   pytest
# -------------------------
[tool.pytest.ini_options]
addopts = "-ra -q"
testpaths = ["tests"]
filterwarnings = [
  "error::DeprecationWarning",
  "ignore::pytest.PytestUnraisableExceptionWarning",
]
asyncio_mode = "auto"

# -------------------------
#   coverage.py
# -------------------------
[tool.coverage.run]
source = ["physical_integration"]
branch = true
omit = [
  "physical_integration/__main__.py",
]

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 85

# -------------------------
#   packaging metadata
# -------------------------
[tool.poetry.urls]
"Bug Tracker" = "https://example.com/physical-integration-core/issues"
"Changelog" = "https://example.com/physical-integration-core/releases"
