{{- /*
  Industrial-grade Secret/ExternalSecret template for physical-integration-core
  Values contract (excerpt):
  secrets:
    enabled: true
    # Render ExternalSecret instead of native Secret
    external:
      enabled: false
      refreshInterval: 1h
      secretStoreRef:
        name: eso-cluster
        kind: ClusterSecretStore
      # Optional defaults for ExternalSecret target
      target:
        creationPolicy: Owner
        deletionPolicy: Retain
        template:
          type: Opaque
          metadata:
            annotations: {}
            labels: {}
    items:
      - name: app
        enabled: true
        type: Opaque
        immutable: false
        annotations: {}
        labels: {}
        # Generic key-value pairs; each entry supports generation and tpl-substitution
        data:
          - name: APP_SECRET_KEY
            value: ""                       # will be tpl-evaluated
            generate:
              enabled: true
              length: 64
              charset: alnum                # one of: alnum|alpha|numeric
          - name: DATABASE_URL
            value: "{{ .Values.global.db.url }}"
        binaryData: []                      # [{name: "BLOB", valueB64: "<base64>"}]
        # TLS secret support
        tls:
          crt: ""                           # base64 or plain; will be encoded
          key: ""
        # Docker config support (type must be kubernetes.io/dockerconfigjson)
        docker:
          server: "ghcr.io"
          username: ""
          password: ""
          email: ""
        # ExternalSecret per-item mapping (effective only when secrets.external.enabled=true)
        external:
          refreshInterval: ""               # optional override
          secretStoreRef: {}                # optional override {name,kind}
          target:
            name: ""                        # optional override secret name
            creationPolicy: ""              # override
            deletionPolicy: ""              # override
            template:
              type: ""                      # override
              metadata:
                annotations: {}
                labels: {}
          data:                             # granular remote refs
            - secretKey: "APP_SECRET_KEY"
              remoteRef:
                key: "kv/apps/myapp"
                property: "app_secret"
                version: ""                 # optional
          dataFrom: []                      # [{extract: {key: "<path>"}}]
*/ -}}

{{- if .Values.secrets.enabled }}

{{- $release := .Release -}}
{{- $chart := .Chart -}}
{{- $vals := .Values -}}
{{- $base := default (printf "%s-%s" $release.Name $chart.Name) $vals.fullnameOverride -}}
{{- $nameOverride := $vals.nameOverride -}}

{{- /* Helper to compute per-item secret name */ -}}
{{- define "pic.secretName" -}}
{{- $root := index . 0 -}}
{{- $item := index . 1 -}}
{{- $base := default (printf "%s-%s" $root.Release.Name $root.Chart.Name) $root.Values.fullnameOverride -}}
{{- $n := default (printf "%s-%s" (default (printf "%s-%s" $root.Release.Name $root.Chart.Name) $base) $item.name) $item.fullname -}}
{{- /* enforce DNS-1123 length */ -}}
{{- $trim := trunc 63 $n | trimSuffix "-" -}}
{{- $trim -}}
{{- end -}}

{{- if not .Values.secrets.external.enabled }}

{{- /* NATIVE K8S SECRET MODE */ -}}
{{- range $idx, $item := .Values.secrets.items }}
{{- if or (not (hasKey $item "enabled")) $item.enabled }}

{{- $secretName := include "pic.secretName" (list $ $item) -}}
{{- $existing := (lookup "v1" "Secret" $.Release.Namespace $secretName) -}}

apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
  namespace: {{ $.Release.Namespace }}
  labels:
    app.kubernetes.io/instance: {{ $.Release.Name }}
    app.kubernetes.io/part-of: {{ $.Chart.Name }}
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: {{ printf "%s-%s" $.Chart.Name $.Chart.Version | quote }}
{{- if $item.labels }}
{{ toYaml $item.labels | nindent 4 }}
{{- end }}
  annotations:
    secrets.k8s.io/owner: {{ $.Release.Service | default "Helm" | quote }}
{{- if $item.annotations }}
{{ toYaml $item.annotations | nindent 4 }}
{{- end }}
type: {{ default "Opaque" $item.type }}
{{- if hasKey $item "immutable" }}
immutable: {{ $item.immutable | default false }}
{{- end }}

{{- /* Branch per type for payload assembly */ -}}
{{- if eq (default "Opaque" $item.type) "kubernetes.io/tls" }}
data:
  tls.crt: {{ default "" $item.tls.crt | b64enc }}
  tls.key: {{ default "" $item.tls.key | b64enc }}

{{- else if eq (default "Opaque" $item.type) "kubernetes.io/dockerconfigjson" }}
{{- $auth := printf "%s:%s" (default "" $item.docker.username) (default "" $item.docker.password) | b64enc -}}
{{- $json := printf "{\"auths\":{\"%s\":{\"username\":\"%s\",\"password\":\"%s\",\"email\":\"%s\",\"auth\":\"%s\"}}}" (default "" $item.docker.server) (default "" $item.docker.username) (default "" $item.docker.password) (default "" $item.docker.email) $auth -}}
data:
  .dockerconfigjson: {{ $json | b64enc }}

{{- else }}
{{- $hasString := gt (len (default (list) $item.data)) 0 -}}
{{- $hasBinary := gt (len (default (list) $item.binaryData)) 0 -}}
{{- if $hasString }}
stringData:
{{- range $entry := (default (list) $item.data) }}
{{- /* Resolve value with precedence: existing->explicit->generated */ -}}
{{- $ctx := dict "val" (tpl (default "" $entry.value) $) -}}
{{- if and $existing $existing.data (hasKey $existing.data $entry.name) -}}
{{- $_ := set $ctx "val" (index $existing.data $entry.name | b64dec) -}}
{{- else if and $entry.generate $entry.generate.enabled -}}
{{- $len := default 32 $entry.generate.length -}}
{{- $charset := default "alnum" $entry.generate.charset -}}
{{- if eq $charset "alpha" -}}
{{- $_ := set $ctx "val" (randAlpha $len) -}}
{{- else if eq $charset "numeric" -}}
{{- $_ := set $ctx "val" (randNumeric $len) -}}
{{- else -}}
{{- $_ := set $ctx "val" (randAlphaNum $len) -}}
{{- end -}}
{{- end }}
  {{ $entry.name }}: {{ get $ctx "val" | quote }}
{{- end }}
{{- end }}
{{- if $hasBinary }}
data:
{{- range $b := (default (list) $item.binaryData) }}
  {{ $b.name }}: {{ $b.valueB64 | default "" }}
{{- end }}
{{- end }}
{{- end }}

---
{{- end }}
{{- end }}

{{- else }}

{{- /* EXTERNALSECRET MODE (external-secrets.io) */ -}}
{{- $ext := .Values.secrets.external -}}
{{- range $idx, $item := .Values.secrets.items }}
{{- if or (not (hasKey $item "enabled")) $item.enabled }}

{{- $secretName := include "pic.secretName" (list $ $item) -}}
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ printf "%s-ext" $secretName | trunc 63 | trimSuffix "-" }}
  namespace: {{ $.Release.Namespace }}
  labels:
    app.kubernetes.io/instance: {{ $.Release.Name }}
    app.kubernetes.io/part-of: {{ $.Chart.Name }}
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: {{ printf "%s-%s" $.Chart.Name $.Chart.Version | quote }}
{{- if $item.labels }}
{{ toYaml $item.labels | nindent 4 }}
{{- end }}
  annotations:
    secrets.k8s.io/backend: external-secrets
{{- if $item.annotations }}
{{ toYaml $item.annotations | nindent 4 }}
{{- end }}
spec:
  refreshInterval: {{ default $ext.refreshInterval $item.external.refreshInterval | default "1h" | quote }}
  secretStoreRef:
    name: {{ default (default "" $ext.secretStoreRef.name) $item.external.secretStoreRef.name | quote }}
    kind: {{ default (default "ClusterSecretStore" $ext.secretStoreRef.kind) $item.external.secretStoreRef.kind | quote }}
  target:
    name: {{ default (default $secretName $item.external.target.name) $secretName | quote }}
    creationPolicy: {{ default (default "Owner" $ext.target.creationPolicy) $item.external.target.creationPolicy | quote }}
    deletionPolicy: {{ default (default "Retain" $ext.target.deletionPolicy) $item.external.target.deletionPolicy | quote }}
    template:
      type: {{ default (default "Opaque" $ext.target.template.type) $item.external.target.template.type | quote }}
      metadata:
        annotations:
{{- $ann := merge (default (dict) $ext.target.template.metadata.annotations) (default (dict) $item.external.target.template.metadata.annotations) -}}
{{- if $ann }}{{ toYaml $ann | nindent 10 }}{{- else }}          {}{{- end }}
        labels:
{{- $lbl := merge (default (dict) $ext.target.template.metadata.labels) (default (dict) $item.external.target.template.metadata.labels) -}}
{{- if $lbl }}{{ toYaml $lbl | nindent 10 }}{{- else }}          {}{{- end }}
  data:
{{- range $d := (default (list) $item.external.data) }}
    - secretKey: {{ $d.secretKey | quote }}
      remoteRef:
        key: {{ $d.remoteRef.key | quote }}
{{- if $d.remoteRef.property }}
        property: {{ $d.remoteRef.property | quote }}
{{- end }}
{{- if $d.remoteRef.version }}
        version: {{ $d.remoteRef.version | quote }}
{{- end }}
{{- end }}
  dataFrom:
{{- if gt (len (default (list) $item.external.dataFrom)) 0 }}
{{- range $df := (default (list) $item.external.dataFrom) }}
    - extract:
        key: {{ $df.extract.key | quote }}
{{- end }}
{{- else }}
    []
{{- end }}

---
{{- end }}
{{- end }}

{{- end }}

{{- end }}
