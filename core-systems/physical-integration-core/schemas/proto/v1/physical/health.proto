syntax = "proto3";

package v1.physical;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/any.proto";

// ============================================================================
// Options for multi-language codegen (industrial defaults)
// ============================================================================
option cc_enable_arenas = true;
option optimize_for = SPEED;
option java_multiple_files = true;
option java_package = "com.aethernova.physical.v1";
option java_outer_classname = "PhysicalHealthProto";
option go_package = "github.com/aethernova/physical-integration-core/schemas/gen/go/v1/physical;physicalv1";
option csharp_namespace = "Aethernova.Physical.V1";
option objc_class_prefix = "ANPH";
option php_namespace = "Aethernova\\Physical\\V1";
option swift_prefix = "ANPH";

// ============================================================================
// Enumerations
// ============================================================================

enum HealthStatus {
  HEALTH_STATUS_UNSPECIFIED = 0; // default/unknown
  HEALTH_STATUS_OK          = 1; // all good, within SLO/SLA
  HEALTH_STATUS_WARN        = 2; // non-critical degradation
  HEALTH_STATUS_DEGRADED    = 3; // significant degradation, SLO at risk
  HEALTH_STATUS_ERROR       = 4; // errors, partial outage
  HEALTH_STATUS_CRITICAL    = 5; // hard failure/outage
  HEALTH_STATUS_MAINTENANCE = 6; // planned outage/maintenance window
  HEALTH_STATUS_STARTING    = 7; // warming up
  HEALTH_STATUS_STOPPING    = 8; // draining/shutting down
  HEALTH_STATUS_DISABLED    = 9; // intentionally disabled
}

enum Severity {
  SEVERITY_UNSPECIFIED = 0;
  SEVERITY_INFO        = 1;
  SEVERITY_LOW         = 2;
  SEVERITY_MEDIUM      = 3;
  SEVERITY_HIGH        = 4;
  SEVERITY_CRITICAL    = 5;
}

enum ComponentKind {
  COMPONENT_KIND_UNSPECIFIED = 0;
  COMPONENT_KIND_NODE        = 1; // host, edge box, VM
  COMPONENT_KIND_SERVICE     = 2; // logical service/app
  COMPONENT_KIND_PROCESS     = 3; // specific process/container
  COMPONENT_KIND_DEVICE      = 4; // PLC, sensor, camera, actuator
  COMPONENT_KIND_NETWORK     = 5; // link/interface/gateway
  COMPONENT_KIND_STORAGE     = 6; // disk, volume, DB shard
  COMPONENT_KIND_ACCELERATOR = 7; // GPU/TPU/VPU
}

enum MetricKind {
  METRIC_KIND_UNSPECIFIED = 0;
  METRIC_KIND_GAUGE       = 1;
  METRIC_KIND_COUNTER     = 2;
  METRIC_KIND_HISTOGRAM   = 3;
  METRIC_KIND_SUMMARY     = 4;
}

enum Unit {
  UNIT_UNSPECIFIED = 0;
  UNIT_PERCENT     = 1;  // %
  UNIT_SECONDS     = 2;  // s
  UNIT_MILLISECONDS= 3;  // ms
  UNIT_BYTES       = 4;  // B
  UNIT_BYTES_PER_S = 5;  // B/s
  UNIT_COUNT       = 6;  // dimensionless
  UNIT_CELSIUS     = 7;  // Â°C
  UNIT_WATTS       = 8;  // W
  UNIT_VOLTS       = 9;  // V
  UNIT_AMPS        = 10; // A
  UNIT_PASCAL      = 11; // Pa
}

// ============================================================================
// Core identity & attributes (aligned with OTel Resource attributes concept)
// ============================================================================

message Attribute {
  string key = 1;
  string value = 2;
}

message UID {
  // ULID/UUID/KSUID string, system does not impose format but MUST be unique.
  string value = 1;
}

message Resource {
  UID uid = 1;                         // stable identity
  ComponentKind kind = 2;
  string vendor = 3;                   // e.g., "Siemens", "NVIDIA", "Linux"
  string model = 4;                    // hardware/software model
  string version = 5;                  // semantic version if applicable
  string env = 6;                      // prod/stage/dev
  string site = 7;                     // physical site/campus id
  string zone = 8;                     // rack/zone/room
  string node = 9;                     // hostname/edge node id
  string namespace = 10;               // k8s namespace or logical group
  string service = 11;                 // service name
  string instance = 12;                // instance/pod/container id
  string component = 13;               // fine-grained component name
  repeated Attribute attributes = 14;  // free-form labels
  // Reserved for future topology references (parent/child, cluster id, etc.)
  reserved 15 to 19;
}

// ============================================================================
// Signals & metrics (compact but expressive)
// ============================================================================

message Signal {
  // Standardized health signals (subset is optional).
  double cpu_util_percent = 1;              // 0..100
  double mem_util_percent = 2;              // 0..100
  double mem_bytes_total  = 3;
  double mem_bytes_used   = 4;
  double disk_util_percent = 5;             // 0..100
  double disk_bytes_total = 6;
  double disk_bytes_used  = 7;
  double net_bytes_in_per_s  = 8;
  double net_bytes_out_per_s = 9;
  uint32 restarts_total = 10;               // process/container restarts
  google.protobuf.Timestamp last_restart_at = 11;
  double temperature_c = 12;                // sensor/CPU/GPU temperature
  double power_w = 13;                      // device/service power draw
  double voltage_v = 14;
  double current_a = 15;
  double latency_ms_p50 = 16;
  double latency_ms_p95 = 17;
  double latency_ms_p99 = 18;
  // Reserved to keep field numbers stable for future standard signals:
  reserved 19 to 29;
}

message MetricPoint {
  string name = 1;                      // e.g., "edge.queue.backlog"
  MetricKind kind = 2;
  Unit unit = 3;
  double value = 4;                     // for GAUGE/COUNTER/SUMMARY
  // Optional histogram buckets (upper bound => count)
  map<double, uint64> histogram = 5;    // only for HISTOGRAM
  google.protobuf.Timestamp ts = 6;     // point timestamp
  map<string, string> labels = 7;       // dim labels (e.g., camera="lobby")
}

message Cause {
  string code = 1;                      // machine-readable cause code
  string message = 2;                   // human-readable cause message
  Severity severity = 3;
  // Optional structured diagnostic details:
  google.protobuf.Struct details = 4;
}

message Recommendation {
  string code = 1;                      // remediation code
  string message = 2;                   // action text
  google.protobuf.Struct hints = 3;     // parameters, runbook links, etc.
}

// ============================================================================
// Health snapshot & events
// ============================================================================

message HealthSnapshot {
  UID id = 1;                            // snapshot id
  Resource resource = 2;                 // who is being reported
  HealthStatus status = 3;               // current overall status
  Severity severity = 4;                 // mapped severity
  string summary = 5;                    // short summary
  string description = 6;                // longer text
  Signal signals = 7;                    // standardized quick signals
  repeated MetricPoint metrics = 8;      // additional metrics
  repeated Cause causes = 9;             // root causes (if known)
  repeated Recommendation recommendations = 10; // remediation proposals
  google.protobuf.Timestamp observed_at = 11;   // when measured
  google.protobuf.Duration ttl = 12;     // time-to-live for this snapshot
  google.protobuf.Timestamp expires_at = 13; // redundancy to simplify clients
  map<string, string> annotations = 14;  // non-indexed annotations
  google.protobuf.Any vendor_payload = 15; // vendor-specific payload
  // Backward/forward compat: keep field ids stable and reserve space:
  reserved 16 to 19;
}

message HealthEvent {
  UID id = 1;
  Resource resource = 2;
  string type = 3;                       // e.g., "STATE_CHANGE","DEGRADED"
  HealthStatus from_status = 4;
  HealthStatus to_status = 5;
  Severity severity = 6;
  string message = 7;
  google.protobuf.Timestamp at = 8;
  map<string, string> annotations = 9;
}

// ============================================================================
// Requests/Responses
// ============================================================================

message Filter {
  // Any of provided fields narrows selection (logical AND between keys).
  string env = 1;
  string site = 2;
  string zone = 3;
  string node = 4;
  string namespace = 5;
  string service = 6;
  string component = 7;
  ComponentKind kind = 8;
  map<string, string> labels = 9; // match resource.attributes
}

message HealthCheckRequest {
  Filter filter = 1;
  bool include_children = 2;             // include dependent resources
  bool minimal = 3;                      // omit heavy fields (metrics/vendor)
}

message HealthCheckResponse {
  repeated HealthSnapshot snapshots = 1;
  google.protobuf.Timestamp generated_at = 2;
}

message WatchRequest {
  Filter filter = 1;
  google.protobuf.Duration min_interval = 2; // server may batch/coalesce
  bool send_initial = 3;                     // send current immediately
}

message ReportRequest {
  // Incoming report from agents/collectors (client-streaming/bidi).
  HealthSnapshot snapshot = 1;
  string reporter = 2;                  // agent id/name
  map<string, string> reporter_labels = 3;
  // Optional auth context (identity/JWT digest/etc.) left to transport layer.
}

message ReportAck {
  UID snapshot_id = 1;
  bool accepted = 2;
  string message = 3;
}

message HistoryRequest {
  Filter filter = 1;
  google.protobuf.Timestamp start = 2;
  google.protobuf.Timestamp end = 3;
  uint32 limit = 4;                      // cap number of snapshots
  bool include_events = 5;
}

message HistoryResponse {
  repeated HealthSnapshot snapshots = 1;
  repeated HealthEvent events = 2;
}

message LivenessRequest {
  // Lightweight ping with optional resource echo.
  Resource resource = 1;
}

message LivenessResponse {
  HealthStatus status = 1;               // typically OK/ERROR
  string summary = 2;
  google.protobuf.Timestamp at = 3;
}

// ============================================================================
// Service
// ============================================================================

service PhysicalHealthService {
  // One-shot health retrieval with filters.
  rpc Check(HealthCheckRequest) returns (HealthCheckResponse);

  // Server-streaming updates respecting min_interval and TTL/expiry semantics.
  rpc Watch(WatchRequest) returns (stream HealthCheckResponse);

  // Client- or bidi-streaming agent reports of snapshots.
  rpc Report(stream ReportRequest) returns (ReportAck);

  // Historical snapshots/events for SRE, RCA and dashboards.
  rpc History(HistoryRequest) returns (HistoryResponse);

  // Fast liveness probe for lightweight readiness endpoints.
  rpc Liveness(LivenessRequest) returns (LivenessResponse);
}
