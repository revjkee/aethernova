// physical-integration-core/schemas/proto/v1/physical/safety.proto
syntax = "proto3";

package aether.physical.v1;

option go_package = "github.com/aethernova/neurocity/physical-integration-core/schemas/proto/v1/physical;physicalv1";
option java_multiple_files = true;
option java_package = "org.aethernova.neurocity.physical.v1";
option java_outer_classname = "SafetyProto";
option csharp_namespace = "Aethernova.NeuroCity.Physical.V1";
option objc_class_prefix = "ANP";
option optimize_for = SPEED;
option cc_enable_arenas = true;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

// ----------------------------- ENUMS -----------------------------

// Уровень важности нарушения.
enum Severity {
  SEVERITY_UNSPECIFIED = 0;
  SEVERITY_INFO = 1;
  SEVERITY_LOW = 2;
  SEVERITY_MEDIUM = 3;
  SEVERITY_HIGH = 4;
  SEVERITY_CRITICAL = 5;
}

// Запрашиваемое действие процесса.
enum Action {
  ACTION_UNSPECIFIED = 0;
  ACTION_RUN = 1;        // Продолжить работу
  ACTION_START = 2;      // Холодный старт
  ACTION_RESUME = 3;     // Возобновление после стопа
  ACTION_MAINTENANCE = 4;// Режим обслуживания
  ACTION_SHUTDOWN = 5;   // Останов
}

// Подсистема источника нарушения.
enum Subsystem {
  SUBSYSTEM_UNSPECIFIED = 0;
  SUBSYSTEM_SAFETY = 1;
  SUBSYSTEM_CONTROL = 2;
  SUBSYSTEM_MECHANICAL = 3;
  SUBSYSTEM_ENVIRONMENT = 4;
  SUBSYSTEM_POWER = 5;
  SUBSYSTEM_SECURITY = 6;
  SUBSYSTEM_PROCESS = 7;
}

// Коды межблокировок/нарушений (стабильные номера — не менять).
enum ViolationCode {
  VIOLATION_CODE_UNSPECIFIED = 0;
  E_STOP = 1;
  COMMS_LOST = 2;
  DOOR_OPEN_MOTION = 3;
  GUARD_UNLOCKED = 4;
  OVERTEMP_CRIT = 5;
  OVERTEMP_ROC = 6;
  OVERPRESSURE_CRIT = 7;
  GAS_LEAK = 8;
  VIBRATION_HIGH = 9;
  UNDERVOLTAGE = 10;
  POWER_REDUNDANCY_LOST = 11;
  ATTESTATION_FAIL = 12;
  COOLDOWN_NOT_ELAPSED = 13;
  TEMP_NOT_RESET = 14;
  PRESSURE_NOT_RESET = 15;
  SELFTEST_OVERDUE = 16;
  SPEED_LIMIT = 17;
  CUSTOM = 99; // Пользовательские/вендорные
}

// Качество измерения/состояния.
enum Quality {
  QUALITY_UNSPECIFIED = 0;
  QUALITY_OK = 1;
  QUALITY_DEGRADED = 2;
  QUALITY_FAILED = 3;
  QUALITY_BYPASSED = 4; // Обход (например, серв. режим)
}

// --------------------------- COMMON TYPES ---------------------------

// Универсальный булев сенсор.
message BooleanSensor {
  string id = 1;         // Стабильный идентификатор (например, door:1)
  string name = 2;       // Человекочитаемое имя
  bool value = 3;        // Значение
  Quality quality = 4;   // Качество сигнала
  map<string, string> attributes = 5; // Произвольные атрибуты
}

// Универсальный числовой сенсор.
message NumericSensor {
  string id = 1;
  string name = 2;
  double value = 3;
  string unit = 4;       // Единицы измерения (например, "rpm", "V")
  Quality quality = 5;
  map<string, string> attributes = 6;
}

// Двери/ограждения.
message DoorState {
  string id = 1;
  bool closed = 2;
  Quality quality = 3;
}

message GuardState {
  string id = 1;
  bool locked = 2;
  Quality quality = 3;
}

// --------------------------- DOMAIN INPUTS ---------------------------

// Окружающая среда.
message Environment {
  double temperature_c = 1;
  double pressure_bar = 2;
  uint32 gas_ppm = 3;
}

// Энергоснабжение/качество.
message Power {
  repeated BooleanSensor ups_ok = 1; // N источников UPS
  repeated double voltage_v = 2;     // Снимки по фазам/линиям
}

// Служебные состояния.
message States {
  double heartbeat_age_s = 1; // Возраст последнего heartbeat
  bool attestation_ok = 2;    // Результат аттестации/secure boot
  google.protobuf.Timestamp last_alarm_cleared_at = 3;
  google.protobuf.Timestamp last_self_test_ok = 4;
}

// Производные метрики.
message Metrics {
  double temperature_roc_c_per_min = 1; // Скорость роста T
  repeated double vibration_mm_s = 2;   // Вектор вибрации
}

// Обслуживание: подтверждения и окно действия.
message Approver {
  string id = 1;         // Уникальный идентификатор сотрудника
  string name = 2;       // Имя/позывной
  bytes signature = 3;   // Подпись (опционально)
}

message Maintenance {
  bool requested = 1;                                 // Запрошен ли сервисный режим
  repeated Approver approvers = 2;                    // Список утвердивших
  google.protobuf.Timestamp approved_until = 3;       // Срок действия
  map<string, string> scope = 4;                      // Ограничение области работ
}

// Пороговые значения/правила (снимок, примененный при оценке).
message Thresholds {
  EnvironmentThresholds env = 1;
  PowerThresholds power = 2;
  MotionThresholds motion = 3;
  Timeouts timeouts = 4;
  Redundancy redundancy = 5;
  MaintenanceRules maintenance = 6;
}

message EnvironmentThresholds {
  double temp_limit_c = 1;            // Крит. температура
  double temp_reset_c = 2;            // Порог сброса гистерезиса
  double temp_roc_crit_c_per_min = 3; // Крит. скорость роста T
  double pressure_limit_bar = 4;      // Крит. давление
  double pressure_reset_bar = 5;      // Порог сброса давления
  uint32 gas_limit_ppm = 6;           // Крит. концентрация газа
  double vibration_limit_mm_s = 7;    // Крит. вибрация
}

message PowerThresholds {
  double voltage_min_v = 1;           // Минимально допустимое напряжение
}

message MotionThresholds {
  double speed_limit_rpm = 1;         // Предел скорости
}

message Timeouts {
  google.protobuf.Duration max_heartbeat_age = 1;
  google.protobuf.Duration cooldown_start = 2;
  google.protobuf.Duration selftest_max_age = 3;
}

message Redundancy {
  uint32 ups_min_required = 1;        // Требуемое кол-во UPS OK
}

message MaintenanceRules {
  uint32 min_approvers = 1;           // Минимум подтверждающих
  repeated ViolationCode non_bypassable = 2; // Нельзя обходить даже в сервисе
}

// --------------------------- VERDICT/TYPES ---------------------------

message Violation {
  ViolationCode code = 1;
  Severity severity = 2;
  string message = 3;
  Subsystem subsystem = 4;
  map<string, string> attributes = 5;
}

// Итоговый вердикт политики.
message SafetyVerdict {
  bool allow = 1;                               // Разрешить действие
  bool safe_mode = 2;                           // Режим безопасной деградации
  Action action = 3;                            // Какое действие оценивалось
  repeated Violation deny = 4;                  // Список причин отказа
  google.protobuf.Timestamp evaluated_at = 5;   // Время оценки
  string policy_version = 6;                    // Версия политики/правил
  string change_id = 7;                         // Идентификатор изменения конфигурации
  Thresholds thresholds_applied = 8;            // Снимок порогов, по которым принято решение
}

// ------------------------ REQUEST/RESPONSE API ------------------------

message SafetyEvaluationRequest {
  Action action = 1;
  google.protobuf.Timestamp time = 2;

  Environment env = 3;
  Power power = 4;
  States states = 5;
  Metrics metrics = 6;

  // N-из-M сенсорика безопасности:
  repeated DoorState door_sensors = 7;  // Требования к 2ooN могут применяться на стороне политики
  repeated GuardState guard_sensors = 8;
  repeated BooleanSensor estop = 9;
  repeated NumericSensor speed_rpm = 10;

  Maintenance maintenance = 11;

  // Произвольный контекст (идентификаторы кластера/тенанта/линии и др.).
  map<string, string> context = 12;

  // Пороговые значения, если требуется отправлять их вместе с запросом.
  // Может быть пустым, если пороги берутся из конфигурации сервиса.
  Thresholds thresholds_override = 13;

  // РЕЗЕРВ ДЛЯ БЕЗЛОМАЮЩИХ ДОБАВОЛЕНИЙ:
  // reserved 14 to 19;
}

message SafetyEvaluationResponse {
  SafetyVerdict verdict = 1;
  // РЕЗЕРВ ДЛЯ ДОП. ТЕЛЕМЕТРИИ/ОТЛАДКИ:
  // reserved 2 to 5;
}

// ----------------------------- RESERVES -----------------------------
// Резервируем идентификаторы для будущей эволюции без изменения существующих полей.
// Здесь приведены только примеры. В реальном процессе резерв ведётся дисциплинированно.
//
// reserved 1000 to 1999; // Расширения вендора
// reserved "legacy_field_a", "legacy_field_b";
