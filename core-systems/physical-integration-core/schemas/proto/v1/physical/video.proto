// physical-integration-core/schemas/proto/v1/physical/video.proto
syntax = "proto3";

package pic.v1.physical;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";

// -------------------------
// Генерация/плагины
// -------------------------
option optimize_for = SPEED;
option cc_enable_arenas = true;
option java_multiple_files = true;
option java_package = "ai.neurocity.pic.v1.physical";
option java_outer_classname = "VideoProto";
option go_package = "github.com/neurocity/physical-integration-core/schemas/proto/v1/physical;physicalv1";
option csharp_namespace = "NeuroCity.PIC.V1.Physical";

// =========================
// Общие утилиты
// =========================

message Rational {
  // EXACT fps/timebase as rational
  int32 num = 1; // REQUIRED, > 0
  int32 den = 2; // REQUIRED, > 0
}

message Checksum {
  enum Type {
    CHECKSUM_TYPE_UNSPECIFIED = 0;
    CRC32C = 1;
    MD5 = 2;
    SHA1 = 3;
    SHA256 = 4;
    BLAKE3 = 5;
  }
  Type type = 1;
  bytes value = 2; // raw digest bytes
}

message GeoPoint {
  double lat = 1;  // degrees
  double lon = 2;  // degrees
  double alt_m = 3; // meters above sea level
  google.protobuf.DoubleValue horiz_accuracy_m = 4;
  google.protobuf.DoubleValue vert_accuracy_m = 5;
}

message Quaternion {
  double x = 1;
  double y = 2;
  double z = 3;
  double w = 4;
}

message Vec3 {
  double x = 1;
  double y = 2;
  double z = 3;
}

// =========================
// Кодеки, цвет, HDR
// =========================

enum VideoCodec {
  VIDEO_CODEC_UNSPECIFIED = 0;
  H264_AVC = 1;
  H265_HEVC = 2;
  VP9 = 3;
  AV1 = 4;
  MPEG2 = 5;
  MJPEG = 6;
  RAW = 7;
}

enum ContainerFormat {
  CONTAINER_UNSPECIFIED = 0;
  ISOBMFF_MP4 = 1; // MP4/ISOBMFF (включая CMAF)
  MATROSKA_MKV = 2;
  MPEG_TS = 3;
  IVF = 4;
  RAW_ANNEXB = 5;
}

enum PixelFormat {
  PIXEL_FORMAT_UNSPECIFIED = 0;
  YUV420P8 = 1;
  YUV420P10 = 2;
  YUV422P10 = 3;
  YUV444P10 = 4;
  RGB24 = 5;
  BGR24 = 6;
}

enum ColorSpace {
  COLOR_SPACE_UNSPECIFIED = 0;
  BT601 = 1;
  BT709 = 2;
  BT2020_NCL = 3; // non-constant luminance
}

enum TransferFunction {
  TRANSFER_UNSPECIFIED = 0;
  SDR_GAMMA22 = 1;
  HLG = 2; // ARIB STD-B67
  PQ = 3;  // SMPTE ST 2084
}

enum Range {
  RANGE_UNSPECIFIED = 0;
  LIMITED = 1; // TV range
  FULL = 2;    // PC range
}

enum ScanType {
  SCAN_UNSPECIFIED = 0;
  PROGRESSIVE = 1;
  INTERLACED_TFF = 2; // top field first
  INTERLACED_BFF = 3; // bottom field first
}

message HDRStaticMetadata {
  // SMPTE ST 2086 primaries/white point and luminance info
  google.protobuf.DoubleValue mastering_display_min_luminance_nits = 1;
  google.protobuf.DoubleValue mastering_display_max_luminance_nits = 2;
  google.protobuf.UInt32Value max_content_light_level = 3; // MaxCLL
  google.protobuf.UInt32Value max_frame_average_light_level = 4; // MaxFALL
}

// =========================
// Шифрование/DRM/Watermark
// =========================

message EncryptionInfo {
  enum Mode {
    MODE_UNSPECIFIED = 0;
    AES_GCM = 1;
    AES_CTR = 2;
    SAMPLE_AES = 3; // ISOBMFF/CENC
  }
  enum DrmSystem {
    DRM_SYSTEM_UNSPECIFIED = 0;
    WIDEVINE = 1;
    PLAYREADY = 2;
    FAIRPLAY = 3;
    CUSTOM_KMS = 10;
  }
  Mode mode = 1;
  DrmSystem drm = 2;
  bytes key_id = 3;      // KID/UUID (16 bytes)
  bytes iv = 4;          // IV/nonce
  string kms_resource = 5; // ARN/URI для KMS или ключевого сервиса
  google.protobuf.Timestamp key_rotation_not_after = 6;
}

message Watermark {
  enum Type {
    WM_TYPE_UNSPECIFIED = 0;
    FORENSIC = 1;
    VISIBLE = 2;
  }
  Type type = 1;
  bytes id = 2; // opaque identifier
  string vendor = 3;
  google.protobuf.Timestamp applied_at = 4;
}

// =========================
// Приватность и калибровка
// =========================

message PrivacyMask {
  message Polygon {
    message Point { float x = 1; float y = 2; } // normalized [0..1]
    repeated Point points = 1;
  }
  repeated Polygon regions = 1;
  bool redact_audio = 2;
  string policy_ref = 3; // external policy id
}

message CameraCalibration {
  // Pinhole + radial/tangential (Brown–Conrady)
  double fx = 1;
  double fy = 2;
  double cx = 3;
  double cy = 4;
  // distortion
  double k1 = 5;
  double k2 = 6;
  double p1 = 7;
  double p2 = 8;
  double k3 = 9;
  // extrinsics
  Quaternion rotation = 10;
  Vec3 translation_m = 11;
}

// =========================
// Описание потока и кодека
// =========================

message CodecParameters {
  VideoCodec codec = 1;
  PixelFormat pixel_format = 2;
  uint32 width = 3;
  uint32 height = 4;
  Rational fps = 5;           // frames per second
  Rational timebase = 6;      // ticks per second (packet timebase)
  uint32 gop_size = 7;        // keyframe interval in frames
  google.protobuf.UInt32Value bitrate_kbps = 8; // target/avg
  ColorSpace color_space = 9;
  TransferFunction transfer = 10;
  Range range = 11;
  ScanType scan = 12;
  HDRStaticMetadata hdr = 13;
  // Reserved for future codec-specific params (profile/level/tier)
  // reserved 14 to 19;
}

message StreamDescriptor {
  string schema_version = 1; // semver of this proto schema expected by producer
  string stream_id = 2;      // stable id (UUID)
  ContainerFormat container = 3;
  CodecParameters video = 4;
  google.protobuf.BoolValue has_audio = 5;
  google.protobuf.UInt32Value audio_channels = 6;
  google.protobuf.UInt32Value audio_sample_rate = 7;
  string site = 8;           // plant/site identifier
  string camera_id = 9;
  string camera_make = 10;
  string camera_model = 11;
  string firmware_version = 12;
  GeoPoint location = 13;
  CameraCalibration calibration = 14;
  PrivacyMask default_privacy = 15;
  EncryptionInfo encryption = 16;
  Watermark watermark = 17;
  map<string, string> labels = 18; // arbitrary metadata
  // Reserved for backward-compatible extensions.
  reserved 19 to 24;
}

// =========================
// Кадры, чанки, сегменты
// =========================

enum FrameType {
  FRAME_TYPE_UNSPECIFIED = 0;
  I_KEY = 1;
  P_DELTA = 2;
  B_BIDIR = 3;
}

message RegionOfInterest {
  // Normalized bbox [0..1]
  float x = 1;
  float y = 2;
  float w = 3;
  float h = 4;
  string label = 5;
  google.protobuf.FloatValue score = 6;
}

message FrameMetadata {
  uint64 frame_number = 1;
  FrameType frame_type = 2;
  google.protobuf.Timestamp pts = 3; // presentation timestamp
  google.protobuf.Timestamp dts = 4; // decoding timestamp (optional)
  uint32 size_bytes = 5;
  Checksum checksum = 6;
  bool scene_change = 7;
  google.protobuf.FloatValue motion_score = 8; // 0..1
  repeated RegionOfInterest rois = 9;
}

message VideoFrame {
  StreamDescriptor descriptor = 1; // included for self-contained messages (or omit and reference stream_id)
  bytes data = 2;                  // raw frame or containerized sample
  FrameMetadata meta = 3;
  EncryptionInfo encryption = 4;   // if per-sample encrypted/overrides stream
  PrivacyMask privacy = 5;         // effective mask
  // Reserved 6..9 for future per-frame additions
}

message VideoChunk {
  // Chunk aggregates N frames or a sub-segment of container bytes
  string stream_id = 1;
  uint64 chunk_index = 2;           // monotonically increasing
  bytes data = 3;                   // container bytes or concatenated frames
  uint32 frames = 4;                // number of frames in chunk
  bool starts_with_keyframe = 5;
  Checksum checksum = 6;
  EncryptionInfo encryption = 7;
  google.protobuf.Timestamp start_pts = 8;
  google.protobuf.Timestamp end_pts = 9;
  map<string, string> labels = 10;
  // Reserved 11..15
}

message ObjectStorageRef {
  // Externalized payload reference (e.g., S3/MinIO)
  string uri = 1;       // s3://bucket/key or https://...
  uint64 offset = 2;    // byte offset within object (optional)
  uint64 length = 3;    // byte length (optional)
  Checksum checksum = 4;
}

message VideoSegment {
  string stream_id = 1;
  uint64 segment_index = 2; // monotonically increasing per stream
  google.protobuf.Timestamp start_pts = 3;
  google.protobuf.Timestamp end_pts = 4;
  google.protobuf.Duration duration = 5;
  oneof payload {
    bytes data = 6;             // in-band payload
    ObjectStorageRef object = 7; // out-of-band reference
  }
  bool complete = 8; // true when fully committed
  Checksum checksum = 9;
  EncryptionInfo encryption = 10;
  repeated FrameIndex keyframes = 11; // local index inside segment
  // Reserved 12..15
}

message FrameIndex {
  uint64 frame_number = 1;
  FrameType type = 2;
  uint64 byte_offset = 3; // offset within segment payload
}

message KeyFrameIndex {
  string stream_id = 1;
  repeated FrameIndex keyframes = 2;
  google.protobuf.Timestamp generated_at = 3;
  Checksum checksum = 4;
}

// =========================
// Классификация/ретеншн
// =========================

enum DataClassification {
  CLASSIFICATION_UNSPECIFIED = 0;
  PUBLIC = 1;
  INTERNAL = 2;
  CONFIDENTIAL = 3;
  SECRET = 4;
}

message RetentionPolicy {
  DataClassification classification = 1;
  google.protobuf.Duration min_retain = 2;
  google.protobuf.Duration max_retain = 3;
  google.protobuf.Timestamp delete_after = 4;
}

// =========================
// Сервисные протоколы (gRPC)
// =========================

message UploadRequest {
  oneof msg {
    StreamDescriptor descriptor = 1; // must be first in stream
    VideoChunk chunk = 2;
    VideoSegment segment = 3;        // optional: direct segmenting
    Heartbeat heartbeat = 4;
    CommitRequest commit = 5;
  }
}

message UploadResponse {
  enum Status {
    STATUS_UNSPECIFIED = 0;
    OK = 1;
    ACCEPTED = 2;
    REJECTED = 3;
  }
  Status status = 1;
  string stream_id = 2;
  uint64 last_committed_index = 3; // chunk or segment index
  repeated string reasons = 4;     // policy/DLQ-compatible reasons
}

message CommitRequest {
  string stream_id = 1;
  uint64 up_to_index = 2; // inclusive
  Checksum aggregate_checksum = 3;
  RetentionPolicy retention = 4;
}

message Heartbeat {
  string stream_id = 1;
  google.protobuf.Timestamp ts = 2;
  map<string, string> stats = 3; // e.g., encoder queue size, cpu load, drop counters
}

message GetStreamDescriptorRequest {
  string stream_id = 1;
}
message GetStreamDescriptorResponse {
  StreamDescriptor descriptor = 1;
}

message GetKeyFrameIndexRequest {
  string stream_id = 1;
  google.protobuf.Timestamp from = 2;
  google.protobuf.Timestamp to = 3;
}
message GetKeyFrameIndexResponse {
  KeyFrameIndex index = 1;
}

service VideoIngest {
  // Двунаправленная передача чанков/сегментов с подтверждениями
  rpc UploadChunks (stream UploadRequest) returns (stream UploadResponse);
  // Фиксация на стороне хранилища c ретеншном и агрегатной контрольной суммой
  rpc CommitSegment (CommitRequest) returns (UploadResponse);
}

service VideoCatalog {
  rpc GetStreamDescriptor (GetStreamDescriptorRequest) returns (GetStreamDescriptorResponse);
  rpc GetKeyFrameIndex (GetKeyFrameIndexRequest) returns (GetKeyFrameIndexResponse);
}

// =========================
// Резервы на будущее
// =========================

// Резерв полей на уровень файла не обязателен, но отдельные сообщения
// имеют диапазоны reserved во избежание конфликтов при эволюции.
