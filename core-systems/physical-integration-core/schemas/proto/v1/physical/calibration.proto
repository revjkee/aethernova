syntax = "proto3";

package aethernova.physical.v1;

option go_package = "github.com/aethernova/physical-integration-core/schemas/gen/go/physical/v1;physicalv1";
option java_package = "com.aethernova.physical.v1";
option java_outer_classname = "CalibrationProto";
option java_multiple_files = true;
option csharp_namespace = "Aethernova.Physical.V1";
option php_namespace = "Aethernova\\Physical\\V1";
option ruby_package = "Aethernova::Physical::V1";
option objc_class_prefix = "PIC";
option optimize_for = SPEED;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";

// ---------- Enums ----------

enum CalibrationStatus {
  CALIBRATION_STATUS_UNSPECIFIED = 0;
  CALIBRATION_STATUS_DRAFT = 1;
  CALIBRATION_STATUS_SCHEDULED = 2;
  CALIBRATION_STATUS_RUNNING = 3;
  CALIBRATION_STATUS_PAUSED = 4;
  CALIBRATION_STATUS_FAILED = 5;
  CALIBRATION_STATUS_COMPLETED = 6;
  CALIBRATION_STATUS_ABORTED = 7;
  CALIBRATION_STATUS_EXPIRED = 8;
}

enum ProcedureType {
  PROCEDURE_TYPE_UNSPECIFIED = 0;
  PROCEDURE_TYPE_OFFSET = 1;
  PROCEDURE_TYPE_SCALE = 2;
  PROCEDURE_TYPE_LINEARITY = 3;
  PROCEDURE_TYPE_TEMPERATURE_COMP = 4;
  PROCEDURE_TYPE_HUMIDITY_COMP = 5;
  PROCEDURE_TYPE_GYRO_BIAS = 6;
  PROCEDURE_TYPE_ACCEL_BIAS = 7;
  PROCEDURE_TYPE_MAG_BIAS = 8;
  PROCEDURE_TYPE_CAMERA_INTRINSICS = 9;
  PROCEDURE_TYPE_LIDAR_EXTRINSICS = 10;
  PROCEDURE_TYPE_CUSTOM = 99;
}

enum Severity {
  SEVERITY_UNSPECIFIED = 0;
  SEVERITY_INFO = 1;
  SEVERITY_WARN = 2;
  SEVERITY_ERROR = 3;
  SEVERITY_CRITICAL = 4;
}

enum ArtifactType {
  ARTIFACT_TYPE_UNSPECIFIED = 0;
  ARTIFACT_TYPE_LOG = 1;
  ARTIFACT_TYPE_IMAGE = 2;
  ARTIFACT_TYPE_VIDEO = 3;
  ARTIFACT_TYPE_BINARY = 4;
  ARTIFACT_TYPE_REPORT = 5;
  ARTIFACT_TYPE_CERTIFICATE = 6;
  ARTIFACT_TYPE_SBOM = 7;
}

enum ErrorCode {
  ERROR_CODE_UNSPECIFIED = 0;
  ERROR_CODE_VALIDATION_FAILED = 1;
  ERROR_CODE_OUT_OF_RANGE = 2;
  ERROR_CODE_DEVICE_COMM = 3;
  ERROR_CODE_TIMEOUT = 4;
  ERROR_CODE_PERMISSION_DENIED = 5;
  ERROR_CODE_NOT_FOUND = 6;
  ERROR_CODE_CONFLICT = 7;
  ERROR_CODE_PRECONDITION_FAILED = 8;
  ERROR_CODE_INTERNAL = 9;
}

// ---------- Core value objects ----------

// UCUM unit string is recommended (e.g., "Cel", "1", "m/s^2").
message Quantity {
  double value = 1;
  string unit_ucum = 2;
}

// Min/max absolute range with unit.
message Range {
  double min = 1;
  double max = 2;
  string unit_ucum = 3;
}

// Tolerance can be absolute or percentage of expected value.
message Tolerance {
  oneof spec {
    Range absolute = 1;
    double percent = 2; // 0..100
  }
}

// Generic k/v labels.
message Labels {
  map<string, string> items = 1;
}

// ---------- References ----------

message DeviceRef {
  string device_id = 1;
  string manufacturer = 2;
  string model = 3;
  string hardware_rev = 4;
  string firmware_rev = 5;
  Labels labels = 6;
}

message SensorRef {
  string sensor_id = 1;
  string kind = 2;     // e.g., "thermistor", "imu.gyro", "camera"
  string channel = 3;  // e.g., "x", "y", "z", "rgb"
  Labels labels = 4;
}

// ---------- Environment snapshot ----------

message EnvironmentSnapshot {
  google.protobuf.Timestamp at = 1;
  Quantity temperature = 2; // Cel
  Quantity humidity = 3;    // %
  Quantity pressure = 4;    // Pa
  Quantity supply_voltage = 5; // V
  map<string, google.protobuf.Value> extra = 10;
}

// ---------- Calibration points and profiles ----------

message CalibrationPoint {
  google.protobuf.Timestamp at = 1;
  Quantity expected = 2;
  Quantity observed = 3;
  Quantity deviation = 4; // observed - expected, in expected.unit
  bool within_tolerance = 5;
  EnvironmentSnapshot env = 6;
  string note = 7;
  // reserved for future: index, source_id, op id, etc.
  reserved 100 to 119;
}

message ToleranceProfile {
  map<string, Tolerance> channel_tolerance = 1; // channel -> tolerance
  google.protobuf.DoubleValue max_drift_per_day = 2; // in expected.unit/day
  google.protobuf.DoubleValue residual_error_rms = 3; // same unit as expected
  string policy_id = 4; // reference to compliance/policy set
}

// Vendor-specific parameters (schema optional).
message ProcedureParameters {
  map<string, google.protobuf.Value> kv = 1;
  google.protobuf.Any schema = 2;
}

// ---------- Artifacts, events, certificates ----------

message Artifact {
  string id = 1;
  ArtifactType type = 2;
  string name = 3;
  string content_type = 4;
  uint64 size_bytes = 5;
  string sha256 = 6;
  string storage_uri = 7; // e.g., s3://bucket/key or https://...
  google.protobuf.Timestamp created_at = 8;
  Labels labels = 9;
}

message CalibrationEvent {
  string id = 1;
  Severity severity = 2;
  string message = 3;
  map<string, string> fields = 4;
  google.protobuf.Timestamp at = 5;
  string procedure_id = 6;
  string session_id = 7;
}

message CalibrationCertificate {
  string id = 1;
  string session_id = 2;
  string serial = 3;
  string issuer = 4;
  google.protobuf.Timestamp issued_at = 5;
  google.protobuf.Timestamp valid_until = 6;
  string pem_cert = 7; // Optional: PEM if using X.509
  map<string, string> data = 8; // Key report fields for quick access
  repeated Artifact attachments = 9;
}

// ---------- Procedure and Session ----------

message CalibrationProcedure {
  string id = 1;
  ProcedureType type = 2;
  string description = 3;
  repeated SensorRef target_sensors = 4;
  ProcedureParameters parameters = 5;
  ToleranceProfile tolerances = 6;
  CalibrationStatus status = 7;
  google.protobuf.Timestamp scheduled_at = 8;
  google.protobuf.Timestamp started_at = 9;
  google.protobuf.Timestamp completed_at = 10;
  string operator = 11;
  repeated CalibrationPoint points = 12;
  repeated Artifact artifacts = 13;
  repeated CalibrationEvent events = 14;

  // Reserved for forward compat
  reserved 100 to 119;
}

message CalibrationSession {
  string id = 1;
  string tenant_id = 2;
  string project_id = 3;
  DeviceRef device = 4;
  repeated SensorRef sensors = 5;
  string requested_by = 6;
  string goal = 7;
  CalibrationStatus status = 8;
  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp scheduled_at = 10;
  google.protobuf.Timestamp started_at = 11;
  google.protobuf.Timestamp completed_at = 12;
  string version = 13; // schema/app version that performed calibration
  Labels labels = 14;
  repeated string tags = 15;
  repeated CalibrationProcedure procedures = 16;
  CalibrationCertificate certificate = 17;

  reserved 100 to 129;
}

// ---------- Streaming metrics ----------

message MetricFrame {
  string session_id = 1;
  string procedure_id = 2;
  string device_id = 3;
  string sensor_id = 4;
  google.protobuf.Timestamp at = 5;
  // keyed numeric measurements, e.g., {"x": 0.12, "y": 0.01}
  map<string, double> values = 6;
  EnvironmentSnapshot env = 7;
}

message StreamAck {
  string message = 1;
  google.protobuf.Timestamp at = 2;
}

// ---------- Pagination ----------

message PageCursor {
  string next_page_token = 1;
  int32 page_size = 2;
}

// ---------- Service requests/responses ----------

message CreateSessionRequest {
  CalibrationSession session = 1; // id ignored on create
}

message GetSessionRequest {
  string session_id = 1;
}

message ListSessionsRequest {
  string tenant_id = 1;
  string device_id = 2;
  CalibrationStatus status = 3;
  google.protobuf.Timestamp created_after = 4;
  google.protobuf.Timestamp created_before = 5;
  int32 page_size = 6;
  string page_token = 7;
}

message ListSessionsResponse {
  repeated CalibrationSession items = 1;
  string next_page_token = 2;
}

message StartSessionRequest {
  string session_id = 1;
}

message AbortSessionRequest {
  string session_id = 1;
  string reason = 2;
}

message FinalizeSessionRequest {
  string session_id = 1;
}

message CreateProcedureRequest {
  string session_id = 1;
  CalibrationProcedure procedure = 2; // id ignored on create
}

message UpdateProcedureRequest {
  string session_id = 1;
  CalibrationProcedure procedure = 2; // full or partial; fields with zero-values must be handled by server policy
}

message StartProcedureRequest {
  string session_id = 1;
  string procedure_id = 2;
}

message CompleteProcedureRequest {
  string session_id = 1;
  string procedure_id = 2;
}

message SubmitPointRequest {
  string session_id = 1;
  string procedure_id = 2;
  CalibrationPoint point = 3;
}

message SubmitPointResponse {
  bool accepted = 1;
  string reason = 2;
}

message UploadArtifactRequest {
  string session_id = 1;
  string procedure_id = 2;
  Artifact artifact = 3; // storage_uri may be presigned URL or server-managed location
}

message IssueCertificateRequest {
  string session_id = 1;
  // optional template or profile id
  string template_id = 2;
  // validity duration from issuance; if unset, server default applies
  google.protobuf.Duration valid_for = 3;
}

message RevokeCertificateRequest {
  string certificate_id = 1;
  string reason = 2;
}

message SchemaVersion {
  string version = 1;
}

// ---------- Error model ----------

message ErrorDetail {
  ErrorCode code = 1;
  string message = 2;
  map<string, string> context = 3;
}

// ---------- gRPC service ----------

service CalibrationService {
  rpc CreateSession (CreateSessionRequest) returns (CalibrationSession);
  rpc GetSession (GetSessionRequest) returns (CalibrationSession);
  rpc ListSessions (ListSessionsRequest) returns (ListSessionsResponse);
  rpc StartSession (StartSessionRequest) returns (CalibrationSession);
  rpc AbortSession (AbortSessionRequest) returns (CalibrationSession);
  rpc FinalizeSession (FinalizeSessionRequest) returns (CalibrationSession);

  rpc CreateProcedure (CreateProcedureRequest) returns (CalibrationProcedure);
  rpc UpdateProcedure (UpdateProcedureRequest) returns (CalibrationProcedure);
  rpc StartProcedure (StartProcedureRequest) returns (CalibrationProcedure);
  rpc CompleteProcedure (CompleteProcedureRequest) returns (CalibrationProcedure);

  rpc SubmitPoint (SubmitPointRequest) returns (SubmitPointResponse);

  // Bidirectional streaming for real-time metrics during a running procedure.
  rpc StreamLiveMetrics (stream MetricFrame) returns (stream StreamAck);

  rpc UploadArtifact (UploadArtifactRequest) returns (Artifact);

  rpc IssueCertificate (IssueCertificateRequest) returns (CalibrationCertificate);
  rpc RevokeCertificate (RevokeCertificateRequest) returns (CalibrationCertificate);

  rpc GetSchemaVersion (google.protobuf.Empty) returns (SchemaVersion);
}
