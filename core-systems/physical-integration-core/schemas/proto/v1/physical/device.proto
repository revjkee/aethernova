// physical-integration-core/schemas/proto/v1/physical/device.proto
syntax = "proto3";

package neurocity.physical.v1;

option csharp_namespace = "NeuroCity.Physical.V1";
option go_package       = "github.com/aethernova/neurocity/physical/v1;physicalv1";
option java_multiple_files = true;
option java_package        = "io.neurocity.physical.v1";
option java_outer_classname = "DeviceProto";
option objc_class_prefix  = "NCP";
option php_namespace      = "NeuroCity\\Physical\\V1";
option ruby_package       = "NeuroCity::Physical::V1";
option swift_prefix       = "NCP";
option optimize_for       = SPEED;

// External well-known types
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

// -----------------------------------------------------------------------------
// Design guidelines
// - Поля НЕ переиспользовать: только добавление новых номеров.
// - Изменение смысла поля запрещено. Для удаления → reserve номер/имя.
// - Всегда указывать единицы измерения в комментариях.
// - Для опциональности использовать 'optional' (proto3) или wrapper-типы.
// - ID в виде UUIDv4/ULID — строка в canonical-представлении.
// -----------------------------------------------------------------------------

// Ресурс устройства: "physical/devices/{device_id}"
message Device {
  // Стабильная идентичность и отпечатки.
  DeviceIdentity identity = 1;

  // Описание неизменяемых/медленно меняющихся свойств (модель, железо, ОС).
  DeviceSpec spec = 2;

  // Текущее состояние устройства (онлайн, питание, сеть, сенсоры, OTA).
  DeviceStatus status = 3;

  // Свободные ключ/значение метки для поиска и маршрутизации политик.
  map<string, string> labels = 4;

  // Произвольные аннотации (не участвуют в выборе политик).
  map<string, string> annotations = 5;

  // Момент создания изначальной записи в реестре.
  google.protobuf.Timestamp create_time = 6;

  // Момент последнего обновления записи (не равен last_seen).
  google.protobuf.Timestamp update_time = 7;

  // Зарезервировано для будущих критичных связей (например, привязка к сайту).
  reserved 1000 to 1099;
  reserved "legacy_field", "deprecated_status";
}

// Идентичность устройства и криптография.
message DeviceIdentity {
  // Внутренний стабильный ID (UUIDv4/ULID).
  string device_id = 1;

  // Человеко-читаемое имя (уникальность не гарантируется).
  string display_name = 2;

  // Один из идентификаторов: серийник, MAC, TPM‑EK/AK, SN‑чек.
  oneof hardware_id {
    string serial_number = 10;
    string mac_address   = 11; // канонический формат AA:BB:CC:DD:EE:FF
    bytes  tpm_ek_pub    = 12; // DER‑кодированный публичный ключ EK
    string imei          = 13; // для сотовых модемов, если применимо
  }

  // Публичный ключ устройства для mTLS/подписи (DER/PEM — хранить в DER).
  bytes device_pubkey = 20;

  // Алгоритм ключа устройства.
  KeyAlgorithm key_algo = 21;

  // Организация‑производитель/поставщик.
  string vendor = 30;

  // Отпечатки для быстрой дедупликации.
  string fingerprint_sha256 = 40; // hex
  string fingerprint_sha1   = 41; // hex (наследие, можно не заполнять)

  google.protobuf.Timestamp register_time = 50; // когда прошел первичную регистрацию
  google.protobuf.Timestamp last_seen      = 51; // последнее подтверждение живости

  enum KeyAlgorithm {
    KEY_ALGO_UNSPECIFIED = 0;
    KEY_ALGO_ED25519     = 1;
    KEY_ALGO_ECDSA_P256  = 2;
    KEY_ALGO_RSA_PSS_2048= 3;
    KEY_ALGO_ECDSA_P384  = 4;
  }
}

// Статическая/квазистатическая спецификация устройства.
message DeviceSpec {
  DeviceModel model = 1;
  string hw_revision = 2;   // ревизия платы, напр. "B3"
  string sku         = 3;   // артикул/вариант поставки

  CPUInfo cpu = 10;
  MemoryInfo memory = 11;
  StorageInfo storage = 12;

  OSInfo os = 20;

  // Возможности устройства (фичи включены/отключены).
  repeated Capability capabilities = 30;

  message CPUInfo {
    string arch = 1;              // напр. "arm64", "amd64"
    uint32 cores = 2;             // логические ядра
    string model_name = 3;        // маркетинговое/ядро CPU
    uint32 max_freq_mhz = 4;      // МГц
  }

  message MemoryInfo {
    uint64 ram_total_bytes = 1;
    uint64 nvram_bytes     = 2;
  }

  message StorageInfo {
    uint64 total_bytes = 1;
    string fs_type     = 2;       // ext4, xfs, btrfs
    bool   dual_rootfs = 3;       // A/B схема
  }

  message OSInfo {
    OSType type        = 1;
    string distro      = 2;       // "AL2023", "Debian", "Yocto"
    string version     = 3;       // семвер/билд
    string kernel      = 4;       // "6.1.0-..."
  }

  enum Capability {
    CAPABILITY_UNSPECIFIED = 0;
    CAP_SENSOR_TEMPERATURE = 1;
    CAP_SENSOR_HUMIDITY    = 2;
    CAP_SENSOR_PRESSURE    = 3;
    CAP_NETWORK_ETHERNET   = 10;
    CAP_NETWORK_WIFI       = 11;
    CAP_NETWORK_CELLULAR   = 12;
    CAP_OTA_DELTA          = 20;
    CAP_OTA_AB             = 21;
    CAP_SECURE_ELEMENT     = 30;
  }

  enum OSType {
    OS_TYPE_UNSPECIFIED = 0;
    OS_LINUX            = 1;
    OS_RTOS             = 2;
    OS_ANDROID          = 3;
    OS_OTHER            = 99;
  }

  enum DeviceModel {
    DEVICE_MODEL_UNSPECIFIED = 0;
    DEVICE_MODEL_PI_CORE_EDGE    = 1;
    DEVICE_MODEL_PI_CORE_GATEWAY = 2;
    DEVICE_MODEL_SENSOR_NODE     = 3;
    DEVICE_MODEL_CUSTOM          = 99;
  }
}

// Динамический статус устройства.
message DeviceStatus {
  DeviceState state = 1;

  // Здоровье (агрегированное и детали).
  Health health = 2;

  // Сеть (несколько интерфейсов).
  repeated NetworkInterface networks = 3;

  // Питание/батарея.
  PowerStatus power = 4;

  // Состояние OTA.
  OTAStatus ota = 5;

  // Базовая телеметрия (агрегаты).
  TelemetrySummary telemetry = 6;

  google.protobuf.Timestamp update_time = 100;

  enum DeviceState {
    DEVICE_STATE_UNSPECIFIED = 0;
    DEVICE_STATE_PROVISIONING = 1;
    DEVICE_STATE_ACTIVE       = 2;
    DEVICE_STATE_DEGRADED     = 3;
    DEVICE_STATE_MAINTENANCE  = 4;
    DEVICE_STATE_OFFLINE      = 5;
    DEVICE_STATE_RETIRED      = 6;
  }

  message Health {
    HealthState state = 1;
    repeated HealthSignal signals = 2; // произвольные сигналы с порогами
    string summary = 3;

    enum HealthState {
      HEALTH_STATE_UNSPECIFIED = 0;
      HEALTH_OK     = 1;
      HEALTH_WARN   = 2;
      HEALTH_ERROR  = 3;
      HEALTH_CRIT   = 4;
    }

    message HealthSignal {
      string name = 1;     // напр. "fs_usage", "temp_cpu"
      double value = 2;    // единицы в 'unit'
      string unit = 3;     // "%", "C", "V", "dBm"
      string message = 4;
      google.protobuf.Timestamp time = 5;
    }
  }

  message NetworkInterface {
    string name = 1;                     // "eth0", "wlan0", "wwan0"
    ConnectivityType type = 2;
    string mac = 3;                      // AA:BB:CC:DD:EE:FF
    repeated IPAddress addresses = 4;    // v4/v6
    int32 rssi_dbm = 5;                  // только для Wi‑Fi/сотовой, dBm
    string ssid = 6;                     // Wi‑Fi
    string apn  = 7;                     // cellular APN
    bool connected = 8;
    google.protobuf.Timestamp last_change_time = 9;

    enum ConnectivityType {
      CONNECTIVITY_UNSPECIFIED = 0;
      CONNECTIVITY_ETHERNET = 1;
      CONNECTIVITY_WIFI     = 2;
      CONNECTIVITY_CELLULAR = 3;
      CONNECTIVITY_OTHER    = 99;
    }

    message IPAddress {
      string address = 1; // CIDR "10.0.0.10/24" или "2001:db8::1/64"
      string gateway = 2;
      repeated string dns = 3;
    }
  }

  message PowerStatus {
    PowerSource source = 1;
    double battery_percent = 2;      // 0..100
    bool on_ac = 3;
    double voltage_v = 4;
    double current_a = 5;
    bool charging = 6;
    google.protobuf.Timestamp last_change_time = 10;

    enum PowerSource {
      POWER_SOURCE_UNSPECIFIED = 0;
      POWER_AC       = 1;
      POWER_DC       = 2;
      POWER_BATTERY  = 3;
      POWER_POE      = 4;
    }
  }

  message OTAStatus {
    UpdateState state = 1;
    string current_version = 2;
    string target_version  = 3;
    string slot_active     = 4;           // "A"|"B" при A/B
    string last_error      = 5;
    uint32 progress_percent = 6;          // 0..100
    google.protobuf.Timestamp last_change_time = 10;

    enum UpdateState {
      UPDATE_STATE_UNSPECIFIED = 0;
      UPDATE_IDLE      = 1;
      UPDATE_DOWNLOADING = 2;
      UPDATE_INSTALLING  = 3;
      UPDATE_REBOOTING   = 4;
      UPDATE_ROLLBACK    = 5;
      UPDATE_FAILED      = 6;
      UPDATE_SUCCESS     = 7;
    }
  }

  message TelemetrySummary {
    CPU cpu = 1;
    Memory mem = 2;
    Disk disk = 3;
    Temperature temp = 4;

    message CPU {
      double load1  = 1;   // LA 1m
      double load5  = 2;   // LA 5m
      double load15 = 3;   // LA 15m
      double usage_percent = 4; // 0..100
    }

    message Memory {
      uint64 total_bytes = 1;
      uint64 used_bytes  = 2;
      uint64 free_bytes  = 3;
    }

    message Disk {
      uint64 total_bytes = 1;
      uint64 used_bytes  = 2;
      uint64 inode_used_percent = 3;
    }

    message Temperature {
      double cpu_celsius = 1;
      double board_celsius = 2;
      double ambient_celsius = 3;
    }
  }
}

// -----------------------------------------------------------------------------
// Телеметрия (стриминг) и события
// -----------------------------------------------------------------------------

// Обёртка телеметрии для потоковой отправки (разные типы в oneof).
message TelemetryEnvelope {
  string device_id = 1;
  google.protobuf.Timestamp time = 2;

  oneof payload {
    MetricSet metrics = 10;
    LogRecord log     = 11;
    Event event       = 12;
  }

  // Набор метрик (key/value с единицами).
  message MetricSet {
    map<string, Metric> items = 1;
    message Metric {
      double value = 1;
      string unit  = 2; // "%", "C", "V", "dBm", "bytes"
    }
  }

  // Строковая лог-запись.
  message LogRecord {
    Severity severity = 1;
    string message = 2;
    map<string, string> labels = 3;

    enum Severity {
      SEVERITY_UNSPECIFIED = 0;
      SEVERITY_DEBUG = 1;
      SEVERITY_INFO  = 2;
      SEVERITY_WARN  = 3;
      SEVERITY_ERROR = 4;
      SEVERITY_CRIT  = 5;
    }
  }
}

// Бизнес‑событие устройства.
message Event {
  string device_id = 1;
  string type = 2; // "ota.install.start", "power.low", ...
  map<string, string> attributes = 3;
  google.protobuf.Timestamp time = 4;
}

// -----------------------------------------------------------------------------
// Команды управления
// -----------------------------------------------------------------------------

// Команда к устройству.
message Command {
  string command_id = 1;  // UUID
  string device_id  = 2;

  CommandType type  = 3;

  // Временной бюджет исполнения.
  google.protobuf.Duration timeout = 4;

  // Параметры команды (JSON‑совместимые пары).
  map<string, string> params = 5;

  google.protobuf.Timestamp create_time = 6;

  enum CommandType {
    COMMAND_TYPE_UNSPECIFIED = 0;
    CMD_REBOOT       = 1;
    CMD_FACTORY_RESET= 2;
    CMD_ROTATE_KEYS  = 3;
    CMD_RUN_DIAG     = 4;
    CMD_SET_LABELS   = 5;
    CMD_OTA_APPLY    = 6;
    CMD_NETWORK_SCAN = 7;
  }
}

// Результат исполнения команды.
message CommandResult {
  string command_id = 1;
  string device_id  = 2;

  CommandStatus status = 3;
  int32 exit_code = 4;         // 0 — успех, иное — код ошибки
  string message  = 5;         // человекочитаемое пояснение
  bytes  payload  = 6;         // опциональные бинарные артефакты (gzip/CBOR и т.п.)

  google.protobuf.Timestamp start_time = 10;
  google.protobuf.Timestamp end_time   = 11;

  enum CommandStatus {
    COMMAND_STATUS_UNSPECIFIED = 0;
    COMMAND_STATUS_ACCEPTED    = 1;
    COMMAND_STATUS_RUNNING     = 2;
    COMMAND_STATUS_SUCCEEDED   = 3;
    COMMAND_STATUS_FAILED      = 4;
    COMMAND_STATUS_TIMEOUT     = 5;
    COMMAND_STATUS_REJECTED    = 6;
  }
}

// -----------------------------------------------------------------------------
// gRPC API (реестр, телеметрия, команды)
// -----------------------------------------------------------------------------

service DeviceRegistry {
  // Регистрация/обновление карточки устройства (идемпотентно).
  rpc RegisterOrUpdate(Device) returns (Device);

  // Получить карточку по ID.
  rpc Get(GetDeviceRequest) returns (Device);

  // Список устройств (пагинация упрощена).
  rpc List(ListDevicesRequest) returns (ListDevicesResponse);

  // Heartbeat от устройства: обновляет last_seen и state/health summary.
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);

  // Сообщить агрегированный статус (сетевые/питание/OTA/телеметрия-сводка).
  rpc ReportStatus(DeviceStatus) returns (ReportStatusResponse);
}

service TelemetryService {
  // Двунаправленный поток телеметрии: устройство → сервер метрики/логи/события,
  // сервер → устройство может слать управляющие "hints".
  rpc StreamTelemetry(stream TelemetryEnvelope) returns (stream TelemetryHint);
}

service CommandService {
  // Отправка команды на устройство.
  rpc SendCommand(Command) returns (CommandAck);

  // Поток результатов команд от устройства.
  rpc StreamCommandResults(stream CommandResult) returns (CommandResultsAck);
}

// -----------------------------------------------------------------------------
// Requests/Responses & auxiliary messages
// -----------------------------------------------------------------------------

message GetDeviceRequest {
  string device_id = 1;
}

message ListDevicesRequest {
  uint32 page_size = 1;
  string page_token = 2;
  map<string, string> filter_labels = 3; // фильтрация по labels
  repeated DeviceStatus.DeviceState states = 4;
}

message ListDevicesResponse {
  repeated Device devices = 1;
  string next_page_token = 2;
}

message HeartbeatRequest {
  string device_id = 1;
  DeviceStatus.DeviceState state = 2;
  DeviceStatus.Health.HealthState health_state = 3;
  google.protobuf.Timestamp time = 4;
}

message HeartbeatResponse {
  // Сервер может возвращать период следующего heartbeat.
  google.protobuf.Duration next_heartbeat_after = 1;
}

message ReportStatusResponse {
  // Пусто сейчас; расширяемо в будущем.
}

message TelemetryHint {
  // Пример: "reduce-rate", "increase-rate", "send-full-snapshot"
  string hint = 1;
  map<string, string> params = 2;
}

message CommandAck {
  string command_id = 1;
  bool accepted = 2;
  string reason = 3; // если не accepted
}

message CommandResultsAck {
  uint32 received = 1;
}

// -----------------------------------------------------------------------------
// Reserved for future critical extensions
// -----------------------------------------------------------------------------
reserved 5000 to 5999;
