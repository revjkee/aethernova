openapi: 3.1.0
info:
  title: Physical Integration Core API
  version: "1.0.0"
  summary: REST API для управления устройствами, прошивками и OTA-раскатками в киберфизической системе.
  description: >
    Контракт уровня продакшн с безопасностью OAuth2/API-Key/mTLS, идемпотентностью,
    пагинацией и соглашениями об ошибках. JSON Schema — Draft 2020-12.
  contact:
    name: Platform Ops
    email: ops@neurocity.example
  license:
    name: Apache-2.0
    identifier: Apache-2.0

servers:
  - url: https://api.neurocity.example/physical/v1
    description: Production
  - url: https://staging-api.neurocity.example/physical/v1
    description: Staging

tags:
  - name: Units
    description: Реестр устройств
  - name: Firmware
    description: Реестр прошивок
  - name: UpdatePlans
    description: Планирование OTA-раскаток
  - name: Device
    description: Состояние устройств и статусы обновлений
  - name: System
    description: Системные эндпоинты

x-api-lifecycle:
  maturity: stable
  changePolicy: semver
  deprecation:
    policy: ">=6 месяцев уведомления до удаления"

paths:

  /units:
    get:
      tags: [Units]
      summary: Список устройств
      operationId: listUnits
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageCursor'
        - $ref: '#/components/parameters/labelSelector'
        - $ref: '#/components/parameters/site'
      responses:
        '200':
          description: Успешный ответ с пагинацией
          headers:
            X-RateLimit-Remaining: { $ref: '#/components/headers/X-RateLimit-Remaining' }
            X-RateLimit-Reset: { $ref: '#/components/headers/X-RateLimit-Reset' }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUnits'
    post:
      tags: [Units]
      summary: Создать или зарегистрировать устройство
      operationId: createUnit
      security:
        - ApiKeyAuth: []
        - OAuth2CC: [units.write]
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '../jsonschema/v1/unit.schema.json'
      responses:
        '201':
          description: Создано
          headers:
            Location:
              description: URI нового ресурса
              schema: { type: string, format: uri }
          content:
            application/json:
              schema:
                $ref: '../jsonschema/v1/unit.schema.json'
        '400': { $ref: '#/components/responses/BadRequest' }
        '409': { $ref: '#/components/responses/Conflict' }
        '422': { $ref: '#/components/responses/Unprocessable' }

  /units/{unitId}:
    parameters:
      - name: unitId
        in: path
        required: true
        description: UUID устройства
        schema: { type: string, format: uuid }
    get:
      tags: [Units]
      summary: Получить устройство
      operationId: getUnit
      responses:
        '200':
          description: Ок
          content:
            application/json:
              schema:
                $ref: '../jsonschema/v1/unit.schema.json'
        '404': { $ref: '#/components/responses/NotFound' }
    put:
      tags: [Units]
      summary: Полное обновление устройства
      operationId: replaceUnit
      security:
        - OAuth2CC: [units.write]
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '../jsonschema/v1/unit.schema.json'
      responses:
        '200':
          description: Обновлено
          content:
            application/json:
              schema:
                $ref: '../jsonschema/v1/unit.schema.json'
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }
        '422': { $ref: '#/components/responses/Unprocessable' }
    patch:
      tags: [Units]
      summary: Частичное обновление устройства (JSON Merge Patch)
      operationId: patchUnit
      security:
        - OAuth2CC: [units.write]
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/merge-patch+json:
            schema:
              type: object
      responses:
        '200':
          description: Обновлено
          content:
            application/json:
              schema:
                $ref: '../jsonschema/v1/unit.schema.json'
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
        '422': { $ref: '#/components/responses/Unprocessable' }
    delete:
      tags: [Units]
      summary: Удалить устройство
      operationId: deleteUnit
      security:
        - OAuth2CC: [units.write]
      responses:
        '204': { description: Удалено }
        '404': { $ref: '#/components/responses/NotFound' }

  /firmware:
    get:
      tags: [Firmware]
      summary: Список прошивок по фильтрам идентичности
      operationId: listFirmware
      parameters:
        - $ref: '#/components/parameters/vendor'
        - $ref: '#/components/parameters/product'
        - $ref: '#/components/parameters/hwRevision'
        - name: includePrerelease
          in: query
          schema: { type: boolean, default: false }
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageCursor'
      responses:
        '200':
          description: Ок
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirmwareList'
    post:
      tags: [Firmware]
      summary: Зарегистрировать артефакт прошивки
      operationId: createFirmware
      security:
        - OAuth2CC: [firmware.write]
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FirmwareImage'
      responses:
        '201':
          description: Создано
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirmwareImage'
        '400': { $ref: '#/components/responses/BadRequest' }
        '409': { $ref: '#/components/responses/Conflict' }
        '422': { $ref: '#/components/responses/Unprocessable' }

  /firmware/latest:
    get:
      tags: [Firmware]
      summary: Получить последнюю подходящую прошивку по идентичности
      operationId: getLatestFirmware
      parameters:
        - $ref: '#/components/parameters/vendor'
        - $ref: '#/components/parameters/product'
        - $ref: '#/components/parameters/hwRevision'
        - name: channel
          in: query
          schema: { type: string, enum: [stable, beta, rc, dev] }
      responses:
        '200':
          description: Ок
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirmwareImage'
        '404': { $ref: '#/components/responses/NotFound' }

  /update-plans:
    get:
      tags: [UpdatePlans]
      summary: Список планов обновлений
      operationId: listUpdatePlans
      parameters:
        - $ref: '#/components/parameters/pageSize'
        - $ref: '#/components/parameters/pageCursor'
      responses:
        '200':
          description: Ок
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPlans'
    post:
      tags: [UpdatePlans]
      summary: Создать план OTA-обновления
      operationId: createUpdatePlan
      security:
        - OAuth2CC: [updates.write]
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePlan'
      responses:
        '201':
          description: Создано
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePlan'
        '400': { $ref: '#/components/responses/BadRequest' }
        '422': { $ref: '#/components/responses/Unprocessable' }

  /update-plans/{planId}:
    parameters:
      - name: planId
        in: path
        required: true
        schema: { type: string }
    get:
      tags: [UpdatePlans]
      summary: Получить план
      operationId: getUpdatePlan
      responses:
        '200':
          description: Ок
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatePlan'
        '404': { $ref: '#/components/responses/NotFound' }

  /devices/{deviceId}/state:
    parameters:
      - name: deviceId
        in: path
        required: true
        schema: { type: string }
    put:
      tags: [Device]
      summary: Репорт состояния устройства
      operationId: reportDeviceState
      security:
        - ApiKeyAuth: []
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceState'
      responses:
        '200': { description: Принято, состояние обновлено }
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }

  /status/stream:
    get:
      tags: [Device]
      summary: SSE-стрим статусов обновлений
      operationId: streamUpdateStatus
      security:
        - OAuth2CC: [updates.read]
      responses:
        '200':
          description: Поток событий text/event-stream
          headers:
            Cache-Control:
              schema: { type: string }
              description: no-store
          content:
            text/event-stream:
              schema:
                type: string
                description: SSE поток с событиями UpdateStatusEvent в виде JSON в поле data
              examples:
                example:
                  summary: Пример события
                  value: |
                    event: update
                    id: 9f0e8f44-0f1b-46b9-9a9a-9f8b9a2d1c00
                    data: {"deviceId":"gw-001","planId":"plan-123","firmwareUid":"fw-abcd","phase":"DOWNLOADING","progressPercent":42,"timestamp":"2025-08-22T08:00:01Z","trace_id":"0af7651916cd43dd8448eb211c80319c"}
        '401': { $ref: '#/components/responses/Unauthorized' }

  /health:
    get:
      tags: [System]
      summary: Liveness/Readiness
      operationId: health
      responses:
        '200':
          description: Ок
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  status: { type: string, enum: [ok] }
                  time: { type: string, format: date-time }

components:

  securitySchemes:
    OAuth2CC:
      type: oauth2
      description: OAuth2 Client Credentials
      flows:
        clientCredentials:
          tokenUrl: https://auth.neurocity.example/oauth2/token
          scopes:
            units.read: Чтение устройств
            units.write: Запись устройств
            firmware.read: Чтение прошивок
            firmware.write: Запись прошивок
            updates.read: Чтение планов и статусов
            updates.write: Запись планов
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    MutualTLS:
      type: mutualTLS
      description: mTLS для доверенных интеграций

  headers:
    X-RateLimit-Remaining:
      description: Остаток квоты запросов в текущем окне
      schema: { type: integer, minimum: 0 }
    X-RateLimit-Reset:
      description: Unix-время окончания окна квоты
      schema: { type: integer, minimum: 0 }

  parameters:
    pageSize:
      name: pageSize
      in: query
      schema: { type: integer, minimum: 1, maximum: 1000, default: 100 }
      description: Размер страницы
    pageCursor:
      name: pageCursor
      in: query
      schema: { type: string }
      description: Курсор для следующей страницы
    labelSelector:
      name: labelSelector
      in: query
      schema: { type: string }
      description: K/V селектор меток, напр. site=plant-a,workload=physical
    site:
      name: site
      in: query
      schema: { type: string }
      description: Фильтр по площадке
    vendor:
      name: vendor
      in: query
      schema: { type: string }
    product:
      name: product
      in: query
      schema: { type: string }
    hwRevision:
      name: hwRevision
      in: query
      schema: { type: string }
    IdempotencyKey:
      name: Idempotency-Key
      in: header
      required: false
      description: Ключ идемпотентности для безопасных повторов
      schema:
        type: string
        maxLength: 255

  responses:
    BadRequest:
      description: Некорректный запрос
      content:
        application/json: { schema: { $ref: '#/components/schemas/Error' } }
    Unauthorized:
      description: Неавторизованно
      content:
        application/json: { schema: { $ref: '#/components/schemas/Error' } }
    Forbidden:
      description: Доступ запрещен
      content:
        application/json: { schema: { $ref: '#/components/schemas/Error' } }
    NotFound:
      description: Не найдено
      content:
        application/json: { schema: { $ref: '#/components/schemas/Error' } }
    Conflict:
      description: Конфликт состояния
      content:
        application/json: { schema: { $ref: '#/components/schemas/Error' } }
    Unprocessable:
      description: Ошибка валидации
      content:
        application/json: { schema: { $ref: '#/components/schemas/ValidationError' } }
    TooManyRequests:
      description: Превышен лимит запросов
      headers:
        X-RateLimit-Remaining: { $ref: '#/components/headers/X-RateLimit-Remaining' }
        X-RateLimit-Reset: { $ref: '#/components/headers/X-RateLimit-Reset' }
      content:
        application/json: { schema: { $ref: '#/components/schemas/Error' } }

  schemas:

    # Пагинация
    PageMeta:
      type: object
      additionalProperties: false
      properties:
        nextCursor: { type: string, nullable: true }
        pageSize: { type: integer, minimum: 1 }
      required: [pageSize]

    PaginatedUnits:
      type: object
      additionalProperties: false
      properties:
        items:
          type: array
          items:
            $ref: '../jsonschema/v1/unit.schema.json'
        page:
          $ref: '#/components/schemas/PageMeta'
      required: [items, page]

    FirmwareId:
      type: object
      additionalProperties: false
      properties:
        vendor: { type: string }
        product: { type: string }
        hwRevision: { type: string }
        region: { type: string, nullable: true }
        channel: { type: string, enum: [stable, beta, rc, dev], default: stable }
      required: [vendor, product, hwRevision]

    Hash:
      type: object
      additionalProperties: false
      properties:
        algorithm: { type: string, enum: [sha256, sha512, blake3] }
        hex:
          type: string
          pattern: '^[a-f0-9]{64}|[a-f0-9]{128}$'
      required: [algorithm, hex]

    Signature:
      type: object
      additionalProperties: false
      properties:
        algorithm: { type: string, enum: [ed25519, ecdsa_p256_sha256, rsa_pss_2048_sha256] }
        signature: { type: string, contentEncoding: base64 }
        keyId: { type: string }
        issuer: { type: string, nullable: true }
      required: [algorithm, signature, keyId]

    FirmwareImage:
      type: object
      additionalProperties: false
      properties:
        firmwareUid: { type: string }
        identity: { $ref: '#/components/schemas/FirmwareId' }
        version: { type: string, pattern: '^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-[0-9A-Za-z.-]+)?(?:\\+[0-9A-Za-z.-]+)?$' }
        sizeBytes: { type: integer, minimum: 0 }
        hash: { $ref: '#/components/schemas/Hash' }
        signature: { $ref: '#/components/schemas/Signature' }
        compression: { type: string, enum: [none, gzip, zstd], default: none }
        format: { type: string, enum: [raw, tar, zip, dfu, mcu_boot, uefi_capsule], default: raw }
        encryption: { type: string, enum: [none, aes-256-gcm, age], default: none }
        encryptionKeyId: { type: string, nullable: true }
        uri: { type: string, format: uri, nullable: true }
        ociReference: { type: string, pattern: '^[\\w./:-]+(@sha256:[a-f0-9]{64})?$', nullable: true }
        mirrors:
          type: array
          items: { type: string, format: uri }
          uniqueItems: true
        createdAt: { type: string, format: date-time }
        annotations:
          type: object
          additionalProperties: { type: string }
      required: [firmwareUid, identity, version, sizeBytes, hash, createdAt]
      allOf:
        - oneOf:
            - required: [uri]
            - required: [ociReference]
        - if:
            properties: { encryption: { not: { const: none } } }
          then:
            required: [encryptionKeyId]

    FirmwareList:
      type: object
      additionalProperties: false
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/FirmwareImage' }
        page:
          $ref: '#/components/schemas/PageMeta'
      required: [items]

    DeviceSelector:
      type: object
      additionalProperties: false
      properties:
        labels:
          type: object
          additionalProperties: { type: string }
        deviceIds:
          type: array
          items: { type: string }
          uniqueItems: true

    RolloutStrategy:
      type: object
      additionalProperties: false
      properties:
        batchSize: { type: integer, minimum: 1, default: 50 }
        maxParallel: { type: integer, minimum: 1, default: 100 }
        percent: { type: integer, minimum: 1, maximum: 100, nullable: true }
        drainOnFailure: { type: boolean, default: true }
        pauseSecondsBetweenBatches: { type: integer, minimum: 0, default: 0 }
        canaryCount: { type: integer, minimum: 0, default: 5 }
        canaryDurationSeconds: { type: integer, minimum: 0, default: 600 }

    RetryPolicy:
      type: object
      additionalProperties: false
      properties:
        maxAttempts: { type: integer, minimum: 0, default: 5 }
        initialBackoff: { type: string, pattern: '^P(?!$)(\\d+Y)?(\\d+M)?(\\d+W)?(\\d+D)?(T(\\d+H)?(\\d+M)?(\\d+S)?)?$' }
        maxBackoff: { type: string, pattern: '^P(?!$)(\\d+Y)?(\\d+M)?(\\d+W)?(\\d+D)?(T(\\d+H)?(\\d+M)?(\\d+S)?)?$' }
        multiplier: { type: number, minimum: 1.0, maximum: 10.0, default: 2.0 }

    UpdateConstraints:
      type: object
      additionalProperties: false
      properties:
        minBatteryPercent: { type: number, minimum: 0, maximum: 100 }
        requireMainsPower: { type: boolean, default: false }
        requireNetworkUnmetered: { type: boolean, default: false }
        minFreeStorageBytes: { type: integer, minimum: 0 }
        minSignalStrength: { type: integer, minimum: -150, maximum: 150 }

    MaintenanceWindow:
      type: object
      additionalProperties: false
      properties:
        timezone:
          type: string
          pattern: '^[A-Za-z_]+\\/[A-Za-z_]+(?:\\/[A-Za-z_]+)?$'
        cron:
          type: string
          description: CRON график окна обслуживания
          pattern: '^\\s*([^\\s]+\\s+){4,6}[^\\s]+\\s*$'

    UpdatePlan:
      type: object
      additionalProperties: false
      properties:
        planId: { type: string }
        image: { $ref: '#/components/schemas/FirmwareImage' }
        selector: { $ref: '#/components/schemas/DeviceSelector' }
        rollout: { $ref: '#/components/schemas/RolloutStrategy' }
        retry: { $ref: '#/components/schemas/RetryPolicy' }
        constraints: { $ref: '#/components/schemas/UpdateConstraints' }
        maintenance: { $ref: '#/components/schemas/MaintenanceWindow' }
        createdAt: { type: string, format: date-time }
        createdBy: { type: string }
      required: [planId, image, selector, rollout, createdAt, createdBy]

    PaginatedPlans:
      type: object
      additionalProperties: false
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/UpdatePlan' }
        page:
          $ref: '#/components/schemas/PageMeta'
      required: [items]

    DeviceState:
      type: object
      additionalProperties: false
      properties:
        deviceId: { type: string }
        identity: { $ref: '#/components/schemas/FirmwareId' }
        currentFwVersion: { type: string }
        bootloaderVersion: { type: string, nullable: true }
        storageTotalBytes: { type: integer, minimum: 0 }
        storageFreeBytes: { type: integer, minimum: 0 }
        batteryPercent: { type: integer, minimum: 0, maximum: 100, nullable: true }
        onMainsPower: { type: boolean, nullable: true }
        ipAddress: { type: string }
        labels:
          type: object
          additionalProperties: { type: string }
        annotations:
          type: object
          additionalProperties: { type: string }
        reportedAt: { type: string, format: date-time }
      required: [deviceId, identity, currentFwVersion, reportedAt]

    Error:
      type: object
      additionalProperties: false
      properties:
        code: { type: string }
        message: { type: string }
        trace_id: { type: string }
        details: { type: object, additionalProperties: true }
      required: [code, message]

    ValidationError:
      allOf:
        - $ref: '#/components/schemas/Error'
        - type: object
          properties:
            fields:
              type: array
              items:
                type: object
                additionalProperties: false
                properties:
                  path: { type: string }
                  message: { type: string }
                  rule: { type: string }

security:
  - OAuth2CC: [units.read, firmware.read, updates.read]
  - MutualTLS: []

x-idempotency:
  header: Idempotency-Key
  methods: [POST, PUT, PATCH]
  ttl: "24h"

x-rateLimits:
  default:
    window: "1m"
    limit: 600
