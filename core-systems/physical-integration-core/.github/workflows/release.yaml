name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      publish:
        description: "Force publish (true/false). Use with caution."
        required: false
        default: "false"
        type: choice
        options: ["false", "true"]

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read

env:
  PYTHON_MAX: "3.11"
  PACKAGE_DIR: "physical_integration_core"
  DIST_DIR: "dist"
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  DOCKER_PLATFORMS: linux/amd64,linux/arm64
  # Для keyless-подписи cosign
  COSIGN_EXPERIMENTAL: "1"

jobs:
  lint_test:
    name: Lint & Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install tooling
        run: |
          python -m pip install --upgrade pip
          pip install ruff pytest build

      - name: Ruff Lint
        run: |
          ruff version
          ruff check --output-format=github .

      - name: Ruff Format (diff only)
        run: |
          ruff format --check .

      - name: Run unit tests
        env:
          PYTHONDONTWRITEBYTECODE: "1"
        run: |
          pytest -q

  build_dist:
    name: Build Python dist (sdist+wheel)
    runs-on: ubuntu-latest
    needs: [lint_test]
    permissions:
      contents: read
      id-token: write   # для PyPI OIDC публикации на следующем шаге
    outputs:
      dist-artifact: dist-artifact
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python ${{ env.PYTHON_MAX }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_MAX }}
          cache: pip

      - name: Install build backend
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build sdist and wheel
        run: |
          rm -rf ${{ env.DIST_DIR }}
          python -m build --sdist --wheel --outdir ${{ env.DIST_DIR }}

      - name: Verify artifacts
        run: |
          python - <<'PY'
          import pathlib, sys
          d = pathlib.Path("${{ env.DIST_DIR }}")
          wheels = list(d.glob("*.whl"))
          sdists = list(d.glob("*.tar.gz"))
          assert wheels and sdists, "Missing wheel or sdist"
          print("Artifacts:", [p.name for p in wheels + sdists])
          PY

      - name: Upload dist as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: ${{ env.DIST_DIR }}/*

  publish_pypi:
    name: Publish to PyPI (Trusted Publisher)
    runs-on: ubuntu-latest
    needs: [build_dist]
    if: |
      startsWith(github.ref, 'refs/tags/v') || inputs.publish == 'true'
    permissions:
      contents: read
      id-token: write   # OIDC для PyPI trusted publishing
    steps:
      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.10.3
        with:
          print-hash: true
          skip-existing: false

  docker_build_push:
    name: Build & Push Docker image
    runs-on: ubuntu-latest
    needs: [lint_test]
    if: |
      startsWith(github.ref, 'refs/tags/v') || inputs.publish == 'true'
    permissions:
      contents: read
      packages: write
      id-token: write   # для cosign keyless
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from tag
        id: ver
        run: |
          ref="${GITHUB_REF##*/}"
          echo "ref_name=$ref" >> "$GITHUB_OUTPUT"
          echo "version=${ref#v}" >> "$GITHUB_OUTPUT"

      - name: Build and push
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ env.DOCKER_PLATFORMS }}
          push: true
          provenance: false
          sbom: false
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.ver.outputs.ref_name }}
            ${{ env.IMAGE_NAME }}:latest
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ steps.ver.outputs.version }}

      - name: Generate SBOM (Syft)
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.IMAGE_NAME }}:${{ steps.ver.outputs.ref_name }}
          format: spdx-json
          artifact-name: sbom-${{ steps.ver.outputs.ref_name }}.spdx.json

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.7.0

      - name: Cosign sign image (keyless)
        env:
          COSIGN_YES: "true"
        run: |
          cosign sign ${{ env.IMAGE_NAME }}:${{ steps.ver.outputs.ref_name }}
          cosign sign ${{ env.IMAGE_NAME }}:latest

      - name: Cosign attest SBOM (in-toto)
        env:
          COSIGN_YES: "true"
        run: |
          cosign attest --predicate $(ls sbom-*.spdx.json) --type spdx ${{ env.IMAGE_NAME }}:${{ steps.ver.outputs.ref_name }}

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom-*.spdx.json

  slsa_provenance:
    name: SLSA Provenance (Python dist)
    runs-on: ubuntu-latest
    needs: [build_dist]
    if: |
      startsWith(github.ref, 'refs/tags/v') || inputs.publish == 'true'
    permissions:
      actions: read
      id-token: write
      contents: write
    steps:
      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Generate SLSA provenance for artifacts
        uses: slsa-framework/slsa-github-generator/actions/generator/generic@v2.0.0
        with:
          base64-subjects: true
          artifact_path: "dist/*"
          upload-assets: true

  create_github_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build_dist, docker_build_push, slsa_provenance]
    if: |
      startsWith(github.ref, 'refs/tags/v') || inputs.publish == 'true'
    permissions:
      contents: write
    steps:
      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Download SBOM
        uses: actions/download-artifact@v4
        with:
          name: sbom
          path: sbom

      - name: Generate release notes
        id: notes
        uses: release-drafter/release-drafter@v6
        with:
          config-name: release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          body: ${{ steps.notes.outputs.body || 'Automated release' }}
          draft: false
          prerelease: false
          files: |
            dist/*
            sbom/*.spdx.json

  codeql:
    name: CodeQL (Python)
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      - name: Analyze
        uses: github/codeql-action/analyze@v3
