name: provenance-slsa

on:
  push:
    tags:
      - "v*"
  release:
    types: [published]
  workflow_dispatch:
  workflow_call:

# Минимально необходимые разрешения для supply-chain
permissions:
  contents: read
  id-token: write         # OIDC для cosign keyless и attestations
  packages: write         # push в GHCR и публикация аттестаций как OCI-рефереров
  attestations: write     # GitHub Attestations API
  actions: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}              # org/repo
  IMAGE_REF: ghcr.io/${{ github.repository }}       # ghcr.io/org/repo

concurrency:
  group: provenance-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-publish-provenance:
    name: Build, sign, SBOM, SLSA provenance
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_REF }}
          tags: |
            type=ref,event=tag
            type=ref,event=branch
            type=sha
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.title=${{ github.event.repository.name }}

      - name: Build and push image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: false                    # provenance генерируем отдельным шагом
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Compute primary tag and digest
        id: img
        run: |
          DIGEST="${{ steps.build.outputs.digest }}"
          echo "digest=${DIGEST}" >> "$GITHUB_OUTPUT"
          # Берем первый тег из списка
          PRIMARY_TAG="$(echo "${{ steps.meta.outputs.tags }}" | tr ' ' '\n' | head -n1)"
          echo "name=${PRIMARY_TAG%@*}" >> "$GITHUB_OUTPUT"
        shell: bash

      # --------- Подпись контейнера (keyless, Sigstore Cosign) ----------
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Cosign sign (keyless OIDC)
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          set -euo pipefail
          REF="${{ steps.img.outputs.name }}@${{ steps.img.outputs.digest }}"
          cosign sign --yes "${REF}"

      # --------------------- SBOM (CycloneDX) ----------------------------
      - name: Generate SBOM (CycloneDX JSON)
        id: sbom
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.img.outputs.name }}@${{ steps.img.outputs.digest }}
          format: cyclonedx-json
          output-file: sbom.cdx.json

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-cyclonedx
          path: sbom.cdx.json
          if-no-files-found: error
          retention-days: 14

      - name: Attach SBOM as OCI attestation (cosign attest)
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          set -euo pipefail
          REF="${{ steps.img.outputs.name }}@${{ steps.img.outputs.digest }}"
          cosign attest --yes --predicate sbom.cdx.json --type cyclonedx "${REF}"

      # ----------------- SLSA Build Provenance (GitHub) -----------------
      - name: Generate and push SLSA build provenance
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ steps.img.outputs.name }}         # ghcr.io/org/repo
          subject-digest: ${{ steps.img.outputs.digest }}     # sha256:...
          push-to-registry: true                              # публикуем как OCI-реферер в GHCR

      # -------------------- (Необязательно) Проверка --------------------
      - name: Cosign verify build-provenance (best-effort)
        if: always()
        run: |
          set -euo pipefail
          REF="${{ steps.img.outputs.name }}@${{ steps.img.outputs.digest }}"
          # Проверка наличия хотя бы одной attest с типом slsaprovenance
          cosign verify-attestation --type slsaprovenance "${REF}" || echo "No slsaprovenance attestation verified (informational)."
