name: CI

on:
  push:
    branches: [ main, develop ]
    tags: [ "v*.*.*" ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: "17 3 * * *" # ежедневный ночной прогон безопасности
  workflow_dispatch:

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"
  POETRY_VERSION: "1.8.3"
  POETRY_VIRTUALENVS_CREATE: "false"
  PYTHONUNBUFFERED: "1"
  # Для публикации Docker-образов в GHCR:
  IMAGE_NAME: ghcr.io/${{ github.repository }}/physical-integration-core
  # Общие таймауты инструментов:
  PYTEST_ADDOPTS: "-q --maxfail=1"
  RUFF_OUTPUT_FORMAT: github
  # Для ruff/mypy можно зафиксировать версии в pyproject.toml/poetry.lock

jobs:
  lint:
    name: Lint (ruff)
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install "poetry==${POETRY_VERSION}"
      - name: Cache Poetry
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ env.POETRY_VERSION }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install deps (no dev optional)
        run: poetry install --no-interaction --no-root
      - name: Ruff lint
        run: poetry run ruff check --output-format $RUFF_OUTPUT_FORMAT .

  typecheck:
    name: Type check (mypy)
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    needs: [ lint ]
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install "poetry==${POETRY_VERSION}"
      - name: Cache Poetry
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ env.POETRY_VERSION }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install deps
        run: poetry install --no-interaction --no-root
      - name: mypy
        run: poetry run mypy --strict --install-types --non-interactive .

  test:
    name: Tests (pytest + coverage) — py${{ matrix.python }}
    runs-on: ubuntu-22.04
    timeout-minutes: 25
    needs: [ lint, typecheck ]
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        python: [ "3.11", "3.12" ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: "pip"
      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          pip install "poetry==${POETRY_VERSION}}"
        shell: bash
      - name: Cache Poetry
        uses: actions/cache@v4
        with:
          path: ~/.cache/pypoetry
          key: poetry-${{ runner.os }}-${{ env.POETRY_VERSION }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install project (with dev)
        run: poetry install --no-interaction
      - name: Pytest
        run: |
          poetry run pytest -q --durations=10 --cov=physical_integration_core --cov-report=xml --cov-report=term
      - name: Store coverage.xml
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python }}
          path: coverage.xml
          if-no-files-found: warn
      - name: Store junit (if generated)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-${{ matrix.python }}
          path: "**/junit*.xml"
          if-no-files-found: ignore

  docker:
    name: Build & Publish Docker
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    needs: [ test ]
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
      - name: GHCR login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract version/tag
        id: meta
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            TAG="${GITHUB_REF_NAME}"
          else
            TAG="sha-${GITHUB_SHA::7}"
          fi
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
      - name: Build image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: false
          tags: ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Push image (only tags)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.tag }}
            ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security_scan:
    name: Security Scan (bandit + trivy)
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    needs: [ test ]
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install bandit
        run: python -m pip install --upgrade pip bandit[toml]==1.7.8
      - name: Run bandit (SARIF)
        run: |
          bandit -r physical_integration_core -f sarif -o bandit.sarif || true
      - name: Upload SARIF (bandit)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit.sarif
      - name: Trivy FS scan
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-fs.sarif"
          severity: "CRITICAL,HIGH"
      - name: Upload SARIF (trivy-fs)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif
      - name: Trivy config (IaC)
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: "config"
          format: "sarif"
          output: "trivy-config.sarif"
          severity: "CRITICAL,HIGH,MEDIUM"
      - name: Upload SARIF (trivy-config)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-config.sarif

  codeql:
    name: CodeQL (Python)
    runs-on: ubuntu-22.04
    timeout-minutes: 45
    permissions:
      contents: read
      security-events: write
      actions: read
    strategy:
      fail-fast: false
    if: github.event_name == 'pull_request' || github.event_name == 'schedule' || github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with:
          languages: python
      - uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"
