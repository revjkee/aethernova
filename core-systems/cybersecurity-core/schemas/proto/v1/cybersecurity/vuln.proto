syntax = "proto3";

package aethernova.cybersecurity.v1;

option go_package         = "github.com/aethernova/cybersecurity-core/gen/proto/v1/cybersecurity;cybersecurity";
option java_multiple_files = true;
option java_package        = "dev.aethernova.cybersecurity.v1";
option csharp_namespace    = "Aethernova.Cybersecurity.V1";
option php_namespace       = "Aethernova\\Cybersecurity\\V1";
option ruby_package        = "Aethernova::Cybersecurity::V1";

import "google/protobuf/timestamp.proto";

// -----------------------------------------------------------------------------
// Справочные перечисления
// -----------------------------------------------------------------------------

// Общая нормализованная критичность.
enum Severity {
  SEVERITY_UNSPECIFIED = 0;
  SEVERITY_NONE        = 1;
  SEVERITY_LOW         = 2;
  SEVERITY_MEDIUM      = 3;
  SEVERITY_HIGH        = 4;
  SEVERITY_CRITICAL    = 5;
}

// Системы скоринга риска.
enum ScoringSystem {
  SCORING_SYSTEM_UNSPECIFIED = 0;
  CVSS_V2   = 1;
  CVSS_V30  = 2;
  CVSS_V31  = 3;
  CVSS_V40  = 4;
  SSVC      = 10; // Stakeholder-Specific Vulnerability Categorization
}

// Состояние исправления.
enum FixState {
  FIX_STATE_UNSPECIFIED = 0;
  FIX_AVAILABLE         = 1;
  FIX_PARTIAL           = 2;
  NO_FIX_PLANNED        = 3;
  UNDER_INVESTIGATION   = 4;
  NOT_AFFECTED          = 5;
  MITIGATION_ONLY       = 6;
}

// Экоcистема пакета (частичный перечень; при необходимости расширяется).
enum PackageEcosystem {
  ECOSYSTEM_UNSPECIFIED = 0;
  PURL_GENERIC          = 1;  // generic purl
  NPM                   = 2;
  PYPI                  = 3;
  MAVEN                 = 4;
  GO_MODULE             = 5;
  RUBYGEMS              = 6;
  NUGET                 = 7;
  PACKAGIST             = 8;
  CARGO                 = 9;
  COMPOSER              = 10;
  CRAN                  = 11;
  HELM                  = 12;
  CONTAINER             = 20; // OCI image
  OS_DPKG               = 30;
  OS_RPM                = 31;
  OS_APK                = 32;
}

// Тип диапазона версий.
enum RangeType {
  RANGE_TYPE_UNSPECIFIED = 0;
  SEMVER                 = 1; // semver constraints
  ECOSYSTEM              = 2; // правила экосистемы
  GIT                    = 3; // commit ranges
}

// Статус эксплуатации.
enum ExploitAvailability {
  EXPLOIT_AVAILABILITY_UNSPECIFIED = 0;
  EXPLOIT_NONE                     = 1; // данных об эксплуатации нет
  EXPLOIT_POC                      = 2; // PoC/limited
  EXPLOIT_WEAPONIZED               = 3; // weaponized/exploited in the wild
}

// Статус по VEX.
enum VexStatus {
  VEX_STATUS_UNSPECIFIED = 0;
  VEX_NOT_AFFECTED       = 1;
  VEX_AFFECTED           = 2;
  VEX_FIXED              = 3;
  VEX_UNDER_INVESTIGATION= 4;
}

// Тип ссылки.
enum ReferenceType {
  REF_TYPE_UNSPECIFIED = 0;
  REF_ADVISORY         = 1;
  REF_FIX              = 2;
  REF_REPORT           = 3;
  REF_DISCUSSION       = 4;
  REF_KEV              = 5;
  REF_EPSS             = 6;
  REF_SOURCE           = 7;
}

// Тип источника находки (сканера).
enum ScannerKind {
  SCANNER_KIND_UNSPECIFIED = 0;
  SCANNER_SCA              = 1; // dependency/SBOM
  SCANNER_SAST             = 2; // static app sec testing
  SCANNER_DAST             = 3; // dynamic web/api
  SCANNER_CONTAINER        = 4; // image scanning
  SCANNER_IAC              = 5; // terraform/k8s/etc.
  SCANNER_OS               = 6; // host/os packages
}

// -----------------------------------------------------------------------------
// Основные сущности каталога уязвимостей
// -----------------------------------------------------------------------------

// Универсальный балл риска (в т.ч. CVSS/SSVC).
message Score {
  ScoringSystem system     = 1;
  string        vector     = 2;   // текст в формате системы (например, CVSS вектор)
  double        base       = 3;   // базовый балл
  double        temporal   = 4;   // темпоральный (если применимо)
  double        environmental = 5; // окружение (если применимо)
  Severity      derived_severity = 6; // нормализованная тяжесть
  string        source     = 7;   // кто присвоил/расчитал
  google.protobuf.Timestamp calculated_at = 8;
  map<string,string> attributes = 9; // доп. метаданные (например, cvss.subscores.*)
}

// Оценка EPSS (Exploit Prediction Scoring System).
message Epss {
  double score      = 1; // 0..1
  double percentile = 2; // 0..1
  string version    = 3; // версия модели
  google.protobuf.Timestamp calculated_at = 4;
}

// Признак включения CISA KEV.
message Kev {
  bool   known_exploited = 1;
  string kev_entry_url   = 2;
  google.protobuf.Timestamp added_at = 3;
  google.protobuf.Timestamp last_reviewed_at = 4;
}

// Ссылка/источник.
message Reference {
  ReferenceType type = 1;
  string url         = 2;
  string title       = 3;
  string source      = 4; // NVD, vendor, GHSA и т.п.
}

// Рекомендации/адвайзори.
message Advisory {
  string id          = 1; // ID вендора/платформы (например, RHSA-..., GHSA-...)
  string title       = 2;
  string vendor      = 3;
  string url         = 4;
  google.protobuf.Timestamp published_at = 5;
  google.protobuf.Timestamp modified_at  = 6;
}

// Сведения о фиксе и смягчении.
message Fix {
  FixState state               = 1;
  repeated string fixed_versions = 2; // версии с исправлением
  repeated string workarounds    = 3; // обходные решения/смягчения
  repeated Reference references  = 4; // ссылки на патчи/PR/коммиты
}

// Описание пакета/компонента.
message Package {
  string name            = 1;  // canonical name
  string version         = 2;  // конкретная версия (для находки)
  PackageEcosystem ecosystem = 3;
  string purl            = 4;  // package-url
  string language        = 5;  // go, python, java...
  string namespace       = 6;  // org/group
  string supplier        = 7;  // вендор/организация
  string spdx_id         = 8;  // ссылка на элемент SBOM (SPDX ID)
  map<string,string> metadata = 20;
}

// Событие для диапазона версий (по мотивам OSV events).
message RangeEvent {
  enum EventType {
    EVENT_TYPE_UNSPECIFIED = 0;
    INTRODUCED             = 1;
    FIXED                  = 2;
    LAST_AFFECTED          = 3;
    LIMIT                  = 4;
  }
  EventType type = 1;
  string value   = 2; // версия/коммит
}

// Диапазон затронутых версий.
message VersionRange {
  RangeType type        = 1;
  string range          = 2; // человекочитаемое описание (напр., ">=1.2.0, <1.4.3")
  repeated RangeEvent events = 3; // машинная форма
}

// Связка «затронутый пакет + диапазоны».
message AffectedPackage {
  Package package              = 1;
  repeated VersionRange ranges = 2;
  VexStatus vex_status         = 3; // если доступно из VEX
  string  platform             = 4; // os/arch/дистрибутив
  map<string,string> metadata  = 20;
}

// Каталожная запись уязвимости (нормализованная).
message Vulnerability {
  string id                 = 1;  // канонический ID (предпочтительно CVE-YYYY-NNNN)
  repeated string aliases   = 2;  // OSV/GHSA/вендорские ID
  repeated string cwe_ids   = 3;
  Severity severity         = 4;  // нормализованная
  repeated Score scores     = 5;  // CVSS/SSVC и др.
  string summary            = 6;  // кратко
  string details            = 7;  // расширенное описание (markdown/plain)
  repeated Reference references = 8;
  google.protobuf.Timestamp published_at = 9;
  google.protobuf.Timestamp modified_at  = 10;
  bool withdrawn            = 11;
  repeated AffectedPackage affected = 12;
  Fix fix                   = 13;
  Advisory advisory         = 14;
  ExploitAvailability exploit_availability = 15;
  Epss epss                 = 16;
  Kev  kev                  = 17;
  string source_database    = 18; // nvd, osv, ghsa, vendor
  map<string,string> labels = 19; // свободные ярлыки
  map<string,string> attributes = 20; // расширяемые поля

  reserved 21 to 29; // задел под будущие поля
}

// -----------------------------------------------------------------------------
// Схема результатов сканирования/обнаружения
// -----------------------------------------------------------------------------

// Локация проблемы в артефакте.
message Location {
  string path           = 1; // путь в файловой системе/образе
  string layer_digest   = 2; // sha256:... (для container)
  string repo           = 3; // VCS репозиторий (если SAST)
  string commit         = 4; // хэш коммита
  string module         = 5; // модуль/подпакет
  string k8s_object_ref = 6; // group/version/kind/namespace/name (для IaC/K8s)
  map<string,string> metadata = 20;
}

// Доказательства/артефакты (лог фрагменты, сигнатуры, хэши).
message Evidence {
  repeated string lines = 1; // строки/фрагменты отчета
  repeated string files = 2; // относительные пути к приложенным артефактам
  map<string,string> metadata = 20;
}

// Нахождение уязвимости в конкретном артефакте.
message Finding {
  string id                = 1; // уникальный ID находки (сканер/платформа)
  Vulnerability vulnerability = 2; // нормализованная запись или ссылка (можно заполнять частично)
  Package artifact         = 3; // конкретный артефакт (пакет/образ/модуль)
  repeated Location locations = 4;
  Severity severity_override = 5; // приоритизация в контексте окружения
  ScannerKind scanner_kind  = 6;
  string scanner_name       = 7;
  string scanner_version    = 8;
  google.protobuf.Timestamp detected_at = 9;
  google.protobuf.Timestamp first_seen_at = 10;
  google.protobuf.Timestamp last_seen_at  = 11;
  bool verified            = 12; // подтверждено вручную/политикой
  Evidence evidence        = 13;
  map<string,string> labels    = 20;
  map<string,string> attributes= 21;
}

// -----------------------------------------------------------------------------
// Обертка документов/пакетов передачи данных
// -----------------------------------------------------------------------------

message VulnerabilityCatalog {
  string source          = 1; // nvd/osv/vendor/aggregate
  string version         = 2; // версия выгрузки
  google.protobuf.Timestamp generated_at = 3;
  repeated Vulnerability items = 4;
  map<string,string> metadata = 20;
}

message FindingsReport {
  string generator       = 1; // trivy/grype/custom и т.п.
  string generator_version = 2;
  string target_ref      = 3; // объект сканирования (образ/проект/кластер)
  google.protobuf.Timestamp generated_at = 4;
  repeated Finding findings = 5;
  map<string,string> metadata = 20;
}
