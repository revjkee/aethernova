syntax = "proto3";

package cybersecurity.v1;

option go_package = "github.com/aethernova/cybersecurity-core/schemas/gen/go/cybersecurity/v1;cybersecurityv1";
option java_multiple_files = true;
option java_package = "org.aethernova.cybersecurity.v1";
option csharp_namespace = "Aethernova.Cybersecurity.V1";
option php_namespace = "Aethernova\\Cybersecurity\\V1";
option ruby_package = "Aethernova::Cybersecurity::V1";
option objc_class_prefix = "ANCS";
option optimize_for = SPEED;

// Well-known types
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";

// ========================
// Enumerations
// ========================
enum Verdict {
  VERDICT_UNSPECIFIED = 0;
  DENY = 1;
  ALLOW = 2;
  CHALLENGE = 3;     // require MFA/step-up
  ERROR = 4;         // evaluation error -> fail-safe policy applies
}

enum Severity {
  SEVERITY_UNSPECIFIED = 0;
  INFO = 1;
  LOW = 2;
  MEDIUM = 3;
  HIGH = 4;
  CRITICAL = 5;
}

enum RiskLevel {
  RISK_UNSPECIFIED = 0;
  RISK_LOW = 1;
  RISK_MEDIUM = 2;
  RISK_HIGH = 3;
  RISK_CRITICAL = 4;
}

enum AuthnMethod {
  AUTHN_UNSPECIFIED = 0;
  PASSWORD = 1;
  PASSKEY = 2;
  OIDC = 3;
  SAML = 4;
  MTLS = 5;
  SSH = 6;
  API_KEY = 7;
  TOKEN = 8; // JWT/OAuth2 opaque bearer
}

enum Factor {
  FACTOR_UNSPECIFIED = 0;
  SMS = 1;
  TOTP = 2;
  PUSH = 3;
  U2F = 4;
  BIOMETRIC = 5;
  EMAIL = 6;
}

enum ResourceType {
  RESOURCE_UNSPECIFIED = 0;
  HTTP_SERVICE = 1;
  DATABASE = 2;
  QUEUE = 3;
  FILESTORE = 4;
  KUBERNETES = 5;
  VM = 6;
  FUNCTION = 7;
  TOPIC = 8;
  GIT = 9;
  SECRET = 10;
}

enum SensitivityLevel {
  SENSITIVITY_UNSPECIFIED = 0;
  PUBLIC = 1;
  INTERNAL = 2;
  CONFIDENTIAL = 3;
  RESTRICTED = 4;
  HIGHLY_RESTRICTED = 5;
}

enum EnforcementType {
  ENFORCEMENT_UNSPECIFIED = 0;
  BLOCK = 1;
  CHALLENGE_MFA = 2;
  ALLOW_WITH_CONDITIONS = 3;
  THROTTLE = 4;
  ISOLATE_DEVICE = 5;
  QUARANTINE_SESSION = 6;
  LOG_ONLY = 7;
}

enum Action {
  ACTION_UNSPECIFIED = 0;
  READ = 1;
  WRITE = 2;
  EXECUTE = 3;
  ADMIN = 4;
  DELETE = 5;
  CONNECT = 6;
  DEPLOY = 7;
  CONFIGURE = 8;
  EXPOSE = 9;
}

enum SessionState {
  SESSION_STATE_UNSPECIFIED = 0;
  ACTIVE = 1;
  SUSPENDED = 2;
  REVOKED = 3;
  EXPIRED = 4;
}

enum ObligationType {
  OBLIGATION_UNSPECIFIED = 0;
  LOG = 1;
  ALERT = 2;
  MFA = 3;
  RECORD = 4;
  SESSION_RESTRICT = 5;
  TOKEN_BIND = 6;
  JUSTIFY = 7;
  NOTIFY = 8;
  WATERMARK = 9;
}

// ========================
// Common value objects
// ========================

message KeyValue {
  string key = 1;
  string value = 2;
}

message LabelSelector {
  // Map-based selector (equality). For set/re/exists use expression-based.
  map<string, string> match_labels = 1;

  // Optional advanced matching
  repeated Requirement requirements = 2;

  message Requirement {
    string key = 1;
    oneof op_value {
      bool exists = 10;                 // key must exist
      string eq = 11;                   // labels[key] == eq
      StringSet in = 12;                // labels[key] âˆˆ set
      string re = 13;                   // regex on labels[key]
    }
  }
}

message StringSet {
  repeated string values = 1;
}

message GeoPoint {
  double lat = 1;
  double lon = 2;
  string country = 3;
  string city = 4;
  string asn = 5;
  string isp = 6;
}

message CertificateRef {
  string fingerprint = 1; // hex SHA-256
  string subject = 2;
  string issuer = 3;
  google.protobuf.Timestamp not_before = 4;
  google.protobuf.Timestamp not_after = 5;
}

message Attestation {
  string format = 1;       // e.g., "android-key", "apple-devicecheck", "webauthn"
  string vendor = 2;       // MDM/MAM vendor
  bytes statement = 3;     // raw attestation statement
  repeated CertificateRef cert_chain = 4;
  map<string, string> claims = 5; // parsed/verifiable claims
}

message DeviceCompliance {
  bool compliant = 1;
  repeated string failures = 2; // policy/control IDs failed
}

message NetworkContext {
  string ip = 1;
  string ip6 = 2;
  string vpc_id = 3;
  string subnet_id = 4;
  string interface = 5;
  repeated string via_proxies = 6; // XFF chain
  string user_agent = 7;
}

message LocationContext {
  GeoPoint geo = 1;
  NetworkContext network = 2;
}

message TokenInfo {
  string id = 1; // jti/opaque identifier
  repeated string audiences = 2;
  string issuer = 3;
  map<string, string> scopes = 4; // scope->description or "1"
  map<string, string> claims = 5; // flattened safe claims
  bool active = 6;
  google.protobuf.Timestamp expires_at = 7;
}

message AuthContext {
  AuthnMethod method = 1;
  repeated Factor factors = 2;
  string session_id = 3;
  string issuer = 4;
  TokenInfo token = 5;
  map<string, string> attributes = 6; // extra auth attributes
}

message DevicePosture {
  string device_id = 1;
  bool managed = 2;
  string os = 3;
  string os_version = 4;
  string model = 5;
  string vendor = 6;
  repeated CertificateRef certs = 7;
  DeviceCompliance compliance = 8;
  Attestation attestation = 9;
  map<string, string> tags = 10;
  LocationContext location = 11;
}

message Subject {
  string id = 1;                      // stable principal id (sub)
  string tenant_id = 2;
  string name = 3;
  repeated string groups = 4;
  map<string, string> attributes = 5; // HR/SCIM/custom attributes
  AuthContext auth = 6;
  DevicePosture device = 7;
  // reserved for future: roles, risk profile
  reserved 8, 9;
}

message Resource {
  ResourceType type = 1;
  string name = 2;
  string uri = 3;                     // canonical resource URI (spiffe://, k8s://, db://)
  string service = 4;                 // logical service name
  string namespace = 5;               // e.g., k8s namespace or logical domain
  map<string, string> labels = 6;
  SensitivityLevel sensitivity = 7;
  string owner = 8;
  // for future: dataset/schema/operation specific fields
  reserved 9, 10;
}

message RiskContext {
  RiskLevel level = 1;
  double score = 2; // 0..100
  map<string, double> contributors = 3; // "geo", "iprep", "device", etc.
}

message OverrideContext {
  bool breakglass = 1;
  string token = 2; // must match tenant-configured token when breakglass=true
}

message TimeContext {
  string weekday = 1;  // "Mon".."Sun"
  string time_hhmm = 2; // "HH:MM" 24h
  google.protobuf.Timestamp now = 3;
}

// ========================
// Policy input / request
// ========================

message OPAInput {
  // Mirrors Rego policy input fields for network_guard and similar policies.
  message Endpoint {
    string namespace = 1;
    string service = 2;
    map<string, string> labels = 3;
    string ip = 4;
    string domain = 5;
    uint32 port = 6;
    string protocol = 7; // "tcp"/"udp"/"http"/etc.
  }

  Endpoint source = 1;
  Endpoint destination = 2;
  TimeContext context = 3;
  OverrideContext override = 4;
  message Risk {
    double score = 1;
  }
  Risk risk = 5;
  string tenant_id = 6;
  google.protobuf.Struct extra = 7; // extensibility
}

message AccessRequest {
  string request_id = 1;
  string tenant_id = 2;
  Subject subject = 3;
  Resource resource = 4;
  Action action = 5;
  RiskContext risk = 6;
  google.protobuf.Timestamp time = 7;
  string correlation_id = 8;
  string trace_id = 9;
  map<string, string> annotations = 10; // arbitrary metadata

  oneof input {
    OPAInput opa = 20;       // structured input for policy engines
    bytes opaque_input = 21; // vendor-specific payload
  }

  // Reserved fields for future pagination/sequence ids
  reserved 11, 12, 13, 14, 15, 16, 17, 18, 19;
}

// ========================
// Policy decision / outcome
// ========================

message Reason {
  string code = 1;                    // e.g., "blocklist_domain", "risk_quarantine"
  string message = 2;
  Severity severity = 3;
  map<string, string> details = 4;    // structured small details
}

message Obligation {
  string id = 1;                      // stable obligation id
  ObligationType type = 2;
  map<string, string> params = 3;     // e.g., {"sink":"kafka","stream":"security.events"}
}

message EnforcementActionMsg {
  EnforcementType type = 1;
  Action target_action = 2;           // which action is affected
  string description = 3;
  google.protobuf.Duration ttl = 4;   // duration of enforcement, if applicable
  map<string, string> params = 5;     // throttle rates, isolation segments, etc.
}

message PolicyDecision {
  string decision_id = 1;
  Verdict verdict = 2;
  double score = 3;                   // 0..100 combined policy score/confidence
  int32 confidence = 4;               // 0..100 (how certain the engine is)
  repeated string matched_policies = 5;
  repeated string matched_rules = 6;
  repeated Reason reasons = 7;
  repeated Obligation obligations = 8;
  repeated EnforcementActionMsg enforcement = 9;
  string policy_version = 10;
  google.protobuf.Timestamp expires_at = 11;
  bool cacheable = 12;
  google.protobuf.Duration reevaluate_in = 13;
  bool breakglass_applied = 14;
  map<string, string> labels = 15;    // decision labels/tags
  google.protobuf.Struct extra = 16;  // extensibility
}

message AuditEvent {
  string id = 1;
  google.protobuf.Timestamp time = 2;
  string tenant_id = 3;
  AccessRequest request = 4;
  PolicyDecision decision = 5;
  string outcome = 6;                 // "allowed","denied","challenged","error"
  map[string, string] audit_labels = 7;
}

// ========================
// Sessions / posture / policy bundles
// ========================

message Session {
  string session_id = 1;
  string tenant_id = 2;
  Subject subject = 3;
  Resource resource = 4;
  Action action = 5;
  SessionState state = 6;
  google.protobuf.Timestamp issued_at = 7;
  google.protobuf.Timestamp expires_at = 8;
  repeated Obligation obligations = 9;
  map<string, string> attributes = 10; // token binding, device binding, etc.
}

message PostureReport {
  string tenant_id = 1;
  Subject subject = 2;                  // only device/auth fields may be populated
  google.protobuf.Timestamp reported_at = 3;
  map<string, string> attributes = 4;
}

message PolicyBundleRef {
  string id = 1;     // bundle/id
  string version = 2;
  string etag = 3;
}

// ========================
// Service API
// ========================

message EvaluateRequest {
  AccessRequest request = 1;
  PolicyBundleRef bundle = 2;
}

message EvaluateResponse {
  PolicyDecision decision = 1;
  AuditEvent audit = 2;
}

message IntrospectSessionRequest {
  string tenant_id = 1;
  string session_id = 2;
}

message IntrospectSessionResponse {
  Session session = 1;
}

message PostureReportRequest {
  PostureReport report = 1;
}

message PostureReportResponse {
  bool accepted = 1;
}

message StreamDecisionsRequest {
  string tenant_id = 1;
  LabelSelector selector = 2; // filter by labels/resource/action etc.
}

message StreamDecisionsResponse {
  AuditEvent event = 1;
}

service ZeroTrustPolicyService {
  // Evaluate a single access request.
  rpc Evaluate(EvaluateRequest) returns (EvaluateResponse);

  // Return current view of a session bound to a decision.
  rpc IntrospectSession(IntrospectSessionRequest) returns (IntrospectSessionResponse);

  // Ingest device/user posture signals.
  rpc PostureReport(PostureReportRequest) returns (PostureReportResponse);

  // Server-stream policy decisions/audit events (tail -f).
  rpc StreamDecisions(StreamDecisionsRequest) returns (stream StreamDecisionsResponse);
}
