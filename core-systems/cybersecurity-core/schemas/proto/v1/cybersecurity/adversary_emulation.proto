syntax = "proto3";

package aethernova.cybersecurity.v1;

option go_package        = "github.com/aethernova/cybersecurity/proto/v1;cyberpb";
option java_multiple_files = true;
option java_package      = "ai.aethernova.cybersecurity.v1";
option csharp_namespace  = "Aethernova.Cybersecurity.V1";
option php_namespace     = "Aethernova\\Cybersecurity\\V1";
option ruby_package      = "Aethernova::Cybersecurity::V1";

// Well-known types
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";

// -----------------------------
// Enumerations
// -----------------------------

// Execution status of a single step or the whole run.
enum Status {
  STATUS_UNSPECIFIED = 0;
  STATUS_SUCCESS     = 1;
  STATUS_FAILED      = 2;
  STATUS_SKIPPED     = 3;
  STATUS_CANCELLED   = 4;
  STATUS_TIMEOUT     = 5;
}

// Optional severity/priority level for rules/steps.
enum Level {
  LEVEL_UNSPECIFIED = 0;
  LEVEL_INFORMATIONAL = 1;
  LEVEL_LOW           = 2;
  LEVEL_MEDIUM        = 3;
  LEVEL_HIGH          = 4;
  LEVEL_CRITICAL      = 5;
}

// -----------------------------
// Core Scenario Model
// -----------------------------

// Describes the entire adversary emulation scenario.
message Scenario {
  // Stable identifier (e.g., "fin7-lateral-01").
  string scenario_id = 1;

  // Human-readable description.
  string description = 2;

  // Scenario-level free-form labels (e.g., environment=prod).
  map<string, string> labels = 3;

  // Ordered collection of steps; execution order is determined by DAG edges.
  repeated Step steps = 4;

  // Optional metadata (opaque).
  google.protobuf.Struct metadata = 5;

  // Reserved for future fields.
  reserved 6 to 9;
}

// A single action/operation to be executed by the orchestrator.
message Step {
  // Unique step id within the scenario (e.g., "s01_enum_ad").
  string id = 1;

  // Short, human-readable name.
  string name = 2;

  // Fully-qualified plugin module path (e.g., "cybersecurity.adversary_emulation.plugins.cmd_exec").
  string plugin = 3;

  // Optional MITRE ATT&CK technique id (e.g., "T1059.003").
  string technique_id = 4;

  // Arbitrary parameters passed to the plugin.
  google.protobuf.Struct params = 5;

  // Step dependencies; all listed steps must be completed before this one can run.
  repeated string depends_on = 6;

  // Per-step timeout; if unset, orchestrator default applies.
  google.protobuf.Duration timeout = 7;

  // Retry attempts on failure.
  uint32 retries = 8;

  // If true, failure cancels the entire run; otherwise orchestrator may continue.
  bool critical = 9;

  // Optional severity/priority of this step.
  Level level = 10;

  // Optional labels (free-form).
  map<string, string> labels = 11;

  // Reserved for future fields.
  reserved 12 to 19;
}

// -----------------------------
// DAG / Planning
// -----------------------------

// Edge (from -> to) in the scenario DAG.
message DagEdge {
  string from = 1;
  string to   = 2;
}

// Execution plan snapshot (roots and edges).
message Plan {
  repeated string roots = 1;
  repeated DagEdge edges = 2;
}

// -----------------------------
// Policy & Limits
// -----------------------------

// Per-process resource limits for isolated step execution.
message ProcessLimits {
  // Max CPU time in seconds.
  uint32 cpu_seconds = 1;

  // Max virtual memory in MiB.
  uint32 memory_mb = 2;

  // Max number of open file descriptors.
  uint32 open_files = 3;

  // Max number of processes/threads.
  uint32 nproc = 4;

  reserved 5 to 9;
}

// RBAC allow-list for permitted MITRE ATT&CK techniques.
message RbacPolicy {
  bool enabled = 1;
  repeated string permitted_techniques = 2;
}

// Orchestrator runtime configuration.
message OrchestratorConfig {
  uint32 max_concurrency = 1;
  google.protobuf.Duration default_timeout = 2;
  google.protobuf.Duration global_timeout  = 3;
  string log_level = 4;
  bool dry_run = 5;
  ProcessLimits process_limits = 6;
  RbacPolicy rbac = 7;

  // Telemetry switches (e.g., OpenTelemetry).
  bool tracing_enabled = 8;

  // Reserved for future fields.
  reserved 9 to 12;
}

// -----------------------------
// Execution Context & Results
// -----------------------------

// Context visible to a running plugin/step.
message StepContext {
  string run_id = 1;
  string scenario_id = 2;
  string step_id = 3;

  // Paths provided to the step implementation.
  string work_dir = 4;
  string result_dir = 5;

  // Arbitrary environment variables.
  map<string, string> env = 6;

  google.protobuf.Timestamp started_at = 7;

  reserved 8 to 9;
}

// Result of a single step execution.
message StepResult {
  string step_id = 1;
  Status status = 2;

  google.protobuf.Timestamp started_at = 3;
  google.protobuf.Timestamp ended_at   = 4;
  uint32 duration_ms = 5;

  uint32 attempt = 6;
  string technique_id = 7;

  string stdout_path = 8;
  string stderr_path = 9;

  repeated string artifacts = 10;

  // Error message if any.
  string error = 11;

  // SHA256 of the loaded plugin file (if resolvable).
  string plugin_hash = 12;

  // Additional free-form data (plugin-specific).
  google.protobuf.Struct details = 13;

  reserved 14 to 19;
}

// Manifest persisted at run start.
message RunManifest {
  string run_id = 1;
  string scenario_id = 2;

  // Absolute path of the source scenario file (if applicable).
  string scenario_file = 3;

  // SHA256 of the scenario file contents.
  string scenario_sha256 = 4;

  google.protobuf.Timestamp started_at = 5;

  OrchestratorConfig config = 6;

  // Optional orchestrator metadata (host, versions, etc.).
  map<string, string> meta = 7;

  reserved 8 to 12;
}

// Summary persisted at run end.
message RunSummary {
  string run_id = 1;
  string scenario_id = 2;

  google.protobuf.Timestamp ended_at = 3;

  // Overall status derived from critical step outcomes / cancellations.
  Status status = 4;

  repeated string completed_steps = 5;
  repeated string failed_steps    = 6;
  repeated string skipped_steps   = 7;

  uint32 total_steps = 8;
  uint32 succeeded   = 9;
  uint32 failed      = 10;
  uint32 skipped     = 11;

  // Optional aggregated metrics.
  map<string, double> metrics = 12;

  reserved 13 to 19;
}

// Complete run record (optional envelope for storage/transport).
message RunRecord {
  RunManifest manifest = 1;
  Plan plan = 2;
  repeated StepResult step_results = 3;
  RunSummary summary = 4;

  reserved 5 to 9;
}

// -----------------------------
// Requests/Responses for RPC APIs (optional)
// -----------------------------

message ValidateScenarioRequest {
  Scenario scenario = 1;
}

message ValidateScenarioResponse {
  bool valid = 1;
  repeated string warnings = 2;
  repeated string errors = 3;
}

message StartRunRequest {
  Scenario scenario = 1;
  OrchestratorConfig config = 2;
}

message StartRunResponse {
  RunManifest manifest = 1;
}

message GetRunStatusRequest {
  string run_id = 1;
}

message GetRunStatusResponse {
  RunSummary summary = 1;
}

message StreamStepLogsRequest {
  string run_id = 1;
  string step_id = 2;
}

message LogEvent {
  google.protobuf.Timestamp ts = 1;
  string level = 2;   // e.g., INFO/WARN/ERROR
  string logger = 3;
  string message = 4;
  google.protobuf.Struct fields = 5;
}

message StreamStepLogsResponse {
  LogEvent event = 1;
}

// -----------------------------
// Service definition (optional gRPC interface)
// -----------------------------
service AdversaryEmulationService {
  rpc ValidateScenario (ValidateScenarioRequest) returns (ValidateScenarioResponse);
  rpc StartRun        (StartRunRequest)        returns (StartRunResponse);
  rpc GetRunStatus    (GetRunStatusRequest)    returns (GetRunStatusResponse);

  // Server-streaming logs for a particular step.
  rpc StreamStepLogs  (StreamStepLogsRequest)  returns (stream StreamStepLogsResponse);
}
