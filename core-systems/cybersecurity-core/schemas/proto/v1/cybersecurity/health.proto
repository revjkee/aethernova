// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2025
// File: schemas/proto/v1/cybersecurity/health.proto
//
// Industrial Health API for cybersecurity-core.
// Backward-compatible evolution rules:
// - Do not reuse reserved field numbers or names.
// - Only add new optional fields with new tags.
// - Avoid changing wire types of existing fields.
// - Prefer adding new messages/oneofs to evolve semantics safely.

syntax = "proto3";

package aethernova.cybersecurity.v1;

option go_package       = "github.com/your-org/cybersecurity-core/gen/proto/go/cybersecurity/v1;cybersecurityv1";
option java_multiple_files = true;
option java_package     = "com.yourorg.cybersecurity.v1";
option csharp_namespace = "YourOrg.Cybersecurity.V1";
option php_namespace    = "YourOrg\\Cybersecurity\\V1";
option ruby_package     = "YourOrg::Cybersecurity::V1";
option objc_class_prefix = "ANCS";
option optimize_for     = SPEED;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

// High-level health status. Keep UNKNOWN=0 for safe default.
enum HealthStatus {
  HEALTH_STATUS_UNSPECIFIED = 0;  // Do not use directly. Maps to unknown.
  HEALTH_STATUS_UNKNOWN     = 1;  // Initial/indeterminate.
  HEALTH_STATUS_SERVING     = 2;  // Fully serving.
  HEALTH_STATUS_NOT_SERVING = 3;  // Not serving due to failure or maintenance.
  HEALTH_STATUS_DEGRADED    = 4;  // Serving with impaired performance or partial functionality.
  HEALTH_STATUS_MAINTENANCE = 5;  // Intentionally down or drained.
  HEALTH_STATUS_STARTING    = 6;  // Warming up, not ready yet.
  HEALTH_STATUS_STOPPING    = 7;  // Shutting down gracefully.
}

// Probe type names for granular checks.
enum ProbeType {
  PROBE_TYPE_UNSPECIFIED = 0;
  PROBE_TYPE_LIVENESS    = 1;
  PROBE_TYPE_READINESS   = 2;
  PROBE_TYPE_STARTUP     = 3;
  PROBE_TYPE_CUSTOM      = 4;
}

// Generic component reference to identify a target or dependency.
message ComponentRef {
  // Stable logical name of the service/component, e.g., "cybersecurity-core".
  string name        = 1;
  // Optional K8s namespace or equivalent isolation domain.
  string namespace   = 2;
  // Instance or shard identifier (pod name, VM id, etc).
  string instance    = 3;
  // Semantic version or build version of the component.
  string version     = 4;
  // Environment tag: prod, staging, dev, etc.
  string environment = 5;
  // Optional location info for placement-aware routing.
  string zone        = 6;
  string node        = 7;
  // Free-form labels for selectors and policy engines.
  map<string, string> labels = 8;

  // Reserved tags to keep wire compatibility upon evolution.
  reserved 9, 10;
  reserved "tenant", "cluster";
}

// Detailed result of an individual probe.
message ProbeResult {
  ProbeType type                           = 1;
  bool success                             = 2;
  // Short human-readable reason if success=false or degraded.
  string reason                            = 3;
  // Observed latency for the probe (e.g., HTTP GET /readyz).
  google.protobuf.Duration observed_latency = 4;
  // Optional HTTP status or app-specific code for the probe.
  int32 code                               = 5;
  // Timestamp when the probe was executed.
  google.protobuf.Timestamp checked_at     = 6;

  // Future expansion.
  reserved 7, 8;
}

// Aggregated dependency status summary.
message DependencyStatus {
  ComponentRef component                   = 1;
  HealthStatus status                      = 2;
  string reason                            = 3;
  repeated string impacted_endpoints       = 4;

  // Latency percentiles if available from metrics backends.
  google.protobuf.Duration p50_latency     = 5;
  google.protobuf.Duration p90_latency     = 6;
  google.protobuf.Duration p99_latency     = 7;

  // Last time we observed/updated this dependency status.
  google.protobuf.Timestamp last_checked_at = 8;

  // Dependency type: "db", "cache", "queue", "upstream-api", etc.
  string dependency_type                   = 9;

  // Optional probe details for this dependency.
  repeated ProbeResult probes               = 10;

  reserved 11 to 15;
}

// Build and release provenance information (useful for SBOM/SLSA traceability).
message BuildInfo {
  string version        = 1;  // App version (e.g., 1.4.3).
  string revision       = 2;  // VCS commit SHA.
  string build_date     = 3;  // ISO-8601 build date string.
  string vcs_url        = 4;  // Repository URL.
  string builder        = 5;  // CI system identifier (e.g., GitHub Actions).
  string platform       = 6;  // GOOS/GOARCH or runtime platform.
  map<string, string> extra = 10; // Additional metadata (immutable once set in a given release).

  reserved 7, 8, 9;
}

// Simple SLO view for health reporting.
message SLO {
  string name      = 1;   // "availability", "latency_p99", etc.
  double objective = 2;   // Target, e.g., 99.9
  double current   = 3;   // Current attainment, e.g., 99.95
  string window    = 4;   // Rolling window descriptor, e.g., "30d".
}

// Transport security information for posture reporting.
message TLSInfo {
  bool enabled                 = 1;
  bool mutual_tls              = 2;  // mTLS on service endpoints.
  string min_version           = 3;  // "TLS1.2" or "TLS1.3"
  repeated string ciphers      = 4;  // Effective cipher suites if applicable.
}

// Security posture flags aligned to baseline controls.
message SecurityPosture {
  TLSInfo tls                        = 1;
  bool zero_trust                    = 2;
  bool rbac_enabled                  = 3;
  bool audit_logging_enabled         = 4;
  bool fips_mode                     = 5;
  repeated string active_controls    = 6;   // e.g., "OPA", "PSP/Gatekeeper", "NetworkPolicy:Cilium".
  map<string, string> annotations    = 7;   // Free-form control metadata.
}

// Request for a one-shot health check.
message CheckRequest {
  // Target service name. Empty string means "this service".
  string service                     = 1;

  // Return dependency statuses in response.
  bool include_dependencies          = 2;

  // Return build info and security posture.
  bool include_build_info            = 3;
  bool include_security_posture      = 4;

  // Return key metrics as stringified values (e.g., "cpu_load: 0.42").
  bool include_metrics               = 5;

  // Optional scopes to restrict or expand data returned (e.g., ["readiness","liveness"]).
  repeated string scopes             = 6;

  // Optional maximum number of dependency entries to return (0 = unlimited).
  uint32 dependencies_limit          = 7;

  reserved 8 to 15;
}

// One-shot health check response.
message CheckResponse {
  HealthStatus status                        = 1;
  // High-level reason for status; keep concise and actionable.
  string status_reason                       = 2;

  ComponentRef target                        = 3;

  // Probes for the target instance (liveness/readiness/startup/custom).
  repeated ProbeResult probes                = 4;

  // Optional dependency statuses if requested.
  repeated DependencyStatus dependencies     = 5;

  // Optional release provenance if requested.
  BuildInfo build                            = 6;

  // Optional security posture if requested.
  SecurityPosture security                   = 7;

  // Optional SLO set for quick conformance view.
  repeated SLO slos                          = 8;

  // RFC3339 timestamp when the check snapshot was produced.
  google.protobuf.Timestamp checked_at       = 9;

  // Key metrics (human-readably encoded strings, e.g., "rps: 123.4", "p99: 215ms").
  map<string, string> metrics                = 10;

  reserved 11 to 20;
}

// Streaming watch request to observe health changes over time.
// Server should emit at least once per requested interval or on state change.
message WatchRequest {
  string service                 = 1;
  // Desired push interval; server may coalesce or rate-limit.
  google.protobuf.Duration interval = 2;

  // Optional: when true, include dependency digests in stream updates.
  bool include_dependencies      = 3;

  reserved 4 to 10;
}

// Streaming response with minimal fields for efficient monitoring.
// For detailed diagnostics, issue a one-shot Check.
message WatchResponse {
  HealthStatus status                  = 1;
  string status_reason                 = 2;
  google.protobuf.Timestamp checked_at = 3;

  // Monotonic sequence for client-side de-duplication.
  uint64 sequence                      = 4;

  // Optional compact digest of dependencies status for quick diffing.
  // Example format is implementation-defined (e.g., hash or small bloom summary).
  bytes dependencies_digest            = 5;

  reserved 6 to 10;
}

// The Health service exposes both one-shot checks and streaming watch.
// Implementations should return canonical gRPC status codes on transport errors:
// - UNAVAILABLE when the service cannot serve.
// - FAILED_PRECONDITION when readiness is false while liveness is true.
// - INTERNAL for unexpected errors (avoid leaking sensitive info).
service Health {
  // Returns a rich snapshot of health for the service or a named dependency.
  rpc Check(CheckRequest) returns (CheckResponse);

  // Streams periodic or event-driven health updates.
  rpc Watch(WatchRequest) returns (stream WatchResponse);
}
