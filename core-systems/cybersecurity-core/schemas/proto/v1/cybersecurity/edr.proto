syntax = "proto3";

package cybersecurity.v1.edr;

option go_package        = "github.com/your-org/cybersecurity-core/schemas/gen/go/cybersecurity/v1/edr;edr";
option java_multiple_files = true;
option java_package      = "io.aethernova.cybersecurity.v1.edr";
option csharp_namespace  = "Aethernova.Cybersecurity.V1.Edr";
option php_namespace     = "Aethernova\\Cybersecurity\\V1\\Edr";
option objc_class_prefix = "AECE";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/any.proto";
import "google/protobuf/struct.proto";

// ---------- Общие перечисления ----------

enum OSType {
  OS_TYPE_UNSPECIFIED = 0;
  OS_WINDOWS = 1;
  OS_LINUX = 2;
  OS_DARWIN = 3;
  OS_BSD = 4;
  OS_ANDROID = 5;
}

enum Severity {
  SEVERITY_UNSPECIFIED = 0;
  SEVERITY_LOW = 1;
  SEVERITY_MEDIUM = 2;
  SEVERITY_HIGH = 3;
  SEVERITY_CRITICAL = 4;
}

enum EventType {
  EVENT_TYPE_UNSPECIFIED = 0;
  EVENT_PROCESS = 1;
  EVENT_FILE = 2;
  EVENT_NETWORK = 3;
  EVENT_REGISTRY = 4;   // Windows
  EVENT_DNS = 5;
  EVENT_AUTH = 6;
  EVENT_KERNEL = 7;
  EVENT_DETECTION = 8;
  EVENT_RESPONSE = 9;
  EVENT_HEARTBEAT = 10;
}

// ---------- Базовые структуры ----------

message DeviceIdentity {
  string device_id               = 1;   // устойчивый ID агента/хоста
  string hostname                = 2;
  string domain                  = 3;
  OSType os_type                 = 4;
  string os_version              = 5;
  string platform                = 6;   // дистрибутив/редакция
  string kernel_version          = 7;
  bool   is_server               = 8;
  bool   is_virtual              = 9;
  string cloud_provider          = 10;  // aws|gcp|azure|onprem
  string cloud_instance_id       = 11;
  repeated string ip_addresses   = 12;
  repeated string mac_addresses  = 13;
  string serial_number           = 14;
  map<string, string> labels     = 15;  // произвольные теги
  reserved 16 to 20;
}

message SensorMeta {
  string sensor_id                      = 1;
  string version                        = 2;   // версия агента
  google.protobuf.Timestamp first_seen  = 3;
  google.protobuf.Timestamp last_seen   = 4;
  bool tamper_protection_enabled        = 5;
  string config_id                      = 6;
  string log_level                      = 7;
  reserved 8 to 20;
}

message FileHash {
  string md5     = 1;
  string sha1    = 2;
  string sha256  = 3;
  string ssdeep  = 4;
}

message SignatureInfo {
  bool   signed                = 1;
  bool   valid                 = 2;
  string subject               = 3;
  string issuer                = 4;
  google.protobuf.Timestamp not_before = 5;
  google.protobuf.Timestamp not_after  = 6;
}

message ContainerInfo {
  string runtime        = 1; // containerd|docker|crio
  string container_id   = 2;
  string image          = 3;
  string image_digest   = 4;
  string kubernetes_ns  = 5;
  string kubernetes_pod = 6;
}

// ---------- События ----------

message ProcessEvent {
  enum Type {
    TYPE_UNSPECIFIED = 0;
    CREATED = 1;
    TERMINATED = 2;
    EXEC = 3;
    FORK = 4;
    SUSPENDED = 5;
    RESUMED = 6;
  }
  Type  type                     = 1;
  int64 pid                      = 2;
  int64 ppid                     = 3;
  string exe_path                = 4;
  string cmdline                 = 5;
  string user                    = 6;
  string integrity_level         = 7;   // Windows: Low/Medium/High/System
  bool   elevated                = 8;
  google.protobuf.Timestamp start_time = 9;
  google.protobuf.Timestamp end_time   = 10;
  int32 exit_code               = 11;
  FileHash image_hash           = 12;
  SignatureInfo signature       = 13;
  string cwd                    = 14;
  ContainerInfo container       = 15;
  map<string, string> env_redacted = 16; // значения редактированы/маскированы
  reserved 17 to 20;
}

message FileEvent {
  enum Action {
    ACTION_UNSPECIFIED = 0;
    CREATED = 1;
    MODIFIED = 2;
    DELETED = 3;
    RENAMED = 4;
    OPENED = 5;
    PERMISSION_CHANGED = 6;
    OWNER_CHANGED = 7;
    QUARANTINED = 8;
  }
  Action action                 = 1;
  string path                   = 2;
  string new_path               = 3;   // для RENAMED
  uint64 size_bytes             = 4;
  uint32 mode_unix              = 5;   // POSIX права
  uint32 uid                    = 6;
  uint32 gid                    = 7;
  bool   executable             = 8;
  FileHash hash                 = 9;
  SignatureInfo signature       = 10;
  ContainerInfo container       = 11;
  reserved 12 to 20;
}

message NetworkEvent {
  enum Direction { DIRECTION_UNSPECIFIED = 0; INBOUND = 1; OUTBOUND = 2; LOCAL = 3; }
  enum L4 { L4_UNSPECIFIED = 0; TCP = 1; UDP = 2; ICMP = 3; RAW = 4; }
  Direction direction           = 1;
  L4 protocol                   = 2;
  string src_ip                 = 3;
  string dst_ip                 = 4;
  uint32 src_port               = 5;
  uint32 dst_port               = 6;
  uint64 bytes_in               = 7;
  uint64 bytes_out              = 8;
  uint64 packets_in             = 9;
  uint64 packets_out            = 10;
  int64  process_pid            = 11;
  string process_path           = 12;
  // TLS метаданные (если есть):
  string tls_version            = 13;
  string tls_cipher             = 14;
  string sni                    = 15;
  string ja3                    = 16;
  string ja3s                   = 17;
  bool   blocked                = 18;  // был ли трафик заблокирован EDR/FW
  string block_reason           = 19;
  ContainerInfo container       = 20;
}

message RegistryEvent {
  enum Hive { HIVE_UNSPECIFIED = 0; HKLM = 1; HKCU = 2; HKCR = 3; HKU = 4; HKCC = 5; }
  enum Operation { OP_UNSPECIFIED = 0; CREATE_KEY = 1; DELETE_KEY = 2; SET_VALUE = 3; DELETE_VALUE = 4; }
  enum ValueType { VT_UNSPECIFIED = 0; SZ = 1; DWORD = 2; QWORD = 3; MULTI_SZ = 4; BINARY = 5; EXPAND_SZ = 6; }
  Hive hive                     = 1;
  Operation operation           = 2;
  string key_path               = 3;
  string value_name             = 4;
  ValueType value_type          = 5;
  bytes  data                   = 6;   // бинарное значение
  int64  process_pid            = 7;
  string process_path           = 8;
}

message DnsEvent {
  enum RecordType { RT_UNSPECIFIED = 0; A = 1; AAAA = 2; CNAME = 3; TXT = 4; MX = 5; PTR = 6; SRV = 7; }
  enum Status { STATUS_UNSPECIFIED = 0; NOERROR = 1; NXDOMAIN = 2; SERVFAIL = 3; REFUSED = 4; }
  string query_name             = 1;
  RecordType record_type        = 2;
  repeated string answers       = 3;   // IP/значения ответа
  Status status                 = 4;
  int64 process_pid             = 5;
  string process_path           = 6;
}

message AuthEvent {
  enum Result { RESULT_UNSPECIFIED = 0; SUCCESS = 1; FAILURE = 2; }
  enum Method { METHOD_UNSPECIFIED = 0; PASSWORD = 1; KERBEROS = 2; OAUTH = 3; PAM = 4; PUBLICKEY = 5; }
  string user                   = 1;
  string source_ip              = 2;
  Result result                 = 3;
  Method method                 = 4;
  bool mfa                      = 5;
  string reason                 = 6;  // код/описание отказа
}

message KernelEvent {
  uint32 code                   = 1;
  string message                = 2;
  google.protobuf.Any details   = 3;
}

// ---------- Детекты и корреляция ----------

message DetectionEvent {
  string detection_id           = 1;
  string rule_id                = 2;
  string rule_name              = 3;
  string rule_version           = 4;
  Severity severity             = 5;
  uint32  confidence_pct        = 6;   // 0..100
  double  score                 = 7;   // 0..1 или модельный скор
  string tactic                 = 8;   // MITRE ATT&CK tactic (строка)
  string technique_id           = 9;   // Txxxx
  string technique_name         = 10;
  map<string, string> matched_fields = 11;
  string summary                = 12;
  string remediation            = 13;
  // Связанная первопричина/объекты:
  int64  process_pid            = 14;
  string file_path              = 15;
  string network_flow_id        = 16;
  // Свободные расширения:
  google.protobuf.Struct vendor_context = 17;
  reserved 18 to 20;
}

// ---------- Ответные действия (Response) ----------

enum ActionType {
  ACTION_TYPE_UNSPECIFIED = 0;
  ISOLATE_HOST = 1;
  UNISOLATE_HOST = 2;
  KILL_PROCESS = 3;
  QUARANTINE_FILE = 4;
  DISABLE_USER = 5;
  BLOCK_HASH = 6;
  ADD_FW_RULE = 7;
  START_SCAN = 8;
  STOP_SCAN = 9;
  DUMP_MEMORY = 10;
}

enum ActionStatus {
  ACTION_STATUS_UNSPECIFIED = 0;
  PENDING = 1;
  RUNNING = 2;
  SUCCEEDED = 3;
  FAILED = 4;
  CANCELLED = 5;
}

message ActionTarget {
  oneof target {
    HostTarget host      = 1;
    ProcessTarget process = 2;
    FileTarget file      = 3;
    UserTarget user      = 4;
    NetworkTarget network = 5;
  }
}

message HostTarget { string device_id = 1; }

message ProcessTarget {
  string device_id = 1;
  int64  pid       = 2;
  string exe_path  = 3;
}

message FileTarget {
  string device_id = 1;
  string path      = 2;
  FileHash hash    = 3;
}

message UserTarget {
  string device_id = 1;
  string username  = 2;
}

message NetworkTarget {
  string device_id = 1;
  string dst_ip    = 2;
  uint32 dst_port  = 3;
  string protocol  = 4; // TCP/UDP/ICMP
}

message ResponseActionRequest {
  string action_id                   = 1;   // клиентский UUID
  ActionType type                    = 2;
  ActionTarget target                = 3;
  string justification               = 4;   // причина/ссылка на тикет
  string requested_by                = 5;
  string policy_id                   = 6;
  google.protobuf.Struct parameters  = 7;   // произв. опции
  google.protobuf.Timestamp deadline = 8;
}

message ResponseActionStatus {
  string action_id                   = 1;
  ActionType type                    = 2;
  ActionStatus status                = 3;
  string error_message               = 4;
  map<string, string> outputs        = 5;   // артефакты (пути, ID правил и т. п.)
  google.protobuf.Timestamp created_at  = 6;
  google.protobuf.Timestamp started_at  = 7;
  google.protobuf.Timestamp completed_at= 8;
}

// ---------- Универсальная «шапка» события и батчи ----------

message EdrEvent {
  string event_id                   = 1;   // UUID (RFC 4122)
  google.protobuf.Timestamp time    = 2;
  EventType type                    = 3;
  string schema_version             = 4;   // "1.0"
  DeviceIdentity device             = 5;
  SensorMeta sensor                 = 6;
  map<string, string> labels       = 7;   // k=v теги для поиска/рутинга
  google.protobuf.Any extensions    = 8;   // расширения производителя
  // Полезная нагрузка события:
  oneof payload {
    ProcessEvent  process   = 20;
    FileEvent     file      = 21;
    NetworkEvent  network   = 22;
    RegistryEvent registry  = 23;
    DnsEvent      dns       = 24;
    AuthEvent     auth      = 25;
    KernelEvent   kernel    = 26;
    DetectionEvent detection= 27;
    ResponseActionStatus response = 28; // уведомление о результате действия
    HeartbeatEvent heartbeat = 29;
  }
}

message HeartbeatEvent {
  string state                    = 1; // healthy|degraded|error
  map<string, string> stats       = 2; // метрики агента
}

message EventBatch {
  string batch_id                          = 1;
  repeated EdrEvent events                  = 2;
  google.protobuf.Timestamp created_at      = 3;
  map<string, string> labels                = 4;
}

message IngestAck {
  string id       = 1;
  uint32 accepted = 2;
  uint32 failed   = 3;
  string message  = 4;
}

// ---------- Поиск/стриминг ----------

message Query {
  // Простой DSL/CEL-фильтр (на стороне сервера): пример "type==EVENT_PROCESS && device.hostname=='srv01'"
  string filter                    = 1;
  google.protobuf.Timestamp start_time = 2;
  google.protobuf.Timestamp end_time   = 3;
  uint32 limit                    = 4;
  string cursor                   = 5; // постраничная навигация
  repeated EventType types        = 6;
  map<string, string> labels      = 7;
}

message DetectionStreamRequest {
  Severity min_severity           = 1; // порог
  string filter                   = 2; // доп. фильтр (tactic=='persistence')
  map<string, string> labels      = 3;
}

// ---------- gRPC сервисы ----------

service EdrIngest {
  // Потоковая загрузка событий.
  rpc Ingest (stream EdrEvent) returns (IngestAck);
  // Батч-загрузка за один вызов.
  rpc BatchIngest (EventBatch) returns (IngestAck);
  // Стриминг детектов для SOC/алертинга.
  rpc StreamDetections (DetectionStreamRequest) returns (stream DetectionEvent);
  // Исторический поиск (сервер может буферизовать и отдавать стримом).
  rpc QueryEvents (Query) returns (stream EdrEvent);
}

service EdrResponse {
  // Отправка ответного действия (изоляция, убийство процесса и т. п.)
  rpc SubmitAction (ResponseActionRequest) returns (ResponseActionStatus);
  // Запрос статуса.
  rpc GetActionStatus (ResponseActionStatus) returns (ResponseActionStatus);
  // Наблюдение за статусами действий в реальном времени.
  rpc StreamActionStatus (ResponseActionStatus) returns (stream ResponseActionStatus);
}
