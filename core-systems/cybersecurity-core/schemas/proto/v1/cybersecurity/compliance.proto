// cybersecurity-core/schemas/proto/v1/cybersecurity/compliance.proto
syntax = "proto3";

package aethernova.cybersecurity.v1;

option java_multiple_files = true;
option java_package = "io.aethernova.cybersecurity.v1";
option java_outer_classname = "ComplianceProto";
option go_package = "github.com/aethernova/cybersecurity-core/gen/proto/v1;cyberv1";
option csharp_namespace = "Aethernova.Cybersecurity.V1";
option php_namespace = "Aethernova\\Cybersecurity\\V1";
option optimize_for = SPEED;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

// ---------------------------
// Общие перечисления
// ---------------------------

enum Status {
  STATUS_UNSPECIFIED = 0;
  STATUS_DRAFT = 1;
  STATUS_ACTIVE = 2;
  STATUS_IN_REVIEW = 3;
  STATUS_DEPRECATED = 4;
  STATUS_OPEN = 5;
  STATUS_CLOSED = 6;
  STATUS_ACCEPTED = 7;
  STATUS_MITIGATED = 8;
}

enum Severity {
  SEVERITY_UNSPECIFIED = 0;
  SEVERITY_LOW = 1;
  SEVERITY_MEDIUM = 2;
  SEVERITY_HIGH = 3;
  SEVERITY_CRITICAL = 4;
}

enum ControlType {
  CONTROL_TYPE_UNSPECIFIED = 0;
  CONTROL_TYPE_PREVENTIVE = 1;
  CONTROL_TYPE_DETECTIVE = 2;
  CONTROL_TYPE_CORRECTIVE = 3;
  CONTROL_TYPE_DETERRENT = 4;
  CONTROL_TYPE_COMPENSATING = 5;
}

enum TestResult {
  TEST_RESULT_UNSPECIFIED = 0;
  TEST_RESULT_PASS = 1;
  TEST_RESULT_FAIL = 2;
  TEST_RESULT_PARTIAL = 3;
  TEST_RESULT_N_A = 4;
}

enum RiskRating {
  RISK_RATING_UNSPECIFIED = 0;
  RISK_RATING_NEGLIGIBLE = 1;
  RISK_RATING_LOW = 2;
  RISK_RATING_MODERATE = 3;
  RISK_RATING_SIGNIFICANT = 4;
  RISK_RATING_SEVERE = 5;
}

enum MaturityLevel {
  ML_UNSPECIFIED = 0;
  ML_INITIAL = 1;       // неформализовано
  ML_MANAGED = 2;       // управляемые практики
  ML_DEFINED = 3;       // стандартизировано
  ML_QUANTITATIVE = 4;  // метрики и контроль
  ML_OPTIMIZING = 5;    // непрерывное улучшение
}

enum EvidenceType {
  EVIDENCE_TYPE_UNSPECIFIED = 0;
  EVIDENCE_TYPE_LOG = 1;
  EVIDENCE_TYPE_SCREENSHOT = 2;
  EVIDENCE_TYPE_REPORT = 3;
  EVIDENCE_TYPE_CONFIG = 4;
  EVIDENCE_TYPE_POLICY = 5;
  EVIDENCE_TYPE_TEST_RESULT = 6;
  EVIDENCE_TYPE_BINARY = 7;
  EVIDENCE_TYPE_OTHER = 99;
}

// ---------------------------
// Общие структуры
// ---------------------------

message ResourceMeta {
  string id = 1;                              // UUID/ULID
  string tenant_id = 2;                       // для многоарендности
  string version = 3;                         // семантическая версия ресурса
  google.protobuf.Timestamp created_at = 4;
  string created_by = 5;
  google.protobuf.Timestamp updated_at = 6;
  string updated_by = 7;
  map<string, string> labels = 8;             // для поиска и RLS-фильтров
  map<string, string> annotations = 9;        // произвольные пометки
  string etag = 10;                           // оптимистичная блокировка
  bool deleted = 11;                          // мягкое удаление (retention)
  reserved 12 to 15;                          // на будущее
}

message ExternalRef {
  string system = 1;  // "ISO27001", "SOC2", "CIS", "NIST80053", "PCI-DSS"
  string id = 2;      // идентификатор в системе источника (например "A.12.3.1")
  string url = 3;     // ссылка на первоисточник
  string comment = 4; // пояснение/контекст
}

message Signature {
  string algorithm = 1;     // "RS256", "Ed25519" и т.д.
  string key_id = 2;        // идентификатор ключа
  bytes signature = 3;      // подпись
  string cert_pem = 4;      // опционально: цепочка сертификатов
}

// ---------------------------
// Модель фреймворка и контролей
// ---------------------------

message Requirement {
  string id = 1;                 // уникальный ID требования в рамках фреймворка
  string text = 2;               // формулировка
  string rationale = 3;          // обоснование
  repeated ExternalRef refs = 4; // ссылки на стандарты/источники
}

message TestProcedure {
  string id = 1;                              // ID сценария проверки
  string summary = 2;                         // краткое описание
  string command = 3;                         // команда/псевдокод/шаги
  google.protobuf.Duration expected_duration = 4;
  map<string, string> inputs = 5;             // параметры теста
  TestResult expected_result = 6;             // ожидаемый результат
}

message Mapping {
  string framework_key = 1;                   // к какому фреймворку относится маппинг
  string control_id = 2;                      // ID соответствующего контрола в том фреймворке
  double confidence = 3;                      // степень уверенности сопоставления [0..1]
  repeated ExternalRef refs = 4;              // первоисточники/обоснования
}

message Control {
  string id = 1;                              // уникальный ID в рамках фреймворка
  string title = 2;
  string description = 3;
  ControlType type = 4;
  string family = 5;                          // семейство/домен
  string category = 6;                        // категория/поддомен
  RiskRating inherent_risk = 7;               // исходный риск
  RiskRating residual_risk = 8;               // остаточный риск
  repeated Mapping mappings = 9;              // кросс-мэппинги на другие фреймворки
  repeated TestProcedure test_procedures = 10;
  repeated string requirement_ids = 11;       // требования, которые покрывает контроль
  MaturityLevel maturity_target = 12;         // целевой уровень зрелости
  map<string, string> parameters = 13;        // параметризация (например, RPO=1h)
  bool automated = 14;                        // автоматизируемый/ручной
  map<string, string> tags = 15;              // гибкое тегирование
}

message ComplianceFramework {
  ResourceMeta meta = 1;
  string key = 2;                              // короткий ключ, например "ISO27001_2022"
  string title = 3;
  string description = 4;
  string version = 5;                          // версия фреймворка
  string publisher = 6;                        // издатель/орган
  repeated ExternalRef external_refs = 7;
  repeated Control controls = 8;
  repeated Requirement requirements = 9;
  repeated string tags = 10;
  Status status = 11;
  reserved 12 to 15;
}

// ---------------------------
// Оценки, находки и доказательства
// ---------------------------

message Scope {
  string organization = 1;             // юр лицо/подразделение
  string system = 2;                   // система/продукт
  string environment = 3;              // dev/staging/prod
  string data_classification = 4;      // PII/PHI/PCI и т.д.
  repeated string asset_ids = 5;       // инвентарные ID
}

message Evidence {
  string id = 1;
  EvidenceType type = 2;
  string uri = 3;                      // где хранится артефакт (s3://..., gs://..., https://...)
  string content_type = 4;             // MIME
  uint64 size_bytes = 5;
  string sha256 = 6;                   // контрольная сумма
  google.protobuf.Timestamp collected_at = 7;
  string collected_by = 8;             // субъект/сервис
  Signature signature = 9;             // цифровая подпись (если есть)
  map<string, string> attributes = 10; // произвольные метаданные (сканер, версия, и т.п.)
  bytes preview = 11;                  // небольшой предпросмотр/фрагмент
  reserved 12 to 19;
}

message Finding {
  string id = 1;
  string title = 2;
  string description = 3;
  string control_id = 4;
  string requirement_id = 5;
  Severity severity = 6;
  Status status = 7;
  double likelihood = 8;               // 0..1
  double impact = 9;                   // 0..1
  double risk_score = 10;              // произв. метрика риска
  string cvss_vector = 11;             // если применимо
  google.protobuf.Timestamp detected_at = 12;
  google.protobuf.Timestamp due_at = 13;
  repeated string owners = 14;         // ответственные
  repeated Evidence evidence = 15;
  string remediation = 16;             // план устранения
  repeated ExternalRef refs = 17;      // ссылки на нормы/источники
  map<string, string> tags = 18;
  reserved 19 to 25;
}

message ComplianceAssessment {
  ResourceMeta meta = 1;
  string framework_key = 2;                  // по какому фреймворку оценка
  string scope_id = 3;                       // внешний ID области
  Scope scope = 4;
  google.protobuf.Timestamp started_at = 5;
  google.protobuf.Timestamp completed_at = 6;
  string assessor = 7;                       // пользователь/организация/аудитор
  Status status = 8;
  double score = 9;                          // интегральная оценка соответствия
  repeated Finding findings = 10;
  repeated Evidence evidence = 11;
  repeated string tags = 12;
  reserved 13 to 19;
}

// ---------------------------
// Запросы/ответы и пагинация
// ---------------------------

message PageRequest {
  int32 page_size = 1;               // до 1000
  string page_token = 2;             // выдается в ответе
  string order_by = 3;               // "created_at desc", "severity asc"
  map<string, string> filter = 4;    // ключевые фильтры (tenant_id, framework_key, status и т.п.)
}

message PageResponse {
  string next_page_token = 1;
  int32 total_size = 2;              // опционально, дорого считать
}

message GetRequest {
  string id = 1;
  string tenant_id = 2;
}

message ListFrameworksRequest {
  PageRequest page = 1;
}

message ListFrameworksResponse {
  repeated ComplianceFramework items = 1;
  PageResponse page = 2;
}

message UpsertControlRequest {
  string framework_key = 1;
  Control control = 2;
}

message ListAssessmentsRequest {
  PageRequest page = 1;
  string framework_key = 2;
}

message ListAssessmentsResponse {
  repeated ComplianceAssessment items = 1;
  PageResponse page = 2;
}

message AddFindingRequest {
  string assessment_id = 1;
  Finding finding = 2;
}

message AttachEvidenceRequest {
  string assessment_id = 1;
  Evidence evidence = 2;
}

message CloseAssessmentRequest {
  string assessment_id = 1;
}

message ExportAssessmentReportRequest {
  string assessment_id = 1;
  // формат: "pdf", "json", "csv" (реализация на стороне сервиса)
  string format = 2;
}

message ExportAssessmentReportResponse {
  // для бинарных форматов можно вернуть ссылку/байты по договоренности
  string uri = 1;     // ссылка на сформированный отчет
}

// ---------------------------
// gRPC-сервис комплаенса
// ---------------------------

service ComplianceService {
  // Фреймворки
  rpc CreateFramework(ComplianceFramework) returns (ComplianceFramework);
  rpc GetFramework(GetRequest) returns (ComplianceFramework);
  rpc ListFrameworks(ListFrameworksRequest) returns (ListFrameworksResponse);

  // Контроли
  rpc UpsertControl(UpsertControlRequest) returns (Control);

  // Оценки
  rpc CreateAssessment(ComplianceAssessment) returns (ComplianceAssessment);
  rpc GetAssessment(GetRequest) returns (ComplianceAssessment);
  rpc ListAssessments(ListAssessmentsRequest) returns (ListAssessmentsResponse);
  rpc AddFinding(AddFindingRequest) returns (Finding);
  rpc AttachEvidence(AttachEvidenceRequest) returns (Evidence);
  rpc CloseAssessment(CloseAssessmentRequest) returns (ComplianceAssessment);

  // Отчетность
  rpc ExportAssessmentReport(ExportAssessmentReportRequest) returns (ExportAssessmentReportResponse);
}
