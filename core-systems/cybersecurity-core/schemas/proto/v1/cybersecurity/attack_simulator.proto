syntax = "proto3";

package aethernova.cybersecurity.v1;

option go_package        = "github.com/aethernova/api/gen/go/aethernova/cybersecurity/v1;cybersecurityv1";
option java_multiple_files = true;
option java_package      = "ai.aethernova.cybersecurity.v1";
option csharp_namespace  = "Aethernova.Cybersecurity.V1";
option php_namespace     = "Aethernova\\Cybersecurity\\V1";
option ruby_package      = "Aethernova::Cybersecurity::V1";

// Well-known types
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";

// ----------------------------------------------------------------------------
// ENUMS
// ----------------------------------------------------------------------------

enum Status {
  STATUS_UNSPECIFIED = 0;
  STATUS_SUCCESS     = 1;
  STATUS_ERROR       = 2;
  STATUS_SKIPPED     = 3;
}

enum ActionType {
  ACTION_TYPE_UNSPECIFIED = 0;
  CREATE_DIR              = 1;
  CREATE_FILE             = 2;
  APPEND_FILE             = 3;
  DELETE_PATH             = 4;
  LIST_DIR                = 5;
  SLEEP                   = 6;
  GENERATE_RANDOM         = 7;
  COMPUTE_HASH            = 8;
  COMPRESS_DIR            = 9;
  SIMULATE_NETWORK        = 10;
  READ_FILE               = 11;

  // Reserve space for future actions to avoid renumbering.
  // reserved 12 to 49;
}

// ----------------------------------------------------------------------------
// CORE MODELS
// ----------------------------------------------------------------------------

message Step {
  // Stable ID within scenario (unique).
  string id = 1;

  // Human-readable label.
  string name = 2;

  // Action verb to execute.
  ActionType action = 3;

  // Free-form parameters for action (validated на стороне раннера).
  google.protobuf.Struct params = 4;

  // Per-step timeout; if unset, runner default applies.
  google.protobuf.Duration timeout = 5;

  // Continue scenario when step fails.
  bool continue_on_error = 6;

  // Reserved for future: retry policy, tags, correlation, etc.
  reserved 7 to 15;
}

message Scenario {
  string name = 1;
  string version = 2;

  repeated Step steps = 3;

  // Optional deterministic seed; presence matters for pipelines.
  google.protobuf.Int64Value seed = 4;

  // Max concurrent steps (>=1); 1 => sequential.
  int32 concurrency = 5;

  // Runner environment variables or context (non-sensitive).
  map<string, string> environment = 6;

  reserved 7 to 15;
}

// Result of a single step execution.
message StepResult {
  string id = 1;
  string name = 2;
  ActionType action = 3;

  Status status = 4;

  google.protobuf.Timestamp started  = 5;
  google.protobuf.Timestamp finished = 6;

  // Wall time in milliseconds.
  int64 duration_ms = 7;

  // Action-specific output (safe for logging).
  google.protobuf.Struct output = 8;

  // Truncated error text or diagnostic; empty if success.
  string error = 9;

  reserved 10 to 19;
}

// Lightweight description of scenario in the report.
message ScenarioMeta {
  string name = 1;
  string version = 2;
  repeated string steps = 3; // step IDs
  google.protobuf.Int64Value seed = 4;
  int32 concurrency = 5;
  repeated string environment_keys = 6;
}

// Host/runtime info snapshot (non-sensitive).
message SystemInfo {
  string platform       = 1; // e.g. "Linux-6.8.0-...-x86_64"
  string runtime        = 2; // e.g. "python"
  string runtime_version= 3; // e.g. "3.11.8"
  reserved 4 to 9;
}

// Arbitrary report meta attached by runner.
message ReportMeta {
  string scenario_path    = 1; // absolute or repo-relative; may be empty
  string scenario_sha256  = 2; // hex SHA-256 of scenario file
  reserved 3 to 9;
}

message Timing {
  google.protobuf.Timestamp started  = 1;
  google.protobuf.Timestamp finished = 2;
  int64 duration_ms = 3;
  reserved 4 to 9;
}

message Stats {
  int32 total   = 1;
  int32 success = 2;
  int32 error   = 3;
  reserved 4 to 9;
}

// Full execution report (single run).
message Report {
  // Schema identifier for downstream processors.
  string schema = 1; // e.g. "aethernova.cybersecurity.attack_simulator.report/1.0"

  google.protobuf.Timestamp generated_at = 2;

  ScenarioMeta scenario = 3;
  SystemInfo   system   = 4;
  ReportMeta   meta     = 5;
  Timing       timing   = 6;

  repeated StepResult results = 7;
  Stats               stats   = 8;

  // Optional top-level error if run failed early.
  string error = 9;

  // Extra fields (experimental extensions).
  google.protobuf.Struct extensions = 10;

  reserved 11 to 19;
}

// ----------------------------------------------------------------------------
// VALIDATION & CONTROL-PLANE
// ----------------------------------------------------------------------------

// Validation issues returned by ValidateScenario.
message ValidationIssue {
  enum Severity {
    SEVERITY_UNSPECIFIED = 0;
    SEVERITY_INFO        = 1;
    SEVERITY_WARNING     = 2;
    SEVERITY_ERROR       = 3;
  }
  Severity severity = 1;
  string   code     = 2; // e.g. "DUPLICATE_STEP_ID"
  string   message  = 3; // human-readable
  string   step_id  = 4; // optional reference
  reserved 5 to 9;
}

message ValidateResponse {
  // True if no issues with severity ERROR.
  bool valid = 1;
  repeated ValidationIssue issues = 2;
}

message RunOptions {
  // Do not execute actions; only plan/validate and emit events.
  bool dry_run = 1;

  // Logical sandbox label/path (semantics определяет раннер).
  string sandbox = 2;

  // Upper bound for total run time; 0 => unlimited.
  google.protobuf.Duration max_duration = 3;

  // Structured flags (e.g., "strict": true).
  google.protobuf.Struct flags = 4;

  reserved 5 to 9;
}

// Unary run returns the final report when finished or failed.
message RunRequest {
  Scenario    scenario = 1;
  RunOptions  options  = 2;
}

message RunResponse {
  Status status = 1;
  Report report = 2;
  reserved 3 to 9;
}

// Streamed events for real-time UIs/pipelines.
message StepStarted {
  string step_id = 1;
  string name    = 2;
  ActionType action = 3;
  google.protobuf.Timestamp ts = 4;
}

message StepFinished {
  StepResult result = 1;
}

message LogEvent {
  enum Level {
    LEVEL_UNSPECIFIED = 0;
    LEVEL_INFO  = 1;
    LEVEL_WARN  = 2;
    LEVEL_ERROR = 3;
  }
  Level level = 1;
  string event = 2; // machine-oriented key
  google.protobuf.Struct fields = 3; // kv payload
  google.protobuf.Timestamp ts = 4;
}

// Union of streamed signal types.
message StepEvent {
  oneof kind {
    StepStarted started  = 1;
    StepFinished finished= 2;
    LogEvent     log     = 3;
  }
}

// ----------------------------------------------------------------------------
// SERVICE
// ----------------------------------------------------------------------------

service AttackSimulator {
  // Syntactic/semantic validation without executing scenario.
  rpc ValidateScenario(Scenario) returns (ValidateResponse);

  // Execute scenario and return the final report (blocking unary).
  rpc Run(RunRequest) returns (RunResponse);

  // Execute and stream lifecycle/log events as they occur.
  rpc StreamRun(RunRequest) returns (stream StepEvent);
}
