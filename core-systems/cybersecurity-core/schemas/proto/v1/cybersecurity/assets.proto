// SPDX-License-Identifier: Apache-2.0
// Copyright (c) 2025 Aethernova
// File: cybersecurity-core/schemas/proto/v1/cybersecurity/assets.proto

syntax = "proto3";

package cybersecurity.v1;

// ===== Language options (multi-language SDKs) =====
option go_package        = "github.com/aethernova/cybersecurity-core/gen/go/cybersecurity/v1;cybersecurityv1";
option java_multiple_files = true;
option java_package      = "org.aethernova.cybersecurity.v1";
option java_outer_classname = "AssetsProto";
option csharp_namespace  = "Aethernova.Cybersecurity.V1";
option php_namespace     = "Aethernova\\Cybersecurity\\V1";
option ruby_package      = "Aethernova::Cybersecurity::V1";
option optimize_for      = SPEED;

import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";

// ============================================================================
// Core domain model
// ============================================================================

/*
 * Asset — учётная запись любого цифрового или физического актива в контуре безопасности.
 * Ресурсная модель (name) следует AIP-паттерну: projects/{project}/locations/{location}/assets/{asset_id}
 */
message Asset {
  // Полное ресурсное имя (immutable после создания).
  string name = 1;

  // Глобальный уникальный идентификатор (ULID/UUID). Дублирует идентификацию для кросс-системной интеграции.
  string uid = 2;

  AssetType    type         = 3;
  AssetStatus  status       = 4;

  // Человекочитаемое имя и описание.
  string display_name = 5;
  string description  = 6;

  Environment environment = 7;
  Criticality criticality = 8;
  DataClass   data_class  = 9;

  // Операционные метаданные.
  map<string, string> labels      = 10; // для поиска и политик
  map<string, string> annotations = 11; // произвольные расплывчатые данные

  // Владелец/ответственный.
  Owner owner = 12;

  // Пользовательские теги.
  repeated Tag tags = 13;

  // Топология/расположение.
  Location  location  = 14;

  // Жизненный цикл актива.
  Lifecycle lifecycle = 15;

  // Сводная риск-модель.
  Risk risk = 16;

  // Применённые контроли и их состояние.
  repeated Control controls = 17;

  // Находки/инциденты/уязвимости, связанные с активом.
  repeated Finding findings = 18;

  // Ссылки на внешние источники/артефакты (документация, CMDB, тикеты).
  repeated Link external_refs = 25;

  // Бизнес-метаданные.
  string cost_center   = 26;
  string business_unit = 27;

  // Временные метки аудита.
  google.protobuf.Timestamp create_time = 20;
  google.protobuf.Timestamp update_time = 21;
  google.protobuf.Timestamp delete_time = 22;

  // Оптимистическая блокировка (меняется сервером на каждом апдейте).
  string etag = 23;

  // Источник происхождения (ingestor/канал/коннектор).
  string origin = 24;

  // Альтернативные идентификаторы (внешние PK/числовые id/инвентарные номера).
  oneof alt_id {
    uint64 numeric_id = 31;
    string external_id = 32;
    string inventory_id = 33;
  }

  // Резерв для обратной совместимости (не использовать повторно эти номера/имена).
  reserved 28, 29, 30;
  reserved "legacy_field1", "legacy_field2";
}

// ------------------- Supporting value objects -------------------

message Owner {
  string user_id = 1;   // корпоративный идентификатор
  string team    = 2;   // команда/подразделение
  string email   = 3;   // контакт
}

message Tag {
  string key   = 1;
  string value = 2;
}

message Link {
  string rel  = 1; // назначение (doc, runbook, cmdb, ticket, repo, sbom, policy)
  string href = 2; // абсолютный URL/URN
}

message Location {
  // Облако/провайдер/регион/аккаунт.
  string cloud      = 1; // aws|gcp|azure|onprem|edge|other
  string region     = 2; // eu-north-1, etc.
  string account_id = 3; // номер аккаунта/подписки/проект-id

  // Сетка/кластер/неймспейс/узел.
  string vpc_id     = 4;
  string subnet_id  = 5;
  string cluster    = 6;
  string namespace  = 7;
  string node       = 8;

  // Адресация/идентификаторы.
  string host       = 9;
  string ip         = 10;
  string uri        = 11;
}

message Lifecycle {
  LifecyclePhase phase       = 1;
  string         version     = 2; // релиз/билд
  google.protobuf.Timestamp start_time = 3;
  google.protobuf.Timestamp end_time   = 4;
}

message Risk {
  // Итоговый нормализованный скор 0..100 (или по внутренней шкале).
  double score = 1;

  Severity severity = 2; // INFO..CRITICAL

  // Методика подсчёта (cvss3.1/cvss4.0/nist800-30/custom).
  string method = 3;

  // Факторы риска (атакуемость, экспозиция, ценность и т.д.).
  repeated RiskFactor factors = 4;
}

message RiskFactor {
  string key    = 1;   // например: "exposure", "attack_surface", "data_sensitivity"
  string value  = 2;   // произвольное значение/категория
  double weight = 3;   // вклад фактора 0..1
}

message Finding {
  string  id          = 1;  // уникальный ID нахождения/уязвимости/инцидента
  string  title       = 2;
  string  description = 3;

  Severity      severity   = 4;
  FindingStatus status     = 5;

  string source = 6;  // сканер/система: "grype", "trivy", "guardduty", "siem", ...
  string cve    = 7;  // CVE-номер (если применимо)
  string cwe    = 8;  // CWE-категория (если применимо)
  string url    = 9;  // ссылка на отчёт/детали

  google.protobuf.Timestamp detected_time = 10;
  google.protobuf.Timestamp resolved_time = 11;

  // Привязка к контролю/политике (если находит нарушение)
  string control_ref = 12;
}

message Control {
  string id         = 1; // уникальный идентификатор контроля в каталоге
  string framework  = 2; // NIST800-53/ISO27001/CIS/AISec/Custom
  string control_id = 3; // например: CIS-1.1, AC-2, PS-08
  ComplianceStatus status = 4;
  string evidence_url = 5; // ссылка на артефакты/отчёты/аудит
}

// ------------------- Enumerations -------------------

enum AssetType {
  ASSET_TYPE_UNSPECIFIED = 0;
  ASSET_TYPE_SERVICE     = 1;
  ASSET_TYPE_DATABASE    = 2;
  ASSET_TYPE_QUEUE       = 3;
  ASSET_TYPE_TOPIC       = 4;
  ASSET_TYPE_STORAGE     = 5;  // bucket/blob/fs
  ASSET_TYPE_VM          = 6;
  ASSET_TYPE_CONTAINER   = 7;
  ASSET_TYPE_CLUSTER     = 8;
  ASSET_TYPE_SECRET      = 9;
  ASSET_TYPE_CERTIFICATE = 10;
  ASSET_TYPE_DOMAIN      = 11;
  ASSET_TYPE_ENDPOINT    = 12; // API/URL
  ASSET_TYPE_MOBILE_APP  = 13;
  ASSET_TYPE_WEBSITE     = 14;
  ASSET_TYPE_FUNCTION    = 15; // FaaS/Lambda
  ASSET_TYPE_DEVICE      = 16; // IoT/OT
}

enum AssetStatus {
  ASSET_STATUS_UNSPECIFIED = 0;
  ASSET_STATUS_ACTIVE      = 1;
  ASSET_STATUS_INACTIVE    = 2;
  ASSET_STATUS_DEPRECATED  = 3;
  ASSET_STATUS_DISPOSED    = 4;
}

enum Criticality {
  CRITICALITY_UNSPECIFIED = 0;
  CRITICALITY_LOW         = 1;
  CRITICALITY_MEDIUM      = 2;
  CRITICALITY_HIGH        = 3;
  CRITICALITY_CRITICAL    = 4;
}

enum DataClass {
  DATA_CLASS_UNSPECIFIED = 0;
  DATA_CLASS_PUBLIC      = 1;
  DATA_CLASS_INTERNAL    = 2;
  DATA_CLASS_CONFIDENTIAL= 3;
  DATA_CLASS_RESTRICTED  = 4;
  DATA_CLASS_REGULATED   = 5; // PII/PCI/HIPAA и т.п.
}

enum Environment {
  ENVIRONMENT_UNSPECIFIED = 0;
  ENVIRONMENT_DEV         = 1;
  ENVIRONMENT_TEST        = 2;
  ENVIRONMENT_STAGE       = 3;
  ENVIRONMENT_PROD        = 4;
  ENVIRONMENT_DR          = 5;
}

enum Severity {
  SEVERITY_UNSPECIFIED = 0;
  SEVERITY_INFO        = 1;
  SEVERITY_LOW         = 2;
  SEVERITY_MEDIUM      = 3;
  SEVERITY_HIGH        = 4;
  SEVERITY_CRITICAL    = 5;
}

enum FindingStatus {
  FINDING_STATUS_UNSPECIFIED = 0;
  FINDING_STATUS_OPEN        = 1;
  FINDING_STATUS_ACKNOWLEDGED= 2;
  FINDING_STATUS_SUPPRESSED  = 3;
  FINDING_STATUS_RESOLVED    = 4;
  FINDING_STATUS_FALSE_POSITIVE = 5;
}

enum ComplianceStatus {
  COMPLIANCE_STATUS_UNSPECIFIED = 0;
  COMPLIANCE_STATUS_PASS        = 1;
  COMPLIANCE_STATUS_FAIL        = 2;
  COMPLIANCE_STATUS_PARTIAL     = 3;
  COMPLIANCE_STATUS_NOT_APPLICABLE = 4;
}

// ============================================================================
// Filtering & pagination
// ============================================================================

message AssetFilter {
  // Простые фильтры; при необходимости сервер может поддерживать выражения.
  repeated AssetType   types        = 1;
  repeated Environment environments = 2;
  repeated Severity    severities   = 3; // по связанным findings (минимальная)
  map<string, string>  labels       = 4; // точное совпадение
  string               query        = 5; // полнотекст/DSL (опционально)
}

// ============================================================================
// Events (для шины/стриминга)
// ============================================================================

enum ChangeType {
  CHANGE_TYPE_UNSPECIFIED = 0;
  CHANGE_TYPE_CREATED     = 1;
  CHANGE_TYPE_UPDATED     = 2;
  CHANGE_TYPE_DELETED     = 3;
}

message AssetChangeEvent {
  string name = 1;
  ChangeType change_type = 2;
  Asset before = 3; // может быть пустым для CREATE
  Asset after  = 4; // может быть пустым для DELETE
  google.protobuf.Timestamp event_time = 5;
  string trace_id = 6; // для корреляции в наблюдаемости
}

// ============================================================================
// RPC Service — Asset Registry
// ============================================================================

service AssetRegistry {
  // Создание нового актива. Если asset_id не задан — сервер генерирует.
  rpc CreateAsset(CreateAssetRequest) returns (Asset) {}

  // Получение актива по полному имени.
  rpc GetAsset(GetAssetRequest) returns (Asset) {}

  // Список активов с пагинацией и фильтрацией.
  rpc ListAssets(ListAssetsRequest) returns (ListAssetsResponse) {}

  // Частичное обновление с FieldMask и проверкой etag (если задан).
  rpc UpdateAsset(UpdateAssetRequest) returns (Asset) {}

  // Удаление (мягкое или жёсткое — на усмотрение сервера).
  rpc DeleteAsset(DeleteAssetRequest) returns (DeleteAssetResponse) {}

  // Пакетные операции.
  rpc BatchGetAssets(BatchGetAssetsRequest) returns (BatchGetAssetsResponse) {}
  rpc BulkUpsertAssets(BulkUpsertAssetsRequest) returns (BulkUpsertAssetsResponse) {}
}

// ------------------- Requests / Responses -------------------

message CreateAssetRequest {
  // Родительский контейнер (например, "projects/{project}/locations/{location}").
  string parent = 1;

  // Пользовательский идентификатор (формирует suffix в name).
  string asset_id = 2;

  // Обязательная запись актива (без name; сервер его составит).
  Asset asset = 3;
}

message GetAssetRequest {
  string name = 1;
}

message ListAssetsRequest {
  string parent = 1;
  int32  page_size = 2;
  string page_token = 3;
  AssetFilter filter = 4;
}

message ListAssetsResponse {
  repeated Asset assets = 1;
  string next_page_token = 2;
}

message UpdateAssetRequest {
  // Полная запись с заполненным name и (при наличии) etag.
  Asset asset = 1;

  // Маска обновляемых полей (например, "labels,description,owner").
  google.protobuf.FieldMask update_mask = 2;

  // Если true, создаёт ресурс при отсутствии (upsert).
  bool allow_missing = 3;
}

message DeleteAssetRequest {
  string name = 1;

  // Для оптимистической блокировки (если предоставлен).
  string etag = 2;

  // Жёсткое удаление (иначе — soft delete, если поддерживается).
  bool force = 3;
}

message DeleteAssetResponse {}

message BatchGetAssetsRequest {
  // Полные имена ресурсов.
  repeated string names = 1;
}

message BatchGetAssetsResponse {
  repeated Asset assets = 1;
}

message BulkUpsertAssetsRequest {
  // Ресурсы для массовой загрузки (name может быть пустым — тогда создаётся).
  repeated Asset assets = 1;
}

message BulkUpsertAssetsResponse {
  // Полные имена результирующих ресурсов (в порядке обработки).
  repeated string names = 1;
}
