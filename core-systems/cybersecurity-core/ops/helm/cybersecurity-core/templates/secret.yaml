# cybersecurity-core/ops/helm/cybersecurity-core/templates/secret.yaml
{{- /*
  Промышленный шаблон секрета.
  Особенности:
    - Условный рендер: secret.enabled=true и externalSecrets.enabled=false и не задан existingSecret
    - Имя: <fullname>-secret или .Values.secret.name
    - Тип: .Values.secret.type (по умолчанию Opaque)
    - immutable: управляется через .Values.secret.immutable
    - data: .Values.secret.data (значения проходят tpl и b64enc)
    - stringData: .Values.secret.stringData (tpl, без b64)
    - binaryData: .Values.secret.binaryData (как есть — уже base64)
    - Генерация значений: .Values.secret.generate (map key->length)
      На install — генерируются; на upgrade — переиспользуются из существующего секрета через lookup.
    - Аннотации/лейблы: объединены с chart labels, поддержка keep-политики.
*/ -}}
{{- if and .Values.secret.enabled (not .Values.externalSecrets.enabled) (not .Values.secret.existingSecret) }}

{{- $fullname := include "cybersecurity-core.fullname" . -}}
{{- $name := default (printf "%s-secret" $fullname) .Values.secret.name -}}
{{- $existing := (lookup "v1" "Secret" .Release.Namespace $name) -}}

{{- /* Сборка итогового набора data (b64) */ -}}
{{- $finalData := dict -}}
{{- if .Values.secret.data }}
  {{- range $k, $v := .Values.secret.data }}
    {{- /* tpl -> b64enc для data */ -}}
    {{- $_ := set $finalData $k (tpl $v $ | b64enc) -}}
  {{- end }}
{{- end }}

{{- /* Генерация случайных значений data c переиспользованием ранее созданных */ -}}
{{- if .Values.secret.generate }}
  {{- range $k, $length := .Values.secret.generate }}
    {{- $existingVal := "" -}}
    {{- if and $existing $existing.data (hasKey $existing.data $k) }}
      {{- $existingVal = (index $existing.data $k) -}}
    {{- end }}
    {{- if $existingVal }}
      {{- $_ := set $finalData $k $existingVal -}}
    {{- else }}
      {{- $_ := set $finalData $k ((randAlphaNum (int $length)) | b64enc) -}}
    {{- end }}
  {{- end }}
{{- end }}

apiVersion: v1
kind: Secret
metadata:
  name: {{ $name }}
  labels:
    {{- include "cybersecurity-core.labels" . | nindent 4 }}
    {{- with .Values.secret.labels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  annotations:
    {{- with .Values.secret.annotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
    {{- if .Values.secret.keep }}
    helm.sh/resource-policy: keep
    {{- end }}
type: {{ default "Opaque" .Values.secret.type | quote }}
{{- if hasKey .Values.secret "immutable" }}
immutable: {{ .Values.secret.immutable }}
{{- end }}

{{- if gt (len $finalData) 0 }}
data:
  {{- range $k, $v := $finalData }}
  {{ $k }}: {{ $v | quote }}
  {{- end }}
{{- end }}

{{- with .Values.secret.stringData }}
stringData:
  {{- /* tpl применяем к карте целиком */ -}}
  {{- tpl (toYaml .) $ | nindent 2 }}
{{- end }}

{{- with .Values.secret.binaryData }}
binaryData:
  {{- /* ожидается, что значения уже base64 и валидны для binaryData */ -}}
  {{- toYaml . | nindent 2 }}
{{- end }}

{{- end }}
