apiVersion: apps/v1
kind: Deployment
metadata:
  name: cybersecurity-core
  namespace: cybersecurity
  labels:
    app.kubernetes.io/name: cybersecurity-core
    app.kubernetes.io/instance: cybersecurity-core
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: cybersecurity-suite
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kustomize
  annotations:
    # Наблюдаемость (при отсутствии Service-аннотаций Prometheus может скрейпить по pod-аннотациям)
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
    # AppArmor: применяет профиль runtime/default к контейнеру "cybersecurity-core"
    container.apparmor.security.beta.kubernetes.io/cybersecurity-core: runtime/default
spec:
  replicas: 3
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: cybersecurity-core
      app.kubernetes.io/instance: cybersecurity-core
  template:
    metadata:
      labels:
        app.kubernetes.io/name: cybersecurity-core
        app.kubernetes.io/instance: cybersecurity-core
        app.kubernetes.io/component: backend
        app.kubernetes.io/part-of: cybersecurity-suite
        app.kubernetes.io/version: "1.0.0"
      annotations:
        # Маркер готовности для сервис-мешей/Ingress (если применяется)
        traffic.sidecar.istio.io/includeOutboundIPRanges: "*"
        # Пример аннотации для лог-агента (адаптируйте под свой стек)
        logging.aethernova.io/format: "json"
    spec:
      # Безопасность на уровне Pod
      hostNetwork: false
      hostPID: false
      hostIPC: false
      enableServiceLinks: false
      automountServiceAccountToken: false
      dnsPolicy: ClusterFirst
      terminationGracePeriodSeconds: 60
      priorityClassName: system-cluster-critical # при отсутствии класса замените или удалите
      imagePullSecrets:
        - name: regcred # при отсутствии секрета удалите строку
      securityContext:
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 2000
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: cybersecurity-core
                topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 50
              preference:
                matchExpressions:
                  - key: kubernetes.io/os
                    operator: In
                    values: ["linux"]
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: cybersecurity-core
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: cybersecurity-core
      containers:
        - name: cybersecurity-core
          image: ghcr.io/your-org/cybersecurity-core:1.0.0
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
            - name: metrics
              containerPort: 9090
          env:
            - name: APP_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          envFrom:
            - configMapRef:
                name: cybersecurity-core-config # создайте ConfigMap отдельно
              # optional: true # раскомментируйте, если конфиг не всегда есть
            - secretRef:
                name: cybersecurity-core-secrets # создайте Secret отдельно
              # optional: true
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: run
              mountPath: /var/run
            - name: cache
              mountPath: /var/cache/app
          readinessProbe:
            httpGet:
              path: /readyz
              port: http
            initialDelaySeconds: 5
            timeoutSeconds: 2
            periodSeconds: 5
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 15
            timeoutSeconds: 2
            periodSeconds: 10
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /healthz
              port: http
            failureThreshold: 30
            periodSeconds: 3
          resources:
            requests:
              cpu: "250m"
              memory: "256Mi"
            limits:
              cpu: "1000m"
              memory: "512Mi"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            privileged: false
            capabilities:
              drop: ["ALL"]
            seccompProfile:
              type: RuntimeDefault
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","sleep 10"] # даёт времени снять из балансировки
      volumes:
        - name: tmp
          emptyDir:
            medium: Memory
            sizeLimit: "128Mi"
        - name: run
          emptyDir: {}
        - name: cache
          emptyDir: {}
