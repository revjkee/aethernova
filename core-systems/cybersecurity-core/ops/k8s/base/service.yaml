apiVersion: v1
kind: Service
metadata:
  name: cybersecurity-core
  # namespace задается в overlay через kustomize (не указываем здесь)
  labels:
    app.kubernetes.io/name: cybersecurity-core
    app.kubernetes.io/instance: cybersecurity-core
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: cybersecurity-core
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kustomize
    # Дополнительные стандартные метки для аудита и маршрутизации
    tier: backend
    role: security-core
  annotations:
    # Prometheus autodiscovery (подходит для простого скрейпа без ServiceMonitor)
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"

    # Включение topology-aware hints (сокращает перекрестный трафик между зонами)
    service.kubernetes.io/topology-aware-hints: "auto"

    # Примеры cloud/LB аннотаций оставлены закомментированными для overlay:
    # AWS NLB internal:
    # service.beta.kubernetes.io/aws-load-balancer-type: "nlb-ip"
    # service.beta.kubernetes.io/aws-load-balancer-internal: "true"
    # GCP ILB internal:
    # cloud.google.com/load-balancer-type: "Internal"
spec:
  type: ClusterIP
  # Dual-stack политика (если кластер поддерживает IPv6)
  ipFamilyPolicy: PreferDualStack
  ipFamilies:
    - IPv4
    - IPv6
  # Внутрикластерная маршрутизация
  internalTrafficPolicy: Cluster
  # Сессии по умолчанию не залипают
  sessionAffinity: None
  # Селектор должен соответствовать меткам Pod'ов/Deployment'а
  selector:
    app.kubernetes.io/name: cybersecurity-core
    app.kubernetes.io/instance: cybersecurity-core
  ports:
    - name: http
      port: 80
      targetPort: 8080
      protocol: TCP
      appProtocol: http
    - name: https
      port: 443
      targetPort: 8443
      protocol: TCP
      appProtocol: https
    - name: grpc
      port: 50051
      targetPort: 50051
      protocol: TCP
      appProtocol: grpc
    - name: metrics
      port: 9090
      targetPort: 9090
      protocol: TCP
      appProtocol: http
---
apiVersion: v1
kind: Service
metadata:
  name: cybersecurity-core-headless
  labels:
    app.kubernetes.io/name: cybersecurity-core
    app.kubernetes.io/instance: cybersecurity-core
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: cybersecurity-core
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kustomize
    tier: backend
    role: security-core
  annotations:
    # Headless сервис часто используют стейфул-компоненты и sidecar'ы,
    # publishNotReadyAddresses: true позволяет DNS-резолвить поды до readiness,
    # что удобно для кластерного бутстрапа. Включено ниже в spec.
    service.kubernetes.io/topology-aware-hints: "auto"
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: cybersecurity-core
    app.kubernetes.io/instance: cybersecurity-core
  ports:
    - name: peer
      port: 7000
      targetPort: 7000
      protocol: TCP
      appProtocol: tcp
    - name: internal-metrics
      port: 9100
      targetPort: 9100
      protocol: TCP
      appProtocol: http
