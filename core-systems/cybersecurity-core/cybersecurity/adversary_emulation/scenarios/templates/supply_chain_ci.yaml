# File: cybersecurity-core/cybersecurity/adversary_emulation/scenarios/templates/supply_chain_ci.yaml
# Purpose: Industrial-grade adversary emulation scenario template for CI supply-chain security.
# Scope: GitHub Actions / GitLab CI / Jenkins. Safety-first (harmless mode by default).
# Standards & references (full links duplicated here for operator convenience):
# - MITRE ATT&CK (enterprise): https://attack.mitre.org/techniques/enterprise/
#   * Valid Accounts (T1078):        https://attack.mitre.org/techniques/T1078/
#   * Subvert Trust Controls (T1553) and Code Signing (T1553.002): https://attack.mitre.org/techniques/T1553/002/
#   * Data Manipulation (T1565.*):   https://attack.mitre.org/techniques/T1565/001/  https://attack.mitre.org/techniques/T1565/002/  https://attack.mitre.org/techniques/T1565/003/
#   * Escape to Host / Container escape (T1611): https://attack.mitre.org/techniques/T1611/
#   * Compromise Software Dependencies & Dev Tools (T1195.001): https://attack.mitre.org/techniques/T1195/001/
# - NIST SSDF SP 800-218 v1.1: https://nvlpubs.nist.gov/nistpubs/specialpublications/nist.sp.800-218.pdf
# - SLSA v1.0 (Build L1–L3): https://slsa.dev/spec/v1.0/levels  (requirements: https://slsa.dev/spec/v1.0/requirements)
# - OWASP Top 10 CI/CD (incl. C02: Poisoned Pipeline Execution): https://owasp.org/www-project-top-10-ci-cd-security-risks/
# - GitHub Actions hardening (pin-to-SHA, least-privilege): https://docs.github.com/actions/security-guides/security-hardening-for-github-actions
# - GitLab Runner security hardening: https://docs.gitlab.com/runner/security/
# - Jenkins “Securing Jenkins”: https://www.jenkins.io/doc/book/security/securing-jenkins/
# - SBOM: CycloneDX https://cyclonedx.org/  | SPDX https://spdx.dev/
# - SCA / scanners: OWASP Dependency-Check https://owasp.org/www-project-dependency-check/ | Trivy https://aquasecurity.github.io/trivy/ | Syft/Grype https://github.com/anchore/syft https://github.com/anchore/grype
# - Sigstore Cosign (provenance/attestations): https://docs.sigstore.dev/cosign/overview/
# Notes:
# - This template is SAFE-BY-DESIGN: uses dry-run, benign payloads, redaction, and no real exfiltration or privilege abuse.
# - All destructive steps are disabled by default and guarded by safety gates (requires explicit operator approval).

schema_version: "1.0"

metadata:
  id: "supply_chain_ci_v1"
  name: "Supply-Chain CI Adversary Emulation (Industrial Template)"
  version: "2025-09-04"
  owner: "cybersecurity-core"
  severity_default: "high"
  description: >
    End-to-end, trackable adversary emulation scenario targeting CI/CD supply-chain risks:
    credentials abuse, dependency confusion, poisoned pipeline execution, runner escape,
    trust subversion (code signing/provenance), and artifact/release poisoning. Safe-mode enabled.

  compliance_alignment:
    nist_ssdf:
      reference: "NIST SP 800-218 v1.1"
      # High-level practice groups (PO, PS, PW, RV) are addressed across stages; see per-stage notes.
    slsa:
      build_track_levels_supported: ["L1", "L2", "L3"]
      notes: "Scenario validates presence/effectiveness of provenance, hosted/hardened build, and attestations."
    owasp_cicd_top10:
      includes: ["C02-Poisoned-Pipeline-Execution", "C03-Dependency-Chain-Abuse", "C07-Insufficient-Identity-Access"]

  tags: ["supply-chain", "ci", "devsecops", "mitre-attack", "nist-ssdf", "slsa", "owasp-cicd"]

controls:
  safety:
    dry_run: true
    redact_outputs: true
    forbid_network_exfil: true
    forbid_privilege_change: true
    require_operator_approval_for_destructive: true
    kill_switch_env: "AE_KILL_SWITCH"        # if set to "1" — scenario aborts immediately
  rate_limits:
    max_parallel_stages: 1
    max_actions_per_stage: 3

platform_matrix:
  github_actions:
    enabled: true
    requirements:
      - "Org/repo audit logs enabled"
      - "Enforce pin-to-SHA for actions, read-only default GITHUB_TOKEN"
  gitlab_ci:
    enabled: true
    requirements:
      - "Ephemeral, isolated runners (no privileged unless strictly required)"
      - "Audit events enabled; protected branches/tags for sensitive jobs"
  jenkins:
    enabled: true
    requirements:
      - "RBAC configured; builds run on agents, not controller"
      - "Credentials Binding + folder/job permissions enforced"

adversary_profile:
  goal: "Introduce or move a benign marker through the CI supply chain without detection, testing defenses & observability."
  sophistication: "moderate"
  constraints:
    - "No impact to production systems"
    - "No actual credentials or secrets are accessed"
    - "All artifacts marked 'TEST-ONLY' and quarantined"
  ttp_map:
    - technique: "Valid Accounts"
      id: "T1078"
    - technique: "Subvert Trust Controls: Code Signing"
      id: "T1553.002"
    - technique: "Compromise Software Dependencies & Development Tools"
      id: "T1195.001"
    - technique: "Data Manipulation (stored/transmitted/runtime)"
      ids: ["T1565.001","T1565.002","T1565.003"]
    - technique: "Escape to Host (container breakout)"
      id: "T1611"

environment:
  repo_under_test: "SET_ME"
  default_branch: "main"
  artifact_registry: "SET_ME"
  package_ecosystem: ["npm","pip","maven"]   # adjust as needed
  runner_policy:
    ephemeral_only: true
    container_privileged: false
    network_segmentation: true
  provenance:
    required_level: "SLSA-Build-L2"          # expect signed provenance from hosted platform
    attestation_tooling: ["cosign"]

telemetry_expectations:
  # What we expect to see if detections/observability are working
  github_actions:
    audit_log_events_expected:
      - "workflow_job.run"
      - "workflow_job.completed"
      - "action.pinned_to_sha.policy_enforced"
  gitlab_ci:
    audit_events_expected:
      - "job_started"
      - "job_finished"
      - "runner_registered/unregistered"
  jenkins:
    logs_expected:
      - "Job run started/finished"
      - "Credentials binding events (non-sensitive metadata only)"
  security_tools:
    sbom_generated: true
    sca_findings_channel: "security"
    container_scan_findings_channel: "security"

stages:
  - id: "stage_01_initial_access_cred_misuse"
    name: "Credential hygiene & misuse simulation"
    description: "Simulate misuse patterns without real creds; validate detections"
    mitre:
      technique: "Valid Accounts"
      id: "T1078"
    enabled: true
    safety_gate: "always"
    actions:
      - id: "ia-echo-token-redacted"
        kind: "script"
        platform: ["github_actions","gitlab_ci","jenkins"]
        benign: true
        script: |
          echo "Simulating token use (redacted)"; echo "${GITHUB_TOKEN:+PRESENT}" "${CI_JOB_TOKEN:+PRESENT}" "${JENKINS_URL:+PRESENT}"
        expected_observables:
          - "Audit log entry for job start/finish"
        success_criteria:
          - "No secrets printed in cleartext (redaction works)"
    detections:
      must_alert_if:
        - "Secrets printed to stdout"
        - "Token scope > least privilege"
    mitigations_check:
      - "Read-only default workflow token (GitHub)"
      - "Restricted runner scope (GitLab/Jenkins)"

  - id: "stage_02_ppe_poisoned_pipeline_execution"
    name: "Poisoned Pipeline Execution (safe)"
    description: "Test PPE controls via harmless PR/pipeline changes"
    owasp_cicd: "C02"
    mitre:
      related: ["T1565.*"]
    enabled: true
    actions:
      - id: "ppe-pr-safety-check"
        kind: "scm"
        platform: ["github_actions","gitlab_ci"]
        script: |
          # Create benign PR that attempts to run a modified workflow from a fork in a restricted context.
          # Expectation: 'pull_request_target' misuse is blocked; actions pinned to SHA enforced.
          echo "Creating benign PR marker: PPE-TEST"
        expected_observables:
          - "Policy prevents untrusted workflow changes from forks"
          - "Action pin-to-SHA policy log"
        success_criteria:
          - "Pipeline uses only allowlisted, SHA-pinned actions"
          - "No write-token on PR context"

  - id: "stage_03_dependency_confusion"
    name: "Dependency-chain abuse (safe marker)"
    description: "Validate defenses against dependency confusion/typosquatting with a private test scope"
    mitre:
      technique: "Compromise Software Dependencies & Dev Tools"
      id: "T1195.001"
    enabled: true
    preconditions:
      - "Use an internal scoped name (e.g., @org/test-only-pkg) and private registry sandbox"
    actions:
      - id: "dc-resolver-dryrun"
        kind: "build"
        platform: ["github_actions","gitlab_ci","jenkins"]
        script: |
          # Dry-run install to prove resolver rules (no external fetch in safe mode)
          echo "Dry-run package resolution with --offline/--no-remote if supported"
        expected_observables:
          - "No external registry hits in dry-run"
        success_criteria:
          - "Lockfiles & scoped registries enforced"
    mitigations_check:
      - "Scoped registries and explicit 'always-auth' (npm), index-url (pip), mirrors (maven)"
      - "Typosquat/blocklist policy present"

  - id: "stage_04_runner_escape_controls"
    name: "Runner/container escape controls validation"
    description: "Demonstrate that privileged containers/host mounts are disabled; no real escape"
    mitre:
      technique: "Escape to Host"
      id: "T1611"
    enabled: true
    actions:
      - id: "re-privilege-probe"
        kind: "container"
        platform: ["github_actions","gitlab_ci"]
        script: |
          # Attempt to detect privileged context (should be FALSE); try sensitive syscalls (mock).
          echo "is_privileged=false"
        expected_observables:
          - "Job denied if requests --privileged"
        success_criteria:
          - "No /var/run/docker.sock mounted"
          - "No host bind mounts"
    mitigations_check:
      - "Ephemeral, isolated runners; network segmentation; no privileged jobs by default"

  - id: "stage_05_trust_controls_signing_provenance"
    name: "Subvert Trust Controls / Code signing & provenance (safe)"
    mitre:
      technique: "Subvert Trust Controls: Code Signing"
      id: "T1553.002"
    slsa_expected_level: "Build-L2+"
    enabled: true
    actions:
      - id: "sig-attest-provenance"
        kind: "sign"
        platform: ["github_actions","gitlab_ci","jenkins"]
        script: |
          # Generate SBOM + provenance attestations (dry)
          echo "cosign attest --type slsaprovenance --predicate mock.json --dry-run"
          echo "syft dir:. -o cyclonedx-json > sbom.json (mock)"
          echo "grype . --only-fixed --fail-on high (mock)"
        expected_observables:
          - "Signed provenance present (simulated) and verified"
        success_criteria:
          - "Builds fail if provenance/attestation missing or invalid"
    mitigations_check:
      - "Enforce verify-on-consume policy for attestations"

  - id: "stage_06_artifact_release_poisoning"
    name: "Artifact/reg release poisoning defenses (safe)"
    description: "Ensure only verified, attested artifacts are published"
    enabled: true
    actions:
      - id: "publish-quarantine"
        kind: "release"
        platform: ["github_actions","gitlab_ci","jenkins"]
        script: |
          echo "Publish to QUARANTINE channel only; require attestation verify (mock)."
        success_criteria:
          - "Unsigned/unattested artifacts rejected"
          - "Quarantine → Promote only after policy checks"

detection_engineering:
  signals:
    - name: "Unpinned actions usage"
      platforms: ["github_actions"]
      severity: "high"
    - name: "Runner privilege escalation attempt"
      platforms: ["github_actions","gitlab_ci"]
      severity: "high"
    - name: "External registry resolution in protected builds"
      platforms: ["all"]
      severity: "medium"
    - name: "Missing/invalid SLSA provenance"
      platforms: ["all"]
      severity: "high"
  expected_data_sources:
    - "SCM audit logs"
    - "CI job logs / artifacts"
    - "Runner telemetry"
    - "Sigstore verification logs"
    - "SCA/SBOM scanner outputs"

metrics:
  kpis:
    - name: "Action pin-to-SHA coverage"
      target: ">= 99%"
    - name: "Ephemeral runner coverage"
      target: "100%"
    - name: "Provenance verification pass rate"
      target: "100%"
    - name: "Blocked untrusted workflow changes"
      target: "100%"
    - name: "Dependency resolution external calls in protected builds"
      target: "0"
  timing:
    expected_runtime_minutes: 8-15

reporting:
  outputs:
    - "summary.md"
    - "sbom.json (CycloneDX)"
    - "provenance.intoto.jsonl (mock)"
    - "logs/*.txt"
  redaction: "automatic"

cleanup:
  actions:
    - "Delete temporary branches/PRs"
    - "Purge quarantine artifacts"
    - "Invalidate ephemeral runners/agents"
  verification:
    - "No long-lived tokens or secrets created"
    - "No policy exceptions lingering"

operator_parameters:
  repo: ""
  registry: ""
  ci_platform: "github_actions|gitlab_ci|jenkins"
  destructive_override: false
  notes: ""

# End of template
