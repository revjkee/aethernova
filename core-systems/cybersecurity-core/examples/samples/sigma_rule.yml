# File: cybersecurity-core/examples/samples/sigma_rule.yml
# Purpose: Industrial-grade Sigma rule to detect suspicious PowerShell execution with obfuscation and encoded commands
# Spec:    SigmaHQ rule format (YAML)
# License: CC BY 4.0

title: Suspicious PowerShell With EncodedCommand, Obfuscation, And Download Cradles (Process Creation)
id: 8d1f7f5a-6f0a-4b6b-8c8b-7caa6a5a9c92
status: stable
description: >
  Detects potentially malicious PowerShell execution using -EncodedCommand/-enc,
  common obfuscation flags, and download/execute cradles (e.g., IEX, DownloadString,
  Invoke-WebRequest), which are frequently used in initial access and execution phases.
references:
  - https://attack.mitre.org/techniques/T1059/001/      # MITRE ATT&CK: PowerShell
  - https://attack.mitre.org/techniques/T1027/          # MITRE ATT&CK: Obfuscated/Compressed Files and Information
  - https://learn.microsoft.com/powershell/module/microsoft.powershell.core/about/about_PowerShell_exe#-encodedcommand  # PowerShell.exe -EncodedCommand
  - https://learn.microsoft.com/windows/security/threat-protection/auditing/event-4688  # Windows Security Event ID 4688 (process creation)
  - https://github.com/SigmaHQ/sigma                     # SigmaHQ (specification and converters)
author: Aethernova/NeuroCity Blue Team
date: 2025-09-04
modified: 2025-09-04
logsource:
  product: windows
  category: process_creation
  # This category maps to common backends (e.g., Windows Security 4688, Sysmon Event ID 1) via Sigma backends
  # without hard-coding a specific provider.
detection:
  selection_image:
    Image|endswith:
      - '\powershell.exe'
      - '\pwsh.exe'
    # Some EDRs normalize to OriginalFileName; keep both when available
    OriginalFileName|contains:
      - 'PowerShell'
  selection_encoded:
    CommandLine|contains:
      - ' -enc '
      - ' -Enc '
      - ' -encodedcommand'
      - ' -EncodedCommand'
  selection_obfus_flags:
    CommandLine|contains:
      - ' -nop'
      - ' -NoP'
      - ' -noni'
      - ' -NonI'
      - ' -w hidden'
      - ' -WindowStyle Hidden'
      - ' -ep bypass'
      - ' -ExecutionPolicy Bypass'
  selection_cradles:
    CommandLine|contains:
      - 'IEX '
      - 'Invoke-Expression'
      - 'FromBase64String'
      - 'DownloadString'
      - 'Invoke-WebRequest'
      - 'Start-BitsTransfer'
      - 'Net.WebClient'
      - 'New-Object System.Net.WebClient'
      - 'msxml2.xmlhttp'
      - 'System.Net.Http.HttpClient'
      - 'curl '
      - 'wget '
  selection_susp_paths:
    CommandLine|contains:
      - '\AppData\Local\Temp\'
      - '\Users\Public\'
      - '\Windows\Tasks\'
      - '\ProgramData\'
  # Optional: detect long base64 blobs inline; not all backends support regex; enabled where supported.
  selection_base64_like:
    CommandLine|re: '[A-Za-z0-9+/]{150,}={0,2}'
  condition: selection_image AND ( selection_encoded OR ( selection_obfus_flags AND ( selection_cradles OR selection_base64_like ) ) OR ( selection_cradles AND selection_susp_paths ) )
timeframe: 7d
fields:
  - UtcTime
  - Image
  - OriginalFileName
  - CommandLine
  - ParentImage
  - ParentCommandLine
  - User
  - IntegrityLevel
  - Hashes
falsepositives:
  - Administrative automation or deployment scripts that legitimately use PowerShell with encoded commands.
  - Security tools performing scripted response or inventory collection.
  - Software installers/updaters leveraging PowerShell for bootstrap.
level: high
tags:
  - attack.t1059.001
  - attack.execution
  - attack.t1027
  - attack.defense_evasion
  - attack.t1105   # Inference: potential staging for C2/ingress tool xfer when combined with network activity (backend-dependent)
