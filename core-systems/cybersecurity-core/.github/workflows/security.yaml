name: Security CI

on:
  push:
    branches: ["main", "develop", "release/**", "feature/**"]
  pull_request:
    branches: ["**"]
  schedule:
    - cron: "17 2 * * 1" # еженедельный прогон по понедельникам 02:17 UTC
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PYTHONUNBUFFERED: "1"

jobs:
  secrets-gitleaks:
    name: Secret Scanning (Gitleaks)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Gitleaks scan (repo)
        uses: gitleaks/gitleaks-action@v2
        with:
          config: ""
          verbose: "true"
          redaction: "true"
          report_format: "sarif"
          report_path: "gitleaks.sarif"
      - name: Upload SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif
      - name: Upload raw report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: gitleaks-report
          path: gitleaks.sarif

  sast-semgrep:
    name: SAST (Semgrep)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: "auto"
          generateSarif: "true"
          sarifFile: "semgrep.sarif"
          auditOn: "push"
      - name: Upload SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
      - name: Upload raw report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: semgrep-report
          path: semgrep.sarif

  python-bandit:
    name: Python SAST (Bandit)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      - name: Install Bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit
      - name: Run Bandit (SARIF)
        run: |
          bandit -r . -f sarif -o bandit.sarif || true
      - name: Upload SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit.sarif
      - name: Upload raw report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-report
          path: bandit.sarif

  dep-audit:
    name: Dependency Audit (pip-audit)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
      - name: Export requirements (Poetry if present)
        shell: bash
        run: |
          set -e
          if [ -f "poetry.lock" ] || [ -f "pyproject.toml" ]; then
            python -m pip install --upgrade pip
            pip install poetry
            poetry export --without-hashes -f requirements.txt -o requirements-export.txt || true
          fi
      - name: Install pip-audit
        run: |
          python -m pip install pip-audit
      - name: Run pip-audit (SARIF)
        shell: bash
        run: |
          if [ -f "requirements.txt" ]; then
            pip-audit -r requirements.txt -f sarif -o pip-audit.sarif || true
          elif [ -f "requirements-export.txt" ]; then
            pip-audit -r requirements-export.txt -f sarif -o pip-audit.sarif || true
          else
            pip-audit -f sarif -o pip-audit.sarif || true
          fi
      - name: Upload SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pip-audit.sarif
      - name: Upload raw report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pip-audit-report
          path: pip-audit.sarif

  iac-checkov:
    name: IaC Scan (Checkov)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run Checkov on repo
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          quiet: true
          soft_fail: false
          framework: terraform,kubernetes,helm,cloudformation,serverless
          output_format: sarif
          output_file_path: checkov.sarif
      - name: Upload SARIF to Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov.sarif
      - name: Upload raw report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: checkov-report
          path: checkov.sarif

  trivy-fs:
    name: Trivy FS & Config
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Trivy FS scan (dependencies & vulns)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: "fs"
          scan-ref: "."
          ignore-unfixed: true
          format: "sarif"
          output: "trivy-fs.sarif"
          severity: "CRITICAL,HIGH,MEDIUM,LOW"
      - name: Upload FS SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif
      - name: Trivy config scan (IaC misconfig)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: "config"
          scan-ref: "."
          format: "sarif"
          output: "tr
