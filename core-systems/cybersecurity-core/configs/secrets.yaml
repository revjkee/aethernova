# cybersecurity-core/configs/secrets.yaml
# Единый реестр секретов и правил их получения/экспорта

schema_version: "1.0"
metadata:
  project: "cybersecurity-core"
  owner: "CHANGE-ME-owner@example.com"
  environment_set: ["dev", "stage", "prod"]
  data_class: "confidential"
  compliance: ["iso27001", "soc2"]
  rotation_defaults: "90d"
  managed_by: "terraform+gitops+sops"
  notes: "Значения секретов не хранятся в открытом виде. Для dev — SOPS inline, для stage/prod — ссылки на Vault/AWS SM."

backends:
  default: "sops"
  sops:
    enabled: true
    recipients:
      age:
        - "age1PLACEHOLDERRECIPIENT000000000000000000000000000000000000"
      pgp: []  # при необходимости добавить ключи PGP
    # Для dev значения шифруются локально sops'ом; метаданные см. в блоке sops ниже.
  vault:
    enabled: true
    address: "https://vault.CHANGE-ME.local"
    namespace: ""             # если используется HCP Vault/Enterprise namespaces
    engine: "kv-v2"
    role: "cybersecurity-core-app"   # приложение/IRSA/approle
    mount: "kv"
  aws_secrets_manager:
    enabled: true
    region: "eu-north-1"
    kms_key_arn: "arn:aws:kms:eu-north-1:123456789012:key/CHANGE-ME"
  kubernetes:
    enabled: true
    namespace: "cybersecurity-core"

policies:
  rbac_tags:
    - name: "app-runtime"
      description: "Доступ из сервисных аккаунтов приложений (IRSA)"
    - name: "ci-cd"
      description: "Доступ из пайплайнов CI/CD"
    - name: "ops-breakglass"
      description: "Экстренный доступ под контролем"
  export_rules:
    deny_plaintext: true
    allow_env_files_in_dev_only: true
    default_rotation: "90d"
    enforce_min_length:
      JWT_SIGNING_KEY: 32
      HMAC_SECRET_256: 32
      ENCRYPTION_KEY_32B: 32

exports:
  kubernetes_secret:
    name: "cybersecurity-core-secrets"
    namespace: "cybersecurity-core"
    type: "Opaque"
    immutable: true
    include_keys:
      - JWT_SIGNING_KEY
      - HMAC_SECRET_256
      - ENCRYPTION_KEY_32B
      - WEBHOOK_SIGNING_SECRET
      - DB_USERNAME
      - DB_PASSWORD
      - DB_HOST
      - DB_PORT
      - DB_NAME
      - REDIS_PASSWORD
      - OIDC_CLIENT_ID
      - OIDC_CLIENT_SECRET
      - API_KEY_PRIMARY
      - SENTRY_DSN
      - TELEGRAM_BOT_TOKEN
  env_files:
    dev: "./.secrets/dev.env"       # генерируется только для dev (deny_plaintext см. выше)
    stage: null
    prod: null

secrets:
  - key: "JWT_SIGNING_KEY"
    description: "JWT HMAC signing key"
    class: "application"
    format: "base64"
    length: 48
    critical: true
    rotation: "90d"
    rbac_tags: ["app-runtime", "ci-cd"]
    environments:
      dev:
        source: "sops"
        value: "ENC[AES256_GCM,data:PLACEHOLDER,iv:PLACEHOLDER,tag:PLACEHOLDER,type:str]"
      stage:
        source: "vault"
        path: "kv/data/cybersecurity-core/stage/app"
        field: "JWT_SIGNING_KEY"
      prod:
        source: "aws_secrets_manager"
        name: "/cybersecurity-core/prod/JWT_SIGNING_KEY"

  - key: "HMAC_SECRET_256"
    description: "Generic HMAC secret for signatures"
    class: "application"
    format: "base64"
    length: 32
    critical: true
    rotation: "90d"
    rbac_tags: ["app-runtime", "ci-cd"]
    environments:
      dev:
        source: "sops"
        value: "ENC[AES256_GCM,data:PLACEHOLDER,iv:PLACEHOLDER,tag:PLACEHOLDER,type:str]"
      stage:
        source: "vault"
        path: "kv/data/cybersecurity-core/stage/app"
        field: "HMAC_SECRET_256"
      prod:
        source: "aws_secrets_manager"
        name: "/cybersecurity-core/prod/HMAC_SECRET_256"

  - key: "ENCRYPTION_KEY_32B"
    description: "Symmetric encryption key (32 bytes)"
    class: "crypto"
    format: "base64"
    length: 32
    critical: true
    rotation: "180d"
    rbac_tags: ["app-runtime"]
    environments:
      dev:
        source: "sops"
        value: "ENC[AES256_GCM,data:PLACEHOLDER,iv:PLACEHOLDER,tag:PLACEHOLDER,type:str]"
      stage:
        source: "vault"
        path: "kv/data/cybersecurity-core/stage/crypto"
        field: "ENCRYPTION_KEY_32B"
      prod:
        source: "aws_secrets_manager"
        name: "/cybersecurity-core/prod/ENCRYPTION_KEY_32B"

  - key: "WEBHOOK_SIGNING_SECRET"
    description: "Secret for signing/verifying webhooks"
    class: "integration"
    format: "string"
    length: 24
    rotation: "90d"
    rbac_tags: ["app-runtime"]
    environments:
      dev:
        source: "sops"
        value: "ENC[AES256_GCM,data:PLACEHOLDER,iv:PLACEHOLDER,tag:PLACEHOLDER,type:str]"
      stage:
        source: "vault"
        path: "kv/data/cybersecurity-core/stage/integrations"
        field: "WEBHOOK_SIGNING_SECRET"
      prod:
        source: "aws_secrets_manager"
        name: "/cybersecurity-core/prod/WEBHOOK_SIGNING_SECRET"

  - key: "DB_USERNAME"
    description: "Primary DB user"
    class: "database"
    format: "string"
    length: 1
    rotation: "365d"
    rbac_tags: ["app-runtime", "ci-cd"]
    environments:
      dev:
        source: "sops"
        value: "ENC[AES256_GCM,data:ENC-DB-USER,iv:PLACEHOLDER,tag:PLACEHOLDER,type:str]"
      stage:
        source: "vault"
        path: "kv/data/cybersecurity-core/stage/db"
        field: "DB_USERNAME"
      prod:
        source: "aws_secrets_manager"
        name: "/cybersecurity-core/prod/DB_USERNAME"

  - key: "DB_PASSWORD"
    description: "Primary DB password"
    class: "database"
    format: "string"
    length: 24
    critical: true
    rotation: "90d"
    rbac_tags: ["app-runtime"]
    environments:
      dev:
        source: "sops"
        value: "ENC[AES256_GCM,data:ENC-DB-PASS,iv:PLACEHOLDER,tag:PLACEHOLDER,type:str]"
      stage:
        source: "vault"
        path: "kv/data/cybersecurity-core/stage/db"
        field: "DB_PASSWORD"
      prod:
        source: "aws_secrets_manager"
        name: "/cybersecurity-core/prod/DB_PASSWORD"

  - key: "DB_HOST"
    description: "Database hostname"
    class: "database"
    format: "string"
    rotation: "365d"
    rbac_tags: ["app-runtime"]
    environments:
      dev:   { source: "sops", value: "ENC[AES256_GCM,data:ENC-DB-HOST,iv:PLACEHOLDER,tag:PLACEHOLDER,type:str]" }
      stage: { source: "vault", path: "kv/data/cybersecurity-core/stage/db", field: "DB_HOST" }
      prod:  { source: "aws_secrets_manager", name: "/cybersecurity-core/prod/DB_HOST" }

  - key: "DB_PORT"
    description: "Database port"
    class: "database"
    format: "string"
    rotation: "365d"
    rbac_tags: ["app-runtime"]
    environments:
      dev:   { source: "sops", value: "ENC[AES256_GCM,data:NTQzMg==,iv:PLACEHOLDER,tag:PLACEHOLDER,type:str]" } # 5432
      stage: { source: "vault", path: "kv/data/cybersecurity-core/stage/db", field: "DB_PORT" }
      prod:  { source: "aws_secrets_manager", name: "/cybersecurity-core/prod/DB_PORT" }

  - key: "DB_NAME"
    description: "Database name"
    class: "database"
    format: "string"
    rotation: "365d"
    environments:
      dev:   { source: "sops", value: "ENC[AES256_GCM,data:ZW5jcnlwdGVkX2Ri,iv:PLACEHOLDER,tag:PLACEHOLDER,type:str]" }
      stage: { source: "vault", path: "kv/data/cybersecurity-core/stage/db", field: "DB_NAME" }
      prod:  { source: "aws_secrets_manager", name: "/cybersecurity-core/prod/DB_NAME" }

  - key: "REDIS_PASSWORD"
    description: "Redis password"
    class: "cache"
    format: "string"
    length: 24
    rotation: "90d"
    rbac_tags: ["app-runtime"]
    environments:
      dev:   { source: "sops", value: "ENC[AES256_GCM,data:ENC-REDIS-PASS,iv:PLACEHOLDER,tag:PLACEHOLDER,type:str]" }
      stage: { source: "vault", path: "kv/data/cybersecurity-core/stage/cache", field: "REDIS_PASSWORD" }
      prod:  { source: "aws_secrets_manager", name: "/cybersecurity-core/prod/REDIS_PASSWORD" }

  - key: "API_KEY_PRIMARY"
    description: "Primary external API key"
    class: "integration"
    format: "string"
    rotation: "60d"
    environments:
      dev:   { source: "sops", value: "ENC[AES256_GCM,data:ENC-API-KEY,iv:PLACEHOLDER,tag:PLACEHOLDER,type:str]" }
      stage: { source: "vault", path: "kv/data/cybersecurity-core/stage/integrations", field: "API_KEY_PRIMARY" }
      prod:  { source: "aws_secrets_manager", name: "/cybersecurity-core/prod/API_KEY_PRIMARY" }

  - key: "OIDC_CLIENT_ID"
    description: "OIDC client id"
    class: "identity"
    format: "string"
    rotation: "365d"
    environments:
      dev:   { source: "sops", value: "ENC[AES256_GCM,data:ENC-OIDC-ID,iv:PLACEHOLDER,tag:PLACEHOLDER,type:str]" }
      stage: { source: "vault", path: "kv/data/cybersecurity-core/stage/oidc", field: "OIDC_CLIENT_ID" }
      prod:  { source: "aws_secrets_manager", name: "/cybersecurity-core/prod/OIDC_CLIENT_ID" }

  - key: "OIDC_CLIENT_SECRET"
    description: "OIDC client secret"
    class: "identity"
    format: "string"
    length: 32
    rotation: "180d"
    critical: true
    environments:
      dev:   { source: "sops", value: "ENC[AES256_GCM,data:ENC-OIDC-SECRET,iv:PLACEHOLDER,tag:PLACEHOLDER,type:str]" }
      stage: { source: "vault", path: "kv/data/cybersecurity-core/stage/oidc", field: "OIDC_CLIENT_SECRET" }
      prod:  { source: "aws_secrets_manager", name: "/cybersecurity-core/prod/OIDC_CLIENT_SECRET" }

  - key: "SENTRY_DSN"
    description: "Sentry DSN"
    class: "observability"
    format: "string"
    rotation: "365d"
    environments:
      dev:   { source: "sops", value: "ENC[AES256_GCM,data:ENC-SENTRY-DSN,iv:PLACEHOLDER,tag:PLACEHOLDER,type:str]" }
      stage: { source: "vault", path: "kv/data/cybersecurity-core/stage/observability", field: "SENTRY_DSN" }
      prod:  { source: "aws_secrets_manager", name: "/cybersecurity-core/prod/SENTRY_DSN" }

  - key: "TELEGRAM_BOT_TOKEN"
    description: "Telegram Bot Token"
    class: "integration"
    format: "string"
    rotation: "180d"
    environments:
      dev:   { source: "sops", value: "ENC[AES256_GCM,data:ENC-TG-TOKEN,iv:PLACEHOLDER,tag:PLACEHOLDER,type:str]" }
      stage: { source: "vault", path: "kv/data/cybersecurity-core/stage/integrations", field: "TELEGRAM_BOT_TOKEN" }
      prod:  { source: "aws_secrets_manager", name: "/cybersecurity-core/prod/TELEGRAM_BOT_TOKEN" }

# Метаданные SOPS для dev-значений в этом файле.
# В проде/stage значения не инлайнится — берутся из Vault/ASM.
sops:
  kms: []
  gcp_kms: []
  azure_kv: []
  hc_vault: []
  age:
    - recipient: "age1PLACEHOLDERRECIPIENT000000000000000000000000000000000000"
      enc: "-----BEGIN AGE ENCRYPTED FILE-----\nPLACEHOLDER\n-----END AGE ENCRYPTED FILE-----"
  pgp: []
  lastmodified: "2025-09-02T00:00:00Z"
  mac: "ENC[AES256_GCM,data:PLACEHOLDER-MAC,iv:PLACEHOLDER,tag:PLACEHOLDER,type:str]"
  version: "3.8.1"
