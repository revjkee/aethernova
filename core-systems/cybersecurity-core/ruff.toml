# -----------------------------
# Ruff configuration (industrial)
# -----------------------------

# Общие параметры
line-length = 100
indent-width = 4
target-version = "py311"
src = ["cybersecurity_core", "tests", "scripts"]

# Папки, которые не должны анализироваться
extend-exclude = [
  ".git",
  ".hg",
  ".mypy_cache",
  ".pytest_cache",
  ".ruff_cache",
  ".venv",
  "venv",
  "build",
  "dist",
  "site-packages",
  "__pycache__",
  "node_modules",
  "docs/_build",
  "migrations",
]

# Автоисправления Ruff (осмотрительно)
fix = true
unsafe-fixes = false

# Теги задач (отслеживаются, но не блокируют сборку)
task-tags = ["TODO", "FIXME", "XXX", "SECURITY", "PERF", "HACK", "NOTE"]

# -----------------------------
# Linting rules
# -----------------------------
[lint]
# Широкое покрытие правил качества/безопасности:
select = [
  "E",    # pycodestyle errors
  "W",    # pycodestyle warnings
  "F",    # pyflakes
  "C90",  # mccabe complexity
  "I",    # isort (imports)
  "N",    # pep8-naming
  "UP",   # pyupgrade
  "S",    # flake8-bandit (security)
  "B",    # flake8-bugbear
  "A",    # flake8-builtins
  "C4",   # flake8-comprehensions
  "DTZ",  # flake8-datetimez (tz-aware)
  "T10",  # flake8-debugger
  "T20",  # flake8-print
  "EM",   # flake8-errmsg (чёткие сообщения ошибок)
  "EXE",  # flake8-executable
  "FBT",  # flake8-boolean-trap
  "ISC",  # flake8-implicit-str-concat
  "G",    # flake8-logging-format
  "INP",  # flake8-no-pep420 (namespace pkg)
  "PIE",  # flake8-pie
  "PT",   # flake8-pytest-style
  "Q",    # flake8-quotes (см. также [format])
  "RET",  # flake8-return
  "RSE",  # flake8-raise
  "SIM",  # flake8-simplify
  "TD",   # flake8-todos
  "TID",  # flake8-tidy-imports
  "TRY",  # tryceratops (исключения)
  "YTT",  # flake8-2020 (устаревшее API)
  "ANN",  # flake8-annotations
  "D",    # pydocstyle (docstrings)
  "PL",   # pylint (подмножество правил)
  "PGH",  # pygrep-hooks (шаблонные анти-паттерны)
  "PTH",  # flake8-use-pathlib
  "RUF",  # ruff-native
  "SLOT", # flake8-slots
  "ERA",  # eradicate (комментированный мёртвый код)
  "TCH",  # flake8-type-checking (перенос typing импортов)
]

# Общие ослабления (минимум, чтобы не мешать здоровому кодстайлу)
extend-ignore = [
  "D203", # one-blank-line-before-class (конфликтует с D211)
  "D213", # multi-line-summary-second-line
]

# Разрешить автоисправления для всех возможных групп
fixable = ["ALL"]
unfixable = []

# Гибкие исключения по файлам/директориям
[lint.per-file-ignores]
# Тесты: позволяем assert (S101) и ослабляем документацию/аннотации
"tests/**/*" = ["S101", "D", "ANN", "PLR2004", "PT011", "PT012"]
# __init__.py: разрешаем реэкспорт
"**/__init__.py" = ["F401", "F403"]
# Скрипты: позволяем print и shell-команды (с проверкой в ревью)
"scripts/*" = ["T201", "T203", "S603", "S607"]

# -----------------------------
# Поднастройки правил
# -----------------------------

# Ограничение цикломатической сложности
[lint.mccabe]
max-complexity = 12

# Импорты (isort через Ruff)
[lint.isort]
combine-as-imports = true
force-wrap-aliases = true
lines-after-imports = 2
known-first-party = ["cybersecurity_core"]
required-imports = ["from __future__ import annotations"]

# Запрет относительных импортов (безопасная разборчивость зависимостей)
[lint.flake8-tidy-imports]
ban-relative-imports = "all"

# Предпочитаем размещать typing-импорты под if TYPE_CHECKING
[lint.flake8-type-checking]
strict = true

# Аннотации типов
[lint.flake8-annotations]
mypy-init-return = true
allow-star-arg-any = false
suppress-dummy-args = true
suppress-none-returning = true

# pep8-naming: дополнительные декораторы классовых методов
[lint.pep8-naming]
classmethod-decorators = [
  "pydantic.validator",
  "pydantic.root_validator",
  "classmethod",
]

# bugbear: расширение набора иммутабельных вызовов
[lint.flake8-bugbear]
extend-immutable-calls = [
  "fastapi.Depends",
  "attrs.define",
  "dataclasses.dataclass",
]

# bandit: ориентир на крипто/безопасность (оставляем строгие дефолты Ruff)
# Доп. послабления НЕ включаем, чтобы не ослаблять проверки.

# Возвраты/исключения
[lint.flake8-return]
allow-implicit-else-return = false
allow-multiline-returns = false

[lint.flake8-raise]
max-args = 2

# Запрет print, предпочитаем логирование
[lint.pycodestyle]
ignore-overlong-task-comments = true

# Стиль кавычек (дублирует форматер для большей явности)
[lint.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"
docstring-quotes = "double"
avoid-escape = true

# Builtins: запрет теневых имён
[lint.flake8-builtins]
builtins-ignorelist = ["id", "format", "filter", "input"]

# Использовать pathlib
[lint.flake8-use-pathlib]
# Без дополнительных параметров — включено правилом PTH

# Исключить закомментированный мёртвый код
[lint.eradicate]
aggressive = true

# Pydocstyle: конвенция Google
[lint.pydocstyle]
convention = "google"

# Pylint-подобные ограничения размера функций
[lint.pylint]
max-args = 7
max-branches = 12
max-returns = 6
max-statements = 60

# Pyupgrade: целимся в современный Python
[lint.pyupgrade]
keep-runtime-typing = false

# -----------------------------
# Formatter (ruff format)
# -----------------------------
[format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"
docstring-code-format = true
docstring-code-line-length = 100
