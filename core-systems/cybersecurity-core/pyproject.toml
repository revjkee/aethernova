[build-system]
requires = ["poetry-core>=1.9.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "cybersecurity-core"
version = "0.1.0"
description = "Industrial-grade cybersecurity core: async crypto utilities, secure configs, policy engine, structured logging, threat schemas."
authors = ["Aethernova Team <dev@aethernova.local>"]
license = "Apache-2.0"
readme = "README.md"
packages = [{ include = "cybersecurity_core", from = "src" }]
homepage = "https://aethernova.local/neurocity"
repository = "https://aethernova.local/neurocity/cybersecurity-core"
documentation = "https://aethernova.local/docs/cybersecurity-core"
keywords = ["security", "cryptography", "zero-trust", "siem", "soar", "async", "typing"]
classifiers = [
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.12",
  "Topic :: Security",
  "Typing :: Typed",
  "License :: OSI Approved :: Apache Software License"
]

# Включаем метку типизации PEP 561, если положите файл src/cybersecurity_core/py.typed
include = ["src/cybersecurity_core/py.typed"]

[tool.poetry.urls]
"Bug Tracker" = "https://aethernova.local/neurocity/cybersecurity-core/issues"
"Security Policy" = "https://aethernova.local/security"

[tool.poetry.dependencies]
python = ">=3.11,<3.13"

# Основной стек
pydantic = ">=2"
pydantic-settings = ">=2"
typing-extensions = ">=4.8"
cryptography = ">=39"
pyjwt = ">=2"
orjson = ">=3.9"
structlog = ">=23"
rich = ">=13"
python-dotenv = ">=1"
tenacity = ">=8"
pyyaml = ">=6"

# Async / сеть
httpx = { version = ">=0.24", extras = ["http2"] }
aiohttp = ">=3.9"
async-timeout = ">=4.0"
uvloop = { version = ">=0.19", markers = "platform_system != 'Windows'" }

# Крипто/хеши (как опора для password hashing и подписи)
argon2-cffi = ">=21"
bcrypt = ">=4"
pynacl = ">=1.5"

# CLI
typer = { version = ">=0.12", extras = ["all"] }
click = ">=8"

[tool.poetry.extras]
web = ["httpx", "aiohttp"]
crypto = ["cryptography", "pynacl", "argon2-cffi", "bcrypt"]
devtools = ["rich", "structlog"]

[tool.poetry.group.dev.dependencies]
pytest = ">=8"
pytest-asyncio = ">=0.23"
pytest-cov = ">=5"
coverage = { version = ">=7", extras = ["toml"] }
mypy = ">=1.10"
ruff = ">=0.5"
bandit = ">=1.7"
safety = ">=3"
pre-commit = ">=3"
types-pyyaml = ">=6"

[tool.poetry.group.docs.dependencies]
mkdocs = ">=1.5"
mkdocs-material = ">=9"
mkdocstrings = { version = ">=0.24", extras = ["python"] }

[tool.poetry.scripts]
# Точка входа CLI: src/cybersecurity_core/cli.py -> app (Typer)
csec = "cybersecurity_core.cli:app"

# -----------------------
# Тестирование и покрытие
# -----------------------
[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --strict-config --disable-warnings --cov=cybersecurity_core --cov-report=term-missing"
testpaths = ["tests"]
xfail_strict = true
asyncio_mode = "strict"

[tool.coverage.run]
branch = true
parallel = true
source = ["cybersecurity_core"]

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 90
exclude_lines = [
  "if TYPE_CHECKING:",
  "pragma: no cover",
  "if __name__ == .__main__.:",
]

# -----------------------
# Статический анализ кода
# -----------------------
[tool.mypy]
python_version = "3.12"
plugins = ["pydantic.mypy"]
mypy_path = ["src"]
explicit_package_bases = true
namespace_packages = true
pretty = true
show_error_codes = true

# Строгий профиль
disallow_untyped_defs = true
disallow_any_generics = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_return_any = true
no_implicit_optional = true
strict_optional = true
strict_equality = true
check_untyped_defs = true

# Игнор для тестовых фикстур/генов
exclude = [
  "tests/fixtures",
  "build",
  ".venv",
]

[tool.pydantic-mypy]
init_typed = true
warn_required_dynamic_aliases = true

[tool.ruff]
target-version = "py312"
line-length = 100
fix = true
unsafe-fixes = true
show-fixes = true

# Набор проверок: ошибки, style, modernize, security-lite и пр.
lint.select = [
  "E", "F", "W",       # pycodestyle/pyflakes
  "I",                 # isort
  "UP",                # pyupgrade
  "B",                 # flake8-bugbear
  "BLE",               # flake8-blind-except
  "C4",                # flake8-comprehensions
  "TID",               # flake8-tidy-imports
  "PTH",               # flake8-use-pathlib
  "S",                 # flake8-bandit (легкие проверки)
  "ARG",               # flake8-unused-arguments
  "DTZ",               # flake8-datetimez
  "PL",                # pylint (select subset)
  "PT",                # pytest style
  "SIM",               # flake8-simplify
  "RUF",               # ruff специфичное
  "TCH"                # flake8-type-checking
]

# Допуски: assert в тестах, magic numbers в некоторых местах
lint.ignore = [
  "S101",      # use of assert — допустимо в тестах
  "PLR2004",   # magic value — допускаем точечно
]

[tool.ruff.lint.isort]
known-first-party = ["cybersecurity_core"]
combine-as-imports = true
split-on-trailing-comma = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
docstring-code-format = true
quote-style = "double"
indent-style = "space"
line-ending = "lf"

# -----------------------
# Security tooling
# -----------------------
[tool.bandit]
skips = ["B101", "B404", "B603"]  # assert, tarfile warnings, subprocess false-positives
exclude_dirs = ["tests", "build", ".venv"]

# -----------------------
# Typer pretty exceptions
# -----------------------
[tool.typer]
pretty_exceptions_enable = true
pretty_exceptions_show_locals = false
