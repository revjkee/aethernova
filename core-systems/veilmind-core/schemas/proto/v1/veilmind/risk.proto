// Copyright ...
// SPDX-License-Identifier: Apache-2.0
//
// Protobuf API for Veilmind Risk domain.
// Evolution strategy:
// - proto3, additive-first changes;
// - Never re-use removed field numbers; keep them reserved;
// - For breaking changes, create new messages/services or fields with new IDs;
// - Use google.protobuf wrappers to model tri-state when necessary.

syntax = "proto3";

package veilmind.v1.veilmind;

// ===== Language/Runtime options =====
option csharp_namespace = "Veilmind.V1";
option go_package        = "github.com/your-org/veilmind-core/gen/go/veilmind/v1;veilmindv1";
option java_multiple_files = true;
option java_package      = "io.veilmind.v1";
option java_outer_classname = "RiskProto";
option objc_class_prefix = "VM";
option php_namespace     = "Veilmind\\V1";
option ruby_package      = "Veilmind::V1";

// ===== Imports =====
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/wrappers.proto";
import "google/api/annotations.proto"; // optional, for REST mappings

// ============================================================================
// ENUMS
// ============================================================================

enum EntityType {
  ENTITY_TYPE_UNSPECIFIED = 0;
  ENTITY_TYPE_USER        = 1;
  ENTITY_TYPE_SERVICE     = 2;
  ENTITY_TYPE_NODE        = 3;
}

enum RiskLevel {
  RISK_LEVEL_UNSPECIFIED = 0;
  RISK_LEVEL_LOW         = 1;
  RISK_LEVEL_MEDIUM      = 2;
  RISK_LEVEL_HIGH        = 3;
  RISK_LEVEL_CRITICAL    = 4;
}

// ============================================================================
// CORE MESSAGES
// ============================================================================

/**
 * RiskSignal — нормализованные сигналы для вычисления риска.
 * Все числовые значения ожидаются в диапазонах, указанных в комментариях.
 * Для кастомных метрик используйте extra_metrics.
 */
message RiskSignal {
  // Кол-во неудачных аутентификаций за короткое окно. [0..N]
  uint32 auth_failures = 1;

  // Аномальность (0..1)
  float anomaly_score = 2;

  // Географическое несоответствие (например, impossible travel)
  bool geo_mismatch = 3;

  // Оценка позы устройства (0..1; 1 — худший)
  float device_posture_score = 4;

  // Чувствительность привилегии (0..1)
  float privilege_sensitivity = 5;

  // MFA пройдена (снижает риск)
  bool mfa_passed = 6;

  // Обнаружен replay/duplicate токен/nonce
  bool replay_detected = 7;

  // Срабатывания DLP (шт.)
  uint32 dlp_hits = 8;

  // Дополнительные числовые метрики (расширяемость).
  // Примеры: "ip_reputation", "behavior_score", "geo_distance_km"
  map<string, double> extra_metrics = 15;

  // Зарезервировано на будущее (не переиспользовать)
  reserved 9 to 14;
}

/**
 * RiskEvent — исходное событие для расчёта риска.
 * Соответствует формату воркера risk_recalc_worker.py.
 */
message RiskEvent {
  // Уникальный идентификатор события (идемпотентность).
  string event_id = 1;

  // Временная метка возникновения события.
  google.protobuf.Timestamp ts = 2;

  // Идентификатор сущности (user/service/node).
  string entity_id = 3;

  // Тип сущности.
  EntityType entity_type = 4;

  // Сигналы для вычисления риска.
  RiskSignal signals = 5;

  // Корреляция с внешними системами (traces, SIEM).
  string correlation_id = 6;

  // Мультиарендность.
  string tenant_id = 7;

  // Источник события (идентификатор приложения/адаптера).
  string source = 8;

  // Трассировка.
  string trace_id = 9;
  string span_id  = 10;

  // Клиентские метаданные (опционально).
  ClientMeta client = 11;

  // Дополнительные свойства (структурированные).
  google.protobuf.Struct attributes = 12;

  // Зарезервировано на развитие.
  reserved 13, 14, 15, 16, 17, 18, 19, 20;
}

/**
 * ClientMeta — технические метаданные клиента/сессии.
 */
message ClientMeta {
  string ip            = 1;   // canonical (IPv4/IPv6)
  string user_agent    = 2;
  string device_id     = 3;
  string geo_city      = 4;
  string geo_country   = 5;
  string asn           = 6;
}

/**
 * RiskProfile — агрегированное состояние риска по сущности.
 * score нормализован в диапазон [0..100].
 */
message RiskProfile {
  string entity_id   = 1;
  EntityType entity_type = 2;

  // Нормализованный итоговый балл (0..100).
  float score        = 3;

  // Категоризация уровня.
  RiskLevel level    = 4;

  // Причины/вклады в итоговую оценку (человекочитаемо).
  repeated string reasons = 5;

  // Момент обновления профиля.
  google.protobuf.Timestamp updated_at = 6;

  // История последних N вычислений (опционально).
  repeated ScoreSample recent = 7;

  // Версия движка/правил, выполнивших расчет.
  string engine_version = 8;

  // Зарезервировано на развитие.
  reserved 9, 10, 11, 12, 13;
}

/** Элемент временного ряда для истории оценок. */
message ScoreSample {
  float score = 1;
  google.protobuf.Timestamp at = 2;
}

/**
 * RiskUpdate — фактическое сообщение об обновлении профиля,
 * публикуемое воркером в шину и/или отдаваемое стримом WatchUpdates.
 */
message RiskUpdate {
  string type = 1; // "risk_profile_update"
  RiskProfile profile = 2;

  // Прокси корелляции из события.
  google.protobuf.StringValue correlation_id = 3;

  // Тема/канал обновления (например, "risk.updates").
  string topic = 4;

  google.protobuf.Timestamp emitted_at = 5;

  reserved 6, 7, 8, 9, 10;
}

/** Пакет событий для батчевой публикации. */
message PublishRequest {
  repeated RiskEvent events = 1;
}

/** Подтверждение публикации. */
message PublishAck {
  // Принятые event_id (для идемпотентности клиента).
  repeated string accepted_event_ids = 1;

  // Отклоненные с причинами.
  repeated RejectedEvent rejected = 2;
}

/** Отклонённое событие. */
message RejectedEvent {
  string event_id = 1;
  string reason   = 2; // e.g. "duplicate", "invalid", "rate_limited"
}

/** Фильтр для выборок и подписок. */
message Filter {
  // Поиск по сущности.
  google.protobuf.StringValue entity_id = 1;
  EntityType entity_type = 2;

  // По уровню риска (минимальный).
  RiskLevel min_level = 3;

  // Мультиарендность.
  google.protobuf.StringValue tenant_id = 4;

  // Окно времени для выборки.
  google.protobuf.Timestamp from = 5;
  google.protobuf.Timestamp to   = 6;

  // Пагинация/лимит.
  google.protobuf.UInt32Value limit = 7;

  reserved 8, 9, 10;
}

/** Запрос вычисления без сохранения состояния (what-if). */
message ComputeRequest {
  RiskEvent event = 1;
}

/** Ответ вычисления. */
message ComputeResponse {
  RiskProfile profile = 1;
}

/** Запрос профиля. */
message GetProfileRequest {
  string entity_id = 1;
  EntityType entity_type = 2;
  google.protobuf.StringValue tenant_id = 3;
}

/** Список профилей с пагинацией. */
message ListProfilesRequest {
  Filter filter = 1;
  google.protobuf.StringValue page_token = 2;
}

message ListProfilesResponse {
  repeated RiskProfile items = 1;
  google.protobuf.StringValue next_page_token = 2;
}

/** Поток обновлений (server-stream). */
message WatchUpdatesRequest {
  Filter filter = 1;

  // С какого момента времени получать обновления.
  google.protobuf.Timestamp since = 2;

  // Максимальная частота доставки (дребезг).
  google.protobuf.Duration throttle = 3;
}

// ============================================================================
// SERVICE
// ============================================================================

/**
 * RiskService — основной gRPC/HTTP API для работы с доменом риска.
 * Поддерживает батчевую публикацию событий, онлайновый расчёт,
 * получение/листинг профилей и подписку на обновления.
 */
service RiskService {
  // Публикация одного или нескольких событий риска.
  rpc PublishEvents(PublishRequest) returns (PublishAck) {
    option (google.api.http) = {
      post: "/v1/risk/events:publish"
      body: "*"
    };
  }

  // Онлайновый расчет без изменения состояния.
  rpc ComputeRisk(ComputeRequest) returns (ComputeResponse) {
    option (google.api.http) = {
      post: "/v1/risk:compute"
      body: "*"
    };
  }

  // Получение агрегированного профиля риска по сущности.
  rpc GetProfile(GetProfileRequest) returns (RiskProfile) {
    option (google.api.http) = {
      get: "/v1/risk/profiles/{entity_type}/{entity_id}"
      additional_bindings {
        get: "/v1/tenants/{tenant_id}/risk/profiles/{entity_type}/{entity_id}"
      }
    };
  }

  // Постраничный список профилей по фильтру.
  rpc ListProfiles(ListProfilesRequest) returns (ListProfilesResponse) {
    option (google.api.http) = {
      get: "/v1/risk/profiles"
    };
  }

  // Подписка на обновления профилей (server-stream).
  rpc WatchUpdates(WatchUpdatesRequest) returns (stream RiskUpdate) {
    // Для REST используйте сервер событий/WS-гейтвей.
  }
}

// ============================================================================
// BACKWARD/COMPATIBILITY NOTES
// ============================================================================
//
// - Не удаляйте и не переиспользуйте номера полей — переносите в reserved.
// - Для новых сигналов используйте RiskSignal.extra_metrics или новые поля > 15.
// - Для новой семантики сервисов — создавайте новые RPC/версии пакета (v2).
// - Временны́е поля — только google.protobuf.Timestamp/Duration.
// - Идентификаторы — строковые, глобально уникальные (ULID/UUID), сравнение регистрозависимое.
// - Оценки риска: score ∈ [0..100], уровни — строго по доменной логике.
//
