{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://veilmind.io/schemas/jsonschema/v1/redaction_rule.schema.json",
  "title": "Veilmind RedactionPolicy (v1)",
  "description": "Схема политики редактирования/маскирования данных для veilmind-core. Определяет правила и операции redaction/masking/hash/tokenization для различных контекстов (HTTP, логи, БД).",
  "type": "object",
  "additionalProperties": false,
  "unevaluatedProperties": false,
  "properties": {
    "apiVersion": {
      "const": "veilmind.io/v1",
      "description": "Версия API ресурса."
    },
    "kind": {
      "const": "RedactionPolicy",
      "description": "Тип ресурса."
    },
    "metadata": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": { "$ref": "#/$defs/Identifier" },
        "owner": { "type": "string", "minLength": 1 },
        "environment": { "type": "string", "minLength": 1 },
        "version": { "type": "string", "minLength": 1 },
        "annotations": {
          "type": "object",
          "additionalProperties": { "type": "string" }
        }
      },
      "required": ["name", "owner", "environment", "version"]
    },
    "spec": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "schema": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "checksum": { "$ref": "#/$defs/Checksum" },
            "minEngineVersion": { "type": "string", "minLength": 1 }
          },
          "required": ["minEngineVersion"]
        },
        "defaults": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "stopOnMatch": { "type": "boolean", "default": false },
            "hash": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "algorithm": { "$ref": "#/$defs/HashAlgorithm" },
                "saltRef": { "$ref": "#/$defs/KmsRef" },
                "saltInline": { "type": "string" },
                "kdf": { "$ref": "#/$defs/Kdf" }
              }
            },
            "mask": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "strategy": { "$ref": "#/$defs/MaskStrategy" },
                "maskChar": { "type": "string", "minLength": 1, "maxLength": 1, "default": "*" },
                "keepPrefix": { "type": "integer", "minimum": 0, "default": 0 },
                "keepSuffix": { "type": "integer", "minimum": 0, "default": 0 }
              }
            }
          }
        },
        "rules": {
          "type": "array",
          "minItems": 1,
          "items": { "$ref": "#/$defs/Rule" }
        },
        "tests": {
          "description": "Набор тест-векторов для CI, проверяющих применение правил.",
          "type": "array",
          "items": { "$ref": "#/$defs/TestVector" }
        },
        "audit": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "emitEvent": { "type": "boolean", "default": true },
            "sampleRate": { "type": "number", "minimum": 0.0, "maximum": 1.0, "default": 1.0 },
            "fields": {
              "type": "array",
              "items": { "type": "string" }
            }
          }
        }
      },
      "required": ["rules"]
    }
  },
  "required": ["apiVersion", "kind", "metadata", "spec"],
  "patternProperties": {
    "^x-": {}
  },
  "$defs": {
    "Identifier": {
      "type": "string",
      "pattern": "^[A-Za-z0-9][A-Za-z0-9._-]{2,63}$"
    },
    "Checksum": {
      "type": "string",
      "pattern": "^sha256:[A-Fa-f0-9]{64}$"
    },
    "KmsRef": {
      "type": "string",
      "description": "Ссылка на материал/секрет в KMS/секрет-менеджере.",
      "pattern": "^[A-Za-z0-9:/._-]{8,}$"
    },
    "HashAlgorithm": {
      "type": "string",
      "enum": ["blake2b-256", "sha256", "sha512"]
    },
    "Kdf": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": { "type": "string", "enum": ["none", "HKDF", "PBKDF2"] },
        "saltRef": { "$ref": "#/$defs/KmsRef" },
        "saltInline": { "type": "string" },
        "iterations": { "type": "integer", "minimum": 1000 },
        "dkLen": { "type": "integer", "minimum": 16, "maximum": 64 }
      },
      "required": ["type"],
      "allOf": [
        {
          "if": { "properties": { "type": { "const": "none" } } },
          "then": { "not": { "anyOf": [
            { "required": ["saltRef"] }, { "required": ["saltInline"] }, { "required": ["iterations"] }, { "required": ["dkLen"] }
          ] } }
        },
        {
          "if": { "properties": { "type": { "const": "PBKDF2" } } },
          "then": { "required": ["iterations"] }
        }
      ]
    },
    "MaskStrategy": {
      "type": "string",
      "enum": ["fixed", "keep_prefix_suffix", "keep_length", "full"]
    },
    "Severity": {
      "type": "string",
      "enum": ["low", "medium", "high", "critical"]
    },
    "AppliesTo": {
      "type": "string",
      "enum": [
        "http.request.headers",
        "http.request.query",
        "http.request.pathParams",
        "http.request.cookies",
        "http.request.form",
        "http.request.body",
        "http.response.headers",
        "http.response.body",
        "log.message",
        "log.fields",
        "db.query",
        "db.result",
        "queue.message"
      ]
    },
    "ContentType": {
      "type": "string",
      "description": "MIME тип для фильтрации обработки.",
      "pattern": "^[\\w.+-]+\\/[\\w.+*-]+(;.*)?$"
    },
    "Regex": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "pattern": { "type": "string", "minLength": 1 },
        "flags": { "type": "string", "pattern": "^[imsxADSUXJ-]*$" }
      },
      "required": ["pattern"]
    },
    "Selector": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string",
          "enum": ["jsonpath", "jmespath", "pointer", "header", "cookie", "form", "query", "xml", "pathParam"]
        },
        "expr": { "type": "string", "minLength": 1 },
        "ci": { "type": "boolean", "description": "Case-insensitive для header/cookie/форм.", "default": true }
      },
      "required": ["type", "expr"]
    },
    "Detector": {
      "type": "object",
      "description": "Встроенные детекторы PII/секретов.",
      "additionalProperties": false,
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "email", "ipv4", "ipv6", "fqdn", "url", "uuid",
            "credit_card", "iban", "ssn", "passport",
            "phone", "jwt", "api_key", "secret_key", "generic_secret"
          ]
        },
        "regex": { "$ref": "#/$defs/Regex" }
      },
      "oneOf": [
        { "required": ["type"] },
        { "required": ["regex"] }
      ]
    },
    "Condition": {
      "type": "string",
      "description": "Булево выражение (например, CEL-подобное) над контекстом. Оценивается движком политик.",
      "minLength": 1,
      "maxLength": 2000
    },
    "OpRemove": {
      "type": "object",
      "additionalProperties": false,
      "properties": { "op": { "const": "remove" } },
      "required": ["op"]
    },
    "OpRedact": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "op": { "const": "redact" },
        "replacement": { "type": "string", "default": "[REDACTED]" }
      },
      "required": ["op"]
    },
    "OpMask": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "op": { "const": "mask" },
        "strategy": { "$ref": "#/$defs/MaskStrategy" },
        "maskChar": { "type": "string", "minLength": 1, "maxLength": 1, "default": "*" },
        "keepPrefix": { "type": "integer", "minimum": 0, "default": 0 },
        "keepSuffix": { "type": "integer", "minimum": 0, "default": 0 }
      },
      "required": ["op", "strategy"],
      "allOf": [
        {
          "if": { "properties": { "strategy": { "const": "keep_prefix_suffix" } } },
          "then": { "required": ["keepPrefix", "keepSuffix"] }
        }
      ]
    },
    "OpHash": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "op": { "const": "hash" },
        "algorithm": { "$ref": "#/$defs/HashAlgorithm" },
        "saltRef": { "$ref": "#/$defs/KmsRef" },
        "saltInline": { "type": "string" },
        "kdf": { "$ref": "#/$defs/Kdf" },
        "outputEncoding": { "type": "string", "enum": ["hex", "base64"], "default": "hex" }
      },
      "required": ["op", "algorithm"],
      "allOf": [
        {
          "if": {
            "not": { "anyOf": [
              { "required": ["saltRef"] },
              { "required": ["saltInline"] }
            ] }
          },
          "then": { "description": "Соль не указана — допустимо, если алгоритм устойчив к коллизиям, но настоятельно рекомендуется." }
        }
      ]
    },
    "OpTokenize": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "op": { "const": "tokenize" },
        "strategy": { "type": "string", "enum": ["deterministic", "random"], "default": "deterministic" },
        "namespace": { "type": "string", "minLength": 1 },
        "length": { "type": "integer", "minimum": 6, "maximum": 128, "default": 16 },
        "alphabet": { "type": "string", "default": "base62" },
        "saltRef": { "$ref": "#/$defs/KmsRef" },
        "saltInline": { "type": "string" }
      },
      "required": ["op", "namespace"]
    },
    "OpRegexReplace": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "op": { "const": "regexReplace" },
        "pattern": { "$ref": "#/$defs/Regex" },
        "replacement": { "type": "string", "default": "[REDACTED]" },
        "global": { "type": "boolean", "default": true }
      },
      "required": ["op", "pattern"]
    },
    "Operation": {
      "oneOf": [
        { "$ref": "#/$defs/OpRemove" },
        { "$ref": "#/$defs/OpRedact" },
        { "$ref": "#/$defs/OpMask" },
        { "$ref": "#/$defs/OpHash" },
        { "$ref": "#/$defs/OpTokenize" },
        { "$ref": "#/$defs/OpRegexReplace" }
      ]
    },
    "Rule": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "id": { "$ref": "#/$defs/Identifier" },
        "description": { "type": "string" },
        "enabled": { "type": "boolean", "default": true },
        "severity": { "$ref": "#/$defs/Severity" },
        "priority": { "type": "integer", "minimum": 0, "maximum": 100000, "default": 100 },
        "stopOnMatch": { "type": "boolean", "default": false },
        "appliesTo": {
          "type": "array",
          "minItems": 1,
          "items": { "$ref": "#/$defs/AppliesTo" },
          "uniqueItems": true
        },
        "contentTypes": {
          "type": "array",
          "items": { "$ref": "#/$defs/ContentType" },
          "uniqueItems": true
        },
        "selectors": {
          "type": "array",
          "minItems": 1,
          "items": { "$ref": "#/$defs/Selector" }
        },
        "detectors": {
          "type": "array",
          "minItems": 1,
          "items": { "$ref": "#/$defs/Detector" }
        },
        "condition": { "$ref": "#/$defs/Condition" },
        "operation": { "$ref": "#/$defs/Operation" },
        "examples": {
          "type": "array",
          "items": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "input": { "type": ["string", "object", "array"] },
              "output": { "type": ["string", "object", "array"] },
              "note": { "type": "string" }
            },
            "required": ["input", "output"]
          }
        },
        "audit": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "emitEvent": { "type": "boolean", "default": true },
            "logSample": { "type": "number", "minimum": 0.0, "maximum": 1.0, "default": 1.0 }
          }
        }
      },
      "required": ["id", "appliesTo", "operation"],
      "allOf": [
        {
          "if": { "not": { "anyOf": [ { "required": ["selectors"] }, { "required": ["detectors"] } ] } },
          "then": { "errorMessage": "Rule must define at least one of: selectors or detectors." }
        },
        {
          "if": { "properties": { "operation": { "properties": { "op": { "const": "mask" } }, "required": ["op"] } } },
          "then": { "properties": { "operation": { "required": ["strategy"] } } }
        }
      ]
    },
    "TestVector": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "name": { "type": "string", "minLength": 1 },
        "appliesTo": { "$ref": "#/$defs/AppliesTo" },
        "contentType": { "$ref": "#/$defs/ContentType" },
        "input": { "type": ["string", "object", "array"] },
        "expected": { "type": ["string", "object", "array"] }
      },
      "required": ["name", "appliesTo", "input", "expected"]
    }
  },
  "examples": [
    {
      "apiVersion": "veilmind.io/v1",
      "kind": "RedactionPolicy",
      "metadata": { "name": "default-redaction", "owner": "platform-security", "environment": "prod", "version": "2025.08.21" },
      "spec": {
        "rules": [
          {
            "id": "mask-cc-in-logs",
            "description": "Маскировать номера карт в логах",
            "appliesTo": ["log.message"],
            "detectors": [{ "type": "credit_card" }],
            "operation": { "op": "mask", "strategy": "keep_prefix_suffix", "keepPrefix": 6, "keepSuffix": 4, "maskChar": "*" },
            "stopOnMatch": true,
            "severity": "high"
          },
          {
            "id": "hash-authorization-header",
            "description": "Хэшировать Authorization",
            "appliesTo": ["http.request.headers"],
            "selectors": [{ "type": "header", "expr": "Authorization", "ci": true }],
            "operation": {
              "op": "hash",
              "algorithm": "blake2b-256",
              "outputEncoding": "hex",
              "saltRef": "KMS:projects/CHANGEME/locations/global/keyRings/redaction/cryptoKeys/salt"
            },
            "severity": "critical",
            "stopOnMatch": true,
            "condition": "ctx.route not in ['/healthz','/readyz']"
          },
          {
            "id": "remove-ssn-in-json",
            "appliesTo": ["http.request.body"],
            "contentTypes": ["application/json"],
            "selectors": [{ "type": "jsonpath", "expr": "$..ssn" }],
            "operation": { "op": "remove" },
            "severity": "high"
          }
        ],
        "tests": [
          {
            "name": "mask card in log string",
            "appliesTo": "log.message",
            "input": "charge 4111111111111111 ok",
            "expected": "charge 411111******1111 ok"
          }
        ]
      }
    }
  ]
}
