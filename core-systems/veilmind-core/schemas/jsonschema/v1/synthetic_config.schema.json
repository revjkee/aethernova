{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://schemas.veilmind.io/v1/synthetic_config.schema.json",
  "title": "Veilmind Synthetic Config (v1)",
  "description": "Конфигурация синтетических прогонов/мониторинга для LLM-сервисов: цели, генерация, тесты, ожидания, ассершены, публикация результатов.",
  "type": "object",
  "additionalProperties": false,
  "unevaluatedProperties": false,
  "required": ["meta", "runtime", "suite"],
  "properties": {
    "meta": {
      "type": "object",
      "additionalProperties": false,
      "required": ["schema_version", "name", "owner", "environment"],
      "properties": {
        "schema_version": { "$ref": "#/$defs/semver" },
        "name": { "$ref": "#/$defs/nonEmptyString" },
        "description": { "type": "string", "maxLength": 2000 },
        "owner": { "$ref": "#/$defs/nonEmptyString" },
        "environment": { "type": "string", "enum": ["prod", "staging", "dev", "test"] },
        "tags": {
          "type": "object",
          "additionalProperties": { "type": "string", "maxLength": 128 },
          "maxProperties": 50
        },
        "created_at": { "type": "string", "format": "date-time" }
      },
      "examples": [
        {
          "schema_version": "1.0.0",
          "name": "veilmind-synthetic",
          "description": "Ночной мониторинг и регресс-тесты",
          "owner": "platform-team",
          "environment": "prod",
          "tags": { "service": "veilmind-core", "tier": "backend" }
        }
      ]
    },
    "runtime": {
      "type": "object",
      "additionalProperties": false,
      "required": ["fail_mode"],
      "properties": {
        "default_locale": { "type": "string", "minLength": 2, "maxLength": 8 },
        "timezone": { "type": "string", "minLength": 1, "maxLength": 64 },
        "fail_mode": { "type": "string", "enum": ["fail_closed", "fail_open"] },
        "seed": { "type": "integer", "minimum": 0 },
        "dry_run": { "type": "boolean" },
        "timeouts_ms": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "total": { "$ref": "#/$defs/timeoutMs" },
            "connect": { "$ref": "#/$defs/timeoutMs" },
            "read": { "$ref": "#/$defs/timeoutMs" }
          }
        }
      }
    },
    "targets": {
      "type": "array",
      "description": "Список целевых систем/моделей для опроса.",
      "items": { "$ref": "#/$defs/target" },
      "maxItems": 100
    },
    "datasets": {
      "type": "array",
      "description": "Внешние датасеты для генераторов/шаблонов.",
      "items": { "$ref": "#/$defs/dataset" },
      "maxItems": 100
    },
    "variables": {
      "type": "object",
      "description": "Глобальные переменные для шаблонов.",
      "additionalProperties": { "$ref": "#/$defs/primitive" }
    },
    "generators": {
      "type": "array",
      "description": "Определения генераторов промптов/кейсов.",
      "items": { "$ref": "#/$defs/generator" },
      "maxItems": 200
    },
    "suite": {
      "type": "array",
      "description": "Набор тестов/мониторов.",
      "minItems": 1,
      "maxItems": 5000,
      "items": { "$ref": "#/$defs/testCase" }
    },
    "scoring": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "metrics": {
          "type": "array",
          "items": { "$ref": "#/$defs/metric" },
          "maxItems": 50
        }
      }
    },
    "reporting": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "sinks": {
          "type": "array",
          "items": { "$ref": "#/$defs/sink" },
          "maxItems": 10
        },
        "retention_days": { "type": "integer", "minimum": 1, "maximum": 3650 }
      }
    },
    "audit": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "enabled": { "type": "boolean" },
        "chain_hash": { "type": "boolean", "description": "Тампере‑видимая цепочка хешей." },
        "hash_alg": { "type": "string", "enum": ["sha256", "sha512"] }
      }
    },
    "budget": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "max_requests": { "type": "integer", "minimum": 1 },
        "max_cost_usd": { "type": "number", "minimum": 0 },
        "rate_limit_per_min": { "type": "integer", "minimum": 1 }
      }
    }
  },

  "$defs": {
    "nonEmptyString": { "type": "string", "minLength": 1, "maxLength": 4096 },
    "primitive": {
      "oneOf": [
        { "type": "string", "maxLength": 4096 },
        { "type": "number" },
        { "type": "integer" },
        { "type": "boolean" },
        {
          "type": "array",
          "items": {
            "oneOf": [{ "type": "string" }, { "type": "number" }, { "type": "integer" }, { "type": "boolean" }]
          },
          "maxItems": 1000
        }
      ]
    },
    "timeoutMs": { "type": "integer", "minimum": 1, "maximum": 600000 },
    "probability": { "type": "number", "minimum": 0, "maximum": 1 },
    "semver": {
      "type": "string",
      "pattern": "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-[0-9A-Za-z-.]+)?(?:\\+[0-9A-Za-z-.]+)?$"
    },
    "isoDuration": {
      "type": "string",
      "pattern": "^P(?!$)(\\d+Y)?(\\d+M)?(\\d+W)?(\\d+D)?(T(\\d+H)?(\\d+M)?(\\d+S)?)?$"
    },
    "cronExpr": {
      "type": "string",
      "description": "5‑ или 6‑полевая cron‑маска (UTC).",
      "pattern": "^(@(hourly|daily|weekly|monthly|yearly)|(@every\\s+\\d+[smhd])|((\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+(\\S+)(\\s+(\\S+))?))$"
    },
    "ulid": { "type": "string", "pattern": "^[0-9A-HJKMNP-TV-Z]{26}$" },

    "headerMap": {
      "type": "object",
      "additionalProperties": { "type": "string", "maxLength": 4096 },
      "maxProperties": 100
    },

    "authRef": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "type": { "type": "string", "enum": ["none", "api_key_header", "bearer_env", "azure_ad_managed"] },
        "header_name": { "type": "string", "maxLength": 64 },
        "env_var": { "type": "string", "maxLength": 128 },
        "scopes": {
          "type": "array",
          "items": { "type": "string", "maxLength": 256 },
          "maxItems": 20
        }
      },
      "allOf": [
        {
          "if": { "properties": { "type": { "const": "api_key_header" } }, "required": ["type"] },
          "then": { "required": ["header_name"] }
        },
        {
          "if": { "properties": { "type": { "const": "bearer_env" } }, "required": ["type"] },
          "then": { "required": ["env_var"] }
        }
      ]
    },

    "target": {
      "type": "object",
      "additionalProperties": false,
      "required": ["id", "type"],
      "properties": {
        "id": { "$ref": "#/$defs/nonEmptyString" },
        "type": { "type": "string", "enum": ["http", "openai", "azure_openai", "vertex", "bedrock", "local"] },
        "endpoint": { "type": "string", "format": "uri" },
        "model": { "type": "string", "maxLength": 256 },
        "headers": { "$ref": "#/$defs/headerMap" },
        "auth": { "$ref": "#/$defs/authRef" },
        "timeouts_ms": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "total": { "$ref": "#/$defs/timeoutMs" },
            "connect": { "$ref": "#/$defs/timeoutMs" },
            "read": { "$ref": "#/$defs/timeoutMs" }
          }
        },
        "attachments_allowed": { "type": "boolean" }
      },
      "allOf": [
        {
          "if": { "properties": { "type": { "const": "http" } }, "required": ["type"] },
          "then": { "required": ["endpoint"] }
        },
        {
          "if": { "properties": { "type": { "enum": ["openai", "azure_openai", "vertex", "bedrock"] } }, "required": ["type"] },
          "then": { "required": ["model"] }
        }
      ]
    },

    "dataset": {
      "type": "object",
      "additionalProperties": false,
      "required": ["id", "kind", "path"],
      "properties": {
        "id": { "$ref": "#/$defs/nonEmptyString" },
        "kind": { "type": "string", "enum": ["csv", "jsonl", "parquet"] },
        "path": { "type": "string", "minLength": 1, "maxLength": 2048 },
        "field_mapping": {
          "type": "object",
          "additionalProperties": { "type": "string", "maxLength": 128 }
        },
        "delimiter": { "type": "string", "maxLength": 4 },
        "has_header": { "type": "boolean" }
      }
    },

    "generator": {
      "type": "object",
      "additionalProperties": false,
      "required": ["id", "template"],
      "properties": {
        "id": { "$ref": "#/$defs/nonEmptyString" },
        "template": { "type": "string", "description": "Шаблон (например, Jinja2/Handlebars)", "maxLength": 20000 },
        "variables": {
          "type": "object",
          "additionalProperties": { "$ref": "#/$defs/primitive" }
        },
        "from_dataset": { "type": "string", "description": "dataset.id" },
        "strategy": { "type": "string", "enum": ["grid", "random", "latin_hypercube"] },
        "samples": { "type": "integer", "minimum": 1, "maximum": 100000 },
        "constraints": {
          "type": "array",
          "items": { "$ref": "#/$defs/constraint" },
          "maxItems": 200
        }
      }
    },

    "constraint": {
      "type": "object",
      "additionalProperties": false,
      "required": ["type", "field"],
      "properties": {
        "type": { "type": "string", "enum": ["regex", "in", "length_between", "range"] },
        "field": { "type": "string", "maxLength": 128 },
        "pattern": { "type": "string" },
        "values": { "type": "array", "items": { "$ref": "#/$defs/primitive" }, "maxItems": 1000 },
        "min": { "oneOf": [{ "type": "number" }, { "type": "integer" }] },
        "max": { "oneOf": [{ "type": "number" }, { "type": "integer" }] }
      }
    },

    "assertion": {
      "type": "object",
      "additionalProperties": false,
      "required": ["type"],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "status_code",
            "contains",
            "not_contains",
            "regex",
            "json_path",
            "latency_le_ms",
            "cost_le_usd",
            "risk_score_le",
            "toxicity_le",
            "equals"
          ]
        },
        "value": { "$ref": "#/$defs/primitive" },
        "path": { "type": "string", "maxLength": 512, "description": "JSONPath для json_path/assertion.equals" },
        "flags": { "type": "string", "maxLength": 16, "description": "Напр. 'i' для case-insensitive" }
      },
      "allOf": [
        {
          "if": { "properties": { "type": { "const": "status_code" } }, "required": ["type"] },
          "then": { "required": ["value"] }
        },
        {
          "if": { "properties": { "type": { "enum": ["contains", "not_contains", "regex", "equals"] } }, "required": ["type"] },
          "then": { "required": ["value"] }
        },
        {
          "if": { "properties": { "type": { "const": "json_path" } }, "required": ["type"] },
          "then": { "required": ["path", "value"] }
        }
      ]
    },

    "expectations": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "decision": { "type": "string", "enum": ["allow", "deny", "review", "none"] },
        "max_latency_ms": { "$ref": "#/$defs/timeoutMs" },
        "max_cost_usd": { "type": "number", "minimum": 0 },
        "assertions": {
          "type": "array",
          "items": { "$ref": "#/$defs/assertion" },
          "maxItems": 100
        }
      }
    },

    "retryPolicy": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "attempts": { "type": "integer", "minimum": 1, "maximum": 10 },
        "backoff": { "$ref": "#/$defs/isoDuration" },
        "jitter": { "$ref": "#/$defs/probability" }
      }
    },

    "schedule": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "cron": { "$ref": "#/$defs/cronExpr" },
        "window": { "$ref": "#/$defs/isoDuration", "description": "Скольких данных касается мониторинговый запуск (lookback/window)" },
        "timezone": { "type": "string", "minLength": 1, "maxLength": 64 }
      },
      "required": ["cron"]
    },

    "testCase": {
      "type": "object",
      "additionalProperties": false,
      "required": ["id", "purpose"],
      "properties": {
        "id": { "$ref": "#/$defs/nonEmptyString" },
        "purpose": { "type": "string", "maxLength": 1000 },
        "enabled": { "type": "boolean", "default": true },
        "input": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "prompt": { "type": "string", "maxLength": 20000 },
            "generatorRef": { "type": "string", "description": "generators[].id" },
            "samples": { "type": "integer", "minimum": 1, "maximum": 100000 },
            "variables": {
              "type": "object",
              "additionalProperties": { "$ref": "#/$defs/primitive" }
            },
            "attachments": {
              "type": "array",
              "items": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "path": { "type": "string", "minLength": 1, "maxLength": 2048 },
                  "mime_type": { "type": "string", "maxLength": 128 }
                },
                "required": ["path"]
              },
              "maxItems": 20
            }
          },
          "oneOf": [
            { "required": ["prompt"] },
            { "required": ["generatorRef"] }
          ]
        },
        "targetRef": { "type": "string", "description": "targets[].id" },
        "policy_refs": {
          "type": "array",
          "items": { "type": "string", "maxLength": 512 },
          "maxItems": 20
        },
        "expectations": { "$ref": "#/$defs/expectations" },
        "timeout_ms": { "$ref": "#/$defs/timeoutMs" },
        "retry": { "$ref": "#/$defs/retryPolicy" },
        "schedule": { "$ref": "#/$defs/schedule", "description": "Если задано — кейс становится синтетическим монитором." },
        "labels": {
          "type": "object",
          "additionalProperties": { "type": "string", "maxLength": 256 },
          "maxProperties": 50
        }
      },
      "allOf": [
        {
          "if": { "properties": { "input": { "properties": { "attachments": { "minItems": 1 } }, "required": ["attachments"] } } },
          "then": { "required": ["targetRef"] }
        }
      ]
    },

    "metric": {
      "type": "object",
      "additionalProperties": false,
      "required": ["name", "type"],
      "properties": {
        "name": { "$ref": "#/$defs/nonEmptyString" },
        "type": { "type": "string", "enum": ["exact_match", "bleu", "rouge", "bertscore", "custom"] },
        "threshold": { "type": "number" },
        "params": {
          "type": "object",
          "additionalProperties": { "$ref": "#/$defs/primitive" }
        }
      }
    },

    "sink": {
      "type": "object",
      "additionalProperties": false,
      "required": ["type", "uri"],
      "properties": {
        "type": { "type": "string", "enum": ["file", "s3", "gcs", "http"] },
        "uri": { "type": "string", "minLength": 1, "maxLength": 2048 },
        "format": { "type": "string", "enum": ["jsonl", "csv", "parquet"], "default": "jsonl" },
        "compress": { "type": "string", "enum": ["none", "gzip", "zstd"], "default": "gzip" },
        "headers": { "$ref": "#/$defs/headerMap" }
      },
      "allOf": [
        {
          "if": { "properties": { "type": { "const": "http" } }, "required": ["type"] },
          "then": { "required": ["headers"] }
        }
      ]
    }
  },

  "examples": [
    {
      "meta": {
        "schema_version": "1.0.0",
        "name": "nightly-monitoring",
        "owner": "platform-team",
        "environment": "prod",
        "tags": { "service": "veilmind-core" }
      },
      "runtime": {
        "fail_mode": "fail_closed",
        "default_locale": "en",
        "seed": 42,
        "timeouts_ms": { "total": 15000 }
      },
      "targets": [
        {
          "id": "openai-main",
          "type": "openai",
          "model": "gpt-4o-mini",
          "auth": { "type": "bearer_env", "env_var": "OPENAI_API_KEY" },
          "timeouts_ms": { "total": 20000 }
        }
      ],
      "generators": [
        {
          "id": "math-qa",
          "template": "Solve: {{a}} + {{b}} = ?",
          "strategy": "grid",
          "variables": { "a": [1, 2, 3], "b": [4, 5] }
        }
      ],
      "suite": [
        {
          "id": "sanity-echo",
          "purpose": "Быстрый sanity‑чек",
          "input": { "prompt": "Say 'ok'." },
          "targetRef": "openai-main",
          "expectations": {
            "decision": "allow",
            "max_latency_ms": 5000,
            "assertions": [
              { "type": "contains", "value": "ok" }
            ]
          },
          "timeout_ms": 7000
        },
        {
          "id": "math-grid",
          "purpose": "Регресс‑тест сложения",
          "input": { "generatorRef": "math-qa", "samples": 6 },
          "targetRef": "openai-main",
          "expectations": {
            "assertions": [
              { "type": "latency_le_ms", "value": 8000 }
            ]
          },
          "schedule": { "cron": "@hourly" }
        }
      ],
      "reporting": {
        "sinks": [
          { "type": "file", "uri": "results/nightly.jsonl", "format": "jsonl", "compress": "gzip" }
        ],
        "retention_days": 180
      },
      "audit": { "enabled": true, "chain_hash": true, "hash_alg": "sha256" },
      "budget": { "max_requests": 5000, "max_cost_usd": 100.0, "rate_limit_per_min": 300 }
    }
  ]
}
