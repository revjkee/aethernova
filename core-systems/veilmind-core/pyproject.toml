[build-system]
requires = ["poetry-core>=1.9.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "veilmind-core"
version = "1.0.0"
description = "VeilMind Core — secure AI/Zero-Trust backbone library."
authors = ["VeilMind Team <dev@veilmind.example>"]
license = "Apache-2.0"
readme = "README.md"
homepage = "https://veilmind.example"
repository = "https://git.example/veilmind/veilmind-core"
documentation = "https://docs.veilmind.example"
keywords = ["zero-trust", "security", "ai", "telemetry", "policy", "opa", "pydantic"]
# Classifiers help PyPI tooling and security scanners
classifiers = [
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "License :: OSI Approved :: Apache Software License",
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Topic :: Security",
  "Topic :: Software Development :: Libraries"
]
# Package discovery
packages = [
  { include = "veilmind_core", from = "src" }
]
# Include non-Python assets if present
include = [
  { path = "CHANGELOG.md", format = "sdist" },
  { path = "LICENSE", format = "sdist" },
  { path = "NOTICE", format = "sdist" },
  { path = "VERSION", format = "sdist" },
  { path = "THIRD_PARTY_NOTICES.md", format = "sdist" }
]
# Exclude tests/docs from the final wheel to reduce size
exclude = [
  "tests/**",
  "docs/**",
  "examples/**",
  ".github/**",
  ".devcontainer/**",
  "scripts/**"
]

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
pydantic = ">=2.8.0,<3.0.0"
anyio = ">=4.3,<5.0"
orjson = { version = ">=3.10.0,<4.0.0", optional = true }
typing-extensions = { version = ">=4.11.0,<5.0.0", python = "<3.12" }
# Logging (optional; enable via extra "logging")
structlog = { version = ">=24.1.0,<25.0.0", optional = true }
rich = { version = ">=13.7.1,<14.0.0", optional = true }

# Optional integrations (activated via [tool.poetry.extras])
opentelemetry-api = { version = ">=1.25.0,<2.0.0", optional = true }
opentelemetry-sdk = { version = ">=1.25.0,<2.0.0", optional = true }
opentelemetry-exporter-otlp = { version = ">=1.25.0,<2.0.0", optional = true }
prometheus-client = { version = ">=0.20.0,<1.0.0", optional = true }
redis = { version = ">=5.0.4,<6.0.0", optional = true }
sqlalchemy = { version = ">=2.0.30,<3.0.0", optional = true }
asyncpg = { version = ">=0.29.0,<1.0.0", optional = true }
aiokafka = { version = ">=0.10.0,<1.0.0", optional = true }
cryptography = { version = ">=42.0.0,<45.0.0", optional = true }
fastapi = { version = ">=0.111.0,<1.0.0", optional = true }
uvicorn = { version = ">=0.30.0,<1.0.0", optional = true, extras = ["standard"] }

[tool.poetry.extras]
# Install as: poetry install --with extras -E opentelemetry -E prometheus
opentelemetry = ["opentelemetry-api", "opentelemetry-sdk", "opentelemetry-exporter-otlp"]
prometheus = ["prometheus-client"]
redis = ["redis"]
db = ["sqlalchemy", "asyncpg"]
kafka = ["aiokafka"]
crypto = ["cryptography"]
web = ["fastapi", "uvicorn"]
logging = ["structlog", "rich"]
perf = ["orjson", "uvicorn"]

[tool.poetry.group.dev.dependencies]
pre-commit = ">=3.7.0,<4.0.0"
ruff = ">=0.4.9,<1.0.0"
black = ">=24.4.2,<25.0"
isort = ">=5.13.2,<6.0.0"
mypy = ">=1.10.0,<2.0.0"
types-requests = ">=2.32.0.20240622,<3.0.0"
types-redis = { version = ">=4.6.0.20240425,<5.0.0", optional = true }
pip-audit = ">=2.7.2,<3.0.0"

[tool.poetry.group.test.dependencies]
pytest = ">=8.2.0,<9.0.0"
pytest-cov = ">=5.0.0,<6.0.0"
hypothesis = ">=6.108.0,<7.0.0"
httpx = ">=0.27.0,<1.0.0"
coverage = ">=7.5.0,<8.0.0"

[tool.poetry.group.docs.dependencies]
mkdocs = ">=1.6.0,<2.0.0"
mkdocs-material = ">=9.5.25,<10.0.0"
mkdocstrings = ">=0.24.0,<1.0.0"
mkdocstrings-python = ">=1.8.0,<2.0.0"

[tool.poetry.group.lint.dependencies]
bandit = ">=1.7.8,<2.0.0"
codespell = ">=2.3.0,<3.0.0"

[tool.poetry.scripts]
# CLI entry points (example):
veilmind = "veilmind_core.cli:main"
veilmind-health = "veilmind_core.cli:healthcheck"

# Optional alternative Python Package Index mirrors (private registry sample)
# [tool.poetry.source]
# name = "internal"
# url = "https://pkg.internal.example/simple"
# priority = "supplemental"

# --------------------
# Tooling configuration
# --------------------

[tool.black]
line-length = 100
target-version = ["py311", "py312"]
skip-string-normalization = true
preview = true

[tool.isort]
profile = "black"
line_length = 100
force_sort_within_sections = true
known_first_party = ["veilmind_core"]
src_paths = ["src", "tests"]

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
addopts = "-q -ra -s --strict-markers --disable-warnings --cov=veilmind_core --cov-report=term-missing"
xfail_strict = true
markers = [
  "conformance: policy and API conformance tests",
  "slow: slow tests",
  "integration: integration tests"
]
filterwarnings = [
  "error:::veilmind_core\\..*",
  "ignore::DeprecationWarning"
]

[tool.coverage.run]
branch = true
source = ["src/veilmind_core"]
omit = [
  "src/veilmind_core/__main__.py",
  "src/veilmind_core/_version.py",
  "tests/*",
]
dynamic_context = "test_function"

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 90
exclude_lines = [
  "pragma: no cover",
  "if TYPE_CHECKING:",
  "if __name__ == .__main__.:",
]

[tool.coverage.paths]
source = [
  "src/veilmind_core",
  "*/site-packages/veilmind_core"
]

# Ruff/mypy обычно вынесены в отдельные ruff.toml и mypy.ini.
# Если требуется централизовать в pyproject, перенесите соответствующие секции сюда.

# Security scanning configuration (bandit)
[tool.bandit]
skips = ["B101"]  # assert used
targets = ["src/veilmind_core"]

# Commitizen (conventional commits) — опционально для релизов
[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.0"
tag_format = "v$version"
version_files = [
  "pyproject.toml:^version = \""
]
