{{- /*
veilmind-core PodDisruptionBudget (policy/v1), industrial-grade, helper-less.

Values (пример):
pdb:
  enabled: true
  # Используйте РОВНО одно из двух:
  # minAvailable: "50%"        # строка с процентом или число
  # maxUnavailable: 1          # число или процент-строка
  selector:
    matchLabels: {}            # доп. метки к стандартным
component: "api"               # метка компонента для селектора
replicaCount: 3                # если не используется .api.replicaCount
api:
  replicaCount: 3              # альтернативный путь для чтения реплик

Примечание: ресурс создается только при replicas > 1.
*/ -}}
{{- $enabled := dig "pdb" "enabled" true .Values -}}
{{- if $enabled -}}
{{- $replicas := 0 -}}
{{- /* Определяем количество реплик из наиболее типичных мест */ -}}
{{- if hasKey .Values "replicaCount" -}}
  {{- $replicas = (int .Values.replicaCount) -}}
{{- else if and (hasKey .Values "api") (hasKey .Values.api "replicaCount") -}}
  {{- $replicas = (int .Values.api.replicaCount) -}}
{{- else -}}
  {{- $replicas = 1 -}}
{{- end -}}

{{- if gt $replicas 1 -}}
{{- $chartName := .Chart.Name | default "veilmind-core" -}}
{{- $release := .Release.Name -}}
{{- $component := .Values.component | default "api" -}}
{{- $name := printf "%s-%s-pdb" $release $chartName | trunc 63 | trimSuffix "-" -}}
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: {{ $name }}
  labels:
    app.kubernetes.io/name: {{ $chartName }}
    app.kubernetes.io/instance: {{ $release }}
    app.kubernetes.io/component: {{ $component }}
    app.kubernetes.io/part-of: veilmind
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ $chartName }}
      app.kubernetes.io/instance: {{ $release }}
      app.kubernetes.io/component: {{ $component }}
      {{- /* Дополнительные matchLabels из values */ -}}
      {{- with (dig "pdb" "selector" "matchLabels" dict .Values) }}
      {{- toYaml . | nindent 6 }}
      {{- end }}
  {{- /* РОВНО одно поле из minAvailable / maxUnavailable */ -}}
  {{- $minAvail := dig "pdb" "minAvailable" nil .Values -}}
  {{- $maxUnavail := dig "pdb" "maxUnavailable" nil .Values -}}
  {{- if and $minAvail $maxUnavail -}}
  {{- fail "values.yaml error: specify only ONE of pdb.minAvailable or pdb.maxUnavailable" -}}
  {{- end -}}
  {{- if $maxUnavail }}
  maxUnavailable: {{ $maxUnavail }}
  {{- else }}
  minAvailable: {{ $minAvail | default "50%" }}
  {{- end }}
{{- end -}}
{{- end -}}
