{{- /*
veilmind-core Helm Chart
templates/secret.yaml
Режимы (управляются через .Values.secrets.*):
  secrets:
    enabled: true
    name: ""                       # опционально переопределить имя секрета
    type: Opaque                   # Opaque|kubernetes.io/tls|kubernetes.io/dockerconfigjson
    immutable: false
    labels: {}                     # дополнительные метки
    annotations: {}                # дополнительные аннотации
    data: {}                       # key: plaintext (будет в stringData)
    binaryData: {}                 # key: base64 (уйдет в binaryData как есть)
    binaryDataFromFiles: {}        # key: path/inside/chart/file (будет b64enc от .Files.Get)
    tls:
      enabled: false
      crt: ""                      # PEM (stringData.tls.crt)
      key: ""                      # PEM (stringData.tls.key)
      caCrt: ""                    # опционально
    dockerRegistry:
      enabled: false
      server: "ghcr.io"
      username: ""
      password: ""
      email: ""
    externalSecret:
      enabled: false
      refreshInterval: "1h"
      secretStoreRef:
        name: ""                   # SecretStore|ClusterSecretStore
        kind: "SecretStore"
      target:
        creationPolicy: "Owner"    # Owner|Merge|Orphan
        template:
          type: ""                 # желаемый type конечного Secret
          annotations: {}
          labels: {}
      data: []                     # список data мапов: {secretKey, remoteRef{key,property,version}}
      dataFrom: []                 # список dataFrom мапов: {extract:{key: "path"}}
    sealedSecret:
      enabled: false
      controllerName: "sealed-secrets"
      encryptedData: {}            # key: sealedString (обязателен)
      template:
        type: ""                   # type конечного Secret
        annotations: {}
        labels: {}
*/ -}}
{{- if and .Values.secrets .Values.secrets.enabled }}
{{- $fullname := include "veilmind-core.fullname" . -}}
{{- $name := default $fullname .Values.secrets.name -}}
{{- $labels := (include "veilmind-core.labels" . | fromYaml) | default (dict) -}}
{{- $extraLabels := .Values.secrets.labels | default (dict) -}}
{{- $allLabels := merge (dict) $labels $extraLabels -}}
{{- $annotations := .Values.secrets.annotations | default (dict) -}}

{{- /* =========================
      1) ExternalSecret (external-secrets.io)
      ========================= */ -}}
{{- if and .Values.secrets.externalSecret .Values.secrets.externalSecret.enabled }}
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ $name }}
  labels: {{- toYaml $allLabels | nindent 4 }}
  annotations: {{- toYaml $annotations | nindent 4 }}
spec:
  refreshInterval: {{ default "1h" .Values.secrets.externalSecret.refreshInterval | quote }}
  secretStoreRef:
    name: {{ required "secrets.externalSecret.secretStoreRef.name is required" .Values.secrets.externalSecret.secretStoreRef.name | quote }}
    kind: {{ default "SecretStore" .Values.secrets.externalSecret.secretStoreRef.kind | quote }}
  target:
    name: {{ $name }}
    creationPolicy: {{ default "Owner" .Values.secrets.externalSecret.target.creationPolicy | quote }}
    template:
      metadata:
        labels: {{- toYaml (merge (dict) $allLabels (.Values.secrets.externalSecret.target.template.labels | default (dict))) | nindent 10 }}
        annotations: {{- toYaml (.Values.secrets.externalSecret.target.template.annotations | default (dict)) | nindent 10 }}
      {{- with .Values.secrets.externalSecret.target.template.type }}
      type: {{ . | quote }}
      {{- end }}
  {{- with .Values.secrets.externalSecret.data }}
  data:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.secrets.externalSecret.dataFrom }}
  dataFrom:
    {{- toYaml . | nindent 4 }}
  {{- end }}
---
{{- end }}

{{- /* =========================
      2) SealedSecret (Bitnami)
      ========================= */ -}}
{{- if and .Values.secrets.sealedSecret .Values.secrets.sealedSecret.enabled }}
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: {{ $name }}
  labels: {{- toYaml $allLabels | nindent 4 }}
  annotations: {{- toYaml $annotations | nindent 4 }}
spec:
  {{- with .Values.secrets.sealedSecret.encryptedData }}
  encryptedData:
    {{- toYaml . | nindent 4 }}
  {{- else }}
  {{- fail "secrets.sealedSecret.enabled=true requires secrets.sealedSecret.encryptedData" }}
  {{- end }}
  template:
    metadata:
      name: {{ $name }}
      labels: {{- toYaml (merge (dict) $allLabels (.Values.secrets.sealedSecret.template.labels | default (dict))) | nindent 8 }}
      annotations: {{- toYaml (.Values.secrets.sealedSecret.template.annotations | default (dict)) | nindent 8 }}
    {{- with .Values.secrets.sealedSecret.template.type }}
    type: {{ . | quote }}
    {{- end }}
---
{{- end }}

{{- /* =========================
      3) Docker registry (pull secret)
      ========================= */ -}}
{{- if and .Values.secrets.dockerRegistry .Values.secrets.dockerRegistry.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $name }}
  labels: {{- toYaml $allLabels | nindent 4 }}
  annotations: {{- toYaml $annotations | nindent 4 }}
type: kubernetes.io/dockerconfigjson
immutable: {{ default false .Values.secrets.immutable }}
stringData:
  .dockerconfigjson: |
    {{- $server := required "secrets.dockerRegistry.server is required" .Values.secrets.dockerRegistry.server -}}
    {{- $user := required "secrets.dockerRegistry.username is required" .Values.secrets.dockerRegistry.username -}}
    {{- $pass := required "secrets.dockerRegistry.password is required" .Values.secrets.dockerRegistry.password -}}
    {{- $email := default "" .Values.secrets.dockerRegistry.email -}}
    {
      "auths": {
        "{{ $server }}": {
          "username": "{{ $user }}",
          "password": "{{ $pass }}",
          "email": "{{ $email }}",
          "auth": "{{ printf "%s:%s" $user $pass | b64enc }}"
        }
      }
    }
---
{{- end }}

{{- /* =========================
      4) TLS Secret
      ========================= */ -}}
{{- if and .Values.secrets.tls .Values.secrets.tls.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $name }}
  labels: {{- toYaml $allLabels | nindent 4 }}
  annotations: {{- toYaml $annotations | nindent 4 }}
type: kubernetes.io/tls
immutable: {{ default false .Values.secrets.immutable }}
stringData:
  tls.crt: {{ required "secrets.tls.crt is required when tls.enabled" .Values.secrets.tls.crt | quote }}
  tls.key: {{ required "secrets.tls.key is required when tls.enabled" .Values.secrets.tls.key | quote }}
  {{- with .Values.secrets.tls.caCrt }}
  ca.crt: {{ . | quote }}
  {{- end }}
---
{{- end }}

{{- /* =========================
      5) Default Opaque Secret
      Рендерится только если не включены External/Sealed/Docker/TLS
      ========================= */ -}}
{{- $useExternal := and .Values.secrets.externalSecret .Values.secrets.externalSecret.enabled -}}
{{- $useSealed := and .Values.secrets.sealedSecret .Values.secrets.sealedSecret.enabled -}}
{{- $useDock   := and .Values.secrets.dockerRegistry .Values.secrets.dockerRegistry.enabled -}}
{{- $useTLS    := and .Values.secrets.tls .Values.secrets.tls.enabled -}}
{{- if not (or $useExternal $useSealed $useDock $useTLS) }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $name }}
  labels: {{- toYaml $allLabels | nindent 4 }}
  annotations: {{- toYaml $annotations | nindent 4 }}
type: {{ default "Opaque" .Values.secrets.type }}
immutable: {{ default false .Values.secrets.immutable }}
{{- $ctx := . -}}
{{- $stringData := dict -}}
{{- range $k, $v := (.Values.secrets.data | default dict) }}
  {{- $_ := set $stringData $k (tpl (printf "%v" $v) $ctx) -}}
{{- end }}
{{- if gt (len $stringData) 0 }}
stringData:
{{- range $k, $v := $stringData }}
  {{ $k }}: |-
{{ $v | indent 4 }}
{{- end }}
{{- end }}
{{- $hasBinary := gt (len (.Values.secrets.binaryData | default dict)) 0 -}}
{{- $hasFiles  := gt (len (.Values.secrets.binaryDataFromFiles | default dict)) 0 -}}
{{- if or $hasBinary $hasFiles }}
binaryData:
  {{- range $k, $v := (.Values.secrets.binaryData | default dict) }}
  {{ $k }}: {{ $v | quote }}
  {{- end }}
  {{- range $k, $path := (.Values.secrets.binaryDataFromFiles | default dict) }}
  {{- $content := .Files.Get $path | b64enc | default "" -}}
  {{- if eq $content "" -}}
  {{- fail (printf "binaryDataFromFiles: file %q not found in chart" $path) -}}
  {{- end -}}
  {{ $k }}: {{ $content | quote }}
  {{- end }}
{{- end }}
---
{{- end }}
{{- end }}
