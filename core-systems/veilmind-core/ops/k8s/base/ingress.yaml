apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: veilmind-core
  # namespace: veilmind               # при необходимости раскомментируйте
  labels:
    app.kubernetes.io/name: veilmind-core
    app.kubernetes.io/part-of: veilmind
    app.kubernetes.io/component: api-gateway
  annotations:
    # --- Ingress class / controller ---
    kubernetes.io/ingress.class: "nginx"                           # или укажите свой класс
    # --- TLS & HTTPS redirect ---
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"           # HTTP к сервису; для gRPC используйте "GRPC"
    nginx.ingress.kubernetes.io/ssl-passthrough: "false"           # управляем TLS на Ingress, не на бэкенде
    # --- Timeouts / buffers / body size ---
    nginx.ingress.kubernetes.io/proxy-body-size: "2m"              # ограничение размера запроса
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "5s"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60s"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60s"
    nginx.ingress.kubernetes.io/proxy-buffering: "on"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"
    # --- WebSocket / gRPC readiness ---
    nginx.ingress.kubernetes.io/proxy-http-version: "1.1"
    nginx.ingress.kubernetes.io/use-regex: "true"
    # --- Client IP preservation (при наличии proxy-protocol настройте контроллер) ---
    nginx.ingress.kubernetes.io/enable-access-log: "true"
    # --- Rate limiting (защита от DDoS на L7) ---
    nginx.ingress.kubernetes.io/limit-rps: "20"                    # запросов в секунду на IP
    nginx.ingress.kubernetes.io/limit-burst-multiplier: "5"
    nginx.ingress.kubernetes.io/limit-exempt: "127.0.0.1"          # локальные исключения
    # --- WAF: ModSecurity + OWASP CRS (при включённом модуле в контроллере) ---
    nginx.ingress.kubernetes.io/enable-modsecurity: "true"
    nginx.ingress.kubernetes.io/enable-owasp-core-rules: "true"
    nginx.ingress.kubernetes.io/modsecurity-snippet: |
      SecRuleEngine On
      SecRequestBodyAccess On
      SecResponseBodyAccess Off
      # Разрешаем health‑эндпоинты без избыточных правил
      SecRule REQUEST_URI "@beginsWith /healthz" "id:900100,phase:1,pass,ctl:ruleEngine=DetectionOnly"
    # --- Security headers (server context) ---
    nginx.ingress.kubernetes.io/server-snippet: |
      add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-Frame-Options "DENY" always;
      add_header Referrer-Policy "no-referrer" always;
      add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
      # Минимально безопасный CSP; адаптируйте под фронтенд, иначе может блокировать ресурсы
      add_header Content-Security-Policy "default-src 'none'; frame-ancestors 'none'; base-uri 'none'; form-action 'self'" always;
    # --- Security headers (location context) ---
    nginx.ingress.kubernetes.io/configuration-snippet: |
      # Кэширование ответов API обычно отключают
      add_header Cache-Control "no-store" always;
      # Защита от XSS-отражений (устаревшая, но безвредная)
      add_header X-XSS-Protection "1; mode=block" always;
    # --- mTLS (клиентские сертификаты) — включайте при необходимости ---
    # nginx.ingress.kubernetes.io/auth-tls-secret: "veilmind/clients-ca" # namespace/name секрета с CA
    # nginx.ingress.kubernetes.io/auth-tls-verify-client: "on"
    # nginx.ingress.kubernetes.io/auth-tls-verify-depth: "2"
    # nginx.ingress.kubernetes.io/auth-tls-pass-certificate-to-upstream: "true"
    # --- CORS (при необходимости откройте домены/методы) ---
    # nginx.ingress.kubernetes.io/enable-cors: "true"
    # nginx.ingress.kubernetes.io/cors-allow-origin: "https://app.example.com"
    # nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, OPTIONS"
    # nginx.ingress.kubernetes.io/cors-allow-headers: "Authorization, Content-Type"
spec:
  ingressClassName: nginx                                      # дублируем явным полем (networking.k8s.io/v1)
  tls:
    - hosts:
        - api.example.com                                      # ЗАМЕНИТЕ на ваш домен
      secretName: veilmind-core-tls                            # Секрет типа kubernetes.io/tls
  rules:
    - host: api.example.com                                    # ЗАМЕНИТЕ на ваш домен
      http:
        paths:
          # Health / readiness — отдаёт 200 быстро
          - path: /healthz
            pathType: Prefix
            backend:
              service:
                name: veilmind-api                             # ЗАМЕНИТЕ на имя сервиса
                port:
                  number: 8080                                 # ЗАМЕНИТЕ на порт сервиса
          - path: /readyz
            pathType: Prefix
            backend:
              service:
                name: veilmind-api
                port:
                  number: 8080
          # Основное API
          - path: /
            pathType: Prefix
            backend:
              service:
                name: veilmind-api
                port:
                  number: 8080
