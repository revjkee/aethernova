---
apiVersion: v1
kind: Secret
metadata:
  name: veilmind-core-secrets
  namespace: veilmind
  labels:
    app.kubernetes.io/name: veilmind-core
    app.kubernetes.io/instance: veilmind-core
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: veilmind
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kustomize
  annotations:
    kubernetes.io/description: "Application secrets for VeilMind Core (JWT, tokens, DB). Replace in overlays."
    secret.kubernetes.io/rotation-policy: "manual"
type: Opaque
stringData:
  # JWT / криптография
  APP_JWT_SIGNING_KEY: "change-me-strong-256bit-key"
  APP_JWT_AUDIENCE: "veilmind-core"
  APP_JWT_ISSUER: "veilmind-core"

  # Интеграции и телеметрия
  OTEL_EXPORTER_OTLP_HEADERS: "Authorization=Bearer change-me"
  PROM_PUSHGATEWAY_BASIC_AUTH: "user:pass"  # если используется pushgateway

  # Хранилища/брокеры
  REDIS_PASSWORD: "redis-strong-pass"
  POSTGRES_DSN: "postgresql+asyncpg://vm_user:vm_pass@postgres:5432/veilmind"
  KAFKA_SASL_USERNAME: "vm_sasl"
  KAFKA_SASL_PASSWORD: "vm_sasl_pass"

  # Служебные ключи
  API_INTERNAL_TOKEN: "change-me-internal"
  ENCRYPTION_AT_REST_KEY: "change-me-kms-fallback-32B"
---
apiVersion: v1
kind: Secret
metadata:
  name: veilmind-core-regcred
  namespace: veilmind
  labels:
    app.kubernetes.io/name: veilmind-core
    app.kubernetes.io/component: registry-credentials
  annotations:
    kubernetes.io/description: "Docker registry credentials for pulling private images."
type: kubernetes.io/dockerconfigjson
# Для удобства разработки используем stringData; в production замените на data с base64.
stringData:
  .dockerconfigjson: |
    {
      "auths": {
        "registry.example.com": {
          "username": "robot$veilmind",
          "password": "change-me",
          "auth": "cm9ib3QkdmVpbG1pbmQ6Y2hhbmdlLW1l"  # base64(username:password)
        }
      }
    }
---
apiVersion: v1
kind: Secret
metadata:
  name: veilmind-core-tls
  namespace: veilmind
  labels:
    app.kubernetes.io/name: veilmind-core
    app.kubernetes.io/component: tls
  annotations:
    kubernetes.io/description: "TLS certificate for VeilMind Core (ingress/mTLS)."
type: kubernetes.io/tls
# В base удобнее положить в stringData; контроллеры допускают и data (base64).
stringData:
  tls.crt: |
    -----BEGIN CERTIFICATE-----
    # place dev certificate here
    -----END CERTIFICATE-----
  tls.key: |
    -----BEGIN PRIVATE KEY-----
    # place dev key here
    -----END PRIVATE KEY-----
---
# Альтернатива: SealedSecret (Bitnami). Этот объект коммитится в репозиторий, а контроллер
# генерирует обычный Secret выше. Ниже — полностью оформленный, но без зашифрованных данных.
# Зашифруйте значения kubeseal и замените spec.encryptedData.* соответствующими CipherText.
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: veilmind-core-secrets
  namespace: veilmind
  labels:
    app.kubernetes.io/name: veilmind-core
    app.kubernetes.io/component: backend
spec:
  template:
    metadata:
      name: veilmind-core-secrets
      namespace: veilmind
      labels:
        app.kubernetes.io/name: veilmind-core
        app.kubernetes.io/component: backend
      annotations:
        kubernetes.io/description: "SealedSecret for application secrets (production)."
    type: Opaque
  encryptedData:
    # Примеры ключей (замените значения на зашифрованные строки из kubeseal --format=yaml)
    APP_JWT_SIGNING_KEY: ""
    OTEL_EXPORTER_OTLP_HEADERS: ""
    REDIS_PASSWORD: ""
    POSTGRES_DSN: ""
    KAFKA_SASL_USERNAME: ""
    KAFKA_SASL_PASSWORD: ""
    API_INTERNAL_TOKEN: ""
    ENCRYPTION_AT_REST_KEY: ""
