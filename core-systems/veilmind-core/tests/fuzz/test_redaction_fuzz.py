# -*- coding: utf-8 -*-
"""
Fuzz-—Ç–µ—Å—Ç—ã –¥–ª—è veilmind.prompt_guard.sanitizer.PromptSanitizer.

–¶–µ–ª–∏:
  - –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –Ω–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–º ¬´–≥—Ä—è–∑–Ω–æ–º¬ª –≤–≤–æ–¥–µ.
  - –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —É—Ç–µ—á–µ–∫ —Å–µ–∫—Ä–µ—Ç–æ–≤/PII –ø–æ—Å–ª–µ —Å–∞–Ω–∏—Ç–∞–π–∑–∞.
  - –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è fast-blocklist/jailbreak/injection.
  - –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–∞–Ω–∏—Ç–∞–π–∑–∞.
  - –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: —É–¥–∞–ª–µ–Ω–∏–µ zero-width, —Å—Ö–ª–æ–ø—ã–≤–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–æ–≤.
  - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: –æ–±—Ä–∞–±–æ—Ç–∫–∞ ¬´–¥–ª–∏–Ω–Ω—ã—Ö¬ª —Å—Ç—Ä–æ–∫ (smoke).

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pytest, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ Python.
"""

from __future__ import annotations

import json
import random
import re
import string
import unicodedata
import pytest

from veilmind.prompt_guard.sanitizer import PromptSanitizer

# -----------------------------------------------------------------------------
# –ö–æ–Ω—Ñ–∏–≥ —Å–∞–Ω–∏—Ç–∞–π–∑–µ—Ä–∞ (—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω —Å sanitizer._cfg_from_dict)
# -----------------------------------------------------------------------------

def base_config(**overrides) -> dict:
    cfg = {
        "normalize": {
            "unicode_nfkc": True,
            "strip_control_chars": True,
            "collapse_whitespace": True,
            "trim": True,
            "lowercase_for_matchers": True,
            "max_repeated_chars": 8,
        },
        "redact_transform": {
            "default_mask": "[REDACTED]",
            "annotate_redactions": True,
            "annotations": {"prefix": "[REDACTED:", "suffix": "]"},
            "preserve_length_hint": False,
        },
        "policy_decision": {
            "risk_weights": {
                "secrets": 1.0,
                "pii": 0.6,
                "jailbreak": 0.8,
                "injection": 0.9,
                "safety": 1.0,
                "exfiltration": 1.0,
                "tools_abuse": 0.9,
            },
            "thresholds": {"deny": 0.8, "review": 0.6},
            "tie_breaker": "deny",
        },
        "fast_blocklists": {
            "patterns": [
                r"BEGIN\s+PRIVATE\s+KEY",
            ]
        },
        "detectors": {
            "secrets": [
                {
                    "id": "aws_access_key",
                    "pattern": r"\bAKIA[0-9A-Z]{16}\b",
                    "deny_immediately": True,
                    "severity": "critical",
                }
            ],
            "pii": [
                {
                    "id": "email",
                    "pattern": r"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}",
                    "severity": "medium",
                }
            ],
            "jailbreak": {
                "heuristics": {
                    "signals": [r"\bignore previous instructions\b"]
                }
            },
            "injection": [],
            "exfiltration": [],
            "tools_abuse": [],
        },
        "route_model": {
            "safe_prompt_prefix": {"text": ""},
        },
        "runtime": {
            "fail_mode": "fail_closed",
        },
    }
    cfg.update(overrides)
    return cfg

def make_sanitizer(cfg: dict | None = None) -> PromptSanitizer:
    return PromptSanitizer.from_dict(cfg or base_config())

# -----------------------------------------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
# -----------------------------------------------------------------------------

ZERO_WIDTHS = ["\u200b", "\u200c", "\u200d", "\ufeff", "\u2060"]
HOMO = {
    "i": "ƒ±", "I": "Ôº©",
    "o": "–æ", "O": "–û",  # –ª–∞—Ç–∏–Ω—Å–∫–∞—è -> –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∞—è
    "a": "–∞", "A": "–ê",
    "e": "–µ", "E": "–ï",
    "c": "—Å", "C": "–°",
    "x": "—Ö", "X": "–•",
    "-": "‚Äî",
}

ASCII = string.ascii_letters + string.digits + " .,;:!?()[]{}<>-_/\\|@#%^&*+="
UNICODE_SPICE = "Œ±Œ≤Œ≥Œ¥ŒµŒ∂Œ∑Œ∏ŒªŒºŒΩŒæœÄœÉœÑœÖœÜœáœàœâ‚Äî‚Äì¬´¬ª‚Äû‚Äú‚Äù‚Äô‚òÜ‚òÖ‚úì‚úî‚úó¬©¬Æùüòùüôùüöùüõùüúùüù"
CTRL = "".join(chr(i) for i in range(0x00, 0x20) if i not in (0x09, 0x0A))  # –∏—Å–∫–ª—é—á–∏–º \t –∏ \n

def rand_email(rnd: random.Random) -> str:
    name = "".join(rnd.choice(string.ascii_lowercase + "._") for _ in range(rnd.randint(3, 10))).strip(".")
    domain = "".join(rnd.choice(string.ascii_lowercase) for _ in range(rnd.randint(3, 8)))
    tld = rnd.choice(["com", "org", "io", "net"])
    return f"{name}@{domain}.{tld}"

def rand_aws_key(rnd: random.Random) -> str:
    return "AKIA" + "".join(rnd.choice(string.ascii_uppercase + string.digits) for _ in range(16))

def obfuscate_jailbreak(rnd: random.Random, s: str = "ignore previous instructions") -> str:
    # –í—Å—Ç–∞–≤–ª—è–µ–º zero-width, –∑–∞–º–µ–Ω—è–µ–º —á–∞—Å—Ç—å –±—É–∫–≤ –≥–æ–º–æ–≥–ª–∏—Ñ–∞–º–∏, –º–µ—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä
    out = []
    for ch in s:
        ch2 = HOMO.get(ch, HOMO.get(ch.upper(), ch))
        ch3 = ch2.upper() if rnd.random() < 0.3 else ch2.lower()
        out.append(ch3)
        if rnd.random() < 0.4:
            out.append(rnd.choice(ZERO_WIDTHS))
    return "".join(out)

def rand_noise(rnd: random.Random, n: int) -> str:
    alphabet = ASCII + UNICODE_SPICE + ZERO_WIDTHS[rnd.randrange(len(ZERO_WIDTHS))] + CTRL
    return "".join(rnd.choice(alphabet) for _ in range(n))

def with_insertions(rnd: random.Random) -> str:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ –∫—É—Å–æ—á–∫–æ–≤ —à—É–º–∞ –∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –≤—Å—Ç–∞–≤–æ–∫ —Å–µ–∫—Ä–µ—Ç–æ–≤/PII/–∏–Ω—ä–µ–∫—Ü–∏–π/–ø–æ–≤—Ç–æ—Ä–æ–≤.
    """
    parts = []
    # 6-12 –±–ª–æ–∫–æ–≤
    for _ in range(rnd.randint(6, 12)):
        parts.append(rand_noise(rnd, rnd.randint(5, 40)))
        dice = rnd.random()
        if dice < 0.25:
            parts.append(rand_email(rnd))
        elif dice < 0.45:
            parts.append(rand_aws_key(rnd))
        elif dice < 0.65:
            parts.append(obfuscate_jailbreak(rnd))
        elif dice < 0.8:
            # –¥–ª–∏–Ω–Ω–∞—è —Å–µ—Ä–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤
            ch = rnd.choice("AaBb.-_=*")
            parts.append(ch * rnd.randint(12, 40))  # –±–æ–ª—å—à–µ max_repeated_chars
        else:
            # —Ñ—Ä–∞–≥–º–µ–Ω—Ç, –ø–æ–ø–∞–¥–∞—é—â–∏–π –≤ fast_blocklist (–≤–æ–∑–º–æ–∂–Ω–æ —Å —à—É–º–æ–º)
            parts.append("----BEGIN PRIVATE KEY----\n" + rand_noise(rnd, rnd.randint(5, 20)))
    return " ".join(parts)

SECRET_RE = re.compile(r"\bAKIA[0-9A-Z]{16}\b")
EMAIL_RE = re.compile(r"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}")

# -----------------------------------------------------------------------------
# Fuzz: –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–±–æ–µ–≤, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —É—Ç–µ—á–µ–∫, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
# -----------------------------------------------------------------------------

@pytest.mark.parametrize("seed", list(range(64)))
def test_fuzz_no_crash_and_no_leak(seed: int):
    rnd = random.Random(seed)
    s = make_sanitizer()

    text = with_insertions(rnd)
    res = s.sanitize_input(text)

    # 1) –°–∞–Ω–∏—Ç–∞–π–∑–µ—Ä –Ω–µ –ø–∞–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    assert res is not None
    assert any(m.name == "total" for m in res.metrics)
    assert all(m.took_ms >= 0 for m in res.metrics)

    # 2) –ü–æ—Å–ª–µ —Å–∞–Ω–∏—Ç–∞–π–∑–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è ¬´—Å—ã—Ä–æ–≥–æ¬ª —Å–µ–∫—Ä–µ—Ç–∞ –∏–ª–∏ email
    assert not SECRET_RE.search(res.sanitized_text), "—Å–µ–∫—Ä–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ—Å–æ—á–∏—Ç—å—Å—è"
    # Email –º–æ–∂–µ—Ç –∏—Å—á–µ–∑–Ω—É—Ç—å –∏–ª–∏ –±—ã—Ç—å –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω; –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã ¬´—Å—ã—Ä—ã—Ö¬ª email –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
    # –†–∞–∑—Ä–µ—à–∞–µ–º –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ä –≤ —Ç–µ–∫—Å—Ç–µ.
    for m in EMAIL_RE.finditer(res.sanitized_text):
        frag = m.group(0)
        assert "[REDACTED" in res.sanitized_text or frag not in res.sanitized_text

    # 3) –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–∏–∫ —Å–æ–¥–µ—Ä–∂–∞–ª —Å–µ–∫—Ä–µ—Ç ‚Äî –æ–∂–∏–¥–∞–µ–º deny –∏ –Ω–∞—Ö–æ–¥–∫—É category="secret"
    had_secret = bool(SECRET_RE.search(text))
    if had_secret:
        assert res.decision == "deny"
        assert any(f.category == "secret" for f in res.findings)

    # 4) –ï—Å–ª–∏ –±—ã–ª fast-blocklist —Ñ—Ä–∞–≥–º–µ–Ω—Ç ‚Äî —Ç–æ–∂–µ –Ω–µ –Ω–∏–∂–µ deny
    if "BEGIN PRIVATE KEY" in text:
        assert res.decision in ("deny",), "fast-blocklist –¥–æ–ª–∂–µ–Ω —ç—Å–∫–∞–ª–∏—Ä–æ–≤–∞—Ç—å –¥–æ deny"

    # 5) –ï—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∞ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è jailbreak-—Ñ—Ä–∞–∑–∞ ‚Äî –Ω–µ –Ω–∏–∂–µ review
    if "ignore" in unicodedata.normalize("NFKC", text).lower() or any(z in text for z in ZERO_WIDTHS):
        # —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –Ω–∞–ª–∏—á–∏–µ –Ω—É–ª–µ–≤–æ–π —à–∏—Ä–∏–Ω—ã + —Ñ—Ä–∞–∑—ã –≤ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —á–∞—Å—Ç–æ
        if any(f.category in ("jailbreak", "injection") for f in res.findings):
            assert res.decision in ("review", "deny")


# -----------------------------------------------------------------------------
# –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: –ø–æ–≤—Ç–æ—Ä–Ω—ã–π —Å–∞–Ω–∏—Ç–∞–π–∑ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç/—Ä–µ—à–µ–Ω–∏–µ
# -----------------------------------------------------------------------------

@pytest.mark.parametrize("seed", list(range(16)))
def test_idempotent(seed: int):
    rnd = random.Random(10_000 + seed)
    s = make_sanitizer()
    text = with_insertions(rnd)

    res1 = s.sanitize_input(text)
    res2 = s.sanitize_input(res1.sanitized_text)

    assert res2.sanitized_text == res1.sanitized_text
    # –†–µ—à–µ–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ ¬´—É—Ö—É–¥—à–∞—Ç—å—Å—è¬ª –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    order = {"allow": 0, "review": 1, "deny": 2}
    assert order[res2.decision] <= order[res1.decision]


# -----------------------------------------------------------------------------
# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: zero-width —É–¥–∞–ª–µ–Ω—ã, –ø–æ–≤—Ç–æ—Ä—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã
# -----------------------------------------------------------------------------

@pytest.mark.parametrize("seed", list(range(8)))
def test_zero_width_removed_and_repeats_limited(seed: int):
    rnd = random.Random(20_000 + seed)
    s = make_sanitizer()

    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–ª–µ–≤–æ–π —à–∏—Ä–∏–Ω–æ–π –∏ –¥–ª–∏–Ω–Ω—ã–º–∏ –ø–æ–≤—Ç–æ—Ä–∞–º–∏
    zw = "".join(rnd.choice(ZERO_WIDTHS) for _ in range(20))
    long_run = "A" * 50 + "." * 50 + "-" * 50
    text = f"prefix{zw}middle{zw}suffix {long_run}"

    res = s.sanitize_input(text)
    # Zero-width –Ω–µ –¥–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è
    assert not any(z in res.sanitized_text for z in ZERO_WIDTHS)
    # –ü–æ–≤—Ç–æ—Ä—ã –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—Ç—Å—è –¥–æ max_repeated_chars (8 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    assert "A" * 9 not in res.sanitized_text
    assert "." * 9 not in res.sanitized_text
    assert "-" * 9 not in res.sanitized_text


# -----------------------------------------------------------------------------
# –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (smoke): –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
# -----------------------------------------------------------------------------

def test_long_input_smoke():
    rnd = random.Random(12345)
    s = make_sanitizer()

    # ~50K —Å–∏–º–≤–æ–ª–æ–≤ —Å —Ä–µ–¥–∫–∏–º–∏ –≤—Å—Ç–∞–≤–∫–∞–º–∏ —à–∞–±–ª–æ–Ω–æ–≤
    chunks = []
    for i in range(500):
        chunks.append(rand_noise(rnd, 80))
        if i % 25 == 0:
            chunks.append(rand_aws_key(rnd))
        if i % 33 == 0:
            chunks.append(rand_email(rnd))
    text = " ".join(chunks)

    res = s.sanitize_input(text)
    assert res is not None
    # –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å—ã—Ä—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤/PII
    assert not SECRET_RE.search(res.sanitized_text)
    assert not EMAIL_RE.search(res.sanitized_text)


# -----------------------------------------------------------------------------
# JSON/JSONL: —Å—Ç—Ä–æ–∫–∞ —Å –ø–æ–ª–µ–º message (—ç–º—É–ª—è—Ü–∏—è run_redact —Ä–µ–∂–∏–º–∞)
# -----------------------------------------------------------------------------

@pytest.mark.parametrize("seed", list(range(4)))
def test_json_like_payload(seed: int):
    rnd = random.Random(30_000 + seed)
    s = make_sanitizer()

    payload = {
        "level": "info",
        "message": with_insertions(rnd),
        "meta": {"user": rand_email(rnd)},
    }
    txt = json.dumps(payload, ensure_ascii=False)

    # –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—è (–∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç CLI): –≤—ã–¥–µ–ª—è–µ–º message
    obj = json.loads(txt)
    msg = obj["message"]
    res = s.sanitize_input(msg)

    # –í–æ–∑–≤—Ä–∞—Ç –±–µ–∑ —É—Ç–µ—á–µ–∫, —Å –¥–æ–ø—É—Å—Ç–∏–º—ã–º —Ä–µ—à–µ–Ω–∏–µ–º
    assert not SECRET_RE.search(res.sanitized_text)
    # –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω–∞—è message —Å–æ–¥–µ—Ä–∂–∞–ª–∞ —Å–µ–∫—Ä–µ—Ç ‚Äî deny
    if SECRET_RE.search(msg):
        assert res.decision == "deny"
