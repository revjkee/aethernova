# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∞–¥–∞–ø—Ç–µ—Ä–∞ Presidio –¥–ª—è VeilMind Core.

–ü–æ–∫—Ä—ã—Ç–∏–µ:
  - –ö–æ–Ω—Ç—Ä–∞–∫—Ç API: detect_pii, redact_text_by_pii, (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) batch_detect_pii, detect_language
  - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –±–∞–π—Ç–æ–≤—ã–º —Å–º–µ—â–µ–Ω–∏—è–º (UTF‚Äë8, emoji)
  - –°–ª–∏—è–Ω–∏–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö—Å—è —Å—É—â–Ω–æ—Å—Ç–µ–π
  - –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  - –ë–∞—Ç—á‚Äë–æ–±—Ä–∞–±–æ—Ç–∫–∞ (–µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞)

–¢–µ—Å—Ç—ã –ù–ï —Ç—Ä–µ–±—É—é—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–≤—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.
"""

from __future__ import annotations

import os
import typing as t

import pytest

# –ú–æ–¥—É–ª—å –∞–¥–∞–ø—Ç–µ—Ä–∞ –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–∫–∏–ø–∞–µ–º.
adapter_mod = pytest.importorskip(
    "veilmind.adapters.presidio_adapter",
    reason="Presidio adapter is not installed/available"
)

# –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–µ –∫–ª–∞—Å—Å—ã; –∏–Ω–∞—á–µ –±—É–¥–µ–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏.
PresidioAdapter = getattr(adapter_mod, "PresidioAdapter", None)
PresidioAdapterConfig = getattr(adapter_mod, "PresidioAdapterConfig", None)
PiiEntity = getattr(adapter_mod, "PiiEntity", None)

if PresidioAdapter is None or PresidioAdapterConfig is None or PiiEntity is None:
    pytest.skip("Presidio adapter does not expose required public classes (PresidioAdapter, Config, PiiEntity).")


@pytest.fixture(scope="session")
def cfg() -> "PresidioAdapterConfig":
    # –ö–æ–Ω—Ñ–∏–≥ –≤—ã–±–∏—Ä–∞–µ—Ç RU/EN, –æ—Ç–∫–ª—é—á–∞–µ—Ç –≤–Ω–µ—à–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏, –∑–∞–¥–∞–µ—Ç —Ç–∞–π–º‚Äë–∞—É—Ç—ã/–ª–∏–º–∏—Ç—ã.
    return PresidioAdapterConfig(
        languages=("en", "ru"),
        max_input_bytes=8000,
        enable_default_recognizers=True,
        extra_recognizers=None,
        read_timeout=5.0,
        connect_timeout=2.0,
    )


@pytest.fixture(scope="session")
def adapter(cfg: "PresidioAdapterConfig") -> "PresidioAdapter":
    return PresidioAdapter(cfg)


# -----------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
# -----------------

def _byte_offsets(text: str, substring: str) -> tuple[int, int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (begin_byte, end_byte) –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è substring –≤ text
    –≤ —Ç–µ—Ä–º–∏–Ω–∞—Ö UTF‚Äë8 –±–∞–π—Ç–æ–≤—ã—Ö —Å–º–µ—â–µ–Ω–∏–π.
    """
    i = text.find(substring)
    assert i >= 0, f"substring '{substring}' not found"
    prefix_b = text[:i].encode("utf-8")
    sub_b = substring.encode("utf-8")
    return len(prefix_b), len(prefix_b) + len(sub_b)


def _make_entity(text: str, fragment: str, typ: str = "TEST") -> "PiiEntity":
    b, e = _byte_offsets(text, fragment)
    return PiiEntity(type=typ, score=0.99, begin_offset=b, end_offset=e)


# -----------------
# –ë–∞–∑–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã
# -----------------

@pytest.mark.integration
def test_detect_pii_contract(adapter: "PresidioAdapter"):
    text = "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤, email: ivan.petrov@example.com, phone: +7 911 555-44-33."
    res = adapter.detect_pii(text)
    # –ö–æ–Ω—Ç—Ä–∞–∫—Ç: —É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –µ—Å—Ç—å entities (—Å–ø–∏—Å–æ–∫), —É —Å—É—â–Ω–æ—Å—Ç–µ–π ‚Äî type, score, begin/end_offset.
    assert hasattr(res, "entities"), "PiiResult must have 'entities'"
    assert isinstance(res.entities, list)
    for ent in res.entities:
        assert hasattr(ent, "type")
        assert hasattr(ent, "score")
        assert hasattr(ent, "begin_offset") and hasattr(ent, "end_offset")
        assert isinstance(ent.begin_offset, int) and isinstance(ent.end_offset, int)
        assert ent.end_offset >= ent.begin_offset

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–∞–∑–æ–≤—ã—Ö —Ç–∏–ø–æ–≤; –¥–µ–ª–∞–µ–º —Å–ª–∞–±—É—é –ø—Ä–æ–≤–µ—Ä–∫—É (–Ω–µ —Ñ–ª–µ–π–∫–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö)
    types = {e.type for e in res.entities}
    # –ö–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –∏–∑ —Ç–∏–ø–∏—á–Ω—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω
    assert any(t in types for t in {"EMAIL_ADDRESS", "PHONE_NUMBER", "NRP", "PERSON"})


@pytest.mark.integration
def test_redaction_masks_bytes_mapping_unicode(adapter: "PresidioAdapter"):
    # –í–∫–ª—é—á–∞–µ–º emoji –∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—É, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –±–∞–π—Ç–æ–≤—ã—Ö —Å–º–µ—â–µ–Ω–∏–π ‚Üí —Å–∏–º–≤–æ–ª—ã.
    text = "üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –ø–æ –Ω–æ–º–µ—Ä—É +7‚Äë911‚Äë555‚Äë44‚Äë33 –∏–ª–∏ email: ivan@example.com"
    phone_frag = "+7‚Äë911‚Äë555‚Äë44‚Äë33"
    mail_frag = "ivan@example.com"

    ents = [
        _make_entity(text, phone_frag, "PHONE_NUMBER"),
        _make_entity(text, mail_frag, "EMAIL_ADDRESS"),
    ]

    red = adapter.redact_text_by_pii(
        text, ents, mode="mask", mask_char="*", keep_head=2, keep_tail=2
    )

    # –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω, –Ω–æ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º 2+2 —Å–∏–º–≤–æ–ª–æ–≤
    assert red.count(phone_frag[:2]) >= 1 and red.count(phone_frag[-2:]) >= 1
    assert phone_frag not in red
    # Email —Ç–∞–∫–∂–µ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ü–µ–ª–∏–∫–æ–º
    assert mail_frag not in red


@pytest.mark.integration
def test_overlapping_entities_are_merged(adapter: "PresidioAdapter"):
    # –î–≤–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è —Å—É—â–Ω–æ—Å—Ç–∏ –≤ –æ–¥–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ–¥–Ω–æ–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
    text = "Email: ivan.petrov@example.com"
    # –ò–º—è + –ø–æ–ª–Ω–æ–µ; –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—Ç—Å—è
    frag1 = "ivan.petrov@example.com"
    frag2 = "petrov@example.com"

    ents = [
        _make_entity(text, frag1, "EMAIL_ADDRESS"),
        _make_entity(text, frag2, "USERNAME"),
    ]
    red = adapter.redact_text_by_pii(text, ents, mode="mask", mask_char="*")

    # –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–≤–æ–π–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞/–º–∞—Å–∫–∏ –∏–ª–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    assert "example.com" in red  # —Ö–≤–æ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –º–æ–∂–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è –ø—Ä–∏ keep_tail –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    assert frag1 not in red and frag2 not in red


@pytest.mark.integration
def test_redaction_is_idempotent(adapter: "PresidioAdapter"):
    text = "Contact: john.doe@example.com"
    ent = _make_entity(text, "john.doe@example.com", "EMAIL_ADDRESS")

    red1 = adapter.redact_text_by_pii(text, [ent], mode="mask", mask_char="*")
    red2 = adapter.redact_text_by_pii(red1, [ent], mode="mask", mask_char="*")
    assert red1 == red2


@pytest.mark.integration
def test_manual_entities_do_not_depend_on_detector(adapter: "PresidioAdapter"):
    # –î–∞–∂–µ –µ—Å–ª–∏ detect_pii –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª, —Ä—É—á–Ω—ã–µ —Å–º–µ—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å.
    text = "custom token ABC-12345 appears here"
    frag = "ABC-12345"
    ent = _make_entity(text, frag, "CUSTOM")
    red = adapter.redact_text_by_pii(text, [ent], mode="remove", placeholder="[REDACTED]")
    assert frag not in red
    assert "[REDACTED]" in red


# -----------------
# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
# -----------------

@pytest.mark.integration
def test_batch_detect_pii_if_available(adapter: "PresidioAdapter"):
    if not hasattr(adapter, "batch_detect_pii"):
        pytest.skip("batch_detect_pii not implemented by adapter")
    batch = [
        ("Alice, email alice@example.com", None),
        ("Bob, phone +1-415-555-00-11", None),
    ]
    res = adapter.batch_detect_pii(batch)
    assert isinstance(res, list) and len(res) == len(batch)
    assert all(hasattr(r, "entities") for r in res)


@pytest.mark.integration
def test_detect_language_if_available(adapter: "PresidioAdapter"):
    if not hasattr(adapter, "detect_language"):
        pytest.skip("detect_language not implemented by adapter")
    ru = adapter.detect_language("–≠—Ç–æ –Ω–µ–±–æ–ª—å—à–æ–π —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç.")
    en = adapter.detect_language("This is a short English text.")
    # –°–ª–∞–±—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ñ–ª–µ–π–∫–æ–≤ –º–µ–∂–¥—É –≤–µ—Ä—Å–∏—è–º–∏ –º–æ–¥–µ–ª–µ–π
    if hasattr(ru, "languages"):
        assert any(l.language_code.startswith("ru") for l in ru.languages)
    if hasattr(en, "languages"):
        assert any(l.language_code.startswith("en") for l in en.languages)
