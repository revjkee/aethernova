# mythos-core/.github/workflows/release.yaml
name: release

on:
  push:
    tags:
      - 'v*'                 # релиз по семантическому тегу, например v1.2.3
  release:
    types: [published]       # ручной Publish в GitHub Releases
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.2.3)'
        required: true
      prerelease:
        description: 'Mark as prerelease'
        type: boolean
        default: false

permissions:
  contents: write            # для Release/тегов и загрузки артефактов
  packages: write            # публикация в GHCR
  id-token: write            # OIDC для cosign keyless и SLSA
  attestations: write        # GitHub attestations
  actions: read
  checks: read
  security-events: write     # для загрузки SARIF (если понадобится)

env:
  APP_NAME: mythos-core
  REGISTRY_GHCR: ghcr.io/${{ github.repository_owner }}
  IMAGE_NAME: mythos-core
  # Для Docker Hub задайте переменные/секреты:
  # DOCKERHUB_NAMESPACE: your-namespace
  # DOCKERHUB_USERNAME: secret
  # DOCKERHUB_TOKEN:    secret

concurrency:
  group: release-${{ github.ref_name }}
  cancel-in-progress: false

jobs:
  prepare:
    name: Prepare / Resolve Version
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.ver.outputs.version }}
      is_prerelease: ${{ steps.flags.outputs.prerelease }}
      ref_tag: ${{ steps.src.outputs.ref_tag }}
      sha_short: ${{ steps.meta.outputs.sha_short }}
      tags_json: ${{ steps.meta.outputs.tags_json }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: src
        name: Detect source tag or input
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "ref_tag=${{ inputs.version }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "ref_tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.release.tag_name }}" != "" ]]; then
            echo "ref_tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          else
            echo "No tag provided"; exit 1
          fi

      - id: ver
        name: Validate semver tag
        run: |
          TAG="${{ steps.src.outputs.ref_tag }}"
          if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z\.-]+)?$ ]]; then
            echo "Tag $TAG is not semver (vX.Y.Z)"; exit 1
          fi
          echo "version=$TAG" >> $GITHUB_OUTPUT

      - id: flags
        name: Compute prerelease flag
        run: |
          PR="${{ github.event_name == 'workflow_dispatch' && inputs.prerelease || github.event.release.prerelease }}"
          if [[ "$PR" == "" ]]; then PR=false; fi
          echo "prerelease=$PR" >> $GITHUB_OUTPUT

      - id: meta
        name: Compute image tags
        run: |
          SHA_SHORT=$(git rev-parse --short=8 HEAD)
          echo "sha_short=$SHA_SHORT" >> $GITHUB_OUTPUT
          VERSION="${{ steps.ver.outputs.version }}"
          # Метки для образа: vX.Y.Z, vX.Y, latest (только для non-prerelease), sha
          MAJOR_MINOR=$(echo "$VERSION" | sed -E 's/^v([0-9]+\.[0-9]+)\..*$/\1/')
          TAGS=("{$VERSION}")
          TAGS+=("v${MAJOR_MINOR}")
          if [[ "${{ steps.flags.outputs.prerelease }}" != "true" ]]; then
            TAGS+=("latest")
          fi
          TAGS+=("sha-$SHA_SHORT")
          printf '%s\n' "${TAGS[@]}" | jq -R . | jq -s . > tags.json
          echo "tags_json=$(cat tags.json)" >> $GITHUB_OUTPUT

  test:
    name: Test / Lint
    runs-on: ubuntu-22.04
    needs: [prepare]
    env:
      PYTHON_VERSION: '3.11'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install deps
        run: |
          pip install -U pip wheel
          if [[ -f requirements.txt ]]; then pip install -r requirements.txt; fi
          if [[ -f dev-requirements.txt ]]; then pip install -r dev-requirements.txt; fi
          pip install pytest pytest-cov

      - name: Lint (ruff optional)
        run: |
          if python -c "import importlib.util,sys; sys.exit(0 if importlib.util.find_spec('ruff') else 1)"; then
            ruff check .
          else
            echo "ruff not installed, skipping"
          fi

      - name: Run unit tests
        run: |
          pytest -q --maxfail=1 --disable-warnings

  build_and_push:
    name: Build and Push Images
    runs-on: ubuntu-22.04
    needs: [prepare, test]
    permissions:
      packages: write
      contents: read
      id-token: write
    outputs:
      image_ghcr: ${{ steps.meta.outputs.image_ghcr }}
      image_dh: ${{ steps.meta.outputs.image_dh }}
      tags: ${{ steps.meta.outputs.tags }}
      digest: ${{ steps.push.outputs.digest }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - id: meta
        name: Prepare meta
        run: |
          OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "image_ghcr=ghcr.io/${OWNER_LC}/${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT
          if [[ -n "${{ env.DOCKERHUB_NAMESPACE }}" ]]; then
            echo "image_dh=${{ env.DOCKERHUB_NAMESPACE }}/${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT
          else
            echo "image_dh=" >> $GITHUB_OUTPUT
          fi
          echo "tags='${{ needs.prepare.outputs.tags_json }}'" >> $GITHUB_OUTPUT

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        if: env.DOCKERHUB_NAMESPACE != '' && secrets.DOCKERHUB_USERNAME != '' && secrets.DOCKERHUB_TOKEN != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - id: tags
        name: Compute tag list
        run: |
          echo '${{ needs.prepare.outputs.tags_json }}' > tags.json
          TAGS=$(jq -r '.[]' tags.json | paste -sd "," -)
          echo "list=$TAGS" >> $GITHUB_OUTPUT

      - id: push
        name: Build and push (linux/amd64,arm64)
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          provenance: false                     # provenance делаем отдельной джобой
          sbom: false                           # SBOM генерим Anchore отдельно
          tags: |
            ${{ steps.meta.outputs.image_ghcr }}:${{ steps.tags.outputs.list }}
            ${{ steps.meta.outputs.image_dh && format('{0}:{1}', steps.meta.outputs.image_dh, steps.tags.outputs.list) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_VERSION=${{ needs.prepare.outputs.version }}

  sbom:
    name: Generate SBOM
    runs-on: ubuntu-22.04
    needs: [build_and_push]
    permissions:
      contents: write
      packages: read
    steps:
      - name: Install syft
        uses: anchore/sbom-action/download-syft@v0.17.7

      - name: Pull image by digest
        run: |
          # предпочтительно использовать digest, если доступен
          echo "DIGEST=${{ needs.build_and_push.outputs.digest }}" >> $GITHUB_ENV
          if [[ -z "$DIGEST" ]]; then
            echo "Digest not provided, will use tag ${{ needs.prepare.outputs.version }}"
          fi

      - name: Generate SBOM (SPDX JSON)
        run: |
          IMG="${{ needs.build_and_push.outputs.image_ghcr }}@${{ needs.build_and_push.outputs.digest }}"
          if [[ "${{ needs.build_and_push.outputs.digest }}" == "" ]]; then
            IMG="${{ needs.build_and_push.outputs.image_ghcr }}:${{ needs.prepare.outputs.version }}"
          fi
          syft packages "$IMG" -o spdx-json=sbom.spdx.json

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-spdx
          path: sbom.spdx.json
          retention-days: 90

  sign:
    name: Sign Container (cosign keyless)
    runs-on: ubuntu-22.04
    needs: [build_and_push, sbom]
    permissions:
      id-token: write
      contents: read
      packages: write
    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.8.1

      - name: Cosign sign GHCR image
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          echo "Signing ${{ needs.build_and_push.outputs.image_ghcr }}@${{ needs.build_and_push.outputs.digest }}"
          cosign sign --yes ${{ needs.build_and_push.outputs.image_ghcr }}@${{ needs.build_and_push.outputs.digest }}

      - name: Cosign attach SBOM
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign attach sbom --sbom sbom.spdx.json ${{ needs.build_and_push.outputs.image_ghcr }}@${{ needs.build_and_push.outputs.digest }}

  provenance:
    name: SLSA Provenance
    runs-on: ubuntu-22.04
    needs: [build_and_push]
    permissions:
      id-token: write
      contents: write
      attestations: write
    steps:
      - name: Generate provenance for container
        uses: slsa-framework/slsa-github-generator/actions/generator-container@v2.0.0
        with:
          image: ${{ needs.build_and_push.outputs.image_ghcr }}
          digest: ${{ needs.build_and_push.outputs.digest }}
          registry-username: ${{ github.actor }}
          registry-password: ${{ secrets.GITHUB_TOKEN }}

  release_notes:
    name: Create GitHub Release
    runs-on: ubuntu-22.04
    needs: [prepare, test, build_and_push, sbom, sign, provenance]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          TAG="${{ needs.prepare.outputs.version }}"
          PREV_TAG=$(git describe --tags --abbrev=0 "$(git rev-list --tags --max-count=2 | tail -n1)" 2>/dev/null || true)
          if [[ -n "$PREV_TAG" ]]; then
            LOG=$(git log --pretty=format:'* %h %s (%an)' "$PREV_TAG..$TAG")
          else
            LOG=$(git log --pretty=format:'* %h %s (%an)')
          fi
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$LOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload SBOM to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare.outputs.version }}
          name: ${{ env.APP_NAME }} ${{ needs.prepare.outputs.version }}
          body: |
            Release ${{ needs.prepare.outputs.version }}

            Changes:
            ${{ steps.changelog.outputs.notes }}

            Images:
            - ${{ needs.build_and_push.outputs.image_ghcr }}@${{ needs.build_and_push.outputs.digest }}

          draft: false
          prerelease: ${{ needs.prepare.outputs.is_prerelease }}
          files: |
            sbom.spdx.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
