# mythos-core/ruff.toml

# ---------- Core ----------
line-length = 100
indent-width = 4
target-version = "py311"

# Исключаем шумные каталоги и артефакты сборки
extend-exclude = [
  ".git",
  ".hg",
  ".mypy_cache",
  ".pytest_cache",
  ".ruff_cache",
  "__pycache__",
  ".venv",
  "venv",
  "build",
  "dist",
  "node_modules",
  "docs/_build",
  "coverage",
  "htmlcov",
  "reports",
  "data",
  "assets",
  "notebooks",
  "examples",
  "scripts/generated",
  "*/migrations/*",
]

# ---------- Lint ----------
[lint]
# Широкий, но контролируемый набор семейств правил
select = [
  "E",   # pycodestyle (errors)
  "W",   # pycodestyle (warnings)
  "F",   # pyflakes
  "B",   # flake8-bugbear
  "UP",  # pyupgrade
  "C4",  # flake8-comprehensions
  "D",   # pydocstyle
  "N",   # pep8-naming
  "ANN", # flake8-annotations
  "S",   # flake8-bandit (security)
  "BLE", # flake8-blind-except
  "A",   # flake8-builtins
  "DTZ", # flake8-datetimez
  "ERA", # eradicate (закомментированный код)
  "RET", # flake8-return
  "T20", # flake8-print
  "TID", # flake8-tidy-imports
  "TCH", # flake8-type-checking
  "Q",   # flake8-quotes
  "PL",  # pylint (оптимизированный набор)
  "RUF", # ruff-specific
  "PGH", # pygrep-hooks
  "I",   # isort (упорядочивание импортов)
]

# Точечные игноры для совместимости с форматером и практикой
ignore = [
  "E203",   # whitespace before ':' (совместимость форматера)
  "E501",   # длина строки (контролируется форматером)
  "D105",   # отсутствует докстринг у magic-методов
  "D107",   # отсутствует докстринг у __init__
  "D205",   # blank line after summary
  "D400",   # First line should end with a period
  "D401",   # First line should be in imperative mood
  "ANN101", # missing type annotation for self
  "ANN102", # missing type annotation for cls
  "ANN401", # Any used
]

# Разрешаем авто-фиксы для всех поддерживаемых правил
fixable = ["ALL"]
unfixable = []

# Подавляем «неиспользуемые импорты» в __init__ как публичный API
ignore-init-module-imports = true

# Теги задач для PGH/командного контроля долга
task-tags = ["TODO", "FIXME", "XXX", "HACK"]

# Пер-файловые игноры для снижения шума там, где это разумно
per-file-ignores = {
  "tests/**" = [
    "D",        # докстринги в тестах не обязательны
    "S101",     # assert в тестах допустим
    "PLR2004",  # magic values в сравнениях допустимы
    "ANN",      # аннотации в тестах избыточны
    "T20",      # print допустим в диагностике бенчей
    "S311",     # pseudo-random в тестах/бенчах
  ],
  "cli/**" = ["T20"],                # print допустим в CLI
  "**/__init__.py" = ["F401","D104"],# публичные реэкспорты, без модульного докстринга
  "**/migrations/**" = ["ALL"],      # миграции не линтим
  "tests/bench/**" = ["T20"],        # печать метрик в бенчах
}

# ---------- Плагины правил ----------

# isort-поведение через Ruff
[lint.isort]
known-first-party = ["mythos_core", "mythos", "neuroforge"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
combine-as-imports = true

# Стиль именования
[lint.pep8-naming]
classmethod-decorators = [
  "classmethod",
  "pydantic.validator",
  "pydantic.root_validator",
  "pydantic.field_validator",
  "pydantic.model_validator",
]

# Докстринги
[lint.pydocstyle]
convention = "google"

# Контроль сложности
[lint.mccabe]
max-complexity = 12

# Импорты: запрет относительных
[lint.flake8-tidy-imports]
ban-relative-imports = "all"

# Type-checking: агрессивный вынос тяжёлых импортов под TYPE_CHECKING
[lint.flake8-type-checking]
strict = true
runtime-evaluated-base-classes = ["pydantic.BaseModel", "typing.TypedDict", "typing.NamedTuple"]

# ---------- Formatter ----------
[format]
quote-style = "double"            # единый стиль кавычек
indent-style = "space"
line-ending = "lf"
docstring-code-format = true
docstring-code-line-length = 100
