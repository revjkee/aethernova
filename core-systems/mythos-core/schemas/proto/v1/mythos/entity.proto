// SPDX-License-Identifier: Apache-2.0
// Mythos Core Entity API (v1)
// File: mythos-core/schemas/proto/v1/mythos/entity.proto

syntax = "proto3";

package mythos.v1;

option go_package = "github.com/aethernova/mythos-core/gen/proto/mythos/v1;mythosv1";
option java_multiple_files = true;
option java_package = "ai.aethernova.mythos.v1";
option csharp_namespace = "Aethernova.Mythos.V1";
option php_namespace = "Aethernova\\Mythos\\V1";
option ruby_package = "Aethernova::Mythos::V1";
option objc_class_prefix = "MYT";
option cc_enable_arenas = true;
option optimize_for = SPEED;

import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";

// ----------------------------- ENUMS -----------------------------

// Жизненный цикл сущности.
enum Lifecycle {
  LIFECYCLE_UNSPECIFIED = 0;
  LIFECYCLE_DRAFT = 1;
  LIFECYCLE_ACTIVE = 2;
  LIFECYCLE_DEPRECATED = 3;
  LIFECYCLE_ARCHIVED = 4;
  LIFECYCLE_DELETED = 5;
}

// Направление связи.
enum RelationshipDirection {
  REL_DIR_UNSPECIFIED = 0;
  REL_DIR_OUTBOUND = 1;     // source -> target
  REL_DIR_INBOUND = 2;      // target <- source
  REL_DIR_BIDIRECTIONAL = 3;
}

// Направление сортировки.
enum SortDirection {
  SORT_DIRECTION_UNSPECIFIED = 0;
  SORT_ASC = 1;
  SORT_DESC = 2;
}

// Статус построчного результата батч-апсерта.
enum UpsertStatus {
  UPSERT_STATUS_UNSPECIFIED = 0;
  UPSERT_CREATED = 1;
  UPSERT_UPDATED = 2;
  UPSERT_SKIPPED = 3;
  UPSERT_FAILED = 4;
}

// ----------------------------- CORE TYPES -----------------------------

// Универсальная связь между сущностями.
message Relationship {
  // Тип (например: "depends_on", "owns", "member_of").
  string type = 1;

  // Идентификатор источника и цели.
  string source_id = 2; // Должен совпадать с Entity.id инициатора связи.
  string target_id = 3; // Идентификатор связанной сущности.

  // Направление связи.
  RelationshipDirection direction = 4;

  // Необязательный вес/важность (0..1 или доменная шкала).
  float weight = 5;

  // Произвольные свойства связи.
  google.protobuf.Struct properties = 6;
}

// Описание доменной сущности Mythos.
message Entity {
  // Глобальный идентификатор сущности (UUID/ULID/другой устойчивый ключ).
  string id = 1;

  // Многоарендность, если применяется.
  string tenant_id = 2;

  // Пространство имён (логический домен).
  string namespace = 3;

  // Вид/тип сущности (например: "dataset", "model", "service").
  string kind = 4;

  // Короткое имя (уникальное в пределах {tenant_id, namespace, kind}).
  string name = 5;

  // Человекочитаемое отображаемое имя.
  optional string display_name = 6;

  // Описание.
  optional string description = 7;

  // Метки для индексации/поиска/политик.
  map<string, string> labels = 8;

  // Свободные теги.
  repeated string tags = 9;

  // Гибкие атрибуты (структура произвольных полей).
  google.protobuf.Struct attributes = 10;

  // Версия сущности (монотонно увеличивается).
  int64 version = 11;

  // ETag для контроля конкурентных изменений (if-match/if-none-match).
  string etag = 12;

  // Жизненный цикл.
  Lifecycle lifecycle = 13;

  // Владелец/ответственный (UID/email/subject).
  optional string owner = 14;

  // Метаданные времени.
  google.protobuf.Timestamp created_at = 15;
  google.protobuf.Timestamp updated_at = 16;
  optional google.protobuf.Timestamp deleted_at = 17;

  // Связи с другими сущностями.
  repeated Relationship relationships = 18;

  // Внешние референсы (например, URL, внешний ключ).
  map<string, string> external_refs = 19;

  // Резерв для будущей эволюции — запрещает переиспользование номеров.
  reserved 20 to 29;
  reserved "legacy_field", "legacy_ref";
}

// Фильтр с параметрами (язык зависит от реализации: CEL/SQL-like/Lucene).
message Filter {
  // Строковое выражение фильтра (например: "kind == 'model' && labels.env == 'staging'").
  string expr = 1;
  // Параметры подстановки: {":env": "staging"} → labels.env == :env
  map<string, string> params = 2;
}

// Сортировка по полю.
message Sort {
  string field = 1;              // Например: "created_at", "name", "version"
  SortDirection direction = 2;   // ASC/DESC
}

// Запрос страницы.
message PageRequest {
  int32 page_size = 1;           // Рекомендуется 10..1000
  string page_token = 2;         // Серверный токен продолжения
}

// Ответ страницы.
message PageResponse {
  int32 total_size = 1;          // Может быть приблизительным для больших наборов
  string next_page_token = 2;    // Пусто, если больше страниц нет
}

// ----------------------------- CRUD REQUESTS -----------------------------

message CreateEntityRequest {
  Entity entity = 1;
  bool validate_only = 2;        // true → только валидация без сохранения
}

message GetEntityRequest {
  string id = 1;
  // Опционально: упростить выборочный просмотр представлений
  optional string view = 2;      // "default", "full", "lightweight" — на усмотрение реализации
}

message UpdateEntityRequest {
  Entity entity = 1;                         // Обязателен id
  google.protobuf.FieldMask update_mask = 2; // Поля для частичного обновления
  bool allow_missing = 3;                    // true → create if absent
  bool validate_only = 4;                    // true → dry-run
  string expected_etag = 5;                  // If-Match — защита от гонок
}

message DeleteEntityRequest {
  string id = 1;
  bool allow_missing = 2;     // Не считать ошибкой отсутствующую сущность
  string expected_etag = 3;   // If-Match
  bool hard_delete = 4;       // true → безвозвратное удаление, иначе пометка deleted_at
}

message DeleteEntityResponse {
  string id = 1;
  string etag = 2;
  google.protobuf.Timestamp deleted_at = 3;
}

message ListEntitiesRequest {
  Filter filter = 1;
  repeated Sort sort = 2;
  PageRequest page = 3;

  // Быстрые фильтры (дублируют типовые поля для удобства клиента/индекса).
  repeated string ids = 4;
  string kind = 5;
  string namespace = 6;
  string owner = 7;
  map<string, string> labels = 8;
  repeated string tags = 9;
}

message ListEntitiesResponse {
  repeated Entity entities = 1;
  PageResponse page = 2;
}

// Батч-апсерт (идемпотентный при корректных id/etag).
message BatchUpsertEntitiesRequest {
  repeated Entity entities = 1;
  bool validate_only = 2;
}

message UpsertResult {
  string id = 1;
  UpsertStatus status = 2;
  string etag = 3;
  string error_message = 4; // Заполняется при FAILED
}

message BatchUpsertEntitiesResponse {
  repeated UpsertResult results = 1;
}

// Поисковые запросы (полнотекстовые/векторные — реализация-зависимо).
message SearchEntitiesRequest {
  string query = 1;        // Текст запроса
  Filter filter = 2;       // Дополнительные фильтры
  repeated Sort sort = 3;
  PageRequest page = 4;
}

message SearchEntitiesResponse {
  repeated Entity entities = 1;
  PageResponse page = 2;
}

// ----------------------------- EVENTS / WATCH -----------------------------

// Тип события сущности.
enum EntityEventType {
  ENTITY_EVENT_TYPE_UNSPECIFIED = 0;
  ENTITY_ADDED = 1;
  ENTITY_MODIFIED = 2;
  ENTITY_REMOVED = 3;
}

// Событие изменения сущности (для стриминга/подписок).
message EntityEvent {
  EntityEventType type = 1;
  Entity entity = 2;
  google.protobuf.Timestamp occurred_at = 3;
  string reason = 4; // Произвольная причина/источник (опционально)
}

message WatchEntitiesRequest {
  Filter filter = 1;
  // С какой точки времени начать наблюдение (включительно).
  google.protobuf.Timestamp since = 2;
}

// ----------------------------- SERVICE -----------------------------

service MythosEntityService {
  rpc CreateEntity (CreateEntityRequest) returns (Entity);
  rpc GetEntity    (GetEntityRequest)    returns (Entity);
  rpc UpdateEntity (UpdateEntityRequest) returns (Entity);
  rpc DeleteEntity (DeleteEntityRequest) returns (DeleteEntityResponse);

  rpc ListEntities   (ListEntitiesRequest)   returns (ListEntitiesResponse);
  rpc BatchUpsert    (BatchUpsertEntitiesRequest) returns (BatchUpsertEntitiesResponse);
  rpc SearchEntities (SearchEntitiesRequest) returns (SearchEntitiesResponse);

  // Двунаправленный или серверный стрим событий (выбирайте один из вариантов).
  rpc WatchEntities (WatchEntitiesRequest) returns (stream EntityEvent);
}
