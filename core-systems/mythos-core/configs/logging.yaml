# mythos-core/configs/logging.yaml
# Версия схемы dictConfig
version: 1

# Не гасим существующие логгеры сторонних библиотек; управляем избирательно
disable_existing_loggers: false

# -----------------------------
# Форматтеры
# -----------------------------
formatters:
  json:
    # Требует пакет python-json-logger
    (): pythonjsonlogger.jsonlogger.JsonFormatter
    # Ключи совместимы с OTEL LoggingInstrumentor (otelTraceID/otelSpanID)
    fmt: >-
      %(asctime)s %(levelname)s %(name)s %(process)d %(threadName)s
      %(filename)s:%(lineno)d %(message)s
      %(otelTraceID)s %(otelSpanID)s
    datefmt: "%Y-%m-%dT%H:%M:%S%z"
    json_ensure_ascii: false

  access_json:
    (): pythonjsonlogger.jsonlogger.JsonFormatter
    fmt: >-
      %(asctime)s %(levelname)s %(name)s
      client=%(client_addr)s method=%(http_method)s path=%(http_path)s
      status=%(status_code)s duration_ms=%(duration_ms)s
      %(otelTraceID)s %(otelSpanID)s
    datefmt: "%Y-%m-%dT%H:%M:%S%z"
    json_ensure_ascii: false

  plain:
    format: "%(asctime)s | %(levelname)s | %(name)s | %(filename)s:%(lineno)d | %(message)s"
    datefmt: "%Y-%m-%dT%H:%M:%S%z"

  access_plain:
    format: "%(asctime)s | %(levelname)s | %(name)s | client=%(client_addr)s method=%(http_method)s path=%(http_path)s status=%(status_code)s duration_ms=%(duration_ms)s"
    datefmt: "%Y-%m-%dT%H:%M:%S%z"

# -----------------------------
# Хендлеры
# -----------------------------
handlers:
  console_json:
    class: logging.StreamHandler
    level: INFO
    formatter: json
    stream: ext://sys.stdout

  console_plain:
    class: logging.StreamHandler
    level: INFO
    formatter: plain
    stream: ext://sys.stdout

  file_app_json:
    class: logging.handlers.RotatingFileHandler
    level: INFO
    formatter: json
    filename: logs/application.log
    maxBytes: 52428800       # 50 MB
    backupCount: 10
    encoding: utf-8

  file_app_plain:
    class: logging.handlers.RotatingFileHandler
    level: INFO
    formatter: plain
    filename: logs/application.log
    maxBytes: 52428800
    backupCount: 10
    encoding: utf-8

  file_errors_json:
    class: logging.handlers.RotatingFileHandler
    level: ERROR
    formatter: json
    filename: logs/errors.log
    maxBytes: 52428800
    backupCount: 10
    encoding: utf-8

  file_errors_plain:
    class: logging.handlers.RotatingFileHandler
    level: ERROR
    formatter: plain
    filename: logs/errors.log
    maxBytes: 52428800
    backupCount: 10
    encoding: utf-8

  # Access-логи отдельно, дневная ротация
  access_timed_json:
    class: logging.handlers.TimedRotatingFileHandler
    level: INFO
    formatter: access_json
    filename: logs/access.log
    when: D
    interval: 1
    backupCount: 14
    encoding: utf-8
    utc: true

  access_timed_plain:
    class: logging.handlers.TimedRotatingFileHandler
    level: INFO
    formatter: access_plain
    filename: logs/access.log
    when: D
    interval: 1
    backupCount: 14
    encoding: utf-8
    utc: true

# -----------------------------
# Логгеры
# -----------------------------
loggers:
  # Основные неймспейсы приложения
  mythos:
    level: INFO
    handlers: [console_json, file_app_json, file_errors_json]
    propagate: false

  mythos_core:
    level: INFO
    handlers: [console_json, file_app_json, file_errors_json]
    propagate: false

  # Uvicorn: разделяем error и access
  uvicorn:
    level: INFO
    handlers: [console_json, file_app_json]
    propagate: false

  uvicorn.error:
    level: INFO
    handlers: [console_json, file_app_json, file_errors_json]
    propagate: false

  uvicorn.access:
    level: INFO
    handlers: [console_json, access_timed_json]
    propagate: false

  # Gunicorn: чтобы не было дублирования и неверной маршрутизации
  gunicorn.error:
    level: INFO
    handlers: [console_json, file_app_json, file_errors_json]
    propagate: false

  gunicorn.access:
    level: INFO
    handlers: [console_json, access_timed_json]
    propagate: false

  # Шумные библиотеки — приглушаем
  asyncio:
    level: WARNING
    handlers: [console_json]
    propagate: false

  aiohttp:
    level: WARNING
    handlers: [console_json]
    propagate: false

  urllib3:
    level: WARNING
    handlers: [console_json]
    propagate: false

  # SQL-логирование по умолчанию пониже
  sqlalchemy.engine:
    level: WARNING
    handlers: [console_json]
    propagate: false

# -----------------------------
# Корневой логгер
# -----------------------------
root:
  level: INFO
  handlers: [console_json, file_app_json, file_errors_json]

# ------------------------------------------
# Пояснения по переключению в текстовый режим
# ------------------------------------------
# Если отсутствует python-json-logger или требуется простой текст:
# 1) Замените все ..._json хендлеры на соответствующие ..._plain.
# 2) Или подготовьте альтернативный файл logging-plain.yaml,
#    где в loggers/root/handlers используются *_plain.
