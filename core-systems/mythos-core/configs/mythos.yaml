# mythos-core/configs/mythos.yaml
# Профильная, промышленная конфигурация Mythos Core.
# Секреты не хранить в этом файле. Используйте Secret Manager, SealedSecrets или переменные окружения.

version: 1

meta:
  owner: platform
  service: mythos-core
  schema: 1
  generated_by: ops
  notes: >
    Параметры вида PLACEHOLDER_* должны быть заменены на значения из секрет-менеджера
    или прокинуты через переменные окружения.

defaults: &defaults
  app:
    name: mythos-core
    environment: dev            # dev, staging, prod
    debug: false                # только true в dev
    timezone: UTC
    locale: ru_RU.UTF-8
    instance_id: auto           # auto или явный идентификатор инстанса
    graceful_shutdown_s: 25

  http:
    host: 0.0.0.0
    port: 8080
    base_url: http://localhost:8080
    read_timeout_s: 30
    write_timeout_s: 30
    idle_timeout_s: 120
    request_timeout_s: 30
    keepalive: true
    max_body_mb: 25
    cors:
      enabled: true
      allowed_origins:
        - http://localhost:3000
        - http://localhost:5173
      allowed_methods: [GET, POST, PUT, PATCH, DELETE, OPTIONS]
      allowed_headers: [Authorization, Content-Type, X-Request-ID]
      allow_credentials: true
    headers:
      request_id_header: X-Request-ID
      traceparent_header: traceparent

  security:
    secret_key: PLACEHOLDER_SECRET_KEY
    password:
      hash_scheme: argon2id
      min_length: 12
    csrf:
      enabled: true
      trusted_origins:
        - http://localhost:3000
    jwt:
      enabled: true
      algorithm: HS256           # для prod предпочтительно RS256 или EdDSA
      secret: PLACEHOLDER_JWT_SECRET
      issuer: mythos-core
      audience: mythos-clients
      access_ttl_s: 900
      refresh_ttl_s: 1209600
      clock_skew_s: 30
    oidc:
      enabled: false
      issuer_url: ""
      client_id: ""
      client_secret: ""
      scopes: [openid, profile, email]
      redirect_url: ""
    webhook_signing:
      required: true
      secret: PLACEHOLDER_WEBHOOK_SECRET
    rate_limit_signals:
      ban_ttl_s: 900
      ban_threshold: 20

  database:
    kind: postgres
    main:
      host: postgres
      port: 5432
      name: mythos
      user: mythos
      password: PLACEHOLDER_DB_PASSWORD
      sslmode: disable          # prod: require или verify-full
    replicas: []                # пример: [{ host: pg-read, port: 5432 }]
    pool:
      min_size: 5
      max_size: 30
      connect_timeout_s: 10
      acquire_timeout_s: 30
      max_lifetime_s: 3600
      idle_timeout_s: 600
    migrations:
      run_on_start: true
      fail_on_dirty: true
    statements_log: false

  cache:
    redis_url: redis://redis:6379/0
    tls_enabled: false
    default_ttl_s: 300
    healthcheck_interval_s: 15

  broker:
    kind: amqp                 # amqp, kafka, none
    amqp:
      url: amqp://guest:guest@rabbitmq:5672/%2f
      prefetch: 32
      retries:
        max_attempts: 10
        backoff_s: 1.5
        backoff_factor: 2.0
        jitter_s: 0.2
    kafka:
      brokers: [kafka:9092]
      security_protocol: PLAINTEXT
      sasl_enabled: false
      sasl_mechanism: PLAIN
      sasl_username: ""
      sasl_password: ""
    queues:
      default: tasks.default
      high: tasks.high
      low: tasks.low
    dead_letter:
      enabled: true
      name: tasks.dlq
      retention_s: 604800

  storage:
    kind: s3
    s3:
      endpoint: http://minio:9000
      region: us-east-1
      access_key: PLACEHOLDER_S3_ACCESS
      secret_key: PLACEHOLDER_S3_SECRET
      force_path_style: true
      buckets:
        public: mythos-public
        private: mythos-private
      signed_url_ttl_s: 900
    local:
      root_dir: /var/lib/mythos/storage

  telemetry:
    logging:
      level: INFO               # DEBUG, INFO, WARN, ERROR
      format: json              # json или text
      json_pretty: false
      file: ""                  # пусто значит stdout
    prometheus:
      scrape_enabled: true
      metrics_path: /metrics
      port: 9100
    tracing:
      enabled: false
      exporter_otlp_endpoint: ""  # http://otel-collector:4318
      exporter_otlp_headers: ""
      service_name: mythos-core
      sample_ratio: 0.1
    sentry:
      dsn: ""
      environment: auto
      traces_sample_rate: 0.1

  features:
    lore_builder: true
    agent_chains: true
    marketplace: false
    experimental_api: false
    allow_registration: true     # prod: false

  ai:
    enable_local: false
    openai:
      api_key: PLACEHOLDER_OPENAI
      base_url: ""
      model: gpt-4o
      embedding_model: text-embedding-3-large
    anthropic:
      api_key: ""
    gemini:
      api_key: ""
    huggingface:
      token: ""
    safety:
      toxicity_threshold: 0.85

  rate_limit:
    enabled: true
    backend: redis
    redis_url: redis://redis:6379/2
    default_rps: 10
    burst: 20
    ip_whitelist: []
    ip_blacklist: []
    sliding_window_s: 60

  quotas:
    uploads:
      max_mb: 50
      allowed_mime:
        - image/png
        - image/jpeg
        - application/pdf
        - application/zip
    api:
      max_requests_per_day: 100000
      max_concurrent_requests: 1000

  workers:
    enabled: true
    concurrency: 8
    max_tasks_per_child: 1000
    heartbeat_s: 15
    visibility_timeout_s: 300
    shutdown_grace_s: 30

  scheduler:
    enabled: true
    timezone: UTC
    jobs:
      - id: sync_lore
        schedule: "*/15 * * * *"
        task: lore.sync
        timeout_s: 900
        retries: { max_attempts: 5, backoff_s: 2, backoff_factor: 2, jitter_s: 0.3 }
      - id: gc_artefacts
        schedule: "0 3 * * *"
        task: storage.gc
        timeout_s: 1800
        retries: { max_attempts: 3, backoff_s: 5, backoff_factor: 2, jitter_s: 0.5 }

  webhooks:
    retries:
      max_attempts: 10
      backoff_s: 1.5
      backoff_factor: 2.0
      jitter_s: 0.2
    timeout_s: 10
    signature_header: X-Mythos-Signature

  integrations:
    telegram:
      enabled: false
      bot_token: ""
    eth:
      rpc_url: ""
    ton:
      api_endpoint: ""
      api_key: ""
    smtp:
      host: mailhog
      port: 1025
      user: ""
      password: ""
      tls: false
      from: "Mythos Core <no-reply@mythos.local>"

  compliance:
    audit_log:
      enabled: true
      sink: stdout           # stdout, file, http
      file: ""
    gdpr_mode: false
    data_retention_days: 365
    pii_redaction_enabled: true

  api_contract:
    pagination:
      default_limit: 50
      max_limit: 500
    sorting:
      default: created_at:desc

  health:
    liveness_path: /healthz
    readiness_path: /readyz
    startup_path: /healthz

  slo:
    http:
      error_rate_5m: 0.05
      error_rate_30m: 0.01
      p95_ms: 500
      p99_ms: 1000
    availability:
      not_ready_minutes: 10
    capacity:
      hpa_utilization_headroom: 1.10

profiles:
  dev:
    <<: *defaults
    app:
      <<: *defaults.app
      environment: dev
      debug: true
    telemetry:
      <<: *defaults.telemetry
      logging:
        <<: *defaults.telemetry.logging
        level: DEBUG
        json_pretty: true
    security:
      <<: *defaults.security
      csrf:
        <<: *defaults.security.csrf
        trusted_origins:
          - http://localhost:3000
          - http://localhost:5173
    database:
      <<: *defaults.database
      statements_log: true
    features:
      <<: *defaults.features
      allow_registration: true
      experimental_api: true
    workers:
      <<: *defaults.workers
      concurrency: 4
    rate_limit:
      <<: *defaults.rate_limit
      default_rps: 20
      burst: 40

  staging:
    <<: *defaults
    app:
      <<: *defaults.app
      environment: staging
    telemetry:
      <<: *defaults.telemetry
      tracing:
        <<: *defaults.telemetry.tracing
        enabled: true
        sample_ratio: 0.2
    security:
      <<: *defaults.security
      jwt:
        <<: *defaults.security.jwt
        algorithm: RS256
        secret: PLACEHOLDER_JWT_RS256_PRIVATE   # при RS256 здесь должен быть приватный ключ или ссылка
    database:
      <<: *defaults.database
      main:
        <<: *defaults.database.main
        sslmode: require
      replicas:
        - host: pg-read-staging
          port: 5432
    rate_limit:
      <<: *defaults.rate_limit
      default_rps: 15
      burst: 30
    workers:
      <<: *defaults.workers
      concurrency: 8

  prod:
    <<: *defaults
    app:
      <<: *defaults.app
      environment: prod
      debug: false
    http:
      <<: *defaults.http
      request_timeout_s: 30
      max_body_mb: 50
      cors:
        <<: *defaults.http.cors
        allowed_origins: []    # разрешения задаются через Ingress/WAФ или переменные окружения
    security:
      <<: *defaults.security
      password:
        <<: *defaults.security.password
        min_length: 14
      jwt:
        <<: *defaults.security.jwt
        algorithm: RS256
        secret: PLACEHOLDER_JWT_RS256_PRIVATE
      webhook_signing:
        <<: *defaults.security.webhook_signing
        secret: PLACEHOLDER_WEBHOOK_SECRET_PROD
      csrf:
        <<: *defaults.security.csrf
        trusted_origins: []    # управляется на уровне балансировщика
    database:
      <<: *defaults.database
      main:
        <<: *defaults.database.main
        sslmode: verify-full
        host: postgres-prod
      replicas:
        - host: pg-read-prod-1
          port: 5432
        - host: pg-read-prod-2
          port: 5432
      pool:
        <<: *defaults.database.pool
        min_size: 20
        max_size: 100
        acquire_timeout_s: 45
    cache:
      <<: *defaults.cache
      tls_enabled: true
    broker:
      <<: *defaults.broker
      amqp:
        <<: *defaults.broker.amqp
        prefetch: 128
      queues:
        <<: *defaults.broker.queues
        default: tasks.default
        high: tasks.high
        low: tasks.low
    storage:
      <<: *defaults.storage
      s3:
        <<: *defaults.storage.s3
        endpoint: https://s3.example.com
        region: eu-north-1
        access_key: PLACEHOLDER_S3_ACCESS_PROD
        secret_key: PLACEHOLDER_S3_SECRET_PROD
        force_path_style: false
    telemetry:
      <<: *defaults.telemetry
      logging:
        <<: *defaults.telemetry.logging
        level: INFO
        json_pretty: false
      tracing:
        <<: *defaults.telemetry.tracing
        enabled: true
        sample_ratio: 0.1
      sentry:
        <<: *defaults.telemetry.sentry
        dsn: PLACEHOLDER_SENTRY_DSN
        environment: prod
        traces_sample_rate: 0.1
    features:
      <<: *defaults.features
      allow_registration: false
      experimental_api: false
    rate_limit:
      <<: *defaults.rate_limit
      default_rps: 10
      burst: 20
    quotas:
      <<: *defaults.quotas
      api:
        <<: *defaults.quotas.api
        max_requests_per_day: 200000
        max_concurrent_requests: 5000
    workers:
      <<: *defaults.workers
      concurrency: 16
      max_tasks_per_child: 5000
    scheduler:
      <<: *defaults.scheduler
      jobs:
        - id: sync_lore
          schedule: "*/10 * * * *"
          task: lore.sync
          timeout_s: 900
          retries: { max_attempts: 6, backoff_s: 2, backoff_factor: 2, jitter_s: 0.3 }
        - id: gc_artefacts
          schedule: "0 3 * * *"
          task: storage.gc
          timeout_s: 2400
          retries: { max_attempts: 5, backoff_s: 5, backoff_factor: 2, jitter_s: 0.5 }
        - id: rotate_keys
          schedule: "0 4 * * 0"
          task: security.rotate_keys
          timeout_s: 1800
          retries: { max_attempts: 3, backoff_s: 10, backoff_factor: 2, jitter_s: 0.5 }
    compliance:
      <<: *defaults.compliance
      audit_log:
        <<: *defaults.compliance.audit_log
        sink: stdout
      data_retention_days: 730
      pii_redaction_enabled: true
    slo:
      <<: *defaults.slo
      http:
        <<: *defaults.slo.http
        p95_ms: 400
        p99_ms: 800

# Активный профиль выбирается переменной окружения или параметром запуска.
runtime:
  active_profile: dev   # dev, staging, prod
  env_overrides: true   # разрешить переопределение значений из переменных окружения
  strict_validation: true
  unknown_keys_policy: error  # error или warn
