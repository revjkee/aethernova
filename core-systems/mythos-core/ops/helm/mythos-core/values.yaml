# =========================
# GLOBALS
# =========================
global:
  imageRegistry: ""              # Принудительный реестр (override)
  imagePullSecrets: []           # [{name: regcred}]
  podSecurityStandards: "restricted"

# =========================
# APP IMAGE & RUNTIME
# =========================
image:
  repository: "registry.local/mythos/mythos-core"
  tag: ""                        # пусто = использовать .Chart.AppVersion
  pullPolicy: IfNotPresent

replicaCount: 2                  # базовое количество реплик (HPA может переопределить)

command: []                      # override (например: ["/app/mythos-core"])
args: []                         # override (например: ["--config=/config/app.yaml"])

env: []                          # список {name,value}
envFrom: []                      # [{configMapRef:{name:..}}, {secretRef:{name:..}}]
extraEnv: {}                     # map для простых key: value

# Пример чувствительных значений через values -> Secret (stringData)
secrets:
  enabled: false
  name: ""                       # имя секрета (если пусто — будет сгенерирован)
  annotations: {}
  labels: {}
  stringData: {}                 # {MY_SECRET: "value"}

# Внешнее управление секретами (external-secrets.io)
externalSecrets:
  enabled: false
  name: mythos-core
  refreshInterval: "1h"
  secretStoreRef:                # пример: ClusterSecretStore/ExternalSecret
    kind: ""
    name: ""
  data: []                       # [{secretKey: "MY_SECRET", remoteRef: {key: "path/in/store", property: "prop"}}]
  template:
    metadata: {labels: {}, annotations: {}}
    data: {}

serviceAccount:
  create: true
  name: ""                       # пусто = имя релиза
  annotations: {}
  automountServiceAccountToken: false

podAnnotations: {}
podLabels: {}

# =========================
# SECURITY
# =========================
podSecurityContext:
  fsGroup: 10001
  runAsNonRoot: true
  seccompProfile:
    type: RuntimeDefault

securityContext:
  runAsUser: 10001
  runAsGroup: 10001
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop: ["ALL"]

# =========================
# PROBES & HEALTH
# =========================
containerPorts:
  http: 8081
  metrics: 9090

livenessProbe:
  enabled: true
  httpGet:
    path: /healthz
    port: http
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 2
  failureThreshold: 3

readinessProbe:
  enabled: true
  httpGet:
    path: /readyz
    port: http
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 2
  failureThreshold: 3

startupProbe:
  enabled: false
  httpGet:
    path: /healthz
    port: http
  initialDelaySeconds: 0
  periodSeconds: 5
  failureThreshold: 30

# =========================
# RESOURCES & QoS
# =========================
resources:
  requests:
    cpu: "200m"
    memory: "256Mi"
  limits:
    cpu: "1"
    memory: "1Gi"

# =========================
# DEPLOYMENT STRATEGY & ROLLOUT
# =========================
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 0
    maxSurge: 25%

revisionHistoryLimit: 10
minReadySeconds: 5
terminationGracePeriodSeconds: 30
progressDeadlineSeconds: 600
podManagementPolicy: OrderedReady

priorityClassName: ""  # например: "high-priority"

topologySpreadConstraints:
  enabled: true
  rules:
    - maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
      labelSelector: {} # будет дополнен лейблами пода

affinity:
  nodeAffinity: {}
  podAffinity: {}
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector: {}
          topologyKey: kubernetes.io/hostname

nodeSelector: {}
tolerations: []

# =========================
# VOLUMES
# =========================
persistence:
  enabled: false
  storageClass: ""
  accessModes: ["ReadWriteOnce"]
  size: 1Gi
  mountPath: /data

extraVolumes: []       # произвольные volumes
extraVolumeMounts: []  # монтирования в основной контейнер

# =========================
# SIDECARS & INIT CONTAINERS
# =========================
initContainers: []     # список полных spec init-контейнеров
sidecars: []           # список полных spec sidecar-контейнеров

# =========================
# SERVICE
# =========================
service:
  enabled: true
  type: ClusterIP
  annotations: {}
  labels: {}
  ports:
    - name: http
      port: 80
      targetPort: http
    - name: metrics
      port: 9090
      targetPort: metrics

# =========================
# INGRESS
# =========================
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: "mythos.local"
      paths:
        - path: /
          pathType: Prefix
          servicePort: http
  tls: [] # [{hosts: ["mythos.local"], secretName: "mythos-tls"}]

# =========================
# AUTOSCALING
# =========================
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 6
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 180
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60

# =========================
# POD DISRUPTION BUDGET
# =========================
podDisruptionBudget:
  enabled: true
  minAvailable: 1
  # maxUnavailable: ""

# =========================
# NETWORK POLICY
# =========================
networkPolicy:
  enabled: true
  policyTypes: ["Ingress", "Egress"]
  ingress:
    - from:
        - podSelector: {}   # ограничить позже селекторами namespace/label
      ports:
        - port: 8081
          protocol: TCP
  egress:
    - to:
        - namespaceSelector: {}
      ports:
        - port: 53
          protocol: UDP

# =========================
# OBSERVABILITY
# =========================
serviceMonitor:
  enabled: false
  interval: 30s
  scrapeTimeout: 10s
  labels: {}
  annotations: {}
  endpoints:
    - port: metrics
      path: /metrics
      scheme: http

prometheusRule:
  enabled: false
  groups:
    - name: mythos-core.rules
      rules:
        - alert: MythosCoreHighErrorRate
          expr: sum(rate(http_server_requests_seconds_count{status=~"5.."}[5m])) > 5
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "Высокая доля 5xx"
            description: "Превышен порог 5xx за последние 5 минут."

opentelemetry:
  enabled: false
  exporterOTLP:
    endpoint: "http://otel-collector:4317"
  env:
    OTEL_SERVICE_NAME: mythos-core
    OTEL_TRACES_EXPORTER: otlp
    OTEL_METRICS_EXPORTER: none
    OTEL_LOGS_EXPORTER: none
    OTEL_TRACES_SAMPLER: parentbased_traceidratio
    OTEL_TRACES_SAMPLER_ARG: "0.1"

logging:
  mode: json
  level: info
  extraLabels: {}

# =========================
# CONFIG MAP (app config)
# =========================
config:
  enabled: true
  name: ""                       # пусто = auto
  annotations: {}
  labels: {}
  data:                          # ключи/значения попадут в ConfigMap
    app.yaml: |
      server:
        port: 8081
      features:
        guardrails: true
        tracing: false
      queue:
        backend: redis
        url: redis://redis:6379/0

mountConfig:
  enabled: true
  mountPath: /config
  items:
    - key: app.yaml
      path: app.yaml

# =========================
# ROLL-OUT ANNOTATIONS & LABELS
# =========================
release:
  labels:
    app.kubernetes.io/component: "api"
  annotations:
    rollouts.kubernetes.io/managed-by: "helm"

# =========================
# IMAGE PULL SECRETS (local)
# =========================
imagePullSecrets: [] # [{name: regcred}]

# =========================
# K8S RBAC (минимально-необходимый)
# =========================
rbac:
  create: false
  rules: []   # при необходимости заполнить

# =========================
# DRY-RUN & DIAGNOSTИКА (для шаблонов)
# =========================
diagnostics:
  showConfigChecksum: true
  showSecretChecksum: true
