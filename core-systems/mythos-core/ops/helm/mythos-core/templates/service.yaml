{{- /*
Industrial-grade Service template for mythos-core.

Expected Values structure (examples):
service:
  create: true
  type: ClusterIP            # ClusterIP | NodePort | LoadBalancer
  clusterIP: ""              # optional static ClusterIP
  loadBalancerIP: ""         # optional
  loadBalancerClass: ""      # optional
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
  topologyAwareHints: false
  publishNotReadyAddresses: false
  sessionAffinity: None      # None | ClientIP
  sessionAffinityConfig: {}  # e.g. { clientIP: { timeoutSeconds: 10800 } }
  externalIPs: []            # [ "1.2.3.4" ]
  loadBalancerSourceRanges: []  # [ "0.0.0.0/0" ]
  ipFamilyPolicy: ""         # SingleStack | PreferDualStack | RequireDualStack
  ipFamilies: []             # [ IPv4, IPv6 ]
  annotations: {}
  labels: {}
  selectorExtra: {}          # extra match labels
  ports:                     # list of ports
    - name: http
      port: 80
      targetPort: http       # numeric or named containerPort
      protocol: TCP
      appProtocol: http
      nodePort: null         # optional, only for NodePort/LB
    - name: api
      port: 8080
      targetPort: api
      protocol: TCP
      appProtocol: http
  additional:                # optional extra Services (per-component)
    - nameSuffix: "admin"
      type: ClusterIP
      selectorExtra: { "app.kubernetes.io/component": "admin" }
      annotations: {}
      labels: {}
      ports:
        - name: admin
          port: 8081
          targetPort: admin
          protocol: TCP
  headless:
    enabled: false
    nameSuffix: "headless"
    publishNotReadyAddresses: true
    annotations: {}
    labels: {}
    selectorExtra: {}
    ports:
      - name: grpc
        port: 9090
        targetPort: grpc
        protocol: TCP
*/ -}}

{{- if .Values.service.create }}
apiVersion: v1
kind: Service
metadata:
  name: {{ include "mythos-core.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "mythos-core.labels" . | nindent 4 }}
    {{- with .Values.service.labels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  {{- with .Values.service.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  type: {{ default "ClusterIP" .Values.service.type }}
  {{- with .Values.service.clusterIP }}
  clusterIP: {{ . | quote }}
  {{- end }}
  {{- with .Values.service.loadBalancerIP }}
  loadBalancerIP: {{ . | quote }}
  {{- end }}
  {{- with .Values.service.loadBalancerClass }}
  loadBalancerClass: {{ . | quote }}
  {{- end }}
  {{- with .Values.service.externalIPs }}
  externalIPs:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.service.loadBalancerSourceRanges }}
  loadBalancerSourceRanges:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- if and .Values.service.type (or (eq .Values.service.type "LoadBalancer") (eq .Values.service.type "NodePort")) }}
  externalTrafficPolicy: {{ default "Cluster" .Values.service.externalTrafficPolicy }}
  {{- end }}
  {{- with .Values.service.internalTrafficPolicy }}
  internalTrafficPolicy: {{ . }}
  {{- end }}
  {{- if hasKey .Values.service "topologyAwareHints" }}
  topologyAwareHints: {{ .Values.service.topologyAwareHints }}
  {{- end }}
  {{- if hasKey .Values.service "ipFamilyPolicy" }}
  ipFamilyPolicy: {{ .Values.service.ipFamilyPolicy }}
  {{- end }}
  {{- with .Values.service.ipFamilies }}
  ipFamilies:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- if hasKey .Values.service "publishNotReadyAddresses" }}
  publishNotReadyAddresses: {{ .Values.service.publishNotReadyAddresses }}
  {{- end }}
  {{- with .Values.service.sessionAffinity }}
  sessionAffinity: {{ . }}
  {{- end }}
  {{- with .Values.service.sessionAffinityConfig }}
  sessionAffinityConfig:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  selector:
    {{- include "mythos-core.selectorLabels" . | nindent 4 }}
    {{- with .Values.service.selectorExtra }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  ports:
    {{- $svcType := (default "ClusterIP" .Values.service.type) -}}
    {{- range $p := .Values.service.ports }}
    - name: {{ $p.name | quote }}
      protocol: {{ default "TCP" $p.protocol }}
      port: {{ required (printf "service.ports[%s].port is required" (toString $p.name)) $p.port }}
      targetPort: {{ default $p.port $p.targetPort }}
      {{- with $p.appProtocol }}
      appProtocol: {{ . | quote }}
      {{- end }}
      {{- if and (or (eq $svcType "NodePort") (eq $svcType "LoadBalancer")) $p.nodePort }}
      nodePort: {{ $p.nodePort }}
      {{- end }}
    {{- end }}
---
{{- end }}

{{- /* Additional component-specific Services */ -}}
{{- range $idx, $svc := .Values.service.additional }}
apiVersion: v1
kind: Service
metadata:
  name: {{ include "mythos-core.fullname" $ | printf "%s-%s" . (default (printf "svc-%d" $idx) $svc.nameSuffix) }}
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "mythos-core.labels" $ | nindent 4 }}
    {{- with $svc.labels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  {{- with $svc.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  type: {{ default (default "ClusterIP" $.Values.service.type) $svc.type }}
  {{- with $svc.loadBalancerIP }}
  loadBalancerIP: {{ . | quote }}
  {{- end }}
  {{- with $svc.loadBalancerClass }}
  loadBalancerClass: {{ . | quote }}
  {{- end }}
  {{- $t := (default (default "ClusterIP" $.Values.service.type) $svc.type) -}}
  {{- if and (or (eq $t "LoadBalancer") (eq $t "NodePort")) (hasKey $svc "externalTrafficPolicy") }}
  externalTrafficPolicy: {{ $svc.externalTrafficPolicy }}
  {{- end }}
  {{- if hasKey $svc "internalTrafficPolicy" }}
  internalTrafficPolicy: {{ $svc.internalTrafficPolicy }}
  {{- end }}
  {{- if hasKey $svc "topologyAwareHints" }}
  topologyAwareHints: {{ $svc.topologyAwareHints }}
  {{- end }}
  {{- if hasKey $svc "publishNotReadyAddresses" }}
  publishNotReadyAddresses: {{ $svc.publishNotReadyAddresses }}
  {{- end }}
  selector:
    {{- include "mythos-core.selectorLabels" $ | nindent 4 }}
    {{- with $svc.selectorExtra }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  ports:
    {{- range $p := $svc.ports }}
    - name: {{ $p.name | quote }}
      protocol: {{ default "TCP" $p.protocol }}
      port: {{ required (printf "service.additional[%s].ports[%s].port is required" (toString (default "?" $svc.nameSuffix)) (toString $p.name)) $p.port }}
      targetPort: {{ default $p.port $p.targetPort }}
      {{- with $p.appProtocol }}
      appProtocol: {{ . | quote }}
      {{- end }}
      {{- if and (or (eq $t "NodePort") (eq $t "LoadBalancer")) $p.nodePort }}
      nodePort: {{ $p.nodePort }}
      {{- end }}
    {{- end }}
---
{{- end }}

{{- /* Optional Headless Service (for StatefulSets/Discovery) */ -}}
{{- if and .Values.service.headless .Values.service.headless.enabled }}
apiVersion: v1
kind: Service
metadata:
  name: {{ include "mythos-core.fullname" . | printf "%s-%s" . (default "headless" .Values.service.headless.nameSuffix) }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "mythos-core.labels" . | nindent 4 }}
    {{- with .Values.service.headless.labels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  {{- with .Values.service.headless.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  clusterIP: None
  {{- if hasKey .Values.service.headless "publishNotReadyAddresses" }}
  publishNotReadyAddresses: {{ .Values.service.headless.publishNotReadyAddresses }}
  {{- end }}
  selector:
    {{- include "mythos-core.selectorLabels" . | nindent 4 }}
    {{- with .Values.service.headless.selectorExtra }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  ports:
    {{- range $p := .Values.service.headless.ports }}
    - name: {{ $p.name | quote }}
      protocol: {{ default "TCP" $p.protocol }}
      port: {{ required (printf "service.headless.ports[%s].port is required" (toString $p.name)) $p.port }}
      targetPort: {{ default $p.port $p.targetPort }}
      {{- with $p.appProtocol }}
      appProtocol: {{ . | quote }}
      {{- end }}
    {{- end }}
{{- end }}
