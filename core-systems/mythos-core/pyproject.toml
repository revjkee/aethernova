[build-system]
requires = ["hatchling>=1.25", "hatch-vcs>=0.4"]
build-backend = "hatchling.build"

[project]
name = "mythos-core"
dynamic = ["version"]
description = "Mythos Core: high-reliability narrative/lore engine foundation for Aethernova/NeuroCity."
readme = "README.md"
requires-python = ">=3.11"
license = { text = "Apache-2.0" }
authors = [
  { name = "Aethernova / NeuroCity Team", email = "dev@aethernova.local" }
]
maintainers = [
  { name = "Mythos Core Maintainers" }
]
keywords = ["aethernova", "neurocity", "mythos", "core", "ai", "lore", "engine"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: Apache Software License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Typing :: Typed",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries",
]

# Базовые зависимости ядра держим минимальными и чистыми
dependencies = []

[project.optional-dependencies]
dev = [
  "ruff>=0.6",
  "black>=24.4",
  "mypy>=1.11",
  "pytest>=8.2",
  "pytest-cov>=5.0",
  "coverage>=7.6",
  "pre-commit>=3.7",
  "types-PyYAML>=6.0",
]
cli = [
  "click>=8.1",
  "rich>=13.7",
]
grpc = [
  "grpcio>=1.65",
  "protobuf>=5.27",
]
io = [
  "orjson>=3.10",
  "PyYAML>=6.0",
  "tomli-w>=1.0.0",
]
ml = [
  "torch>=2.2; platform_system != 'Windows'",
  "onnxruntime>=1.18",
]
docs = [
  "mkdocs-material>=9.5",
  "mkdocstrings[python]>=0.24",
]

[project.urls]
Homepage = "https://example.com/aethernova/mythos-core"
Repository = "https://example.com/aethernova/mythos-core.git"
Issues = "https://example.com/aethernova/mythos-core/issues"

# Консольная точка входа (реализуйте mythos_core/cli.py:main)
[project.scripts]
mythos = "mythos_core.cli:main"

# -----------------------------
# Hatch / VCS versioning
# -----------------------------
[tool.hatch.version]
source = "vcs"

[tool.hatch.build]
# Явно фиксируем состав артефактов
include = [
  "mythos_core/**",
  "README.md",
  "LICENSE",
  "CHANGELOG.md",
  "pyproject.toml",
]
skip-excluded-dirs = true

[tool.hatch.build.targets.wheel]
packages = ["mythos_core"]

[tool.hatch.build.targets.sdist]
include = [
  "mythos_core/**",
  "README.md",
  "LICENSE",
  "CHANGELOG.md",
  "pyproject.toml",
]

# Окружения hatch для типичных задач
[tool.hatch.envs.default]
type = "virtual"
python = "3.11"
dependencies = [
  "ruff>=0.6",
  "black>=24.4",
  "mypy>=1.11",
  "pytest>=8.2",
  "pytest-cov>=5.0",
  "coverage>=7.6",
]

[tool.hatch.envs.default.scripts]
fmt = "ruff check --fix . && black ."
lint = "ruff check . && black --check . && mypy ."
test = "pytest -q --cov=mythos_core --cov-report=term-missing"

[tool.hatch.envs.lint]
dependencies = ["ruff>=0.6", "black>=24.4", "mypy>=1.11"]

[tool.hatch.envs.lint.scripts]
check = "ruff check --exit-non-zero-on-fix . && black --check . && mypy ."

[tool.hatch.envs.test]
dependencies = [
  "pytest>=8.2",
  "pytest-cov>=5.0",
  "coverage>=7.6",
  "grpcio>=1.65",
  "protobuf>=5.27",
  "orjson>=3.10",
  "PyYAML>=6.0",
]

[tool.hatch.envs.test.scripts]
unit = "pytest -q"
cov = "pytest -q --cov=mythos_core --cov-report=xml --cov-report=term-missing"

# -----------------------------
# Ruff (линтер + импорт/упрощения)
# -----------------------------
[tool.ruff]
target-version = "py311"
line-length = 100
respect-gitignore = true
extend-exclude = ["build", "dist", ".venv", "venv", "docs/_build"]
fix = true

[tool.ruff.lint]
select = ["E", "F", "W", "I", "N", "B", "RET", "SIM", "UP", "ASYNC", "C4", "PIE"]
ignore = [
  # примеры: "E203", "E266"
]
preview = true

[tool.ruff.lint.isort]
known-first-party = ["mythos_core"]
force-sort-within-sections = true

# -----------------------------
# Black (форматирование)
# -----------------------------
[tool.black]
line-length = 100
target-version = ["py311"]
preview = true

# -----------------------------
# Mypy (строгая типизация)
# -----------------------------
[tool.mypy]
python_version = "3.11"
pretty = true
show_error_codes = true
warn_return_any = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
no_implicit_optional = true
check_untyped_defs = true
strict_equality = true
namespace_packages = true
explicit_package_bases = true
mypy_path = ["mythos_core"]
plugins = ["pydantic.mypy"]
exclude = "(^build/|^dist/|^docs/_build/|tests/contract/snapshots/)"

# -----------------------------
# Pytest
# -----------------------------
[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
addopts = "-q -ra --strict-config --strict-markers"
xfail_strict = true
filterwarnings = [
  "error::DeprecationWarning",
]

# -----------------------------
# Coverage.py
# -----------------------------
[tool.coverage.run]
branch = true
source = ["mythos_core"]
omit = [
  "*/__init__.py",
  "tests/*",
]

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_lines = [
  "if __name__ == .__main__.:",
  "pragma: no cover",
]

# -----------------------------
# Дополнительно: Bandit (опционально при наличии)
# -----------------------------
[tool.bandit]
skips = ["B101", "B104"]
recursive = true
targets = ["mythos_core"]
