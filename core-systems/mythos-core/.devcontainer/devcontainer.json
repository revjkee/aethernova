{
  "name": "mythos-core â€¢ dev",
  "image": "mcr.microsoft.com/devcontainers/python:3.12",
  "features": {
    "ghcr.io/devcontainers/features/python:1": {
      "version": "3.12"
    },
    "ghcr.io/devcontainers/features/common-utils:2": {
      "installZsh": true,
      "username": "vscode",
      "userUid": "1000",
      "userGid": "1000",
      "upgradePackages": true
    },
    "ghcr.io/devcontainers/features/github-cli:1": {}
  },
  "hostRequirements": {
    "cpus": 2,
    "memory": "4gb"
  },
  "runArgs": [
    "--cap-add=SYS_PTRACE",
    "--security-opt=seccomp=unconfined"
  ],
  "containerEnv": {
    "PIP_DISABLE_PIP_VERSION_CHECK": "1",
    "PIP_NO_CACHE_DIR": "1",
    "PYTHONDONTWRITEBYTECODE": "1",
    "POETRY_VIRTUALENVS_CREATE": "false",
    "POETRY_NO_INTERACTION": "1"
  },
  "remoteUser": "vscode",
  "updateRemoteUserUID": true,
  "overrideCommand": false,
  "init": true,
  "userEnvProbe": "loginInteractiveShell",
  "mounts": [
    "source=${localWorkspaceFolder}/.devcontainer/.cache,target=/workspaces/.cache,type=bind,consistency=cached"
  ],
  "forwardPorts": [8080, 8081, 8090],
  "portsAttributes": {
    "8080": { "label": "worker-health" },
    "8081": { "label": "local-artifacts" },
    "8090": { "label": "llm-chat-demo" }
  },
  "customizations": {
    "vscode": {
      "settings": {
        "python.defaultInterpreterPath": "/usr/local/bin/python",
        "python.analysis.typeCheckingMode": "basic",
        "editor.formatOnSave": true,
        "editor.codeActionsOnSave": {
          "source.organizeImports": "explicit",
          "source.fixAll": "explicit"
        },
        "files.trimTrailingWhitespace": true,
        "files.insertFinalNewline": true,
        "terminal.integrated.defaultProfile.linux": "zsh",
        "[python]": {
          "editor.defaultFormatter": "ms-python.black-formatter"
        },
        "python.testing.pytestEnabled": true,
        "python.testing.unittestEnabled": false,
        "ruff.organizeImports": true,
        "ruff.lint.args": ["--select=E,F,I,B,B9", "--line-length=100"]
      },
      "extensions": [
        "ms-python.python",
        "ms-python.vscode-pylance",
        "ms-python.black-formatter",
        "charliermarsh.ruff",
        "ms-azuretools.vscode-docker",
        "github.vscode-github-actions",
        "tamasfe.even-better-toml",
        "redhat.vscode-yaml",
        "streetsidesoftware.code-spell-checker"
      ]
    }
  },
  "postCreateCommand": "/bin/bash -lc '\nset -euo pipefail\nexport DEBIAN_FRONTEND=noninteractive\napt-get update && apt-get install -y --no-install-recommends \\\n  build-essential pkg-config libssl-dev curl ca-certificates git && \\\n  rm -rf /var/lib/apt/lists/*\n# Ensure pip is fresh\npython -m pip install --upgrade pip\n# Poetry & pre-commit via pipx from common-utils feature\npipx install poetry==1.8.3 || true\npipx install pre-commit==3.7.1 || true\n# Speed up Poetry network\npoetry config installer.max-workers 8 || true\npoetry config virtualenvs.in-project false || true\n# Install deps if pyproject exists\nif [ -f pyproject.toml ]; then poetry install --no-root --no-ansi; fi\n# Enable git hooks if repo present\nif [ -f .pre-commit-config.yaml ]; then pre-commit install -t pre-commit -t commit-msg || true; fi\n'",
  "postStartCommand": "/bin/bash -lc '\nset -e\n# Create writable cache dirs\nmkdir -p /workspaces/.cache/pip /workspaces/.cache/poetry\n# Print tool versions for diagnostics\npython --version && pip --version || true\npoetry --version || true\npre-commit --version || true\n'",
  "shutdownAction": "stopContainer"
}
