# =============================================================================
# avm-core :: Zero-Trust NetworkPolicies (base)
# - Жесткий default-deny для Pod с нужными метками
# - Точечные разрешения ingress/egress
# - Без зашитого namespace (назначается на верхнем уровне)
# =============================================================================

# 1) Default-Deny для конкретных Pod (ingress+egress)
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: avm-core-default-deny
  labels:
    app.kubernetes.io/name: avm-core
    app.kubernetes.io/component: engine
    app.kubernetes.io/part-of: core-systems
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: avm-core
      app.kubernetes.io/component: engine
  policyTypes:
    - Ingress
    - Egress
  ingress: []
  egress: []

# 2) Разрешить Prometheus (ServiceMonitor) собирать метрики из namespace "observability" (порт 9090)
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: avm-core-allow-metrics
  labels:
    app.kubernetes.io/name: avm-core
    app.kubernetes.io/component: engine
    app.kubernetes.io/part-of: core-systems
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: avm-core
      app.kubernetes.io/component: engine
  policyTypes: ["Ingress"]
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              app.kubernetes.io/name: observability
      ports:
        - port: 9090
          protocol: TCP

# 3) Разрешить трафик от Ingress Controller (обычно namespace ingress-nginx) к приложению (порт 8080)
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: avm-core-allow-from-ingress
  labels:
    app.kubernetes.io/name: avm-core
    app.kubernetes.io/component: engine
    app.kubernetes.io/part-of: core-systems
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: avm-core
      app.kubernetes.io/component: engine
  policyTypes: ["Ingress"]
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: ingress-nginx
          podSelector:
            matchLabels:
              app.kubernetes.io/name: ingress-nginx
      ports:
        - port: 8080
          protocol: TCP

# 4) Допуск внутри текущего namespace по "флажку" на вызывающих Pod (гранулярный self‑service доступ)
#    Вызывающий Pod должен иметь label networking.neurocity.io/allow-to-avm="true"
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: avm-core-allow-same-ns-labeled
  labels:
    app.kubernetes.io/name: avm-core
    app.kubernetes.io/component: engine
    app.kubernetes.io/part-of: core-systems
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: avm-core
      app.kubernetes.io/component: engine
  policyTypes: ["Ingress"]
  ingress:
    - from:
        - podSelector:
            matchLabels:
              networking.neurocity.io/allow-to-avm: "true"
      ports:
        - port: 8080
          protocol: TCP

# ---------------- EGRESS ----------------

# 5) Разрешить DNS (kube-dns/CoreDNS) TCP/UDP 53 в kube-system
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: avm-core-egress-dns
  labels:
    app.kubernetes.io/name: avm-core
    app.kubernetes.io/component: engine
    app.kubernetes.io/part-of: core-systems
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: avm-core
      app.kubernetes.io/component: engine
  policyTypes: ["Egress"]
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
          podSelector:
            matchLabels:
              k8s-app: kube-dns
      ports:
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP

# 6) Разрешить egress к локальному Redis (порт 6379) в текущем namespace (если используется кэш/джобы)
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: avm-core-egress-redis
  labels:
    app.kubernetes.io/name: avm-core
    app.kubernetes.io/component: engine
    app.kubernetes.io/part-of: core-systems
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: avm-core
      app.kubernetes.io/component: engine
  policyTypes: ["Egress"]
  egress:
    - to:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: redis
      ports:
        - port: 6379
          protocol: TCP

# 7) Разрешить egress к OTEL Collector (порт 4317 gRPC) в namespace "observability"
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: avm-core-egress-otel
  labels:
    app.kubernetes.io/name: avm-core
    app.kubernetes.io/component: engine
    app.kubernetes.io/part-of: core-systems
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: avm-core
      app.kubernetes.io/component: engine
  policyTypes: ["Egress"]
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              app.kubernetes.io/name: observability
          podSelector:
            matchLabels:
              app.kubernetes.io/name: otel-collector
      ports:
        - port: 4317
          protocol: TCP

# 8) Разрешить egress к Kafka (порт 9092) в namespace "kafka"
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: avm-core-egress-kafka
  labels:
    app.kubernetes.io/name: avm-core
    app.kubernetes.io/component: engine
    app.kubernetes.io/part-of: core-systems
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: avm-core
      app.kubernetes.io/component: engine
  policyTypes: ["Egress"]
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kafka
          podSelector:
            matchLabels:
              app.kubernetes.io/name: kafka
      ports:
        - port: 9092
          protocol: TCP

# 9) Разрешить egress к MinIO/S3‑совместимому объектному хранилищу внутри кластера (9000/https 443)
#    Если используется внешний S3 через NAT/Internet — потребуется отдельная политика под egress‑шлюз/ CIDR.
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: avm-core-egress-object-storage
  labels:
    app.kubernetes.io/name: avm-core
    app.kubernetes.io/component: engine
    app.kubernetes.io/part-of: core-systems
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: avm-core
      app.kubernetes.io/component: engine
  policyTypes: ["Egress"]
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              app.kubernetes.io/name: observability
          podSelector:
            matchLabels:
              app.kubernetes.io/name: minio
      ports:
        - port: 9000
          protocol: TCP
        - port: 443
          protocol: TCP
