[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[project]
name = "avm-core"
version = "0.1.0"
description = "AVM Core: высоконадежные базовые компоненты и утилиты для Aethernova."
readme = "README.md"
requires-python = ">=3.11"
license = { text = "Apache-2.0" }
authors = [{ name = "Aethernova Core Team", email = "core@aethernova.dev" }]
keywords = ["avm", "core", "aethernova", "utils"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: Apache Software License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Typing :: Typed"
]
dependencies = [
  # основные зависимости библиотеки (пример; оставьте пустым, если пока нет)
]

[project.optional-dependencies]
dev = [
  "ruff>=0.5.5",
  "mypy>=1.10.0",
  "pytest>=8.2.0",
  "pytest-cov>=5.0.0",
  "coverage>=7.6.0",
  "twine>=5.1.0",
  "hatch>=1.12.0"
]

[project.urls]
Homepage = "https://example.com/aethernova/avm-core"
Repository = "https://example.com/aethernova/avm-core.git"
Issues = "https://example.com/aethernova/avm-core/issues"

[project.scripts]
avm-core-example = "avm_core.__main__:main"

[tool.hatch.build.targets.sdist]
include = ["avm_core", "README.md", "LICENSE", "pyproject.toml"]

[tool.hatch.build.targets.wheel]
packages = ["avm_core"]

[tool.ruff]
target-version = "py311"
line-length = 100
fix = true
unsafe-fixes = false
extend-exclude = ["build", "dist", ".venv"]

[tool.ruff.lint]
select = [
  "E", "F", "I", "UP", "B", "S", "PL", "W"
]
ignore = [
  "E203",  # совместимость с форматированием
]
preview = false

[tool.ruff.lint.isort]
known-first-party = ["avm_core"]
combine-as-imports = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.mypy]
python_version = "3.11"
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
no_implicit_optional = true
check_untyped_defs = true
strict_equality = true
plugins = []
mypy_path = ["avm_core", "stubs"]
exclude = ['build', 'dist', '.venv']

[tool.pytest.ini_options]
addopts = "-q -ra"
testpaths = ["tests"]
pythonpath = ["."]
xfail_strict = true
filterwarnings = [
  "error"
]

[tool.coverage.run]
branch = true
source = ["avm_core"]
omit = ["**/__init__.py"]

[tool.coverage.report]
show_missing = true
skip_covered = false
fail_under = 85

[tool.coverage.xml]
output = ".coverage.xml"
