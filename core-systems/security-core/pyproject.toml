[build-system]
requires = ["poetry-core>=1.9.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "security-core"
version = "0.1.0"
description = "NeuroCity core-systems: security-core — промышленное ядро безопасности (криптография, валидация, политики, аудит)."
authors = ["NeuroCity Engineering <eng@neurocity.example>"]
license = "Proprietary"
readme = "README.md"
packages = [{ include = "security_core", from = "src" }]
homepage = "https://neurocity.example/core-systems/security-core"
repository = "https://neurocity.example/core-systems/security-core/repo"
keywords = ["security", "cryptography", "jwt", "policy", "pki", "zero-trust"]
classifiers = [
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Security :: Cryptography",
  "Typing :: Typed"
]

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
pydantic = "^2.8.0"
pydantic-settings = "^2.3.0"
typing-extensions = "^4.12.2"
cryptography = "^43.0.0"
PyNaCl = "^1.5.0"
pyjwt = "^2.9.0"
python-jose = {version = "^3.3.0", extras = ["cryptography"]}
httpx = {version = "^0.27.0", extras = ["http2"]}
anyio = "^4.4.0"
structlog = "^24.1.0"
uvloop = {version = "^0.19.0", markers = "sys_platform == 'linux'"}

# Опциональные фичи, которые можно включать через extras
[tool.poetry.extras]
jwt = ["pyjwt", "python-jose"]
crypto = ["cryptography", "PyNaCl"]
tls = []
pki = []

[tool.poetry.group.dev.dependencies]
ruff = "^0.6.9"
black = "^24.8.0"
isort = "^5.13.2"
mypy = "^1.11.1"
pre-commit = "^3.8.0"

[tool.poetry.group.test.dependencies]
pytest = "^8.3.2"
pytest-asyncio = "^0.23.8"
hypothesis = "^6.112.1"
coverage = "^7.6.1"

[tool.poetry.group.audit.dependencies]
bandit = "^1.7.9"
safety = "^3.2.6"
pip-audit = "^2.7.3"
cyclonedx-bom = "^4.5.0"

[tool.poetry.scripts]
sec-core.version = "security_core.cli:print_version"
sec-core.keygen = "security_core.cli:keygen"
sec-core.jwt = "security_core.cli:jwt_tool"
sec-core.audit = "security_core.cli:audit_suite"
sec-core.sbom = "security_core.cli:generate_sbom"

# ---------------------------
# Инструменты качества кода
# ---------------------------

[tool.ruff]
target-version = "py311"
line-length = 100
fix = true
unsafe-fixes = false
select = ["E","F","I","UP","B","C4","PT","SIM","T20","Q","PL"]
ignore = ["E203","E266","E501"]
exclude = ["poetry.lock", ".venv", "dist", "build"]

[tool.ruff.lint.isort]
profile = "black"
known_first_party = ["security_core"]

[tool.black]
line-length = 100
target-version = ["py311"]
skip-string-normalization = true

[tool.mypy]
python_version = "3.11"
strict = true
warn_unused_configs = true
warn_return_any = true
warn_unused_ignores = true
disallow_any_generics = true
no_implicit_optional = true
check_untyped_defs = true
disallow_untyped_defs = true
plugins = ["pydantic.mypy"]
mypy_path = "src"
exclude = ["tests/fixtures/"]

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-q --strict-markers --disable-warnings"
markers = [
  "unit: быстрые юнит-тесты",
  "integration: интеграционные тесты"
]

[tool.coverage.run]
branch = true
source = ["security_core"]
omit = ["tests/*", "**/__init__.py"]

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 90

[tool.bandit]
skips = ["B101","B404","B603"]
aggregate = true
recursive = true
targets = ["src/security_core"]

[tool.isort]
profile = "black"
line_length = 100
force_single_line = true

# ---------------------------
# Конфигурация structlog
# ---------------------------
[tool.security_core.logging]
format = "json"
level = "INFO"
timestamps = "iso"
context = ["request_id","trace_id","subject","tenant"]

# ---------------------------
# Параметры SBOM
# ---------------------------
[tool.cyclonedx]
schemaVersion = "1.5"
outputFormat = "json"
