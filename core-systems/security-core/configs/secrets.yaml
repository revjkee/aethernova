# =============================================================================
# Aethernova / core-systems/security-core
# File: configs/secrets.yaml
# Purpose: Промышленный набор манифестов для безопасной работы с секретами
# Profiles: dev (Secret), prod (ExternalSecret), gitops (SealedSecret),
#           runtime (CSI Secret Store)
# =============================================================================

# -----------------------------------------------------------------------------
# 1) DEV-Profile: Kubernetes Secret (immutable, без явных значений в репозитории)
# Использовать ТОЛЬКО локально/во временных окружениях. Значения подставлять
# через CI‑секреты (kubectl create secret ... --dry-run=client -o yaml | kustomize),
# или через Helm values (tpl) на стадии пайплайна. В исходнике держим ПУСТО.
# -----------------------------------------------------------------------------
apiVersion: v1
kind: Secret
metadata:
  name: security-core-dev
  namespace: security-core
  labels:
    app.kubernetes.io/name: security-core
    app.kubernetes.io/part-of: security-core
    security.aethernova.io/profile: dev
  annotations:
    security.aethernova.io/owner: "platform-security"
    security.aethernova.io/rotation: "30d"
    # Пример интеграции с OPA/Kyverno: запрет создавать Secret без immutable
    security.aethernova.io/policy: "immutable-required"
type: Opaque
immutable: true
stringData:
  # Значения НЕ храните в Git. Пусть CI подставит их перед apply.
  # Примеры ключей:
  JWT_SIGNING_KEY: ""
  OIDC_CLIENT_SECRET: ""
  WEBHOOK_HMAC_SECRET: ""
  DB_PASSWORD: ""
  S3_ACCESS_KEY_ID: ""
  S3_SECRET_ACCESS_KEY: ""
---
# -----------------------------------------------------------------------------
# 2) PROD-Profile: ExternalSecret (external-secrets.io) — получение из внешнего
# менеджера (AWS Secrets Manager / GCP Secret Manager / HashiCorp Vault и т. д.)
# Подразумевается установленный External Secrets Operator и настроенный
# (Cluster)SecretStore с именем (пример) "security-core-store".
# -----------------------------------------------------------------------------
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: security-core-prod
  namespace: security-core
  labels:
    app.kubernetes.io/name: security-core
    app.kubernetes.io/part-of: security-core
    security.aethernova.io/profile: prod
  annotations:
    security.aethernova.io/rotation: "30d"
    security.aethernova.io/source-of-truth: "external-secrets"
spec:
  refreshInterval: 1h
  secretStoreRef:
    kind: ClusterSecretStore   # или SecretStore
    name: security-core-store  # замените на ваш стор (aws/gcp/vault/azure)
  target:
    name: security-core
    creationPolicy: Owner
    deletionPolicy: Retain
    template:
      type: Opaque
      metadata:
        labels:
          app.kubernetes.io/name: security-core
          app.kubernetes.io/part-of: security-core
          security.aethernova.io/profile: prod
      data:
        # Ключи итогового Kubernetes Secret и их источники ниже в "data":
        JWT_SIGNING_KEY: "{{ .jwt_signing_key }}"
        OIDC_CLIENT_SECRET: "{{ .oidc_client_secret }}"
        WEBHOOK_HMAC_SECRET: "{{ .webhook_hmac_secret }}"
        DB_PASSWORD: "{{ .db_password }}"
        S3_ACCESS_KEY_ID: "{{ .s3_access_key_id }}"
        S3_SECRET_ACCESS_KEY: "{{ .s3_secret_access_key }}"
  data:
    # Ниже примеры привязок к внешним секретам. Настройте путь/поле.
    - secretKey: jwt_signing_key
      remoteRef:
        key: prod/security-core/app         # путь/имя секрета в внешнем хранилище
        property: JWT_SIGNING_KEY          # поле/ключ внутри секрета
    - secretKey: oidc_client_secret
      remoteRef:
        key: prod/security-core/oidc
        property: CLIENT_SECRET
    - secretKey: webhook_hmac_secret
      remoteRef:
        key: prod/security-core/webhook
        property: HMAC_SECRET
    - secretKey: db_password
      remoteRef:
        key: prod/security-core/db
        property: PASSWORD
    - secretKey: s3_access_key_id
      remoteRef:
        key: prod/security-core/s3
        property: ACCESS_KEY_ID
    - secretKey: s3_secret_access_key
      remoteRef:
        key: prod/security-core/s3
        property: SECRET_ACCESS_KEY
---
# -----------------------------------------------------------------------------
# 3) GITOPS-Profile: SealedSecret (Bitnami Sealed Secrets)
# Позволяет хранить зашифрованные секреты в Git. Ниже шаблон со СТУБ‑данными.
# Командой kubeseal генерируйте .spec.encryptedData на вашей стороне.
# -----------------------------------------------------------------------------
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: security-core-gitops
  namespace: security-core
  labels:
    app.kubernetes.io/name: security-core
    app.kubernetes.io/part-of: security-core
    security.aethernova.io/profile: gitops
spec:
  template:
    metadata:
      name: security-core-gitops
      namespace: security-core
      labels:
        app.kubernetes.io/name: security-core
        app.kubernetes.io/part-of: security-core
        security.aethernova.io/profile: gitops
    type: Opaque
    immutable: true
  encryptedData:
    # ВСТАВЬТЕ СЮДА ЗАШИФРОВАННЫЕ ЗНАЧЕНИЯ, ПОЛУЧЕННЫЕ ЧЕРЕЗ kubeseal.
    # Примеры ключей (значения-заглушки НЕ РАБОЧИЕ):
    JWT_SIGNING_KEY: "AgAABb...REPLACE_WITH_REAL_SEALED_VALUE..."
    OIDC_CLIENT_SECRET: "AgAABb...REPLACE_WITH_REAL_SEALED_VALUE..."
    WEBHOOK_HMAC_SECRET: "AgAABb...REPLACE_WITH_REAL_SEALED_VALUE..."
    DB_PASSWORD: "AgAABb...REPLACE_WITH_REAL_SEALED_VALUE..."
    S3_ACCESS_KEY_ID: "AgAABb...REPLACE_WITH_REAL_SEALED_VALUE..."
    S3_SECRET_ACCESS_KEY: "AgAABb...REPLACE_WITH_REAL_SEALED_VALUE..."
---
# -----------------------------------------------------------------------------
# 4) RUNTIME-Profile: SecretProviderClass (CSI Secrets Store)
# Монтирование секретов в Pod как файлы/тома, минуя хранение в etcd.
# Пример для Azure Key Vault (как шаблон; замените на ваш провайдер).
# Для AWS/GCP/Vault укажите соответствующие параметры provider/objects.
# -----------------------------------------------------------------------------
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: security-core-csi
  namespace: security-core
  labels:
    app.kubernetes.io/name: security-core
    app.kubernetes.io/part-of: security-core
    security.aethernova.io/profile: runtime
spec:
  provider: azure                    # пример: azure | aws | gcp | vault
  parameters:
    usePodIdentity: "false"
    keyvaultName: "REPLACE_ME"
    tenantId: "REPLACE_ME"
    cloudName: ""                    # пусто для Public Cloud
    objects: |
      array:
        - |
          objectName: jwt-signing-key
          objectType: secret
          objectVersion: ""          # latest
        - |
          objectName: oidc-client-secret
          objectType: secret
          objectVersion: ""
  # Дополнительно можно синхронизировать в K8s Secret (если необходимо)
  secretObjects:
    - secretName: security-core-csi-synced
      type: Opaque
      labels:
        app.kubernetes.io/name: security-core
        app.kubernetes.io/part-of: security-core
        security.aethernova.io/profile: runtime
      data:
        - objectName: jwt-signing-key
          key: JWT_SIGNING_KEY
        - objectName: oidc-client-secret
          key: OIDC_CLIENT_SECRET
---
# -----------------------------------------------------------------------------
# 5) (ОПЦИОНАЛЬНО) SOPS-шаблон: если используется sops + KMS/age
# Этот документ — комментарный шаблон. Реальные зашифрованные значения
# генерируйте утилитой sops; манифесты будут иметь поле "sops:".
# -----------------------------------------------------------------------------
# apiVersion: v1
# kind: Secret
# metadata:
#   name: security-core-sops
#   namespace: security-core
#   labels:
#     app.kubernetes.io/name: security-core
#     app.kubernetes.io/part-of: security-core
#     security.aethernova.io/profile: sops
# type: Opaque
# data:
#   JWT_SIGNING_KEY: ENC[AES256_GCM,data:...,type:str]
#   OIDC_CLIENT_SECRET: ENC[AES256_GCM,data:...,type:str]
# sops:
#   kms: []          # список ARN ключей KMS (AWS/GCP/Azure) при использовании
#   age:
#     - recipient: age1xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
#   mac: ENC[AES256_GCM,data:...,type:str]
#   version: "3.8.0"
