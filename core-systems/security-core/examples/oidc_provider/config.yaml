# file: security-core/examples/oidc_provider/config.yaml

# Внешний URL Issuer (должен совпадать с тем, что увидят клиенты и содержится в iss в токенах)
issuer: https://id.example.com/dex

# Хранилище состояния Dex: PostgreSQL с валидацией TLS CA
storage:
  type: postgres
  config:
    host: db.example.com
    port: 5432
    database: dex_db
    user: dex
    password: $DEX_POSTGRES_PASSWORD            # берём из окружения
    ssl:
      mode: verify-ca
      caFile: /etc/dex/postgres/ca.pem

# Веб-интерфейс и OAuth2 эндпоинты по HTTPS
web:
  https: 0.0.0.0:5556
  tlsCert: /etc/dex/tls/tls.crt
  tlsKey:  /etc/dex/tls/tls.key

# Логи в production-уровне
logger:
  level: info

# Настройки OAuth2/OIDC потока
oauth2:
  # В проде обычно показываем экран согласия при первой авторизации
  skipApprovalScreen: false
  # Локальная password‑схема отключена; использовать внешние коннекторы
  # passwordConnector: local    # не задаём

# Включён только федеративный вход (без локальных паролей)
enablePasswordDB: false

# Клиенты. SPA использует PKCE и public-клиент без секрета.
staticClients:
  # 1) SPA "security-admin-minimal" — публичный клиент, PKCE, без секрета
  - id: security-admin-minimal
    name: Security Admin Minimal
    public: true
    redirectURIs:
      - https://admin.example.com/
      - http://localhost:8080/
      - http://127.0.0.1:8080/

  # 2) Конфиденциальный клиент (например, CLI с локальным редиректом)
  - id: security-core-cli
    name: Security Core CLI
    secret: $DEX_CLIENT_SECURITY_CLI_SECRET     # секрет берём из окружения
    redirectURIs:
      - http://127.0.0.1:5555/callback
      - http://localhost:5555/callback

# Федерация: внешний OIDC‑провайдер (Azure AD, Keycloak, Google и т.п.)
connectors:
  - type: oidc
    id: upstream-oidc
    name: Corporate SSO
    config:
      issuer: https://login.corp.example.com/        # Issuer внешнего IdP
      clientID: $UPSTREAM_OIDC_CLIENT_ID
      clientSecret: $UPSTREAM_OIDC_CLIENT_SECRET
      redirectURI: https://id.example.com/dex/callback
      # Рекомендуемые скоупы: offline_access даст refresh-токен
      scopes: ["openid", "profile", "email", "offline_access"]
      getUserInfo: true
      # При необходимости можно указать ключ пользовательского идентификатора:
      # userIDKey: "sub"

# Сроки жизни и ротация токенов
expiry:
  # Короткие ID-токены
  idTokens: 10m
  # Окно обмена кода на токены
  authRequests: 5m
  # Для device-code потока (если используется)
  deviceRequests: 10m
  # Ротация ключей подписи JWT
  signingKeys: 6h
  # Политика refresh-токенов
  refreshTokens:
    # Недействителен, если не использовался дольше интервала
    validIfNotUsedFor: 720h          # 30 дней
    # Абсолютное время жизни вне зависимости от использования
    absoluteLifetime: 2160h          # 90 дней
    # Разрешить кратковременное повторное применение старого токена при гонках
    reuseInterval: 5s
    # Полная ротация включена (рекомендуется)
    disableRotation: false

# Пример dev-настроек локальной БД паролей (НЕ для продакшена):
# enablePasswordDB: true
# staticPasswords:
#   - email: admin@example.com
#     # bcrypt-хэш пароля. Сгенерируйте заранее, секреты в явном виде не храните.
#     hash: "$2b$12$REPLACE_WITH_BCRYPT_HASH"
#     username: admin
#     userID: 0000000000000001
