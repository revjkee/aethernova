syntax = "proto3";

package security.v1;

option go_package = "github.com/yourorg/security-core/gen/proto/v1/security;security";
option java_multiple_files = true;
option java_package = "org.yourorg.security.v1";
option csharp_namespace = "YourOrg.Security.V1";
option php_namespace = "YourOrg\\Security\\V1";
option ruby_package = "YourOrg::Security::V1";
option objc_class_prefix = "SEC";
option swift_prefix = "SEC";

// Uncomment if вы используете grpc-gateway HTTP-маршрутизацию
// import "google/api/annotations.proto";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/field_mask.proto";

// -----------------------------------------------------------------------------
// ENUMS
// -----------------------------------------------------------------------------

// Интегральный статус системы/подсистемы.
enum HealthStatus {
  HEALTH_STATUS_UNSPECIFIED = 0;
  HEALTHY = 1;        // все цели выполняются
  DEGRADED = 2;       // есть деградация, но сервис функционален
  UNHEALTHY = 3;      // существенные сбои
  MAINTENANCE = 4;    // запланированная недоступность/режим обслуживания
}

// Тип пробы.
enum ProbeType {
  PROBE_TYPE_UNSPECIFIED = 0;
  STARTUP = 1;   // готовность к запуску (однократно при старте)
  LIVENESS = 2;  // живость процесса
  READINESS = 3; // готовность обслуживать запросы
  CUSTOM = 4;    // кастомные доменные проверки
}

// Уровень серьезности события/причины.
enum Severity {
  SEVERITY_UNSPECIFIED = 0;
  INFO = 1;
  WARNING = 2;
  ERROR = 3;
  CRITICAL = 4;
}

// Классы зависимостей.
enum DependencyType {
  DEP_TYPE_UNSPECIFIED = 0;
  SERVICE = 1; // внешний/внутренний сервис
  DATABASE = 2;
  CACHE = 3;
  QUEUE = 4;
  KMS = 5;
  IDP = 6;     // identity provider
  DNS = 7;
  STORAGE = 8;
  NETWORK = 9;
}

// -----------------------------------------------------------------------------
// МЕТАДАННЫЕ ЗАПРОСА/ОТВЕТА
// -----------------------------------------------------------------------------

message RequestMeta {
  string correlation_id = 1; // из заголовка X-Correlation-ID/traceparent
  string tenant_id = 2;      // аренда/организация
  string user_id = 3;        // инициатор (если применимо)
  string source_ip = 4;
  string user_agent = 5;
  map<string, string> labels = 6; // произвольные теги
  reserved 7 to 9;
}

message ResponseMeta {
  string trace_id = 1;
  string span_id = 2;
  google.protobuf.Timestamp observed_at = 3;
  map<string, string> labels = 4;
  reserved 5 to 9;
}

// -----------------------------------------------------------------------------
// БАЗОВЫЕ СТРУКТУРЫ
// -----------------------------------------------------------------------------

// Единый формат детали статуса подсистемы/проверки.
message StatusDetail {
  string component = 1;                     // имя/ID подсистемы
  HealthStatus status = 2;
  Severity severity = 3;
  string reason = 4;                        // краткая причина
  string message = 5;                       // развернутое описание
  int32 error_code = 6;                     // внутр. код или http/grpc
  google.protobuf.Duration latency = 7;     // длительность проверки
  google.protobuf.Timestamp observed_at = 8;
  string remediation_url = 9;               // runbook/вики
  map<string, string> labels = 10;          // теги (region, zone, shard...)
  google.protobuf.Struct context = 11;      // произв. контекст результата
  reserved 12 to 19;
}

// Информация о сборке/рантайме.
message BuildInfo {
  string version = 1;            // семвер/коммитный тег
  string git_commit = 2;         // sha1/sha256 коммита
  string build_date = 3;         // ISO-8601
  string builder = 4;            // CI job/actor
  string runtime = 5;            // go1.22, jre17, .NET 8 и т.п.
  string os = 6;                 // linux, windows, darwin
  string arch = 7;               // amd64, arm64...
  string container_id = 8;       // docker/containerd ID (если есть)
  map<string, string> labels = 9;// e.g. "fips":"true"
  reserved 10 to 19;
}

// Описание зависимости и ее состояние.
message Dependency {
  string name = 1;
  DependencyType type = 2;
  string endpoint = 3;                   // адрес/DSN/URI
  bool required = 4;                     // критична ли для readiness
  HealthStatus status = 5;
  google.protobuf.Duration latency = 6;
  google.protobuf.Timestamp last_checked = 7;
  bool mtls_enabled = 8;                 // mTLS/канальная защита
  string certificate_expiry = 9;         // ISO-8601 дата истечения
  map<string, string> labels = 10;       // region/zone/shard/role
  string reason = 11;                    // краткая причина
  reserved 12 to 19;
}

// Метрическая точка для легковесного снимка (не замена Prometheus).
message Metric {
  string name = 1;
  double value = 2;
  string unit = 3;                       // ms, %, req/s, bytes, count
  map<string, string> labels = 4;        // dim: {route: "/login", code:"200"}
  google.protobuf.Timestamp ts = 5;
  reserved 6 to 9;
}

// Параметры и факты SLO.
message SLOTarget {
  string window = 1;           // "7d", "30d"
  double availability_pct = 2; // целевое значение 99.9, 99.95 и т.п.
}

message SLOReport {
  SLOTarget target = 1;
  double achieved_pct = 2;         // достигнутое значение
  double error_budget_pct = 3;     // остаток бюджет ошибок, %
  double burn_rate = 4;            // скорость сжигания
  google.protobuf.Timestamp as_of = 5;
  map<string, string> labels = 6;  // service, region, route
  reserved 7 to 9;
}

// -----------------------------------------------------------------------------
// HEALTH CHECK / WATCH
// -----------------------------------------------------------------------------

message HealthCheckRequest {
  RequestMeta meta = 1;
  repeated string components = 2;         // если пусто — все
  map<string, string> selector = 3;       // {region:"eu-west-1",zone:"1a"}
  google.protobuf.FieldMask field_mask = 4; // выборка полей ответа
  reserved 5 to 9;
}

message HealthCheckResponse {
  ResponseMeta meta = 1;
  HealthStatus overall = 2;
  repeated StatusDetail details = 3;      // по компонентам/пробам
  BuildInfo build = 4;
  google.protobuf.Duration ttl = 5;       // рекомендуемый кэш
  reserved 6 to 9;
}

message HealthWatchRequest {
  RequestMeta meta = 1;
  repeated string components = 2;
  map<string, string> selector = 3;
  google.protobuf.Duration min_interval = 4; // хинт на частоту
  reserved 5 to 9;
}

// Событие изменения здоровья (для streaming).
message HealthStatusEvent {
  ResponseMeta meta = 1;
  string component = 2;
  HealthStatus prev = 3;
  HealthStatus curr = 4;
  Severity severity = 5;
  string reason = 6;
  google.protobuf.Struct diff = 7; // произвольная дельта
  google.protobuf.Timestamp observed_at = 8;
  reserved 9 to 19;
}

// -----------------------------------------------------------------------------
// ПРОБЫ (LIVENESS/READINESS/STARTUP/CUSTOM)
// -----------------------------------------------------------------------------

message ProbeRequest {
  RequestMeta meta = 1;
  ProbeType type = 2;
  string component = 3;                 // если пусто — корневой сервис
  reserved 4 to 9;
}

message ProbeResponse {
  ResponseMeta meta = 1;
  ProbeType type = 2;
  HealthStatus status = 3;
  string message = 4;
  google.protobuf.Duration latency = 5;
  google.protobuf.Timestamp observed_at = 6;
  reserved 7 to 9;
}

// -----------------------------------------------------------------------------
// ЗАВИСИМОСТИ
// -----------------------------------------------------------------------------

message GetDependenciesRequest {
  RequestMeta meta = 1;
  map<string, string> selector = 2; // фильтры: type/region/required=true
  int32 page_size = 3;
  string page_token = 4;
  reserved 5 to 9;
}

message GetDependenciesResponse {
  ResponseMeta meta = 1;
  repeated Dependency items = 2;
  string next_page_token = 3;
  reserved 4 to 9;
}

// -----------------------------------------------------------------------------
// МЕТРИКИ / SLO
// -----------------------------------------------------------------------------

message MetricsSnapshotRequest {
  RequestMeta meta = 1;
  repeated string metric_names = 2; // если пусто — ключевые health-метрики
  map<string, string> selector = 3; // route, region и т.п.
  reserved 4 to 9;
}

message MetricsSnapshotResponse {
  ResponseMeta meta = 1;
  repeated Metric metrics = 2;
  reserved 3 to 9;
}

message SLORequest {
  RequestMeta meta = 1;
  SLOTarget target = 2;              // окно и целевое значение
  map<string, string> selector = 3;  // service/region/route
  reserved 4 to 9;
}

message SLOResponse {
  ResponseMeta meta = 1;
  SLOReport report = 2;
  reserved 3 to 9;
}

// -----------------------------------------------------------------------------
// ПЕРЕЧЕНЬ ПРОБ / БИЛД-ИНФО
// -----------------------------------------------------------------------------

message ListProbesRequest {
  RequestMeta meta = 1;
}

message ListProbesResponse {
  ResponseMeta meta = 1;
  repeated ProbeType types = 2;
}

// -----------------------------------------------------------------------------
// SERVICE
// -----------------------------------------------------------------------------

service HealthService {
  // Интегральная проверка состояния.
  rpc Check (HealthCheckRequest) returns (HealthCheckResponse) {
    // option (google.api.http) = { get: "/v1/security/health:check" };
  }

  // Наблюдение за изменениями состояния (server-streaming).
  rpc Watch (HealthWatchRequest) returns (stream HealthStatusEvent) {
    // option (google.api.http) = { get: "/v1/security/health:watch" };
  }

  // Пробы.
  rpc Liveness (google.protobuf.Empty) returns (ProbeResponse) {
    // option (google.api.http) = { get: "/v1/security/health:liveness" };
  }

  rpc Readiness (google.protobuf.Empty) returns (ProbeResponse) {
    // option (google.api.http) = { get: "/v1/security/health:readiness" };
  }

  // Список поддерживаемых проб.
  rpc ListProbes (ListProbesRequest) returns (ListProbesResponse) {
    // option (google.api.http) = { get: "/v1/security/health:probes" };
  }

  // Информация о сборке/рантайме.
  rpc GetBuildInfo (google.protobuf.Empty) returns (BuildInfo) {
    // option (google.api.http) = { get: "/v1/security/health:buildInfo" };
  }

  // Состояние зависимостей.
  rpc GetDependencies (GetDependenciesRequest) returns (GetDependenciesResponse) {
    // option (google.api.http) = { get: "/v1/security/health:dependencies" };
  }

  // Легкая выборка ключевых метрик здоровья.
  rpc MetricsSnapshot (MetricsSnapshotRequest) returns (MetricsSnapshotResponse) {
    // option (google.api.http) = { get: "/v1/security/health:metrics" };
  }

  // Отчет по SLO/бюджету ошибок.
  rpc SLO (SLORequest) returns (SLOResponse) {
    // option (google.api.http) = { get: "/v1/security/health:slo" };
  }
}

// -----------------------------------------------------------------------------
// СОВМЕСТИМОСТЬ И РАСШИРЕНИЯ
// -----------------------------------------------------------------------------
// - Используйте новые поля, не переиспользуя удаленные номера.
// - Ниже зарезервированы диапазоны для будущих расширений.
reserved 5000 to 5999;
