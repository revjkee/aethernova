syntax = "proto3";

package security.v1;

option go_package = "github.com/yourorg/security-core/gen/go/security/v1;securityv1";
option java_multiple_files = true;
option java_package = "com.yourorg.security.v1";
option csharp_namespace = "YourOrg.Security.V1";
option php_namespace = "YourOrg\\Security\\V1";
option objc_class_prefix = "SCV";
option optimize_for = SPEED;

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/any.proto";
import "google/protobuf/wrappers.proto";

// =====================================================================
// Industrial Audit Schema for security-core
// - Rich context: actor, target, source, network, client, policy.
// - Integrity: hashes, signatures, transparency (Merkle proofs).
// - Telemetry: trace/span, correlation, sequence.
// - Compliance: frameworks/controls, data classification.
// - Index hints: tenant/org/project, tags/labels.
// - No custom extensions; compiles with vanilla protoc.
// =====================================================================

enum EventType {
  EVENT_TYPE_UNSPECIFIED = 0;
  EVENT_TYPE_AUTHN_SUCCESS = 1;
  EVENT_TYPE_AUTHN_FAILURE = 2;
  EVENT_TYPE_AUTHZ_ALLOW = 3;
  EVENT_TYPE_AUTHZ_DENY = 4;
  EVENT_TYPE_POLICY_CHANGE = 5;
  EVENT_TYPE_CONFIG_CHANGE = 6;
  EVENT_TYPE_SECRET_ACCESS = 7;
  EVENT_TYPE_SECRET_ROTATION = 8;
  EVENT_TYPE_CRYPTO_KEY_USE = 9;
  EVENT_TYPE_DATA_READ = 10;
  EVENT_TYPE_DATA_WRITE = 11;
  EVENT_TYPE_DATA_DELETE = 12;
  EVENT_TYPE_SYSTEM_START = 13;
  EVENT_TYPE_SYSTEM_SHUTDOWN = 14;
  EVENT_TYPE_INCIDENT_CREATE = 15;
  EVENT_TYPE_INCIDENT_UPDATE = 16;
  EVENT_TYPE_INCIDENT_CLOSE = 17;
  EVENT_TYPE_ANOMALY_DETECTED = 18;
  EVENT_TYPE_CERT_ISSUED = 19;
  EVENT_TYPE_CERT_REVOKED = 20;
  EVENT_TYPE_IAM_CREATE = 21;
  EVENT_TYPE_IAM_UPDATE = 22;
  EVENT_TYPE_IAM_DELETE = 23;
  EVENT_TYPE_ROLE_ASSIGNMENT = 24;
  EVENT_TYPE_API_CALL = 25;
  EVENT_TYPE_JOB_SCHEDULED = 26;
  EVENT_TYPE_JOB_EXECUTED = 27;
  EVENT_TYPE_RESOURCE_ACCESS = 28;
  EVENT_TYPE_RESOURCE_CHANGED = 29;
}

enum Action {
  ACTION_UNSPECIFIED = 0;
  ACTION_CREATE = 1;
  ACTION_READ = 2;
  ACTION_UPDATE = 3;
  ACTION_DELETE = 4;
  ACTION_EXECUTE = 5;
  ACTION_LIST = 6;
  ACTION_APPROVE = 7;
  ACTION_DENY = 8;
  ACTION_ROTATE = 9;
  ACTION_ISSUE = 10;
  ACTION_REVOKE = 11;
}

enum Outcome {
  OUTCOME_UNSPECIFIED = 0;
  OUTCOME_SUCCESS = 1;
  OUTCOME_FAILURE = 2;
  OUTCOME_ERROR = 3;
  OUTCOME_PARTIAL = 4;
}

enum Severity {
  SEVERITY_UNSPECIFIED = 0;
  SEVERITY_INFO = 1;
  SEVERITY_LOW = 2;
  SEVERITY_MEDIUM = 3;
  SEVERITY_HIGH = 4;
  SEVERITY_CRITICAL = 5;
}

enum DataClassification {
  DATA_CLASSIFICATION_UNSPECIFIED = 0;
  DATA_CLASSIFICATION_PUBLIC = 1;
  DATA_CLASSIFICATION_INTERNAL = 2;
  DATA_CLASSIFICATION_CONFIDENTIAL = 3;
  DATA_CLASSIFICATION_RESTRICTED = 4;
  DATA_CLASSIFICATION_SECRET = 5;
}

enum HashAlgorithm {
  HASH_ALGO_UNSPECIFIED = 0;
  HASH_ALGO_SHA256 = 1;
  HASH_ALGO_SHA384 = 2;
  HASH_ALGO_SHA512 = 3;
  HASH_ALGO_BLAKE2B_256 = 4;
  HASH_ALGO_BLAKE2B_512 = 5;
}

enum SignatureAlgorithm {
  SIG_ALGO_UNSPECIFIED = 0;
  SIG_ALGO_RSA_PSS_SHA256 = 1;
  SIG_ALGO_RSA_PSS_SHA384 = 2;
  SIG_ALGO_RSA_PSS_SHA512 = 3;
  SIG_ALGO_ECDSA_P256_SHA256 = 4;
  SIG_ALGO_ECDSA_P384_SHA384 = 5;
  SIG_ALGO_ECDSA_P521_SHA512 = 6;
  SIG_ALGO_ED25519 = 7;
}

// Root event container.
message AuditEvent {
  // Stable event identity.
  string event_id = 1;                       // UUIDv4 recommended
  uint64 sequence = 2;                        // Monotonic sequencer (per shard)
  google.protobuf.Timestamp timestamp = 3;    // Event occurrence time (UTC)
  EventType type = 4;
  Action action = 5;
  Outcome outcome = 6;
  Severity severity = 7;

  // Domain/categorization (e.g., "auth", "iam", "data", "system").
  string category = 8;

  // Risk scoring (0..100 or model-dependent).
  google.protobuf.DoubleValue risk_score = 9;

  // Index hints for multi-tenant/geo sharding.
  string tenant_id = 10;
  string org_id = 11;
  string project_id = 12;
  string environment = 13;                   // prod, staging, dev

  // OpenTelemetry and correlation.
  string trace_id = 14;
  string span_id = 15;
  string correlation_id = 16;

  // Actors, targets, source and context.
  Actor actor = 17;
  Target target = 18;
  Source source = 19;
  ClientInfo client = 20;
  NetworkContext network = 21;

  // Policy decision and compliance.
  PolicyDecision policy = 22;
  Compliance compliance = 23;
  DataClassification data_classification = 24;

  // Free-form structured details (redacted upstream).
  google.protobuf.Struct details = 25;

  // Tags and labels for search/filters.
  repeated string tags = 26;
  map<string, string> labels = 27;

  // Related events and causality.
  repeated string related_event_ids = 28;

  // Retention directives.
  Retention retention = 29;

  // Tamper-evidence and cryptographic proofs.
  IntegrityBlock integrity = 30;

  // Server receipt timestamp (ingest time, set by pipeline).
  google.protobuf.Timestamp received_at = 31;

  // Reserved for future stable expansion (avoid field collisions).
  reserved 100 to 119;
  reserved "debug_blob", "legacy_user";
}

// Who performed the action.
message Actor {
  enum Type {
    TYPE_UNSPECIFIED = 0;
    TYPE_HUMAN = 1;
    TYPE_SERVICE = 2;
    TYPE_MACHINE = 3; // robot/agent/cron
  }
  Type type = 1;
  string actor_id = 2;                 // stable principal id
  string principal = 3;                // auth subject (e.g., sub claim)
  string display_name = 4;
  string email = 5;
  repeated string roles = 6;
  AuthnContext authn = 7;

  // Reserved for federation extensions.
  reserved 20 to 29;
}

// Authentication context (how the actor proved identity).
message AuthnContext {
  repeated string methods = 1;         // e.g., ["password","totp"]
  bool mfa_used = 2;
  string mfa_type = 3;                  // totp, webauthn, push
  string issuer = 4;                    // IdP issuer
  string session_id = 5;
  string auth_time = 6;                 // ISO8601 if needed in raw form
  map<string, string> claims = 7;       // selected identity claims
}

// What was acted upon.
message Target {
  Resource resource = 1;
  repeated string permissions = 2;      // evaluated permissions
  string operation = 3;                  // business-level op name
}

// Resource descriptor (typed).
message Resource {
  string type = 1;                      // e.g., "secret", "cert", "user"
  string id = 2;                        // stable resource id
  string urn = 3;                       // urn:yourorg:...
  string name = 4;                      // human-readable
  map<string, string> attributes = 5;   // small key/value set for filters
}

// Where the event originated in your platform.
message Source {
  string service_name = 1;              // e.g., "auth-service"
  string service_version = 2;
  string instance_id = 3;               // pod or VM id
  string region = 4;                    // e.g., "eu-north-1"
  string zone = 5;
  string cluster = 6;
  string node = 7;
  string pod = 8;
}

// Client environment (user agent, device).
message ClientInfo {
  string user_agent = 1;
  string device_id = 2;
  string os = 3;
  string app = 4;
}

// Network context (be mindful of PII policies).
message NetworkContext {
  string src_ip = 1;
  uint32 src_port = 2;
  string dst_ip = 3;
  uint32 dst_port = 4;
  string protocol = 5;                  // tcp/udp/grpc/http2
  GeoInfo geo = 6;
}

message GeoInfo {
  string country = 1;                   // ISO 3166-1 alpha-2
  string city = 2;
  double latitude = 3;
  double longitude = 4;
  string asn = 5;
  string isp = 6;
}

// Policy evaluation outcome (OPA/Cedar/ABAC/RBAC, etc.).
message PolicyDecision {
  string policy_id = 1;
  string policy_version = 2;
  bool allow = 3;
  repeated string matched_rules = 4;
  google.protobuf.Struct obligations = 5; // actions to enforce
  google.protobuf.Struct input = 6;       // redacted evaluation input
  string evaluator = 7;                    // e.g., "opa", "cedar"
  google.protobuf.DoubleValue score = 8;  // optional risk/decision score
}

// Compliance annotations.
message Compliance {
  repeated string frameworks = 1;      // e.g., ["ISO27001","SOC2","PCI"]
  repeated string controls = 2;        // e.g., ["A.12.4.1","CC6.6"]
  repeated string violations = 3;      // detected control violations
}

// Retention/TTL policy.
message Retention {
  uint64 ttl_seconds = 1;              // pipeline may compute delete_after
  google.protobuf.Timestamp delete_after = 2;
  string policy_id = 3;
}

// Tamper-evidence and signatures.
message IntegrityBlock {
  // Event canonical hash (over deterministic serialization).
  HashAlgorithm hash_algo = 1;
  bytes event_hash = 2;

  // Signature over event_hash (detached).
  SignatureAlgorithm sig_algo = 3;
  bytes signature = 4;
  string signer_key_id = 5;            // KMS/HSM key id
  // PEM-encoded chain if applicable (for verification services).
  string certificate_chain_pem = 6;

  // Transparency log proof (append-only Merkle tree).
  TransparencyProof transparency = 7;

  // Hash link to previous event within the same chain/partition.
  bytes previous_event_hash = 8;

  // Reserved for future PQC fields.
  reserved 20 to 29;
}

// Merkle inclusion proof (e.g., RFC 6962-like).
message TransparencyProof {
  bytes leaf_hash = 1;
  bytes merkle_root = 2;
  repeated bytes audit_path = 3;       // sibling hashes bottom-up
  uint64 tree_size = 4;
  uint64 leaf_index = 5;
}

// ======================== Ingest/Query API ===========================

message AuditEnvelope {
  AuditEvent event = 1;
}

message IngestAck {
  string event_id = 1;
  google.protobuf.Timestamp received_at = 2;
}

message AuditQuery {
  // Time range.
  google.protobuf.Timestamp start_time = 1;
  google.protobuf.Timestamp end_time = 2;

  // Filters (all are ANDed; lists are ORed).
  repeated EventType types = 3;
  repeated Action actions = 4;
  repeated Outcome outcomes = 5;
  repeated Severity severities = 6;
  repeated string tenant_ids = 7;
  repeated string org_ids = 8;
  repeated string project_ids = 9;
  repeated string categories = 10;
  repeated string tags = 11;

  // Text/label search.
  string text = 12;
  map<string, string> labels = 13;

  // Pagination.
  uint32 page_size = 14;
  string page_token = 15;

  // Sort options: "timestamp desc", "severity desc", etc.
  string order_by = 16;
}

message AuditQueryResult {
  repeated AuditEnvelope results = 1;
  string next_page_token = 2;
}

// gRPC service for ingestion and querying audit events.
service AuditLogService {
  // High-throughput streaming ingest.
  rpc Ingest(stream AuditEnvelope) returns (IngestAck);

  // Query with server streaming for large result sets.
  rpc Query(AuditQuery) returns (stream AuditEnvelope);

  // Paged query if client prefers page tokens.
  rpc QueryPaged(AuditQuery) returns (AuditQueryResult);
}
