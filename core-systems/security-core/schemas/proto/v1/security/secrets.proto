// security-core/schemas/proto/v1/security/secrets.proto
// Copyright (c) Aethernova.
// SPDX-License-Identifier: Apache-2.0
//
// Industrial-grade secrets management API schema.
// Provides secret resource model, versioning, encryption envelope,
// external secret references, rotation/replication policies,
// fine-grained access control, and management RPCs.

syntax = "proto3";

package aethernova.security.v1;

option csharp_namespace   = "Aethernova.Security.V1";
option go_package         = "github.com/aethernova/security-core/gen/proto/aethernova/security/v1;securityv1";
option java_multiple_files = true;
option java_package       = "com.aethernova.security.v1";
option objc_class_prefix  = "ANSEC";
option php_namespace      = "Aethernova\\Security\\V1";
option ruby_package       = "Aethernova::Security::V1";
option swift_prefix       = "ANSEC";
option optimize_for       = SPEED;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

// Resource name patterns (informational):
// Secret: projects/{project}/tenants/{tenant}/secrets/{secret}
// SecretVersion: projects/{project}/tenants/{tenant}/secrets/{secret}/versions/{version}
// AccessPolicy: projects/{project}/tenants/{tenant}/secrets/{secret}/policy

// =========================== Core Enums ===========================

enum Environment {
  ENVIRONMENT_UNSPECIFIED = 0;
  ENVIRONMENT_PROD        = 1;
  ENVIRONMENT_STAGING     = 2;
  ENVIRONMENT_DEV         = 3;
  ENVIRONMENT_TEST        = 4;
}

enum DataClassification {
  DATA_CLASSIFICATION_UNSPECIFIED = 0;
  DATA_PUBLIC       = 1;
  DATA_INTERNAL     = 2;
  DATA_CONFIDENTIAL = 3;
  DATA_RESTRICTED   = 4;
}

enum SecretType {
  SECRET_TYPE_UNSPECIFIED = 0;
  SECRET_GENERIC          = 1;
  SECRET_API_KEY          = 2;
  SECRET_PASSWORD         = 3;
  SECRET_TOKEN            = 4;
  SECRET_JWT              = 5;
  SECRET_SESSION_COOKIE   = 6;
  SECRET_DB_CREDENTIALS   = 7;
  SECRET_SERVICE_ACCOUNT  = 8;
  SECRET_PRIVATE_KEY      = 9;
  SECRET_CERTIFICATE_PEM  = 10;
  SECRET_TLS_BUNDLE       = 11;
  SECRET_SSH_KEY          = 12;
  SECRET_OAUTH_REFRESH    = 13;
  SECRET_OPAQUE_BLOB      = 14;
  SECRET_KMS_REFERENCE    = 15;
  SECRET_VAULT_REFERENCE  = 16;
}

enum LifecycleState {
  LIFECYCLE_STATE_UNSPECIFIED = 0;
  LIFECYCLE_ACTIVE            = 1;
  LIFECYCLE_DISABLED          = 2;
  LIFECYCLE_EXPIRED           = 3;
  LIFECYCLE_COMPROMISED       = 4;
  LIFECYCLE_PENDING_ROTATION  = 5;
  LIFECYCLE_SCHEDULED_DELETE  = 6;
  LIFECYCLE_DESTROYED         = 7;
}

enum VersionState {
  VERSION_STATE_UNSPECIFIED = 0;
  VERSION_ENABLED           = 1;
  VERSION_DISABLED          = 2;
  VERSION_DESTROYED         = 3;
  VERSION_PENDING           = 4;
  VERSION_EXPIRED           = 5;
}

enum RotationStrategy {
  ROTATION_STRATEGY_UNSPECIFIED = 0;
  ROTATE_RANDOM_ALPHANUM        = 1;
  ROTATE_UUID4                  = 2;
  ROTATE_HEX                    = 3;
  ROTATE_DICEWARE               = 4;
  ROTATE_ASYM_ED25519           = 5;
  ROTATE_ASYM_RSA2048           = 6;
  ROTATE_ASYM_RSA4096           = 7;
  ROTATE_TLS_RSA                = 8;
  ROTATE_TLS_ECDSA              = 9;
  ROTATE_OAUTH_TOKEN            = 10;
}

enum RemoteSecretProvider {
  REMOTE_SECRET_PROVIDER_UNSPECIFIED = 0;
  REMOTE_AWS_SECRETS_MANAGER        = 1;
  REMOTE_GCP_SECRET_MANAGER         = 2;
  REMOTE_AZURE_KEY_VAULT            = 3;
  REMOTE_HASHICORP_VAULT            = 4;
  REMOTE_ONEPASSWORD                = 5;
  REMOTE_CYBERARK                   = 6;
}

enum KmsProvider {
  KMS_PROVIDER_UNSPECIFIED    = 0;
  KMS_AWS                     = 1;
  KMS_GCP                     = 2;
  KMS_AZURE                   = 3;
  KMS_HASHICORP_VAULT_TRANSIT = 4;
  KMS_LOCAL_HSM               = 5;
  KMS_NITRO_ENCLAVE           = 6;
}

enum PrincipalType {
  PRINCIPAL_TYPE_UNSPECIFIED = 0;
  PRINCIPAL_USER             = 1;
  PRINCIPAL_SERVICE          = 2;
  PRINCIPAL_GROUP            = 3;
  PRINCIPAL_ROLE             = 4;
}

// =========================== Core Types ===========================

message Checksum {
  bytes sha256 = 1;
  uint32 crc32c = 2;
}

message KmsRef {
  KmsProvider provider = 1;
  string resource = 2;  // e.g. ARN, resource name, or vault transit key
  string location = 3;  // region or HSM location
}

message EncryptedPayload {
  // AEAD encrypted payload; plaintext is never stored in this model.
  bytes ciphertext = 1;
  string algorithm = 2; // e.g. "AES-256-GCM"
  string key_id = 3;    // logical key id, versioned out-of-band
  bytes iv = 4;
  bytes tag = 5;
  bytes aad = 6;        // serialized AAD/context if used
  KmsRef kms = 7;       // KMS/HSM reference that performed or will perform crypto
}

message RemoteSecretRef {
  RemoteSecretProvider provider = 1;
  string uri = 2;      // provider-specific path/URI to the secret
  string version = 3;  // provider-specific version/label
  string region = 4;   // provider region/partition if applicable
  map<string, string> params = 5; // provider-specific parameters
}

message SecretReplication {
  message Automatic {}
  message UserManaged {
    repeated ReplicationRegion regions = 1;
  }
  oneof replication {
    Automatic automatic = 1;
    UserManaged user_managed = 2;
  }
}

message ReplicationRegion {
  string location = 1; // e.g. "eu-west-1"
  bool primary = 2;
}

message RotationPolicy {
  bool auto_rotate = 1;
  oneof schedule {
    google.protobuf.Duration interval = 2;
    string cron = 3; // standard cron expression
  }
  google.protobuf.Timestamp last_rotation_time = 4;
  google.protobuf.Timestamp next_rotation_time = 5;
  RotationStrategy strategy = 6;
  google.protobuf.Duration rotation_window = 7; // grace window for coordinated rotation
  google.protobuf.Timestamp expire_time = 8;    // version expiry if applicable
}

message Principal {
  PrincipalType type = 1;
  string id = 2;            // subject identifier (e.g. user, service account)
  string display_name = 3;  // optional
}

message Binding {
  string role = 1;                       // e.g. "roles/secret.admin", "roles/secret.reader"
  repeated Principal principals = 2;     // subjects bound to the role
  string condition_cel = 3;              // optional CEL condition evaluated at access time
}

message AccessPolicy {
  string name = 1;               // resource policy name
  repeated Binding bindings = 2; // role bindings
  bytes etag = 3;                // optimistic concurrency
}

// =========================== Resource Models ===========================

message Secret {
  string name = 1;                  // resource name
  string uid = 2;                   // immutable unique id (UUID)
  string project_id = 3;
  string tenant_id = 4;
  Environment environment = 5;
  SecretType type = 6;
  DataClassification classification = 7;

  map<string, string> labels = 8;
  map<string, string> annotations = 9;

  SecretReplication replication = 10;
  RotationPolicy rotation = 11;

  LifecycleState lifecycle = 12;
  repeated string compliance_tags = 13;

  string current_version = 14; // version id or fully-qualified version name

  google.protobuf.Timestamp create_time = 15;
  google.protobuf.Timestamp update_time = 16;
  string created_by = 17; // subject id
  string updated_by = 18; // subject id
  bytes etag = 19;        // optimistic concurrency
  Checksum checksum = 20; // metadata checksum for tamper evidence
}

message SecretVersion {
  string name = 1;       // resource name for the version
  string version_id = 2; // monotonically increasing or UUID

  VersionState state = 3;

  oneof source {
    EncryptedPayload encrypted_payload = 4; // managed or client-side encrypted payload
    RemoteSecretRef remote_ref = 5;         // externally stored secret reference
  }

  google.protobuf.Timestamp create_time = 6;
  google.protobuf.Timestamp disable_time = 7;
  google.protobuf.Timestamp destroy_time = 8;
  google.protobuf.Timestamp expire_time = 9;

  Checksum checksum = 10; // checksum of ciphertext or reference metadata
  string created_by = 11;
  bytes etag = 12;
}

// =========================== Requests/Responses ===========================

message CreateSecretRequest {
  string parent = 1;       // projects/{project}/tenants/{tenant}
  string secret_id = 2;    // URL-safe id
  Secret secret = 3;       // initial metadata, rotation, replication
}

message GetSecretRequest {
  string name = 1;
}

message UpdateSecretRequest {
  Secret secret = 1;                       // must include name and etag
  google.protobuf.FieldMask update_mask = 2;
}

message DeleteSecretRequest {
  string name = 1;
  bool allow_missing = 2;
  google.protobuf.Duration retention = 3;  // optional soft delete window
}

message ListSecretsRequest {
  string parent = 1;
  int32 page_size = 2;
  string page_token = 3;
  string filter = 4;   // e.g. "labels.env=prod AND type=SECRET_API_KEY"
  string order_by = 5; // e.g. "update_time desc"
}

message ListSecretsResponse {
  repeated Secret secrets = 1;
  string next_page_token = 2;
  int32 total_size = 3;
}

message AddSecretVersionRequest {
  string parent = 1; // secret name
  // Exactly one must be set.
  oneof data {
    bytes plaintext = 2;              // will be encrypted server-side
    EncryptedPayload encrypted_payload = 3; // client-side envelope
    RemoteSecretRef remote_ref = 4;   // external reference
  }
  map<string, string> context = 5; // optional AAD/context for AEAD
  google.protobuf.Timestamp expire_time = 6;
}

message AddSecretVersionResponse {
  SecretVersion version = 1;
}

message GetSecretVersionRequest {
  string name = 1;
}

message ListSecretVersionsRequest {
  string parent = 1; // secret name
  int32 page_size = 2;
  string page_token = 3;
  string filter = 4;   // e.g. "state=VERSION_ENABLED"
  string order_by = 5; // e.g. "create_time desc"
}

message ListSecretVersionsResponse {
  repeated SecretVersion versions = 1;
  string next_page_token = 2;
  int32 total_size = 3;
}

message EnableSecretVersionRequest {
  string name = 1;
}

message DisableSecretVersionRequest {
  string name = 1;
  string reason = 2;
}

message DestroySecretVersionRequest {
  string name = 1;
  bool allow_missing = 2;
}

message AccessSecretPayloadRequest {
  string name = 1; // version resource name or "latest"
  // Request either plaintext (server decrypts) or return envelope as-is.
  bool return_plaintext = 2;
  map<string, string> context = 3; // AAD/context for decryption if required
}

message AccessSecretPayloadResponse {
  oneof data {
    bytes plaintext = 1;                 // only if return_plaintext=true and allowed
    EncryptedPayload encrypted_payload = 2; // envelope passthrough
  }
  SecretVersion version = 3;
  bytes sha256 = 4; // checksum of returned data for integrity verification
}

message RotateSecretRequest {
  string name = 1;                       // secret name
  RotationStrategy override_strategy = 2; // optional override
  map<string, string> params = 3;         // strategy-specific params
}

message GenerateSecretRequest {
  string parent = 1;                       // secret name or parent scope
  RotationStrategy strategy = 2;
  map<string, string> params = 3;          // e.g. length=64, alphabet=hex
  google.protobuf.Timestamp expire_time = 4;
}

message GenerateSecretResponse {
  SecretVersion version = 1;
}

message SetIamPolicyRequest {
  string resource = 1;   // secret resource name
  AccessPolicy policy = 2;
}

message GetIamPolicyRequest {
  string resource = 1;
}

message TestIamPermissionsRequest {
  string resource = 1;
  repeated string permissions = 2; // e.g. ["secrets.get", "secrets.accessPayload"]
}

message TestIamPermissionsResponse {
  repeated string permissions = 1; // subset granted
}

// =========================== Service ===========================

service Secrets {
  // Secret CRUD
  rpc CreateSecret(CreateSecretRequest) returns (Secret);
  rpc GetSecret(GetSecretRequest) returns (Secret);
  rpc UpdateSecret(UpdateSecretRequest) returns (Secret);
  rpc DeleteSecret(DeleteSecretRequest) returns (google.protobuf.Empty);
  rpc ListSecrets(ListSecretsRequest) returns (ListSecretsResponse);

  // Versions management
  rpc AddSecretVersion(AddSecretVersionRequest) returns (AddSecretVersionResponse);
  rpc GetSecretVersion(GetSecretVersionRequest) returns (SecretVersion);
  rpc ListSecretVersions(ListSecretVersionsRequest) returns (ListSecretVersionsResponse);
  rpc EnableSecretVersion(EnableSecretVersionRequest) returns (SecretVersion);
  rpc DisableSecretVersion(DisableSecretVersionRequest) returns (SecretVersion);
  rpc DestroySecretVersion(DestroySecretVersionRequest) returns (google.protobuf.Empty);

  // Access and lifecycle
  rpc AccessSecretPayload(AccessSecretPayloadRequest) returns (AccessSecretPayloadResponse);
  rpc RotateSecret(RotateSecretRequest) returns (Secret);
  rpc GenerateSecret(GenerateSecretRequest) returns (GenerateSecretResponse);

  // Access policy
  rpc SetIamPolicy(SetIamPolicyRequest) returns (AccessPolicy);
  rpc GetIamPolicy(GetIamPolicyRequest) returns (AccessPolicy);
  rpc TestIamPermissions(TestIamPermissionsRequest) returns (TestIamPermissionsResponse);
}
