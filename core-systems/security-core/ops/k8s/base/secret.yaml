apiVersion: v1
kind: Secret
metadata:
  name: security-core-secrets
  namespace: security-core
  labels:
    app.kubernetes.io/name: security-core
    app.kubernetes.io/instance: security-core
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: neurocity
    app.kubernetes.io/version: "0.0.0"          # синхронизируйте с релизом
    app.kubernetes.io/managed-by: gitops
    security.neurocity.io/class: "production"   # prod|staging|dev
  annotations:
    # Аннотации для трассируемости и аудита
    neurocity.io/owner: "platform-security"
    neurocity.io/contact: "secops@neurocity.example"
    neurocity.io/source-revision: "UNKNOWN"     # подставляется CI
    # Поддержка перезапуска подов при изменении секрета сторонними операторами
    # (реагируют деплойменты/стейтфулы при использовании reloader/плагинов)
    kubernetes.io/change-cause: "Initial secret provisioning"

type: Opaque

# Делаем секрет неизменяемым; для ротации создавайте новый Secret с новым именем
immutable: true

# Используем stringData, чтобы не хранить base64 в репозитории. В кластере это станет data: base64.
stringData:
  # Критичные криптографические материалы
  JWT_SIGNING_KEY: "CHANGE_ME_64B_RANDOM_HEX_OR_B64"          # ключ подписи JWT (HS256/EdDSA если jwk)
  OIDC_CLIENT_SECRET: "CHANGE_ME_OIDC_CLIENT_SECRET"
  API_TOKEN_ROOT: "CHANGE_ME_ROTATE_REGULARLY"                 # мастер‑токен внутренних интеграций

  # Соединения к хранилищам/очередям
  DATABASE_URL: "postgresql://user:password@db:5432/security_core"
  REDIS_URL: "redis://:password@redis:6379/0"

  # Интеграции и телеметрия
  SENTRY_DSN: ""
  OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
  OTEL_SERVICE_NAME: "security-core"
  OTEL_RESOURCE_ATTRIBUTES: "service.version=0.0.0,service.environment=production"

  # Параметры приложения
  APP_ENV: "production"
  APP_DOMAIN: "security-core.svc.cluster.local"
  ALLOWED_ORIGINS: "https://app.example.com"
  # При необходимости — соль/pepper (не храните её в коде)
  PASSWORD_PEPPER: "CHANGE_ME_LONG_RANDOM"

  # Заготовки под ротацию ключей (blue/green)
  JWT_SIGNING_KEY_NEXT: ""
  OIDC_CLIENT_SECRET_NEXT: ""

  # Пример TLS (если вы всё же храните его как Secret; для ingress лучше использовать cert‑manager)
  # tls.crt: |
  #   -----BEGIN CERTIFICATE-----
  #   MIIF...
  #   -----END CERTIFICATE-----
  # tls.key: |
  #   -----BEGIN PRIVATE KEY-----
  #   MIIE...
  #   -----END PRIVATE KEY-----

---
# (Опционально) Политика доступа RBAC к Secret — ограничиваем чтение только сервис‑аккаунтом приложения.
# Размещено здесь же для удобства GitOps; применится вместе с Secret.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: security-core-secret-read
  namespace: security-core
  labels:
    app.kubernetes.io/name: security-core
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["security-core-secrets"]
    verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: security-core-secret-read-binding
  namespace: security-core
  labels:
    app.kubernetes.io/name: security-core
subjects:
  - kind: ServiceAccount
    name: security-core-sa
    namespace: security-core
roleRef:
  kind: Role
  name: security-core-secret-read
  apiGroup: rbac.authorization.k8s.io
