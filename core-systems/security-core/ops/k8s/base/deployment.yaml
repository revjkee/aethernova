apiVersion: apps/v1
kind: Deployment
metadata:
  name: security-core
  labels:
    app.kubernetes.io/name: security-core
    app.kubernetes.io/instance: security-core
    app.kubernetes.io/part-of: core-systems
    app.kubernetes.io/component: service
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/version: "1.0.0"
    security.aethernova/hardening: "true"
  annotations:
    # Плейсхолдеры для kustomize-патчей, обеспечивают перекатку при изменении конфигов/секретов
    checksum/config: "REPLACE_ME_BY_KUSTOMIZE"
    checksum/secret: "REPLACE_ME_BY_KUSTOMIZE"
spec:
  replicas: 3
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: security-core
  template:
    metadata:
      labels:
        app.kubernetes.io/name: security-core
        app.kubernetes.io/instance: security-core
        app.kubernetes.io/part-of: core-systems
        app.kubernetes.io/component: service
        app.kubernetes.io/version: "1.0.0"
      annotations:
        # AppArmor (для кластеров с поддержкой аннотаций)
        container.apparmor.security.beta.kubernetes.io/app: "runtime/default"
    spec:
      # Безопасность на уровне Pod
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: security-core
      automountServiceAccountToken: false
      enableServiceLinks: false
      hostNetwork: false
      hostPID: false
      hostIPC: false
      dnsPolicy: ClusterFirst
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      # Размещение и устойчивость
      nodeSelector:
        kubernetes.io/os: linux
        kubernetes.io/arch: amd64
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: security-core
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: kubernetes.io/os
                    operator: In
                    values: ["linux"]
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: security-core
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: security-core
      imagePullSecrets: []
      priorityClassName: "security-critical" # создайте при необходимости или замените
      volumes:
        - name: config
          configMap:
            name: security-core
            optional: false
        - name: secret
          secret:
            secretName: security-core
            optional: false
        - name: tmp
          emptyDir:
            sizeLimit: 256Mi
        - name: data
          emptyDir:
            sizeLimit: 1Gi
      initContainers:
        - name: init-permissions
          image: busybox:1.36.1
          imagePullPolicy: IfNotPresent
          command: ["sh", "-c"]
          args:
            - >
              mkdir -p /data && chown -R 10001:10001 /data &&
              mkdir -p /tmp && chown -R 10001:10001 /tmp
          securityContext:
            runAsNonRoot: true
            runAsUser: 10001
            runAsGroup: 10001
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop: ["ALL"]
          volumeMounts:
            - name: data
              mountPath: /data
            - name: tmp
              mountPath: /tmp
      containers:
        - name: app
          image: ghcr.io/your-org/security-core:1.0.0@sha256:REPLACE_DIGEST
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: LOG_LEVEL
              value: "INFO"
            - name: PYTHONUNBUFFERED
              value: "1"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          envFrom:
            - configMapRef:
                name: security-core
                optional: true
            - secretRef:
                name: security-core
                optional: true
          args:
            - "--config=/etc/security-core/config.yaml"
            - "--bind=0.0.0.0:8080"
          volumeMounts:
            - name: config
              mountPath: /etc/security-core
              readOnly: true
            - name: secret
              mountPath: /etc/security-core/secret
              readOnly: true
            - name: tmp
              mountPath: /tmp
              readOnly: false
            - name: data
              mountPath: /var/lib/security-core
              readOnly: false
          # Политики безопасности контейнера
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop: ["ALL"]
          # Ресурсы и стабильность
          resources:
            requests:
              cpu: "100m"
              memory: "256Mi"
              ephemeral-storage: "1Gi"
            limits:
              cpu: "500m"
              memory: "512Mi"
              ephemeral-storage: "2Gi"
          # Пробы здоровья
          startupProbe:
            httpGet:
              path: /startup
              port: http
            failureThreshold: 30
            periodSeconds: 2
            timeoutSeconds: 1
          readinessProbe:
            httpGet:
              path: /readyz
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 3
            successThreshold: 1
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 3
            successThreshold: 1
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "sleep 10"]
