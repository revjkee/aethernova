# neuroforge-core/configs/serving.yaml
# Промышленная конфигурация сервиса инференса Neuroforge Core.
# Все значения можно переопределить переменными окружения вида ${ENV_VAR:-default}.

meta:
  app: "neuroforge-core"
  env: ${NF_ENV:-dev}
  version: "1"  # схема конфига

server:
  host: ${NF_HOST:-0.0.0.0}
  port: ${NF_PORT:-8080}
  base_path: ${NF_BASE_PATH:-/}
  workers: ${NF_WORKERS:-0}          # 0=auto (кол-во CPU*2), для gunicorn/uvicorn
  http2: ${NF_HTTP2:-false}
  keepalive_timeout_s: ${NF_KEEPALIVE_S:-75}
  request_timeout_s: ${NF_REQ_TIMEOUT_S:-60}
  idle_timeout_s: ${NF_IDLE_TIMEOUT_S:-120}
  max_request_body_mb: ${NF_MAX_REQ_MB:-16}
  compression:                       # GZIP/deflate
    enabled: ${NF_COMPRESS:-true}
    min_length_b: ${NF_COMPRESS_MIN_B:-1024}
  behind_proxy: ${NF_BEHIND_PROXY:-true}
  trusted_proxies: ${NF_TRUSTED_PROXIES:-10.0.0.0/8,192.168.0.0/16,172.16.0.0/12}
  graceful_shutdown_s: ${NF_GRACEFUL_S:-30}
  uvicorn:
    loop: ${NF_UV_LOOP:-auto}
    http: ${NF_UV_HTTP:-auto}
    backlog: ${NF_UV_BACKLOG:-2048}
  gunicorn:
    worker_class: ${NF_GUNI_WORKER:-uvicorn.workers.UvicornWorker}
    max_requests: ${NF_GUNI_MAX_REQ:-10000}
    max_requests_jitter: ${NF_GUNI_MAX_REQ_JITTER:-1000}

security:
  allowed_hosts: ${NF_ALLOWED_HOSTS:-*}            # csv или * 
  cors:
    enabled: ${NF_CORS_ENABLED:-true}
    allow_origins: ${NF_CORS_ORIGINS:-https://app.example.com}
    allow_methods: ${NF_CORS_METHODS:-GET,POST,OPTIONS}
    allow_headers: ${NF_CORS_HEADERS:-*}
    expose_headers: ${NF_CORS_EXPOSE:-Content-Length,Content-Type,Request-Id}
    allow_credentials: ${NF_CORS_CRED:-false}
    max_age_s: ${NF_CORS_MAXAGE_S:-600}
  headers:
    x_frame_options: "DENY"
    x_content_type_options: "nosniff"
    referrer_policy: "strict-origin-when-cross-origin"
    permissions_policy: "geolocation=(),camera=(),microphone=()"
    content_security_policy: "default-src 'none'; connect-src 'self'; img-src 'self' data:; style-src 'self' 'unsafe-inline'; script-src 'self'; frame-ancestors 'none'"
    server_header: "off"                               # скрыть Server
    hsts:
      enabled: ${NF_HSTS:-true}
      max_age_s: 31536000
      include_subdomains: true
      preload: true
  rate_limit:
    enabled: ${NF_RATELIMIT:-true}
    backend: "memory"                                  # memory|redis
    window_s: ${NF_RL_WINDOW_S:-1}
    limit_per_window: ${NF_RL_LIMIT:-100}              # 100 rps на ключ
    burst: ${NF_RL_BURST:-200}
    key: ${NF_RL_KEY:-ip}                              # ip|api_key|tenant
  ddos:
    slowloris_body_timeout_s: ${NF_SLOWLORIS_S:-15}
  request_validation:
    max_multipart_fields: ${NF_MAX_MULTIPART_FIELDS:-128}
    max_image_px: ${NF_MAX_IMG_PX:-33177600}           # 8K ~ 33Mpx
    deny_non_utf8_text: true

auth:
  mode: ${NF_AUTH_MODE:-jwt}                           # none|basic|api_key|jwt|oauth2
  basic:
    htpasswd_file: ${NF_BASIC_HTPASSWD:-}              # путь, если используется basic
  api_key:
    header: "X-API-Key"
    keys: ${NF_API_KEYS:-}                             # csv или secret backend
  jwt:
    required: ${NF_JWT_REQUIRED:-true}
    algorithms: ${NF_JWT_ALGS:-RS256}
    issuer: ${NF_JWT_ISS:-https://auth.example.com}
    audience: ${NF_JWT_AUD:-neuroforge-core}
    jwks_uri: ${NF_JWKS_URI:-https://auth.example.com/.well-known/jwks.json}
    leeway_s: ${NF_JWT_LEEWAY_S:-60}
    user_claim: ${NF_JWT_USER_CLAIM:-sub}
    tenant_claim: ${NF_JWT_TENANT_CLAIM:-tenant}
  oauth2:
    introspection_url: ${NF_OAUTH_INTROSPECT:-}
    client_id: ${NF_OAUTH_CLIENT_ID:-}
    client_secret_ref: ${NF_OAUTH_CLIENT_SECRET_REF:-} # ссылка на секрет в менеджере секретов

observability:
  logging:
    level: ${NF_LOG_LEVEL:-info}                       # debug|info|warn|error
    format: ${NF_LOG_FMT:-json}                        # json|text
    include_request_id: true
    redact:
      enabled: true
      fields: ["authorization","x-api-key","password","token"]
  metrics:
    enabled: ${NF_METRICS:-true}
    exporter: "prometheus"
    path: ${NF_METRICS_PATH:-/metrics}
    labels:
      service: "neuroforge-core"
      env: ${NF_ENV:-dev}
  tracing:
    enabled: ${NF_TRACING:-false}
    provider: "otlp"
    endpoint: ${OTEL_EXPORTER_OTLP_ENDPOINT:-http://otel-collector:4317}
    insecure: ${OTEL_EXPORTER_OTLP_INSECURE:-true}
    sampler: ${OTEL_TRACES_SAMPLER:-parentbased_traceidratio}
    sampler_arg: ${OTEL_TRACES_SAMPLER_ARG:-0.1}
    service_name: "neuroforge-core"
  audit:
    enabled: ${NF_AUDIT:-true}
    sink: "file"                                       # file|stdout|s3
    file_path: ${NF_AUDIT_FILE:-/var/log/neuroforge/audit.log}
    s3_uri: ${NF_AUDIT_S3:-}
    hmac_key_ref: ${NF_AUDIT_HMAC_REF:-}               # ссылка на ключ в менеджере секретов

storage:
  s3:
    enabled: ${NF_S3_ENABLED:-true}
    endpoint: ${NF_S3_ENDPOINT:-}                      # пусто для AWS
    region: ${NF_S3_REGION:-eu-west-1}
    bucket: ${NF_S3_BUCKET:-neuroforge-models}
    path_style: ${NF_S3_PATH_STYLE:-false}             # true для MinIO
    access_key_id_ref: ${NF_S3_ACCESS_KEY_REF:-}       # секреты по ссылке/ключу
    secret_access_key_ref: ${NF_S3_SECRET_KEY_REF:-}
    kms_key_id: ${NF_S3_KMS_KEY_ID:-}
  local:
    models_dir: ${NF_MODELS_DIR:-/models}
    artifacts_dir: ${NF_ART_DIR:-/var/neuroforge/artifacts}

cache:
  redis:
    enabled: ${NF_REDIS_ENABLED:-false}
    dsn: ${NF_REDIS_DSN:-redis://redis:6379/0}
    tls: ${NF_REDIS_TLS:-false}
    pool_size: ${NF_REDIS_POOL:-32}
    ttl_s: ${NF_CACHE_TTL_S:-300}

database:
  postgres:
    enabled: ${NF_PG_ENABLED:-false}
    dsn: ${NF_PG_DSN:-postgresql+psycopg://user:pass@postgres:5432/neuroforge}
    pool_min: ${NF_PG_POOL_MIN:-2}
    pool_max: ${NF_PG_POOL_MAX:-16}
    pool_timeout_s: ${NF_PG_POOL_TIMEOUT_S:-5}

scheduler:
  request_queue:
    max_inflight: ${NF_MAX_INFLIGHT:-1024}
    per_tenant_limit: ${NF_TENANT_INFLIGHT:-256}
    queue_timeout_s: ${NF_QUEUE_TIMEOUT_S:-10}
  batching:
    enabled: ${NF_BATCH_ENABLED:-true}
    max_batch_size: ${NF_BATCH_SIZE_MAX:-32}
    max_batch_latency_ms: ${NF_BATCH_LAT_MS:-10}
    preferred_batch_sizes: ${NF_BATCH_PREF:-1,2,4,8,16,32}
  concurrency:
    global_limit: ${NF_CONCURRENCY_GLOBAL:-0}          # 0=без ограничений
    per_model_default: ${NF_CONCURRENCY_MODEL:-4}
  circuit_breaker:
    error_rate_threshold: ${NF_CB_ERR_RATE:-0.2}
    min_requests: ${NF_CB_MIN_REQ:-50}
    open_duration_s: ${NF_CB_OPEN_S:-30}
    half_open_concurrency: ${NF_CB_HALF_OPEN:-2}
  backpressure:
    strategy: "429"                                     # 429|queue
    max_queue_len: ${NF_BP_MAX_QUEUE:-2000}

health:
  liveness:
    path: ${NF_LIVE_PATH:-/healthz/live}
    interval_s: 10
    timeout_s: 2
  readiness:
    path: ${NF_READY_PATH:-/healthz/ready}
    interval_s: 5
    timeout_s: 2
    min_ready_models: ${NF_MIN_READY_MODELS:-1}
  startup:
    enabled: ${NF_STARTUP_PROBE:-false}
    path: ${NF_STARTUP_PATH:-/healthz/startup}
    failure_threshold: 30
    period_s: 5

tenancy:
  enabled: ${NF_TENANCY:-true}
  default_tenant: "public"
  quotas:
    # значения по умолчанию; могут переопределяться политиками
    requests_per_minute: 6000
    concurrent_requests: 256
    max_input_mb: 16
    models_allowed: ["*"]  # список имён моделей или *

# ---------- Модели и маршруты инференса ----------
# Несколько моделей с независимыми настройками. Пути могут быть локальными или s3://
models:
  - name: "text-embedding-001"
    task: "embedding"                                      # произвольная метка
    engine: "onnx"                                         # onnx|torch|tf|triton|llm
    source: ${NF_EMB_SOURCE:-s3://neuroforge-models/embeddings/text-embedding-001.onnx}
    device: ${NF_EMB_DEVICE:-cpu}                          # cpu|cuda:0|auto
    threads: ${NF_EMB_THREADS:-4}
    memory_limit_mb: ${NF_EMB_MEM_MB:-2048}
    batching:
      enabled: true
      max_batch_size: 64
      max_batch_latency_ms: 8
    optimize:
      graph_optimizations: true
      io_binding: true
      quantization: ${NF_EMB_QUANT:-int8}                  # none|int8|fp16
    route:
      path: "/v1/embeddings"
      methods: ["POST"]
      auth: { required: true, scopes: ["emb:write"] }
    warmup:
      enabled: true
      samples: 4
      timeout_s: 30

  - name: "vision-classifier-002"
    task: "classification"
    engine: "torch"
    source: ${NF_VCLS_SOURCE:-s3://neuroforge-models/vision/cls-002.pt}
    device: ${NF_VCLS_DEVICE:-cuda:0}
    dtype: ${NF_VCLS_DTYPE:-fp16}
    memory_limit_mb: ${NF_VCLS_MEM_MB:-4096}
    batching:
      enabled: true
      max_batch_size: 16
      max_batch_latency_ms: 12
    preprocess:
      image:
        resize: [224, 224]
        normalize: { mean: [0.485,0.456,0.406], std: [0.229,0.224,0.225] }
        color_mode: "RGB"
        max_megapixels: 40
    postprocess:
      top_k: 5
      labels_path: ${NF_VCLS_LABELS:-s3://neuroforge-models/vision/labels.txt}
    route:
      path: "/v1/vision/classify"
      methods: ["POST"]
      auth: { required: true, scopes: ["vision:write"] }
    warmup:
      enabled: true
      samples: 8
      timeout_s: 45

  - name: "llm-instruct-7b"
    task: "generation"
    engine: "llm"                                          # абстрактный LLM-рантайм
    source: ${NF_LLM_SOURCE:-s3://neuroforge-models/llm/7b/}
    device: ${NF_LLM_DEVICE:-cuda:0}
    dtype: ${NF_LLM_DTYPE:-fp16}
    tensor_parallel: ${NF_LLM_TP:-1}
    max_tokens: ${NF_LLM_MAX_TOKENS:-1024}
    top_p: ${NF_LLM_TOP_P:-0.9}
    temperature: ${NF_LLM_TEMP:-0.7}
    batching:
      enabled: true
      max_batch_size: 8
      max_batch_latency_ms: 25
    route:
      path: "/v1/chat/completions"
      methods: ["POST"]
      auth: { required: true, scopes: ["llm:write"] }
    moderation:
      enabled: ${NF_LLM_MODERATION:-true}
      blocklist_ref: ${NF_LLM_BLOCKLIST_REF:-}            # ссылка на словарь/правила
    warmup:
      enabled: false

# ---------- Маршрутизация и версии API ----------
routing:
  default_api_version: "v1"
  mounts:
    - prefix: "/v1"
      allow_unversioned: false

# ---------- Политики ответа и валидации ----------
responses:
  default_content_type: "application/json"
  max_response_body_mb: ${NF_MAX_RESP_MB:-32}
  streaming:
    enabled: ${NF_STREAMING:-true}
    heartbeat_ms: 10000

validation:
  json_schema:
    strict: true
  limits:
    max_array_len: 100000
    max_map_entries: 100000

# ---------- Политики ретеншна/логов запросов ----------
retention:
  request_log_days: ${NF_REQLOG_DAYS:-14}
  inference_cache_ttl_s: ${NF_INF_CACHE_TTL_S:-300}

# ---------- Эксперименты/фичефлаги ----------
features:
  enable_canary: ${NF_CANARY:-false}
  canary_weight: ${NF_CANARY_WEIGHT:-0}  # 0..100

# ---------- Плагины/хуки ----------
plugins:
  pre_request: []   # имена зарегистрированных хуков
  post_response: []

# Конец файла.
