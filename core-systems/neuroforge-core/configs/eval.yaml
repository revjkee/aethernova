# NeuroForge — Evaluation Config (industrial-grade)
# Загружайте и валидируйте через собственный конфиг-лоадер.
version: 1

project:
  name: neuroforge-core
  run_name: "${RUN_NAME:eval-local}"
  seed: ${SEED:1337}
  determinism:
    torch_deterministic: true
    cudnn_benchmark: false
    cudnn_deterministic: true

runtime:
  device: "${DEVICE:auto}"            # auto|cpu|cuda:0|mps
  num_workers: ${NUM_WORKERS:4}
  batch_size: ${BATCH_SIZE:256}
  fp16: false
  cache_dir: "${EVAL_CACHE_DIR:.cache/eval}"
  fail_fast: false                    # останавливать при первой критичной ошибке
  timeout_sec: ${EVAL_TIMEOUT_SEC:0}  # 0 = без таймаута

artifacts:
  root: "${ARTIFACTS_DIR:./artifacts}"
  keep_last: 20
  upload:
    enabled: false
    provider: "s3"                    # s3|gcs|az|fs
    uri: "${ARTIFACTS_URI:s3://bucket/neuroforge/artifacts}"
    acl: "bucket-owner-full-control"
  manifest:
    save_json: true
    include_env: true
    include_git: true

logging:
  level: "${LOG_LEVEL:INFO}"
  format: "kv"                        # kv|json|text
  file: "${LOG_FILE:logs/eval.log}"
  metrics_to_stdout: true

telemetry:
  mlflow:
    enabled: false
    tracking_uri: "${MLFLOW_TRACKING_URI:}"
    experiment: "${MLFLOW_EXPERIMENT:neuroforge-eval}"
  wandb:
    enabled: false
    project: "${WANDB_PROJECT:neuroforge}"
    entity: "${WANDB_ENTITY:}"
  openmetrics:
    enabled: false
    pushgateway: "${PUSHGATEWAY_URL:}"

data:
  registry:                           # описания именованных источников
    train: "${DATA_TRAIN:./data/train.parquet}"
    val:   "${DATA_VAL:./data/val.parquet}"
    test:  "${DATA_TEST:./data/test.parquet}"
    ref:   "${DATA_REF:./data/ref.parquet}"     # для дрейфа (эталон)
    live:  "${DATA_LIVE:}"                       # для дрейфа (онлайн срез)
  format: "parquet"                   # parquet|csv|jsonl|arrow|custom
  reader:
    csv:
      sep: ","
      header: true
      encoding: "utf-8"
    parquet:
      engine: "pyarrow"
  features:
    target: "label"
    weight: null
    group_id: null                    # для ранжирования/TimeSeries split
    timestamp: "event_time"           # для time-series split и дрейфа
    text_fields: ["text"]             # для NLP/генерации
  inference:
    model_uri: "${MODEL_URI:./models/latest}"   # путь/URI модели
    predict_fn: "neuroforge.eval.predict:run"   # entrypoint (module:function)
    input_adapter: "neuroforge.eval.adapters:to_model_inputs"
    output_adapter: "neuroforge.eval.adapters:from_model_outputs"
  preprocess:
    dropna: false
    imputation:
      enabled: false
      strategy: "median"              # mean|median|most_frequent
    normalize:
      enabled: false
      method: "standard"              # standard|minmax
    tokenizer:
      enabled: false
      name_or_path: "${HF_TOKENIZER:}" # при NLP задачах
  cache:
    enabled: true
    key_fields: ["id", "event_time"]
    store_predictions: true

splits:
  strategy: "holdout"                 # holdout|kfold|time_series
  holdout:
    use: "test"                       # какой сурс использовать для оценки
  kfold:
    n_splits: 5
    shuffle: true
    stratify: true
  time_series:
    order_by: "${TIME_ORDER_FIELD:event_time}"
    horizon:
      test_days: 7
      gap_days: 0
    min_train_days: 28

slices:
  enabled: true
  definitions:
    - name: "recent_7d"
      filter: "event_time >= now() - 7d"
    - name: "cold_start"
      filter: "user_history_events < 3"
    - name: "locale_en"
      filter: "locale == 'en'"
    - name: "high_value"
      filter: "price > 100"
  min_slice_size: 200

metrics:
  task: "classification"              # classification|regression|ranking|nlp|generation
  primary: "f1_macro"
  classification:
    labels: []                        # пусто = брать из данных
    average: "macro"                  # binary|micro|macro|weighted
    threshold:
      search: true
      optimize_for: "f1_macro"        # какая метрика оптимизирует порог
      grid: [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]
    list:
      - name: "accuracy"
      - name: "precision_macro"
      - name: "recall_macro"
      - name: "f1_macro"
      - name: "roc_auc_ovr"          # для многокласса
      - name: "pr_auc_macro"
      - name: "brier"
      - name: "log_loss"
      - name: "ece"                   # expected calibration error
  regression:
    list:
      - name: "mae"
      - name: "rmse"
      - name: "r2"
      - name: "mape"
      - name: "spearman"
  ranking:
    k_list: [1,3,5,10]
    list:
      - name: "map"                   # average precision
      - name: "ndcg@{k}"             # будет материализовано для каждого k
      - name: "recall@{k}"
  nlp:
    list:
      - name: "bleu"
      - name: "rougeL"
      - name: "chrf"
      - name: "bert_score"
  generation:
    list:
      - name: "exact_match"
      - name: "token_f1"
      - name: "meteor"

postprocessing:
  calibration:
    enabled: true
    method: "isotonic"                # platt|isotonic|none
    separate_by_slice: false
  class_weights:
    enabled: false
    scheme: "balanced"                # balanced|custom
    custom: {}
  clipping:
    enabled: false
    min: 0.0
    max: 1.0

statistics:
  bootstrap:
    enabled: true
    n_resamples: 1000
    ci_level: 0.95
    stratified: true
  permutation_test:
    enabled: true
    metric: "f1_macro"
    n_permutations: 1000
    p_value: 0.05
  mcnemar:
    enabled: true
    p_value: 0.05
  multiple_testing:
    correction: "benjamini-hochberg"  # none|bonferroni|benjamini-hochberg

gates:
  # Жёсткие пороги качества для провала билда/релиза
  required:
    global:
      - metric: "f1_macro"
        op: ">="
        value: 0.72
      - metric: "ece"
        op: "<="
        value: 0.05
    per_slice:
      min_slice_size: 300
      rules:
        - selector: "cold_start"
          metric: "f1_macro"
          op: ">="
          value: 0.60
        - selector: "locale_en"
          metric: "precision_macro"
          op: ">="
          value: 0.70
  regression_guard:
    compare_to: "baseline"            # baseline|previous_run
    metric: "f1_macro"
    delta_op: ">="                    # >= означает не допустить падения больше abs(delta)
    delta_abs_min: -0.01              # не хуже чем −1 п.п.

baseline:
  # Используется для сравнений и статистических тестов
  run_id: "${BASELINE_RUN_ID:}"
  metrics_uri: "${BASELINE_METRICS_URI:}"  # альтернатива run_id — явный путь к JSON

drift:
  enabled: true
  reference_source: "ref"             # registry key
  live_source: "test"                 # "live" при наличии онлайна
  tests:
    numerical:
      - name: "psi"                   # population stability index
        threshold: 0.2
      - name: "ks"                    # Kolmogorov–Smirnov
        p_value: 0.05
    categorical:
      - name: "chi2"
        p_value: 0.05
  slice_by: ["locale"]
  windowing:
    ref:
      days: 30
    live:
      days: 7

explainability:
  enabled: true
  global:
    method: "permutation_importance"  # permutation_importance|shap
    n_repeats: 10
  local:
    method: "shap"                    # shap|lime|ig
    sample_size: 256
    shap:
      background_size: 512
      approximate: true
    lime:
      num_features: 10
      num_samples: 5000
    ig:
      steps: 32
      baseline: "zeros"

report:
  enabled: true
  out_dir: "${REPORT_DIR:./artifacts/report}"
  formats: ["html","md"]
  include:
    overview: true
    metrics_table: true
    confidence_intervals: true
    confusion_matrix: true
    pr_roc_curves: true
    calibration_curve: true
    residuals: true
    error_slices: true
    fairness:
      enabled: true
      sensitive_attributes: ["gender","age_bucket","locale"]
      disparity_metrics:
        - "fnr_gap"                   # разница FNR между группами
        - "selection_rate_gap"
      max_allowed_gap: 0.1
  attachments:
    predictions_csv:
      enabled: false
      limit: 50000
    figures:
      format: "png"
      dpi: 150

notifications:
  enabled: false
  channels:
    slack:
      webhook: "${SLACK_WEBHOOK_URL:}"
      only_on_failure: true
    email:
      smtp_uri: "${SMTP_URI:}"
      to: []
      only_on_failure: true
