[build-system]
requires = ["hatchling>=1.25", "hatch-vcs>=0.4"]
build-backend = "hatchling.build"

[project]
name = "neuroforge-core"
dynamic = ["version"]
description = "NeuroForge Core — ядро утилит и примитивов для индустриальных AI/SecOps систем."
readme = { file = "README.md", content-type = "text/markdown" }
requires-python = ">=3.11"
license = { text = "Proprietary" }
authors = [
  { name = "NeuroForge Team" }
]
keywords = ["neuroforge", "core", "ai", "security", "observability", "infrastructure"]
classifiers = [
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "License :: Other/Proprietary License",
  "Operating System :: OS Independent",
  "Typing :: Typed",
  "Development Status :: 5 - Production/Stable",
]

# Минимизируем runtime-зависимости; dev-инструменты ниже в optional-dependencies/envs
dependencies = [
  # Добавьте runtime-зависимости модуля при необходимости
  "typing-extensions>=4.10; python_version<'3.12'",
]

[project.optional-dependencies]
dev = [
  "ruff>=0.5.6",
  "black>=24.8.0",
  "isort>=5.13.2",
  "mypy>=1.11.1",
  "pytest>=8.3.2",
  "pytest-asyncio>=0.23.8",
  "pytest-cov>=5.0.0",
  "coverage[toml]>=7.6.1",
  "build>=1.2.1",
  "twine>=5.1.1",
  "pre-commit>=3.8.0",
]
test = [
  "pytest>=8.3.2",
  "pytest-asyncio>=0.23.8",
  "pytest-cov>=5.0.0",
  "coverage[toml]>=7.6.1",
]
types = [
  "mypy>=1.11.1",
  "types-setuptools>=75.1.0.20240826",
]

[project.scripts]
# Пример точки входа; раскомментируйте при наличии CLI
# neuroforge = "neuroforge_core.cli:main"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.targets.wheel]
packages = ["src/neuroforge_core"]
only-include = ["src/neuroforge_core", "pyproject.toml", "README.md", "LICENSE*"]

[tool.hatch.build.targets.sdist]
include = ["src/**", "tests/**", "pyproject.toml", "README.md", "LICENSE*"]

[tool.hatch.build.hooks.vcs]
version-file = "src/neuroforge_core/_version.py"

[tool.hatch.envs.default]
description = "Основное дев-окружение"
features = ["dev"]
python = "3.11"
dependencies = []

[tool.hatch.envs.default.scripts]
fmt = [
  "ruff check --fix .",
  "ruff format .",
  "isort .",
  "black .",
]
lint = [
  "ruff check .",
  "black --check .",
  "isort --check-only .",
]
typecheck = "mypy src"
test = "pytest -q"
cov = "pytest --cov=neuroforge_core --cov-report=term-missing --cov-report=xml"
build = "python -m build"
release = [
  "python -m build",
  "twine check dist/*",
  "twine upload dist/*",
]

[tool.ruff]
target-version = "py311"
line-length = 100
src = ["src", "tests"]
extend-exclude = [".venv", "venv", "dist", "build", ".git", ".eggs", ".tox"]

[tool.ruff.lint]
select = [
  "E", "F", "W",        # pycodestyle/pyflakes
  "I",                  # isort (импорты)
  "UP",                 # pyupgrade
  "N",                  # pep8-naming
  "B",                  # bugbear
  "A",                  # builtins
  "C90",                # mccabe complexity
  "S",                  # bandit-like security checks
  "PL",                 # pylint (подмножество правил)
  "PT",                 # pytest
  "RUF",                # правила ruff
]
ignore = [
  "S101",               # asserts допустимы в тестах (см. per-file-ignores)
]
mccabe.max-complexity = 12

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["S101", "PLR2004"]

[tool.black]
line-length = 100
target-version = ["py311"]
include = "\\.pyi?$"

[tool.isort]
profile = "black"
line_length = 100
src_paths = ["src", "tests"]
known_first_party = ["neuroforge_core"]
force_sort_within_sections = true

[tool.mypy]
python_version = "3.11"
mypy_path = "src"
files = ["src"]
strict = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true
no_implicit_optional = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
disallow_any_generics = true
show_error_codes = true
pretty = true
plugins = []
exclude = [
  "build",
  "dist",
  "venv",
  ".venv",
  "tests",  # при необходимости снимите исключение и типизируйте тесты
]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
asyncio_mode = "auto"
xfail_strict = true
filterwarnings = [
  "error:::neuroforge_core\\..*",
  "ignore::DeprecationWarning",
]

[tool.coverage.run]
branch = true
source = ["src/neuroforge_core"]
omit = [
  "*/_version.py",
  "*/__main__.py",
]

[tool.coverage.report]
show_missing = true
fail_under = 85
exclude_lines = [
  "pragma: no cover",
  "if TYPE_CHECKING:",
  "raise NotImplementedError",
]

[tool.coverage.xml]
output = "coverage.xml"
