{
  "name": "NeuroForge Core Dev",
  "image": "mcr.microsoft.com/devcontainers/python:3.11-bookworm",

  // Удобные фичи: утилиты, Docker-клиент с доступом к сокету хоста, GitHub CLI
  "features": {
    "ghcr.io/devcontainers/features/common-utils:2": {
      "installZsh": "true",
      "username": "vscode",
      "userUid": "1000",
      "userGid": "1000",
      "upgradePackages": "true"
    },
    "ghcr.io/devcontainers/features/docker-from-docker:1": {},
    "ghcr.io/devcontainers/features/github-cli:1": {}
  },

  // Рабочая папка и пользователь
  "workspaceFolder": "/workspaces/neuroforge-core",
  "remoteUser": "vscode",

  // Общие переменные окружения внутри контейнера
  "containerEnv": {
    "PIP_DISABLE_PIP_VERSION_CHECK": "1",
    "PYTHONDONTWRITEBYTECODE": "1",
    "PYTHONUNBUFFERED": "1"
  },

  // Переменные, видимые расширениям VS Code (Remote Extension Host)
  "remoteEnv": {
    "PIP_CACHE_DIR": "/home/vscode/.cache/pip"
  },

  // Авто-подхват локального .env (если есть)
  "dotenv": [ ".env" ],

  // Монтирования: кеш pip и docker.sock с хоста
  "mounts": [
    "type=bind,source=/var/run/docker.sock,target=/var/run/docker.sock",
    "type=cache,target=/home/vscode/.cache/pip"
  ],

  // Безопасный init-процесс
  "runArgs": [ "--init" ],

  // Минимальные требования к хосту (совместимые с Codespaces/Dev Containers)
  "hostRequirements": {
    "cpus": 2,
    "memory": "4gb",
    "storage": "16gb"
  },

  // Авто-проброс типового порта приложения
  "forwardPorts": [ 8000 ],
  "portsAttributes": {
    "8000": {
      "label": "neuroforge-core app",
      "onAutoForward": "notify"
    }
  },

  // Обновление базовых инструментов строго до установки зависимостей
  "updateContentCommand": "python -m pip install -U pip setuptools wheel",

  // Первая инициализация рабочего окружения: venv + requirements (если есть)
  "onCreateCommand": "make venv || (python -m venv .venv && . .venv/bin/activate && pip install -U pip setuptools wheel && (test -f requirements.txt && pip install -r requirements.txt || true))",

  // Пост-настройка dev-инструментов согласно Makefile (ruff, black, mypy, pytest, build и т.д.)
  "postCreateCommand": "make install-dev || true",

  // Автонастройка VS Code (расширения и параметры рабочей области)
  "customizations": {
    "vscode": {
      "extensions": [
        "ms-python.python",
        "ms-python.vscode-pylance",
        "ms-toolsai.jupyter",
        "charliermarsh.ruff",
        "ms-azuretools.vscode-docker",
        "ms-python.black-formatter",
        "ms-python.isort",
        "ms-python.mypy-type-checker",
        "eamodio.gitlens",
        "EditorConfig.EditorConfig"
      ],
      "settings": {
        // Интерпретатор и активация venv
        "python.defaultInterpreterPath": "${workspaceFolder}/.venv/bin/python",
        "python.terminal.activateEnvironment": true,
        "python.venvPath": "${workspaceFolder}",
        // Форматирование и линт
        "editor.formatOnSave": true,
        "editor.codeActionsOnSave": { "source.fixAll": true },
        "python.formatting.provider": "black",
        "ruff.lint.args": [],
        // Типы и анализ
        "python.analysis.typeCheckingMode": "basic",
        "mypy-type-checker.args": [ "--python-version=3.11", "--strict", "--ignore-missing-imports" ],
        // Тестирование
        "python.testing.pytestEnabled": true,
        "python.testing.unittestEnabled": false,
        "python.testing.pytestArgs": [ "tests" ],
        // Прочее
        "files.eol": "\n",
        "terminal.integrated.defaultProfile.linux": "bash"
      }
    }
  }
}
