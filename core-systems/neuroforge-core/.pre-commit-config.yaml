# Pre-commit configuration for NeuroForge Core
# Базовые настройки
minimum_pre_commit_version: "3.6.0"
default_stages: [pre-commit]
default_language_version:
  python: python3

# Глобальные исключения (ускоряют проверки и снижают шум)
exclude: |
  (?x)^(
    \.git/|
    \.venv/|
    venv/|
    env/|
    build/|
    dist/|
    node_modules/|
    coverage\.xml|
    \.mypy_cache/|
    \.ruff_cache/|
    \.pytest_cache/|
    \.tox/|
    \.idea/|
    \.vscode/|
    docs/_build/|
    sbom/|
    licenses/|
    vendor/|
    .*\.min\.js$
  )

repos:
  # 1) Базовая гигиена репозитория
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: check-merge-conflict
      - id: check-added-large-files
        args: ["--maxkb=2048"]
      - id: check-yaml
        args: ["--unsafe"]  # допускает анкоры/alias
      - id: check-toml
      - id: check-json
      - id: mixed-line-ending
        args: ["--fix=lf"]
      - id: end-of-file-fixer
      - id: trailing-whitespace
      - id: detect-aws-credentials
        args: ["--allow-missing-credentials"]
      - id: detect-private-key
      - id: forbid-new-submodules

  # 2) Форматирование и стиль Python
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.4.4
    hooks:
      - id: ruff
        args:
          - "--fix"             # авто-фикс простых нарушений
          - "--exit-non-zero-on-fix"
      - id: ruff-format         # эквивалент ruff fmt

  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        args: ["--line-length=100"]

  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args:
          - "--profile=black"
          - "--line-length=100"

  # 3) Статический анализ и типы
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        args:
          - "--strict"
        additional_dependencies:
          - types-requests
          - types-PyYAML

  # 4) Безопасность кода и секреты
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args:
          - "-lll"     # высокий уровень
          - "-ii"      # отображать уверенность
          - "-q"
        files: "^oblivionvault-core/|^neuroforge-core/|^src/|^app/"

  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args:
          - "--all-files"
        exclude: |
          (?x)^(
            tests/|
            docs/|
            .*\.md$
          )

  # 5) Линтеры для YAML и Shell
  - repo: https://github.com/pre-commit/mirrors-yamllint
    rev: v1.32.0
    hooks:
      - id: yamllint
        args: ["-s"]  # переносит конфигурацию из .yamllint, если есть

  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.5
    hooks:
      - id: shellcheck
        files: "\\.(sh|bash)$"

  # 6) Форматирование Markdown/JSON/YAML (универсально)
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v2.7.1
    hooks:
      - id: prettier
        files: "\\.(md|markdown|json|ya?ml)$"

  # 7) Локальные стадии: commit-msg и pre-push
  #    a) Проверка сообщения коммита на Conventional Commits (если установлен commitizen)
  - repo: local
    hooks:
      - id: commitizen
        name: commitizen check (conventional commits)
        entry: cz check --commit-msg-file
        language: system
        stages: [commit-msg]
        pass_filenames: true

      #    b) Pre-push: быстрый запуск тестов (при наличии pytest)
      - id: pytest-pre-push
        name: pytest (quick)
        entry: bash -c 'pytest -q'
        language: system
        stages: [pre-push]
        pass_filenames: false
        always_run: true
