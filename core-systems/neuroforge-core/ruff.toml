# neuroforge-core/ruff.toml
# Промышленный конфиг Ruff: строгий линтинг + автоформатирование.
# Документация Ruff: https://docs.astral.sh/ruff/

# Базовые параметры проекта
line-length = 100
indent-width = 4
target-version = "py311"
respect-gitignore = true
cache-dir = ".ruff_cache"
fix = true
unsafe-fixes = false
preview = true

# Корневые каталоги исходников для корректной классификации импортов
src = ["neuroforge_core", "src"]

# Глобальные исключения путей (не сканировать)
extend-exclude = [
  ".git",
  ".venv",
  "venv",
  "build",
  "dist",
  "__pycache__",
  "node_modules",
]

[lint]
# Набор правил: стиль, корректность, безопасность, упрощения, типы, докстринги и пр.
select = [
  "E",    # pycodestyle (ошибки)
  "W",    # pycodestyle (предупреждения)
  "F",    # pyflakes
  "I",    # isort (сортировка импортов)
  "UP",   # pyupgrade
  "B",    # flake8-bugbear
  "BLE",  # blind-except
  "C4",   # flake8-comprehensions
  "SIM",  # flake8-simplify
  "N",    # pep8-naming
  "ANN",  # flake8-annotations (аннотации типов)
  "D",    # pydocstyle (докстринги)
  "Q",    # flake8-quotes
  "PT",   # flake8-pytest-style
  "T20",  # flake8-print
  "ERA",  # eradicate (закомментированный мёртвый код)
  "ISC",  # implicit-str-concat
  "TID",  # tidy imports (relative-imports и проч.)
  "TRY",  # tryceratops (исключения/raise)
  "PL",   # pylint-подмножество (разумная строгость)
  "C90",  # mccabe (сложность)
  "RUF",  # правила Ruff
  "S",    # bandit (базовые проверки безопасности)
]

# Глобальные игноры (минимум). Остальное — точечно через per-file-ignores.
ignore = [
  "D203", # конфликтует с D211: один из вариантов пустой строки перед классом
  "D213", # конфликтует с D212: стиль первой строки докстринга
  "ANN101", # аннотации self
  "ANN102", # аннотации cls
]

# Разрешаем автофиксы для всех правил, кроме ниже
fixable = ["ALL"]
unfixable = [
  "ERA",  # не стираем автоматически закомментированный код без явного решения
  "S",    # правила безопасности автофиксами не правим
]

# Исключения по файлам/маскам
per-file-ignores = {
  # Тесты: допускаем print (диагностика), assert, упрощаем требования к докстрингам
  "tests/**" = ["D", "S101", "T201", "ANN201", "ANN001", "PLR2004"],
  # Скрипты и миграции: не ломаем длинные строки, смягчаем докстринги
  "scripts/**" = ["D", "E501", "T201"],
  "migrations/**" = ["D", "E501"],
  # __init__.py: разрешаем реэкспорт символов
  "**/__init__.py" = ["F401", "F403"],
}

# Дополнительные параметры линтинга
dummy-variable-rgx = "^(_+|unused_.*)$"

[lint.isort]
# Жёсткая сортировка импортов
combine-as-imports = true
force-sort-within-sections = true
lines-between-types = 1
known-first-party = ["neuroforge_core"]
# Убедимся, что future-аннотации всегда наверху при автофиксе (если проект так стандартизирован)
required-imports = ["from __future__ import annotations"]

[lint.pydocstyle]
# Стиль докстрингов: NumPy (корпоративный научный стандарт)
convention = "numpy"

[lint.flake8-quotes]
# Единый стиль кавычек
inline-quotes = "double"
multiline-quotes = "double"
docstring-quotes = "double"
avoid-escape = true

[lint.mccabe]
# Контроль цикломатической сложности
max-complexity = 12

[lint.flake8-annotations]
# Умные послабления для типизации
suppress-dummy-args = true
suppress-none-returning = true
allow-untyped-nested = true

[lint.pylint]
# Разумные границы на количество аргументов и ветвлений
max-args = 10
max-branches = 20

[format]
# Встроенный форматер Ruff (совместим с Black по духу, но быстрее)
quote-style = "double"
indent-style = "space"
line-ending = "lf"
docstring-code-format = true
