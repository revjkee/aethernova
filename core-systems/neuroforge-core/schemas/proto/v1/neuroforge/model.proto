// neuroforge-core/schemas/proto/v1/neuroforge/model.proto
// Protobuf schema: Neuroforge Model Registry (v1)
// Design goals: stable wire format, explicit resource names, safe evolvability (reserved fields), WKT-only deps.

syntax = "proto3";

package neuroforge.v1;

option csharp_namespace = "YourOrg.Neuroforge.V1";
option go_package       = "github.com/your-org/neuroforge-core/schemas/proto/v1/neuroforge;neuroforgev1";
option java_multiple_files = true;
option java_outer_classname = "ModelProto";
option java_package     = "com.yourorg.neuroforge.v1";
option objc_class_prefix = "NFV1";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/empty.proto";

// -------------------------------
// Enums
// -------------------------------

enum ModelStage {
  MODEL_STAGE_UNSPECIFIED = 0;
  MODEL_STAGE_DRAFT       = 1;
  MODEL_STAGE_STAGING     = 2;
  MODEL_STAGE_PRODUCTION  = 3;
  MODEL_STAGE_DEPRECATED  = 4;
  MODEL_STAGE_ARCHIVED    = 5;
}

enum Framework {
  FRAMEWORK_UNSPECIFIED = 0;
  FRAMEWORK_TENSORFLOW  = 1;
  FRAMEWORK_PYTORCH     = 2;
  FRAMEWORK_ONNX        = 3;
  FRAMEWORK_XGBOOST     = 4;
  FRAMEWORK_LLM         = 5; // generic LLM runtime
}

enum DeviceType {
  DEVICE_TYPE_UNSPECIFIED = 0;
  DEVICE_TYPE_CPU         = 1;
  DEVICE_TYPE_GPU         = 2;
  DEVICE_TYPE_TPU         = 3;
  DEVICE_TYPE_NPU         = 4;
}

enum Precision {
  PRECISION_UNSPECIFIED = 0;
  PRECISION_FP32        = 1;
  PRECISION_FP16        = 2;
  PRECISION_BF16        = 3;
  PRECISION_INT8        = 4;
}

enum DataType {
  DT_UNSPECIFIED = 0;
  DT_BOOL  = 1;
  DT_INT32 = 2;
  DT_INT64 = 3;
  DT_FLOAT16 = 4;
  DT_FLOAT32 = 5;
  DT_BF16 = 6;
  DT_STRING = 7;
  DT_BYTES  = 8;
}

// Common error codes aligned with gRPC semantics (subset).
enum ErrorCode {
  ERROR_CODE_UNSPECIFIED   = 0;
  INVALID_ARGUMENT         = 1;
  NOT_FOUND                = 2;
  ALREADY_EXISTS           = 3;
  PERMISSION_DENIED        = 4;
  UNAUTHENTICATED          = 5;
  FAILED_PRECONDITION      = 6;
  RESOURCE_EXHAUSTED       = 7;
  ABORTED                  = 8;
  OUT_OF_RANGE             = 9;
  UNIMPLEMENTED            = 10;
  INTERNAL                 = 11;
  UNAVAILABLE              = 12;
  DATA_LOSS                = 13;
  DEADLINE_EXCEEDED        = 14;
}

// -------------------------------
// Core resources
// -------------------------------

// Logical model (resource name: "models/{model}")
message Model {
  // Resource name, e.g. "models/sentiment"
  string name = 1;

  // Human-readable
  string display_name = 2;
  string description  = 3;

  // Ownership & tenancy
  string owner      = 4;
  string tenant_id  = 5;

  // Free-form labels for selection (RFC 1123 keys recommended)
  map<string, string> labels = 6;

  // Timestamps
  google.protobuf.Timestamp create_time = 7;
  google.protobuf.Timestamp update_time = 8;

  // Default version alias (e.g. "1.3.2" or "prod")
  string default_version = 9;

  // Optional IO schemas for inference endpoints
  InferenceIO input_spec  = 10;
  InferenceIO output_spec = 11;

  // Arbitrary metadata (JSON)
  google.protobuf.Struct metadata = 12;

  // Reserved for future: governance/IAM hooks, ownership model changes, etc.
  reserved 13, 14, 15, 16, 17, 18, 19;
  reserved 20 to 29;
}

// Concrete model version (resource name: "models/{model}/versions/{version}")
message ModelVersion {
  // Resource name, e.g. "models/sentiment/versions/1.3.2"
  string name = 1;

  // Parent "models/{model}"
  string model = 2;

  // Identifier within the model (semver or monotonic)
  string version = 3;

  // Artifact location (s3://..., gs://..., file://...) and checksum
  string artifact_uri    = 4;
  string checksum_sha256 = 5;
  int64  size_bytes      = 6;

  Framework framework            = 7;
  string    framework_version    = 8;
  string    format               = 9;  // e.g. "SavedModel", "TorchScript", "ONNX", "GGUF"
  ModelStage stage               = 10;
  ResourceSpec resource_spec     = 11;

  // Quality metrics, e.g. {"f1": 0.91, "latency_ms_p95": 45}
  map<string, double> metrics    = 12;

  // Parameters/hyperparameters (free-form)
  google.protobuf.Struct parameters = 13;

  // Model card/documentation (optional)
  string model_card_uri = 14;

  // Audit
  google.protobuf.Timestamp create_time = 15;
  string created_by                     = 16;

  Precision  precision    = 17;
  DeviceType accelerator  = 18; // primary accelerator type (if any)
  int32      device_count = 19; // desired accelerators per replica (for scheduling hints)

  // Reserved for future fields to preserve wire compatibility
  reserved 20, 21, 22;
  reserved 30 to 39;
}

// Specs

message InferenceIO {
  repeated TensorSpec tensors = 1;
}

message TensorSpec {
  string   name  = 1;
  DataType dtype = 2;
  repeated int64 shape = 3;          // use -1 for dynamic dimension
  string   content_type = 4;         // e.g. "application/json", "image/jpeg"
  bool     quantized    = 5;         // whether tensor is quantized
}

message ResourceSpec {
  DeviceType device_type = 1;        // cpu/gpu/...
  int32      device_count = 2;       // number of accelerators
  int32      cpu_millicores = 3;     // CPU request hint (mCPU)
  int64      memory_mb     = 4;      // Memory request hint (MB)
  int32      threads       = 5;      // intra-op threads (CPU)
  google.protobuf.Duration timeout = 6;
  // Reserved for NUMA/pinning/allocator configs
  reserved 7 to 15;
}

// Generic error envelope for non-OK responses when not using gRPC status.
message Error {
  ErrorCode code = 1;
  string    message = 2;
  google.protobuf.Struct details = 3;
}

// Pagination

message PageRequest {
  int32 page_size  = 1;      // server may enforce max
  string page_token = 2;     // from previous response
  string filter     = 3;     // e.g. 'labels.env = "prod" AND stage = "PRODUCTION"'
  string order_by   = 4;     // e.g. "update_time desc"
}

message PageResponse {
  string next_page_token = 1;
}

// -------------------------------
// Requests / Responses
// -------------------------------

// Models
message CreateModelRequest {
  Model model = 1; // name must be unset; server assigns "models/{id}" from display_name or provided id
}

message GetModelRequest {
  string name = 1; // "models/{model}"
}

message UpdateModelRequest {
  Model model = 1;                      // must include name
  google.protobuf.FieldMask update_mask = 2; // fields to update
}

message DeleteModelRequest {
  string name = 1; // "models/{model}"
  bool   force = 2; // if true, also deletes all versions
}

message ListModelsRequest {
  PageRequest page = 1;
  // Optional label selector shortcut. If set, server merges into page.filter.
  map<string, string> label_selector = 2;
  // Optional tenant scoping override for privileged callers.
  string tenant_override = 3;
}

message ListModelsResponse {
  repeated Model models = 1;
  PageResponse page = 2;
}

// Model versions
message CreateModelVersionRequest {
  string parent = 1; // "models/{model}"
  ModelVersion version = 2; // name must be unset; version.version required
}

message GetModelVersionRequest {
  string name = 1; // "models/{model}/versions/{version}"
}

message UpdateModelVersionRequest {
  ModelVersion version = 1;               // must include name
  google.protobuf.FieldMask update_mask = 2; // updatable: stage, resource_spec, parameters, metrics, model_card_uri, precision
}

message DeleteModelVersionRequest {
  string name = 1; // "models/{model}/versions/{version}"
}

message ListModelVersionsRequest {
  string parent = 1; // "models/{model}"
  PageRequest page = 2;
  // Filters like: 'stage = "PRODUCTION" AND framework = "ONNX"'
}

message ListModelVersionsResponse {
  repeated ModelVersion versions = 1;
  PageResponse page = 2;
}

message SetDefaultModelVersionRequest {
  string model  = 1;   // "models/{model}"
  string version = 2;  // version id to set as default
}

message PromoteModelVersionRequest {
  string name = 1;        // "models/{model}/versions/{version}"
  ModelStage target_stage = 2; // e.g. PRODUCTION
}

// -------------------------------
// Service
// -------------------------------

service ModelRegistry {
  // Model CRUD
  rpc CreateModel(CreateModelRequest) returns (Model);
  rpc GetModel(GetModelRequest)       returns (Model);
  rpc UpdateModel(UpdateModelRequest) returns (Model);
  rpc DeleteModel(DeleteModelRequest) returns (google.protobuf.Empty);
  rpc ListModels(ListModelsRequest)   returns (ListModelsResponse);

  // Version CRUD
  rpc CreateModelVersion(CreateModelVersionRequest) returns (ModelVersion);
  rpc GetModelVersion(GetModelVersionRequest)       returns (ModelVersion);
  rpc UpdateModelVersion(UpdateModelVersionRequest) returns (ModelVersion);
  rpc DeleteModelVersion(DeleteModelVersionRequest) returns (google.protobuf.Empty);
  rpc ListModelVersions(ListModelVersionsRequest)   returns (ListModelVersionsResponse);

  // Lifecycle helpers
  rpc SetDefaultModelVersion(SetDefaultModelVersionRequest) returns (Model);
  rpc PromoteModelVersion(PromoteModelVersionRequest)       returns (ModelVersion);
}
