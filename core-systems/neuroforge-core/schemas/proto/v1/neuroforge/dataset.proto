syntax = "proto3";

package neuroforge.v1;

option optimize_for = SPEED;
option java_multiple_files = true;
option java_package = "com.yourorg.neuroforge.v1";
option java_outer_classname = "DatasetProto";
option csharp_namespace = "YourOrg.NeuroForge.V1";
option go_package = "github.com/your-org/neuroforge-core/gen/go/neuroforge/v1;nv1";
option php_namespace = "YourOrg\\NeuroForge\\V1";
option ruby_package = "YourOrg::NeuroForge::V1";
option objc_class_prefix = "NFV1";

// Вспомогательные типы
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";

// -----------------------------------------------------------------------------
// Базовые перечисления
// -----------------------------------------------------------------------------

// Статус жизненного цикла набора данных.
enum DatasetLifecycle {
  DATASET_LIFECYCLE_UNSPECIFIED = 0;
  DATASET_LIFECYCLE_DRAFT = 1;
  DATASET_LIFECYCLE_VALIDATED = 2;
  DATASET_LIFECYCLE_DEPRECATED = 3;
  DATASET_LIFECYCLE_RETIRED = 4;
}

// Модальность данных.
enum Modality {
  MODALITY_UNSPECIFIED = 0;
  MODALITY_TEXT = 1;
  MODALITY_IMAGE = 2;
  MODALITY_AUDIO = 3;
  MODALITY_VIDEO = 4;
  MODALITY_MULTIMODAL = 5;
  MODALITY_TABULAR = 6;
}

// Формат физических файлов/таблиц.
enum DataFormat {
  DATA_FORMAT_UNSPECIFIED = 0;
  DATA_FORMAT_CSV = 1;
  DATA_FORMAT_TSV = 2;
  DATA_FORMAT_JSONL = 3;
  DATA_FORMAT_PARQUET = 4;
  DATA_FORMAT_ORC = 5;
  DATA_FORMAT_AVRO = 6;
  DATA_FORMAT_TFRECORD = 7;
  DATA_FORMAT_RECORDIO = 8;
  DATA_FORMAT_ARROW = 9;
}

// Источник происхождения.
enum SourceType {
  SOURCE_TYPE_UNSPECIFIED = 0;
  SOURCE_TYPE_SYNTHETIC = 1;
  SOURCE_TYPE_COLLECTED = 2;
  SOURCE_TYPE_THIRD_PARTY = 3;
  SOURCE_TYPE_PUBLIC_DATASET = 4;
  SOURCE_TYPE_INTERNAL = 5;
}

// Классификация безопасности.
enum SecurityTier {
  SECURITY_TIER_UNSPECIFIED = 0;
  SECURITY_TIER_PUBLIC = 1;
  SECURITY_TIER_INTERNAL = 2;
  SECURITY_TIER_CONFIDENTIAL = 3;
  SECURITY_TIER_RESTRICTED = 4;
}

// Категории PII (усеченный, расширяйте при необходимости).
enum PiiCategory {
  PII_CATEGORY_UNSPECIFIED = 0;
  PII_CATEGORY_NAME = 1;
  PII_CATEGORY_EMAIL = 2;
  PII_CATEGORY_PHONE = 3;
  PII_CATEGORY_GEO = 4;
  PII_CATEGORY_BIOMETRIC = 5;
  PII_CATEGORY_FINANCIAL = 6;
  PII_CATEGORY_HEALTH = 7;
}

// Типы данных в схеме.
enum DataType {
  DATA_TYPE_UNSPECIFIED = 0;
  DATA_TYPE_STRING = 1;
  DATA_TYPE_INT64 = 2;
  DATA_TYPE_FLOAT = 3;
  DATA_TYPE_DOUBLE = 4;
  DATA_TYPE_BOOL = 5;
  DATA_TYPE_BYTES = 6;
  DATA_TYPE_TIMESTAMP = 7;
  DATA_TYPE_DATE = 8;
  DATA_TYPE_STRUCT = 9;
  DATA_TYPE_ARRAY = 10;
}

// Алгоритмы хэширования (только сильные по умолчанию).
enum HashAlgo {
  HASH_ALGO_UNSPECIFIED = 0;
  HASH_ALGO_SHA256 = 1;
  HASH_ALGO_SHA512 = 2;
  HASH_ALGO_BLAKE3 = 3;
}

// Результат проверки/валидации.
enum ValidationStatus {
  VALIDATION_STATUS_UNSPECIFIED = 0;
  VALIDATION_STATUS_PASS = 1;
  VALIDATION_STATUS_WARN = 2;
  VALIDATION_STATUS_FAIL = 3;
}

// -----------------------------------------------------------------------------
// Идентификация и контакты
// -----------------------------------------------------------------------------

message Owner {
  string team = 1;                // владелец (команда/подразделение)
  string email = 2;               // контакт
  string slack = 3;               // канал или пользователь
}

// SPDX лицензия и доп. сведения.
message License {
  string spdx_id = 1;             // напр., "Apache-2.0"
  string url = 2;
  string name = 3;                // человекочитаемое
  bool redistributable = 4;       // можно ли распространять внешне
}

// Соответствие стандартам и ограничения использования.
message Compliance {
  repeated string standards = 1;  // напр., ISO27001, SOC2
  repeated string restrictions = 2; // напр., "EU-only", "No-Commercial-Use"
  repeated string legal_refs = 3; // ссылки на DPIA/договоры
}

// -----------------------------------------------------------------------------
// Целостность и адресация
// -----------------------------------------------------------------------------

message Checksum {
  HashAlgo algo = 1;
  string value_hex = 2;           // хэш в hex
}

message ContentAddress {
  string uri = 1;                 // pinned URI (s3://, gs://, az://, file://, https://)
  Checksum checksum = 2;          // обязательный для воспроизводимости
  uint64 size_bytes = 3;          // размер полезной нагрузки
  string etag = 4;                // при наличии (S3/HTTP)
}

// Локация хранения (выбирается один вариант).
message StorageLocation {
  oneof location {
    S3Location s3 = 1;
    GcsLocation gcs = 2;
    AzureBlobLocation azure_blob = 3;
    HfRepoLocation hf_repo = 4;
    LocalFsLocation local = 5;
    HttpLocation http = 6;
  }
}

message S3Location {
  string bucket = 1;
  string prefix = 2;              // префикс/каталог
  string region = 3;
}

message GcsLocation {
  string bucket = 1;
  string prefix = 2;
  string project = 3;
}

message AzureBlobLocation {
  string account = 1;
  string container = 2;
  string prefix = 3;
}

message HfRepoLocation {
  string repo_id = 1;             // org/name
  string revision = 2;            // ветка/sha
  string path = 3;                // подкаталог
}

message LocalFsLocation {
  string path = 1;                // корневой каталог
}

message HttpLocation {
  string base_url = 1;            // только для чтения; используйте ContentAddress.checksum
}

// Полное описание хранилища версии.
message StorageDescriptor {
  StorageLocation base = 1;
  DataFormat format = 2;
  repeated ContentAddress objects = 3; // при chunked хранении перечислить части
}

// -----------------------------------------------------------------------------
// Схема данных
// -----------------------------------------------------------------------------

// Поле схемы; для ARRAY используйте element, для STRUCT — fields.
message FieldSpec {
  string name = 1;
  DataType type = 2;
  bool required = 3;
  string description = 4;
  map<string, string> tags = 5;
  FieldSpec element = 6;                // для массивов
  repeated FieldSpec fields = 7;        // для структур
}

message DataSchema {
  repeated FieldSpec fields = 1;
  string version = 2;                   // семвер схемы
  string uri = 3;                       // ссылка на spec (например, JSON Schema)
}

// -----------------------------------------------------------------------------
// Метрики качества и смещения
// -----------------------------------------------------------------------------

message DataQualityMetrics {
  uint64 row_count = 1;
  uint64 invalid_rows = 2;
  double invalid_fraction = 3;
  double missing_fraction = 4;
  double duplicate_fraction = 5;

  message NumericStats {
    string field = 1;
    double min = 2;
    double p50 = 3;
    double p95 = 4;
    double max = 5;
    double mean = 6;
    double stddev = 7;
    double missing_fraction = 8;
  }
  message CategoricalStats {
    string field = 1;
    uint64 cardinality = 2;
    double top1_fraction = 3;
    double missing_fraction = 4;
  }

  repeated NumericStats numeric = 10;
  repeated CategoricalStats categorical = 11;
}

message BiasMetrics {
  // Демографические метрики; значения 0..1 чем меньше, тем лучше.
  double demographic_parity_diff = 1;
  double equalized_odds_diff = 2;
  map<string, double> subgroup_error_rates = 3; // ошибка по подгруппам
}

message DriftMetrics {
  // Простая схема дрифта; масштабируйте по необходимости.
  double population_stability_index = 1; // PSI
  double kl_divergence = 2;
  google.protobuf.Timestamp reference_start = 3;
  google.protobuf.Timestamp reference_end = 4;
  google.protobuf.Timestamp current_start = 5;
  google.protobuf.Timestamp current_end = 6;
}

// -----------------------------------------------------------------------------
// Провенанс и родословная
// -----------------------------------------------------------------------------

message Provenance {
  SourceType source_type = 1;
  string source_uri = 2;                 // первоисточник
  string pipeline_id = 3;                // сборочный конвейер
  string run_id = 4;                     // идентификатор запуска
  string git_commit = 5;                 // фиксируем код
  repeated string parents = 6;           // id версий-родителей (деривация)
  map<string, string> attributes = 7;    // произвольные атрибуты
}

message PiiProfile {
  bool has_pii = 1;
  repeated PiiCategory categories = 2;
  string detection_tool = 3;             // инструмент e.g. presidio
  double confidence = 4;                 // 0..1
}

message Governance {
  License license = 1;
  Compliance compliance = 2;
  SecurityTier security = 3;
  PiiProfile pii = 4;
}

// -----------------------------------------------------------------------------
// Версионирование и сплиты
// -----------------------------------------------------------------------------

message DatasetSplit {
  string name = 1;                       // train/valid/test/holdout
  double fraction = 2;                   // доля в [0..1]
  uint64 records = 3;                    // фактическое количество
  map<string, string> filters = 4;       // выражения фильтрации
}

message ValidationReport {
  ValidationStatus status = 1;
  repeated string errors = 2;
  repeated string warnings = 3;
}

// Верифицируемая версия набора данных.
message DatasetVersion {
  string version = 1;                    // семвер или тег
  string revision = 2;                   // hash/etag/commit для детерминизма
  google.protobuf.Timestamp created_at = 3;
  string created_by = 4;
  bool immutable = 5;

  repeated Modality modalities = 10;
  DataSchema schema = 11;
  StorageDescriptor storage = 12;

  uint64 size_bytes = 20;
  uint64 record_count = 21;
  repeated DatasetSplit splits = 22;

  DataQualityMetrics quality = 30;
  BiasMetrics bias = 31;
  DriftMetrics drift = 32;

  Provenance provenance = 40;
  Governance governance = 41;

  ValidationReport validation = 50;

  map<string, string> labels = 90;
  google.protobuf.Struct annotations = 91; // свободная форма
}

// -----------------------------------------------------------------------------
// Политика доступа (интеграция с OPA/ABAC)
// -----------------------------------------------------------------------------

message AccessPolicy {
  string opa_package = 1;                // пакет OPA, напр. "neuroforge.policies.model_deploy"
  string policy_version = 2;
  repeated string allowed_audiences = 3; // допустимые аудитории JWT
  repeated string allowed_purposes = 4;  // цели использования
  map<string, string> attributes = 5;    // условия, напр. {"env":"prod"}
}

// -----------------------------------------------------------------------------
// Корневой объект Dataset
// -----------------------------------------------------------------------------

message Dataset {
  string id = 1;                         // глобальный стабильный ID
  string name = 2;                       // человекочитаемое имя
  string description = 3;

  DatasetLifecycle lifecycle = 4;
  Owner owner = 5;

  repeated string tags = 10;
  map<string, string> labels = 11;

  // Текущая активная версия и история версий.
  string current_version_id = 20;
  DatasetVersion current = 21;
  repeated DatasetVersion versions = 22;

  AccessPolicy access_policy = 30;

  google.protobuf.Timestamp created_at = 90;
  google.protobuf.Timestamp updated_at = 91;
}

// -----------------------------------------------------------------------------
// Сервисные запросы/ответы (опционально для gRPC API)
// -----------------------------------------------------------------------------

message GetDatasetRequest {
  string id = 1;
  bool include_versions = 2;
}

message GetDatasetResponse {
  Dataset dataset = 1;
}

message ListDatasetsRequest {
  uint32 page_size = 1;
  string page_token = 2;
  map<string, string> filter = 3;  // напр. {"owner.team":"ml-platform","lifecycle":"VALIDATED"}
}

message ListDatasetsResponse {
  repeated Dataset datasets = 1;
  string next_page_token = 2;
}

message PutDatasetRequest {
  Dataset dataset = 1;
  bool upsert = 2;
}

message PutDatasetResponse {
  string id = 1;
  string version = 2;
  ValidationReport validation = 3;
}

// -----------------------------------------------------------------------------
// Примечания по совместимости:
// 1) поля только добавляются; не переиспользуйте номера тегов;
// 2) для JSON-совместимости храните time как RFC3339, если сериализуете вне Protobuf;
// 3) для крупных наборов не дублируйте все ContentAddress, храните в отдельном каталоге
//    и ссылку на манифест через StorageDescriptor.base + objects пусто/манифест-URI.
// -----------------------------------------------------------------------------
