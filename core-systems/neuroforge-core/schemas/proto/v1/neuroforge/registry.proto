syntax = "proto3";

package neuroforge.v1.neuroforge;

option go_package = "github.com/neuroforge/neuroforge-core/gen/go/neuroforge/v1;neuroforgev1";
option java_multiple_files = true;
option java_package = "io.neuroforge.v1";
option csharp_namespace = "Neuroforge.V1";
option php_namespace = "Neuroforge\\V1";
option objc_class_prefix = "NF";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";

// ==============================
// Dataset registry data model
// ==============================

// Lightweight reference to a dataset.
message DatasetRef {
  string id = 1;          // unique dataset identifier (e.g., "users_v1")
  uint32 version = 2;     // schema/config version
}

// Main dataset descriptor.
message Dataset {
  string id = 1;                              // unique dataset identifier
  string title = 2;                           // human readable title
  string description = 3;                     // optional description
  string owner = 4;                           // owner email or group
  string domain = 5;                          // business domain (e.g., "finance", "core")
  uint32 version = 6;                         // revision of dataset contract
  repeated string primary_key = 7;            // primary key columns (non-empty)

  WriteMode write_mode = 8;                   // append|upsert|overwrite
  StorageConfig storage = 9;                  // storage layout and format
  RetentionPolicy retention = 10;             // retention/WORM
  SecurityPolicy security = 11;               // encryption, access, OPA, legal hold
  SchemaDescriptor schema = 12;               // logical schema
  QualityProfile quality = 13;                // data quality expectations
  Indexing indexing = 14;                     // search index settings
  AuthorizationPolicy authorization = 15;     // row filters and column masks
  SLAProfile sla = 16;                        // SLO/SLA commitments
  Lineage lineage = 17;                       // upstream/downstream lineage
  Observability observability = 18;           // metrics/tracing hints

  map<string, string> labels = 19;            // arbitrary labels/tags

  google.protobuf.Timestamp created_at = 20;  // creation timestamp
  google.protobuf.Timestamp updated_at = 21;  // last update timestamp

  bool deprecated = 22;                       // soft-deprecation flag
  string deprecation_reason = 23;             // optional reason

  reserved 100 to 199;                        // reserve room for future additions
}

// How writers interact with the dataset.
enum WriteMode {
  WRITE_MODE_UNSPECIFIED = 0;
  WRITE_MODE_APPEND = 1;
  WRITE_MODE_UPSERT = 2;
  WRITE_MODE_OVERWRITE = 3;
}

// Storage configuration.
message StorageConfig {
  enum Backend {
    BACKEND_UNSPECIFIED = 0;
    BACKEND_DATAFABRIC = 1; // abstract DF URI (df://tenant/...)
    BACKEND_S3 = 2;
    BACKEND_HDFS = 3;
    BACKEND_GCS = 4;
    BACKEND_AZURE_BLOB = 5;
    BACKEND_BIGQUERY = 6;
    BACKEND_SNOWFLAKE = 7;
  }

  enum SchemaCompatibility {
    SCHEMA_COMPATIBILITY_UNSPECIFIED = 0;
    SCHEMA_COMPATIBILITY_NONE = 1;
    SCHEMA_COMPATIBILITY_BACKWARD = 2;
    SCHEMA_COMPATIBILITY_FORWARD = 3;
    SCHEMA_COMPATIBILITY_FULL = 4;
  }

  Backend backend = 1;                     // storage backend kind
  string location = 2;                     // URI (df://, s3://, gs://, etc.)
  string format = 3;                       // "parquet", "jsonl", "avro", etc.
  string compression = 4;                  // "zstd", "gzip", "snappy", etc.
  repeated string partition_by = 5;        // partition columns (e.g., ["dt","hour"])
  string bucket_by = 6;                    // optional bucketing column
  uint32 buckets = 7;                      // number of buckets (0 = disabled)

  SchemaCompatibility schema_compatibility = 8;

  CompactionSettings compaction = 9;       // small-file compaction

  message CompactionSettings {
    bool enabled = 1;
    uint32 max_small_files = 2;
    string schedule_cron = 3;              // cron expression for compaction
  }

  reserved 100 to 149;
}

// Retention and WORM policies.
message RetentionPolicy {
  enum Action {
    ACTION_UNSPECIFIED = 0;
    ACTION_DELETE = 1;
    ACTION_ARCHIVE = 2;
    ACTION_TOMBSTONE = 3;
    ACTION_ANONYMIZE = 4;
  }

  enum WormMode {
    WORM_MODE_UNSPECIFIED = 0;
    WORM_MODE_DISABLED = 1;
    WORM_MODE_GOVERNANCE = 2;
    WORM_MODE_COMPLIANCE = 3;
  }

  bool enabled = 1;
  uint32 retain_days = 2;                        // days to retain data
  Action action = 3;                             // action taken after retention

  Anonymize anonymize = 4;                       // for ACTION_ANONYMIZE
  Worm worm = 5;                                 // WORM settings

  message Anonymize {
    repeated string fields = 1;                  // fields to anonymize
    bool with_hash = 2;                          // use stable hashing if true
  }

  message Worm {
    WormMode mode = 1;
    google.protobuf.Timestamp lock_until = 2;    // governance lock until (ignored for COMPLIANCE)
  }

  reserved 100 to 149;
}

// Security and access policy.
message SecurityPolicy {
  EncryptionConfig encryption = 1;  // encryption at rest
  AccessScopes access = 2;          // scopes by action
  OpaConfig opa = 3;                // OPA package/rule
  LegalHoldConfig legal_hold = 4;   // legal hold dataset/label

  message EncryptionConfig {
    bool enabled = 1;
    string key_ref = 2;             // KMS key reference (e.g., "kms://alias/neuroforge-s3")
  }

  message AccessScopes {
    repeated string read_scopes = 1;   // e.g., ["df:read","users:read"]
    repeated string write_scopes = 2;  // e.g., ["df:write","users:write"]
    repeated string admin_scopes = 3;  // e.g., ["df:admin","policy:evaluate"]
  }

  message OpaConfig {
    string package = 1;             // e.g., "neuroforge.authz.users"
    string rule = 2;                // e.g., "allow"
    double timeout_seconds = 3;     // evaluation timeout
  }

  message LegalHoldConfig {
    string dataset = 1;             // dataset to store holds (e.g., "_legal_holds")
    string label = 2;               // label for hold entries (e.g., "legal_hold")
  }

  reserved 100 to 149;
}

// Row/column-level authorization hints.
message AuthorizationPolicy {
  string row_filter_expr = 1;   // e.g., "ctx.tenant_id == record.tenant_id"
  repeated ColumnMask column_masks = 2;

  message ColumnMask {
    string column = 1;
    repeated string when_scope_not_in = 2;   // scopes that may bypass mask
    Mask mask = 3;

    message Mask {
      enum Strategy {
        STRATEGY_UNSPECIFIED = 0;
        STRATEGY_REDACT = 1;        // replace with fixed token
        STRATEGY_HASH_SHA256 = 2;   // stable hashing
        STRATEGY_SHOW_LAST = 3;     // show last N characters
      }
      Strategy strategy = 1;
      uint32 show_last = 2;         // for SHOW_LAST
      string token = 3;             // custom redact token
    }
  }

  reserved 100 to 149;
}

// Logical schema descriptor.
message SchemaDescriptor {
  uint32 version = 1;
  repeated Field fields = 2;

  // Field with rich type system.
  message Field {
    string name = 1;
    FieldType type = 2;
    bool nullable = 3;
    map<string, string> constraints = 4; // simple string constraints (regex, min, max, enum, etc.)
    PiiAnnotation pii = 5;               // optional PII annotation

    message PiiAnnotation {
      string classification = 1;         // e.g., "pii"
      Policy policy = 2;

      message Policy {
        bool at_rest_encrypt = 1;
        InUseMasking in_use_masking = 2;

        message InUseMasking {
          enum Strategy {
            STRATEGY_UNSPECIFIED = 0;
            STRATEGY_REDACT = 1;
            STRATEGY_HASH_SHA256 = 2;
          }
          Strategy strategy = 1;
          string salt_ref = 2;           // reference to salt secret if hashing
          uint32 show_last = 3;          // for partial reveal
        }
      }
    }
  }

  // Recursive logical type
  message FieldType {
    oneof kind {
      PrimitiveType primitive = 1;
      DecimalType decimal = 2;
      ArrayType array = 3;
      MapType map = 4;
      StructType struct = 5;
      JsonType json = 6;
      BytesType bytes = 7;
      DateType date = 8;
      TimestampType timestamp = 9;
    }

    enum PrimitiveType {
      PRIMITIVE_TYPE_UNSPECIFIED = 0;
      STRING = 1;
      INT32 = 2;
      INT64 = 3;
      FLOAT = 4;
      DOUBLE = 5;
      BOOL = 6;
    }

    message DecimalType {
      uint32 precision = 1; // e.g., 18
      uint32 scale = 2;     // e.g., 2
    }

    message ArrayType {
      FieldType element_type = 1;
    }

    message MapType {
      FieldType key_type = 1;    // typically STRING or INT
      FieldType value_type = 2;
    }

    message StructType {
      repeated SchemaDescriptor.Field fields = 1;
    }

    message JsonType {}       // arbitrary JSON
    message BytesType {}      // raw bytes
    message DateType {}       // logical date
    message TimestampType {}  // logical timestamp
  }

  reserved 100 to 149;
}

// Data quality profile and expectations.
message QualityProfile {
  repeated Expectation expectations = 1;
  Sampling sampling = 2;
  string schedule_cron = 3;
  Alerting alerting = 4;

  message Sampling {
    enum Mode {
      MODE_UNSPECIFIED = 0;
      MODE_FULL = 1;
      MODE_PERCENT = 2;
      MODE_ROWS = 3;
    }
    Mode mode = 1;
    double value = 2; // percent [0..1] or rows count depending on mode
  }

  message Alerting {
    string channel = 1;            // e.g., "pagerduty", "slack"
    string severity_threshold = 2; // "warn", "error"
  }

  message Expectation {
    string name = 1;
    Severity severity = 2;
    Type type = 3;

    oneof config {
      NotNull not_null = 10;
      Unique unique = 11;
      RegexMatch regex_match = 12;
      MaxAge max_age = 13;
      MinValue min_value = 14;
      SetMembership set_membership = 15;
    }

    enum Severity {
      SEVERITY_UNSPECIFIED = 0;
      SEVERITY_WARN = 1;
      SEVERITY_ERROR = 2;
    }

    enum Type {
      TYPE_UNSPECIFIED = 0;
      TYPE_NOT_NULL = 1;
      TYPE_UNIQUE = 2;
      TYPE_REGEX_MATCH = 3;
      TYPE_MAX_AGE = 4;
      TYPE_MIN_VALUE = 5;
      TYPE_SET_MEMBERSHIP = 6;
    }

    message NotNull {
      repeated string columns = 1;
    }
    message Unique {
      repeated string columns = 1;
    }
    message RegexMatch {
      string column = 1;
      string pattern = 2;
    }
    message MaxAge {
      string column = 1;
      google.protobuf.Duration threshold = 2; // e.g., "86400s"
    }
    message MinValue {
      string column = 1;
      double min = 2;
    }
    message SetMembership {
      string column = 1;
      repeated string allowed = 2;
    }
  }

  reserved 100 to 149;
}

// Indexing configuration (e.g., OpenSearch).
message Indexing {
  bool enabled = 1;
  string engine = 2;       // "opensearch", "elasticsearch", etc.
  string index_name = 3;
  repeated IndexField fields = 4;
  string refresh_interval = 5; // e.g., "60s"

  message IndexField {
    string name = 1;
    string type = 2;       // "keyword", "text", "numeric", etc.
  }

  reserved 100 to 149;
}

// Service-level commitments.
message SLAProfile {
  uint32 freshness_seconds = 1;     // acceptable freshness lag
  double completeness_threshold = 2; // e.g., 0.99
  double availability_slo = 3;      // e.g., 0.995
  string owner_oncall = 4;          // on-call handle

  reserved 100 to 149;
}

// Lineage information.
message Lineage {
  repeated Edge upstream = 1;
  repeated Edge downstream = 2;

  message Edge {
    string system = 1;     // source/target system
    string entity = 2;     // entity name (table/topic/dataset)
    EdgeType type = 3;     // batch/stream/warehouse/etc.
  }

  enum EdgeType {
    EDGE_TYPE_UNSPECIFIED = 0;
    EDGE_TYPE_BATCH = 1;
    EDGE_TYPE_STREAM = 2;
    EDGE_TYPE_WAREHOUSE = 3;
    EDGE_TYPE_TRAINING = 4;
  }

  reserved 100 to 149;
}

// Observability hints for pipelines/emitters.
message Observability {
  bool emit_metrics = 1;
  string metric_namespace = 2;
  map<string, string> span_attributes = 3;

  reserved 100 to 149;
}

// ==============================
// Registry service API
// ==============================

service RegistryService {
  // Fetch a dataset by id.
  rpc GetDataset(GetDatasetRequest) returns (Dataset);

  // List datasets with optional filtering by domain/label.
  rpc ListDatasets(ListDatasetsRequest) returns (ListDatasetsResponse);

  // Create or update a dataset (idempotent on id+version).
  rpc UpsertDataset(UpsertDatasetRequest) returns (Dataset);

  // Soft-delete (deprecate) a dataset.
  rpc DeleteDataset(DeleteDatasetRequest) returns (DeleteDatasetResponse);

  // Validate a record against dataset schema and quality expectations (best-effort).
  rpc ValidateRecord(ValidateRecordRequest) returns (ValidateRecordResponse);
}

message GetDatasetRequest {
  string id = 1;
}

message ListDatasetsRequest {
  // optional filters
  string domain = 1;
  map<string, string> label_selector = 2; // match labels (AND)
  uint32 page_size = 3;
  string page_token = 4;
}

message ListDatasetsResponse {
  repeated Dataset items = 1;
  string next_page_token = 2;
}

message UpsertDatasetRequest {
  Dataset dataset = 1;
}

message DeleteDatasetRequest {
  string id = 1;
  string reason = 2;
}

message DeleteDatasetResponse {
  string id = 1;
  bool deprecated = 2;
  string deprecation_reason = 3;
  google.protobuf.Timestamp updated_at = 4;
}

// Validation of a single logical record against schema/expectations.
message ValidateRecordRequest {
  string dataset_id = 1;
  google.protobuf.Struct record = 2;
}

message ValidateRecordResponse {
  bool valid = 1;
  repeated QualityViolation violations = 2;

  message QualityViolation {
    string expectation_name = 1;
    QualityProfile.Expectation.Severity severity = 2;
    string message = 3;
    string column = 4;
  }
}
