// File: neuroforge-core/schemas/proto/v1/neuroforge/metrics.proto
// Industrial telemetry schema for Neuroforge Core
// - Resource-oriented batches
// - Gauge, Sum (Counter), Histogram, Summary, ExponentialHistogram
// - Attributes, AggregationTemporality, Monotonic counters
// - Exemplars with trace/span correlation
// - UCUM-style units (e.g., "ms", "By", "1", "requests/s")
// - Export service with partial success reporting

syntax = "proto3";

package neuroforge.schemas.v1.neuroforge;

option optimize_for = SPEED;
option cc_enable_arenas = true;

option go_package = "github.com/your-org/neuroforge-core/schemas/gen/go/neuroforge/v1;neuroforgev1";
option java_multiple_files = true;
option java_package = "io.neuroforge.schemas.v1";
option java_outer_classname = "MetricsProto";
option csharp_namespace = "Neuroforge.Schemas.V1";
option php_namespace = "Neuroforge\\Schemas\\V1";
option ruby_package = "Neuroforge::Schemas::V1";
option objc_class_prefix = "NFM";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

// ---------------------------------------------------------------------------
// Core envelope types
// ---------------------------------------------------------------------------

// Export request groups metrics by Resource and InstrumentationScope.
// A single Export call can carry many resource-scoped batches.
message ExportMetricsServiceRequest {
  repeated ResourceMetrics resource_metrics = 1;
}

// Export response with partial success accounting (idempotent exporters
// SHOULD retry only rejected data points).
message ExportMetricsServiceResponse {
  PartialSuccess partial_success = 1;
}

message PartialSuccess {
  // Number of datapoints that the backend rejected (validation, quota, etc.)
  uint64 rejected_datapoints = 1;
  // Free-form error summary suitable for logs. Empty if fully successful.
  string error_message = 2;
}

// Resource-scoped batch of metrics.
message ResourceMetrics {
  Resource resource = 1;
  InstrumentationScope scope = 2;
  // URL of the schema used by scope attributes (optional).
  string scope_schema_url = 3;
  repeated Metric metrics = 4;
  // Optional URL of the schema used by resource attributes.
  string resource_schema_url = 5;
}

// Attributes attached to a process, host, service, etc.
message Resource {
  repeated KeyValue attributes = 1;
}

// Describes the producing library/instrumentation (name+version+attrs).
message InstrumentationScope {
  string name = 1;
  string version = 2;
  repeated KeyValue attributes = 3;
  string schema_url = 4;
}

// ---------------------------------------------------------------------------
// Metric model
// ---------------------------------------------------------------------------

enum MetricType {
  METRIC_TYPE_UNSPECIFIED = 0;
  METRIC_TYPE_GAUGE = 1;
  METRIC_TYPE_SUM = 2;               // counters and sums
  METRIC_TYPE_HISTOGRAM = 3;
  METRIC_TYPE_SUMMARY = 4;
  METRIC_TYPE_EXPONENTIAL_HISTOGRAM = 5;
}

enum AggregationTemporality {
  AGG_TEMPORALITY_UNSPECIFIED = 0;
  AGG_TEMPORALITY_DELTA = 1;         // values represent changes since start_time
  AGG_TEMPORALITY_CUMULATIVE = 2;    // values represent cumulative progress since reset
}

// Metric is a named timeseries with unit and one of supported data payloads.
message Metric {
  string name = 1;                   // e.g., "http.server.duration"
  string description = 2;            // human-readable help
  string unit = 3;                   // UCUM-like units: "ms", "By", "1", "requests/s"
  MetricType type = 4;

  oneof data {
    Gauge gauge = 10;
    Sum sum = 11;
    Histogram histogram = 12;
    Summary summary = 13;
    ExponentialHistogram exponential_histogram = 14;
  }
}

// ---------------------------------------------------------------------------
// Data points: numbers
// ---------------------------------------------------------------------------

message Gauge {
  repeated NumberDataPoint data_points = 1;
}

message Sum {
  repeated NumberDataPoint data_points = 1;
  bool monotonic = 2;                       // true for Counters
  AggregationTemporality temporality = 3;   // DELTA or CUMULATIVE
}

message NumberDataPoint {
  // Attributes associated with the datapoint (labels, dimensions).
  repeated KeyValue attributes = 1;

  // Observation time (wall clock).
  google.protobuf.Timestamp time = 2;

  // Start of the aggregation period for DELTA/CUMULATIVE temporality.
  google.protobuf.Timestamp start_time = 3;

  oneof value {
    double as_double = 4;
    sfixed64 as_int = 5;
  }

  // Exemplars provide sample measurements for diagnosing distributions,
  // with optional trace/span correlation.
  repeated Exemplar exemplars = 6;

  // Implementation-specific flags (bitset).
  uint32 flags = 7;

  reserved 8, 9; // for future extensions
}

// ---------------------------------------------------------------------------
// Distributions
// ---------------------------------------------------------------------------

message Histogram {
  repeated HistogramDataPoint data_points = 1;
  AggregationTemporality temporality = 2;
}

message HistogramDataPoint {
  repeated KeyValue attributes = 1;
  google.protobuf.Timestamp time = 2;
  google.protobuf.Timestamp start_time = 3;

  // Total number of measurements in this aggregation window.
  uint64 count = 4;

  // Sum of measurements (NaN if undefined).
  double sum = 5;

  // Inclusive lower bound is previous explicit_bounds entry; upper bound is explicit_bounds[i].
  // bucket_counts[i] is the count for the bucket (len == len(explicit_bounds) + 1).
  repeated uint64 bucket_counts = 6;
  repeated double explicit_bounds = 7;

  // Optional min/max over the window (NaN if unknown).
  double min = 8;
  double max = 9;

  repeated Exemplar exemplars = 10;
  uint32 flags = 11;

  reserved 12; // future: scale-histogram conversion hints
}

message ExponentialHistogram {
  repeated ExponentialHistogramDataPoint data_points = 1;
  AggregationTemporality temporality = 2;
}

message ExponentialHistogramDataPoint {
  repeated KeyValue attributes = 1;
  google.protobuf.Timestamp time = 2;
  google.protobuf.Timestamp start_time = 3;

  // Total count and sum of samples
  uint64 count = 4;
  double sum = 5;

  // Exponential mapping scale (>= 0). Larger scales have finer resolution.
  sint32 scale = 6;

  // Zero-bucket count (exact zeros).
  uint64 zero_count = 7;

  // Positive and negative buckets.
  Buckets positive = 8;
  Buckets negative = 9;

  // Optional min/max over the window (NaN if unknown).
  double min = 10;
  double max = 11;

  repeated Exemplar exemplars = 12;
  uint32 flags = 13;

  message Buckets {
    // Index of the first bucket (can be negative).
    sint32 offset = 1;
    // Counts for consecutive buckets starting at 'offset'.
    repeated uint64 bucket_counts = 2;
  }
}

message Summary {
  repeated SummaryDataPoint data_points = 1;
}

message SummaryDataPoint {
  repeated KeyValue attributes = 1;
  google.protobuf.Timestamp time = 2;
  google.protobuf.Timestamp start_time = 3;

  uint64 count = 4;         // number of measurements
  double sum = 5;           // sum of measurements
  repeated ValueAtQuantile quantile_values = 6; // e.g. p50, p90, p95, p99

  uint32 flags = 7;
}

message ValueAtQuantile {
  // Quantile in [0,1], e.g., 0.95 for p95.
  double quantile = 1;
  // Value observed at the given quantile.
  double value = 2;
}

// ---------------------------------------------------------------------------
// Exemplars & attributes
// ---------------------------------------------------------------------------

message Exemplar {
  oneof value {
    double as_double = 1;
    sfixed64 as_int = 2;
  }
  google.protobuf.Timestamp time = 3;

  // Subset of attributes relevant to the exemplar.
  repeated KeyValue filtered_attributes = 4;

  // Optional trace/span correlation. 16-byte trace_id, 8-byte span_id.
  bytes trace_id = 5;
  bytes span_id = 6;
}

// Key/value attribute (label) with rich value types.
message KeyValue {
  string key = 1;
  AttributeValue value = 2;
}

// Union of supported attribute value types.
message AttributeValue {
  oneof value {
    string string_value = 1;
    bool bool_value = 2;
    sfixed64 int_value = 3;
    double double_value = 4;
    bytes bytes_value = 5;
    ArrayValue array_value = 6;
  }
}

message ArrayValue {
  repeated AttributeValue values = 1;
}

// ---------------------------------------------------------------------------
// Service definition (optional wire protocol)
// ---------------------------------------------------------------------------

service MetricsService {
  // Export sends one or more ResourceMetrics batches.
  rpc Export (ExportMetricsServiceRequest) returns (ExportMetricsServiceResponse);
}
