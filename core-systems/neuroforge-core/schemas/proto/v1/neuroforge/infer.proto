// neuroforge-core/schemas/proto/v1/neuroforge/infer.proto
//
// Промышленный контракт для gRPC-инференса в Neuroforge Core.
// Стандарты:
// - Семантическая версионизация API (v1).
// - Явное указание полей, oneof для расширяемости.
// - Метаданные для трассировки, аудита и контроля ресурсов.
// - Универсальность: текстовые, мультимодальные, табличные данные.
// - Строгая типизация и возврат ошибок через Status.

syntax = "proto3";

package neuroforge.v1.infer;

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

// -------------------------------
// Сервис
// -------------------------------
service InferenceService {
  // Одноразовый запрос инференса (синхронный).
  rpc Infer(InferRequest) returns (InferResponse);

  // Пакетный инференс (несколько запросов в одном вызове).
  rpc BatchInfer(BatchInferRequest) returns (BatchInferResponse);

  // Потоковый инференс (стриминг ответов для больших моделей).
  rpc StreamInfer(InferRequest) returns (stream InferStreamResponse);
}

// -------------------------------
// Общие структуры
// -------------------------------

// Универсальные входные данные для инференса.
message Input {
  string id = 1; // Идентификатор элемента (например, uuid).
  oneof payload {
    string text = 2;                         // Текстовый ввод.
    bytes image_bytes = 3;                   // Сырые байты изображения.
    google.protobuf.Struct json = 4;         // JSON-структура.
    repeated float tensor = 5;               // Тензор (плоский массив).
  }
  map<string, string> metadata = 10;          // Произвольные метаданные (lang, encoding...).
}

// Универсальные выходные данные.
message Output {
  string id = 1; // Соответствует Input.id
  oneof result {
    string text = 2;
    bytes image_bytes = 3;
    google.protobuf.Struct json = 4;
    repeated float tensor = 5;
  }
  map<string, string> metadata = 10;
}

// -------------------------------
// Запросы и ответы
// -------------------------------

message InferRequest {
  Input input = 1;                        // Данные для инференса.
  InferOptions options = 2;               // Настройки инференса.
  RequestContext context = 3;             // Контекст запроса.
}

message InferResponse {
  Output output = 1;
  Status status = 2;
  ResponseContext context = 3;
}

message BatchInferRequest {
  repeated Input inputs = 1;
  InferOptions options = 2;
  RequestContext context = 3;
}

message BatchInferResponse {
  repeated Output outputs = 1;
  Status status = 2;
  ResponseContext context = 3;
}

message InferStreamResponse {
  Output partial_output = 1; // Частичный результат (например, токен).
  bool completed = 2;        // Флаг окончания.
  Status status = 3;
  ResponseContext context = 4;
}

// -------------------------------
// Контексты и опции
// -------------------------------

message InferOptions {
  int32 max_tokens = 1;                 // Лимит токенов / символов.
  float temperature = 2;                // Стохастичность.
  float top_p = 3;                      // Nucleus sampling.
  int32 top_k = 4;                      // Top-k.
  int32 beam_width = 5;                 // Beam search width.
  int32 timeout_ms = 6;                 // Таймаут запроса.
  map<string, string> extra = 10;       // Расширяемые опции.
}

message RequestContext {
  string request_id = 1;                 // Для трассировки.
  string user_id = 2;                    // Аудит: ID пользователя.
  string session_id = 3;                 // Сессия клиента.
  string tenant_id = 4;                  // Мультиарендность.
  google.protobuf.Timestamp timestamp = 5; // Время запроса.
  map<string, string> tags = 10;         // Доп. теги (env, region...).
}

message ResponseContext {
  google.protobuf.Timestamp timestamp = 1; // Время ответа.
  int64 latency_ms = 2;                     // Латентность.
  map<string, string> tags = 3;             // Метаданные.
}

// -------------------------------
// Статус / ошибки
// -------------------------------
message Status {
  int32 code = 1;                    // 0 = OK, иные = ошибка.
  string message = 2;                // Человеческое описание.
  map<string, string> details = 3;   // Технические детали.
}
