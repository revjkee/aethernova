// zero-trust-core/schemas/proto/v1/zero_trust/risk.proto
syntax = "proto3";

package zerotrust.v1.zero_trust;

option go_package = "github.com/aethernova/zero-trust-core/gen/proto/zerotrust/v1/zero_trust;zerotrustv1";
option java_multiple_files = true;
option java_package = "com.aethernova.zerotrust.v1.zero_trust";
option java_outer_classname = "RiskProto";
option csharp_namespace = "Aethernova.ZeroTrust.V1.ZeroTrust";
option php_namespace = "Aethernova\\ZeroTrust\\V1\\ZeroTrust";
option objc_class_prefix = "ZTC";
option ruby_package = "Aethernova::ZeroTrust::V1::ZeroTrust";
option cc_enable_arenas = true;
option optimize_for = SPEED;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

// ============================================================================
// Enums (стабильные коды, не удалять/не переиспользовать номера)
// ============================================================================

enum RiskLevel {
  RISK_LEVEL_UNSPECIFIED = 0;
  RISK_LEVEL_LOW = 1;
  RISK_LEVEL_MEDIUM = 2;
  RISK_LEVEL_HIGH = 3;
  RISK_LEVEL_CRITICAL = 4;
}

enum DecisionAction {
  DECISION_ACTION_UNSPECIFIED = 0;
  DECISION_ACTION_ALLOW = 1;
  DECISION_ACTION_STEP_UP = 2; // требуется MFA/доп.проверка
  DECISION_ACTION_DENY = 3;
}

enum MfaLevel {
  MFA_LEVEL_UNSPECIFIED = 0;
  MFA_LEVEL_NONE = 1;
  MFA_LEVEL_LOW = 2;
  MFA_LEVEL_MEDIUM = 3;
  MFA_LEVEL_HIGH = 4; // фишинг-устойчивые факторы
}

enum MfaMethod {
  MFA_METHOD_UNSPECIFIED = 0;
  MFA_METHOD_WEBAUTHN_PLATFORM = 1;
  MFA_METHOD_WEBAUTHN_ROAMING = 2;
  MFA_METHOD_TOTP = 3;
  MFA_METHOD_OATH_HOTP = 4;
  MFA_METHOD_PUSH = 5;
  MFA_METHOD_SMS = 6; // обычно запрещён политикой, оставлен для обратной совместимости
}

enum ReasonCode {
  REASON_CODE_UNSPECIFIED = 0;

  // Риск-факторы
  REASON_NEW_DEVICE = 1;
  REASON_ANON_NETWORK = 2;
  REASON_IP_REP_LOW = 3;
  REASON_IMPOSSIBLE_TRAVEL = 4;
  REASON_VELOCITY = 5;
  REASON_PREV_FAILS = 6;
  REASON_BYOD = 7;
  REASON_POSTURE_LOW = 8;
  REASON_POSTURE_MID = 9;
  REASON_USER_RISK = 10;
  REASON_BONUS_MTLS_STRONG = 11;

  // Жёсткие запреты
  REASON_POSTURE_HARD_FAIL = 20;
  REASON_BANNED_COUNTRY = 21;
  REASON_ASN_DENY = 22;
  REASON_IP_DENY = 23;
  REASON_IP_REP_BLACK = 24;
  REASON_RISK_EXTREME = 25;

  // Политические требования/несоответствия
  REASON_MTLS_REQUIRED_FOR_RESOURCE = 40;
  REASON_NO_COMPATIBLE_MFA = 41;
}

enum Source {
  SOURCE_UNSPECIFIED = 0;
  SOURCE_LOCAL = 1;        // локальный агент/браузерный сигнал
  SOURCE_MDM = 2;
  SOURCE_EDR = 3;
  SOURCE_PKI = 4;
  SOURCE_ATTESTATION = 5;  // TPM / Android / Apple attestation
  SOURCE_IDP = 6;          // IdP risk/AM
  SOURCE_BEHAVIOR = 7;     // UEBA/поведенческие модели
  SOURCE_NETWORK = 8;      // IP/ASN/репутация
}

// ============================================================================
// Core messages
// ============================================================================

message EvaluationRequest {
  // Временная отметка, подставляйте сервера принявшего запрос.
  google.protobuf.Timestamp now = 1;

  UserContext user = 10;
  ResourceContext resource = 11;
  SessionContext session = 12;
  NetworkContext network = 13;
  DeviceContext device = 14;

  // Версия и идентификатор политики/бандла Rego/Engine.
  PolicyVersion policy = 20;

  // Кросс-корреляция/аудит.
  string request_id = 30;
  string tenant = 31;
  map<string, string> attributes = 32; // расширяемые атрибуты
}

message EvaluationResponse {
  Decision decision = 1;
  RiskAssessment risk = 2;

  // Для аудита/поиска — отражаем часть входного контекста.
  string request_id = 10;
  string policy_id = 11;
  string policy_hash = 12;
  google.protobuf.Timestamp computed_at = 13;

  // Корреляция (например, OpenTelemetry).
  string trace_id = 20;
  string span_id = 21;

  // Опциональная криптографическая подпись решения (Detached JWS/COSE/Protobuf-signing).
  bytes signature = 30;

  map<string, string> debug = 40; // безопасные для логов диагностические поля

  // Резерв под будущее
  reserved 50 to 59;
}

message Decision {
  DecisionAction action = 1;
  // TTL рекомендации (сколько можно кэшировать исход).
  google.protobuf.Duration ttl = 2;

  // MFA-требование для action=STEP_UP или DENY (DENY может включать совет по методам).
  MfaRequirement mfa = 10;

  // Итоговый уровень риска для UX/логов.
  RiskLevel level = 20;

  // Причины отказа/усиления (коды).
  repeated ReasonCode reasons = 30;

  // Человеко-читаемое резюме (локализация на стороне потребителя).
  string summary = 40;

  // Расширения
  map<string, string> attributes = 50;
}

message MfaRequirement {
  bool required = 1;
  MfaLevel level = 2;
  repeated MfaMethod methods = 3; // допустимые и предпочтительные (в порядке приоритета)
  repeated string reasons_text = 4; // дополнительные пояснения для UX (не логики)
}

message RiskAssessment {
  // Нормализованный скор 0..100.
  uint32 score = 1;

  // Список факторов с весами/источниками.
  repeated Evidence evidences = 2;

  // Итоговая категоризация.
  RiskLevel level = 3;
}

message Evidence {
  ReasonCode code = 1;
  int32 weight = 2; // положительное — повышает риск, отрицательное — снижает
  Source source = 3;
  string detail = 4; // человеко-читаемое пояснение/значение сигнала
  map<string, string> attributes = 5; // сырые значения/метаданные
}

// ============================================================================
// Contexts
// ============================================================================

message UserContext {
  string id = 1;
  repeated string groups = 2;
  repeated string roles = 3;

  // Встроенный риск IdP/UEBA.
  RiskLevel risk_level = 10;
  uint32 risk_score = 11; // 0..100

  // Домен/организация/арендатор.
  string tenant = 20;

  map<string, string> attributes = 30;
}

message ResourceContext {
  string id = 1;
  // "low" | "medium" | "high" — в виде enum для однозначности.
  enum Sensitivity {
    SENSITIVITY_UNSPECIFIED = 0;
    SENSITIVITY_LOW = 1;
    SENSITIVITY_MEDIUM = 2;
    SENSITIVITY_HIGH = 3;
  }
  Sensitivity sensitivity = 2;

  // Доп.мерки чувствительности: теги/сферы (например, prod/payments).
  repeated string scope = 3;

  map<string, string> attributes = 20;
}

message SessionContext {
  uint32 previous_failures = 1;
  uint32 logins_last_hour = 2;

  // Последняя успешная MFA (epoch seconds).
  int64 last_mfa_epoch_seconds = 3;

  // Привязки сессии.
  bool cookie_bound = 10;
  bool client_cert_bound = 11;

  map<string, string> attributes = 20;
}

message NetworkContext {
  string ip = 1;        // IPv4/IPv6 textual
  string country = 2;   // ISO 3166-1 alpha-2
  uint32 asn = 3;

  message Reputation {
    // 0..100 (0 — худшая).
    uint32 score = 1;
    bool denylist = 2;
  }
  Reputation reputation = 10;

  message Anonymity {
    bool tor = 1;
    bool vpn = 2;
    bool proxy = 3;
  }
  Anonymity anonymous = 11;

  map<string, string> attributes = 20;
}

message DeviceContext {
  enum Ownership {
    OWNERSHIP_UNSPECIFIED = 0;
    OWNERSHIP_CORPORATE = 1;
    OWNERSHIP_BYOD = 2;
  }
  enum Platform {
    PLATFORM_UNSPECIFIED = 0;
    PLATFORM_WINDOWS = 1;
    PLATFORM_MACOS = 2;
    PLATFORM_LINUX = 3;
    PLATFORM_IOS = 4;
    PLATFORM_ANDROID = 5;
  }

  Ownership ownership = 1;
  Platform platform = 2;

  message Posture {
    bool hard_fail = 1;   // нарушение жёсткого контроля
    uint32 score = 2;     // 0..100
  }
  Posture posture = 10;

  message MTLS {
    bool present = 1;
    bool eku_client_auth = 2;
    string subject = 3;
    string issuer = 4;
    // Отпечаток/привязка токена (например, x5t#S256).
    string thumbprint = 5;
  }
  MTLS mtls = 11;

  // Возраст устройства (дней) с момента первого появления в организации/MDM.
  uint32 first_seen_age_days = 20;

  message MfaCapabilities {
    repeated MfaMethod methods = 1;
  }
  MfaCapabilities mfa = 30;

  map<string, string> attributes = 40;
}

// ============================================================================
// Policy/Versioning
// ============================================================================

message PolicyVersion {
  string id = 1;               // человеко-читаемый идентификатор/канал (e.g. "rbmfa-prod")
  string hash = 2;             // стабильный хэш содержимого (e.g. sha256 hex)
  google.protobuf.Timestamp loaded_at = 3;
  string engine = 4;           // "opa", "cedar", "custom", etc.
  string engine_version = 5;   // версия рантайма оценивания
  map<string, string> attributes = 10;
}

// ============================================================================
// Запрос/Ответ сервисного API (gRPC-friendly)
// ============================================================================

service RiskEngine {
  // Выполнить оценку риска и принять решение по MFA/доступу.
  rpc Evaluate(EvaluationRequest) returns (EvaluationResponse);
}

// ============================================================================
// Reserved ranges (на будущее — не переиспользовать)
// ============================================================================

// В целях бинарной совместимости: оставляем задел под расширение корневых сообщений.
// (Поля помечены в самих сообщениях секцией reserved или через map attributes.)
