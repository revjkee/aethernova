// zero-trust-core/schemas/proto/v1/zero_trust/posture.proto
syntax = "proto3";

package aethernova.zerotrust.v1;

option go_package          = "github.com/aethernova/zero-trust-core/gen/zerotrust/v1;zerotrustv1";
option java_multiple_files = true;
option java_package        = "com.aethernova.zerotrust.v1";
option csharp_namespace    = "Aethernova.ZeroTrust.V1";
option php_namespace       = "Aethernova\\ZeroTrust\\V1";
option ruby_package        = "Aethernova::ZeroTrust::V1";
option objc_class_prefix   = "ANZT";
option optimize_for        = SPEED;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";

// ============================================================================
// Верхнеуровневый агрегированный отчёт о позе устройства
// ============================================================================

message DevicePosture {
  // Уникальный идентификатор оценки (UUID/ULID).
  string posture_id = 1;

  // Инвариантные и динамические сведения об устройстве.
  Device device = 2;

  // Крипто-аттестации и другие доказательства от провайдеров.
  repeated Attestation attestations = 3;

  // Нормализованные сигналы риска (0..1), например, geovelocity, posture score.
  repeated RiskSignal risk_signals = 4;

  // Итоговый статус комплаенса и разбор по контролям.
  ComplianceSummary compliance = 5;

  // Уровень доверия агрегатора к данному устройству.
  TrustLevel trust_level = 6;

  // Нарушения (матч на обязательные контролы политики).
  repeated Violation violations = 7;

  // Рекомендуемые обязательные действия (step-up для устройства).
  repeated RemediationAction required_actions = 8;

  // Контекст версии политики/тенанта/окружения, по которой вычислялось решение.
  PolicyContext policy_context = 9;

  // Момент вычисления и срок годности оценки (кеш-TTL).
  google.protobuf.Timestamp evaluated_at = 10;
  google.protobuf.Duration   ttl         = 11;

  // Исходные отчёты провайдеров (до нормализации), для аудита/трассировки.
  repeated ProviderReport provider_reports = 12;

  // Цифровая подпись агрегированного отчёта (best-effort).
  Signature envelope = 13;

  // Произвольные метки/аннотации для маршрутизации и отбора.
  map<string, string> labels      = 14;
  map<string, string> annotations = 15;

  // Зарезервировано на будущее, чтобы не ломать нумерацию.
  reserved 100 to 119;
}

// ============================================================================
// Сущности и справочники
// ============================================================================

message Device {
  string device_id         = 1;  // устойчивый идентификатор в вашем домене
  string external_id       = 2;  // идентификатор в MDM/IdP/провайдере
  string user_id           = 3;  // текущий владелец/пользователь (если известен)
  Ownership ownership      = 4;  // корпоративное/личное
  Platform platform        = 5;  // ОС/платформа
  OSInfo os                = 6;  // сведения об ОС
  HardwareInfo hw          = 7;  // сведения о железе
  SecurityModules security = 8;  // состояние защитных модулей
  NetworkIdentity network  = 9;  // сетевые признаки (опционально)
  Binding binding          = 10; // привязка к mTLS/SPIFFE/сертификату
  map<string, string> tags = 11; // дополнительные ярлыки активов (asset tags)

  reserved 100 to 109;
}

message OSInfo {
  string distro        = 1;  // "Windows", "macOS", "Ubuntu", "Android", "iOS", "ChromeOS"
  string version       = 2;  // "13.6.1", "22H2", "24.04"
  string build         = 3;  // сборка/patch level
  string kernel        = 4;  // версия ядра (для *nix)
  google.protobuf.Timestamp last_patch_time = 5;
}

message HardwareInfo {
  string manufacturer = 1;  // "Apple", "Dell", "Lenovo", ...
  string model        = 2;  // "MacBookPro18,3", "Latitude 7420", ...
  string cpu_arch     = 3;  // "x86_64", "arm64"
  uint64 memory_mb    = 4;
  uint64 disk_total_mb= 5;
  string serial       = 6;
}

message SecurityModules {
  DiskEncryptionState disk_encryption      = 1; // FileVault/BitLocker/LUKS
  SecureBootState     secure_boot          = 2;
  JailbreakRootState  jailbreak_or_root    = 3;
  FirewallState       firewall             = 4;
  ScreenLockState     screen_lock          = 5;
  MDMState            mdm_state            = 6;
  EDRState            edr_state            = 7;
  TPMState            tpm_state            = 8;
  BootVerificationState boot_verification  = 9; // verified boot/DM-Verity
  bool disk_encryption_recovery_key_escrowed = 10; // ключ на хранении в предприятии
  map<string, string> vendors             = 11; // {"mdm":"Intune","edr":"Defender","av":"CrowdStrike"}
}

message NetworkIdentity {
  // Отпечатки сети (best-effort): SSID/AS/тип канала. Не содержит PII.
  string asn           = 1;
  string network_type  = 2;  // "wired","wifi","cellular","vpn"
  string country       = 3;  // ISO-3166-1 alpha-2
  bool   corporate_vpn = 4;
}

message Binding {
  // Привязка к клиентскому сертификату / SPIFFE.
  bool   mtls_present       = 1;
  string cert_sha256        = 2; // hex/base64 отпечаток DER
  repeated string spiffe_ids= 3; // spiffe://trust-domain/workload/...
  // Захешированные идентификаторы для конфиденциального сопоставления.
  Digest device_principal_hash = 4;
}

message Attestation {
  string attestation_id = 1;          // идентификатор события провайдера
  ProviderMetadata provider = 2;      // источник/версия
  Evidence evidence = 3;              // конкр. формат доказательства (oneof)
  VerificationStatus status = 4;      // верификация доказательства
  string failure_reason = 5;          // если FAILED/PARTIAL
  google.protobuf.Timestamp collected_at = 6;
  google.protobuf.Timestamp verified_at  = 7;
  map<string, string> attributes = 8;  // нормал. признаки (например, nonce/deviceId)
}

message ProviderReport {
  ProviderMetadata provider = 1;
  google.protobuf.Struct raw = 2;     // «как есть» JSON от провайдера
  VerificationStatus status = 3;
  string failure_reason = 4;
  google.protobuf.Timestamp received_at = 5;
}

message ProviderMetadata {
  string name    = 1;   // "microsoft_defender","google_verified_access","apple_declarative_mgmt"
  string version = 2;   // версия клиента/SDK
  string tenant  = 3;   // арендатор в провайдере, если применимо
  string region  = 4;   // регион обработки
}

message RiskSignal {
  string name  = 1;     // "device_posture","geovelocity","impossible_travel","anomaly_login"
  double score = 2;     // [0..1]
  map<string, string> attributes = 3; // детали вычисления
  google.protobuf.Timestamp observed_at = 4;
}

message ComplianceSummary {
  bool compliant = 1;                     // общий итог
  repeated ControlCheck checks = 2;       // детальные проверки
  double pass_ratio = 3;                  // от 0 до 1
}

message ControlCheck {
  string id          = 1;   // стабильный ID контроля (e.g. "C-OS-PATCH-LEVEL")
  string title       = 2;   // человекочитаемое имя
  Status status      = 3;   // PASS/WARN/FAIL/NA
  Severity severity  = 4;   // воздействие риска при FAIL
  string rationale   = 5;   // почему требуется
  string control_ref = 6;   // ссылка на внутренний каталог/стандарт
  string remediation = 7;   // краткая инструкция
}

message Violation {
  string requirement_id = 1; // ID обязательного требования политики
  string check_id       = 2; // если связано с конкретным ControlCheck
  Severity severity     = 3;
  string message        = 4;
}

message RemediationAction {
  string id       = 1;             // "enable_filevault","enroll_mdm","update_os"
  string title    = 2;             // краткое имя
  string hint     = 3;             // краткая подсказка пользователю
  Severity severity = 4;           // приоритет
  repeated string steps = 5;       // пошаговые действия (UI/админ)
}

message PolicyContext {
  string tenant        = 1; // "aethernova"
  string environment   = 2; // "dev"|"stage"|"prod"
  string policy_name   = 3; // "zero-trust-access"
  string policy_version= 4; // "1.0.0"
}

// Подпись и дайджест для обеспечения целостности агрегированного отчёта.
message Signature {
  SigAlgorithm algorithm = 1;
  bytes        signature = 2;  // подпись сериализованного канонического представления
  bytes        public_key= 3;  // опционально — открытый ключ
  string       key_id    = 4;  // идентификатор ключа
  Digest       input_digest = 5;
}

message Digest {
  HashAlgorithm algorithm = 1;
  bytes value = 2; // байты хеша (SHA-256/384/512)
}

// ============================================================================
// Evidence (oneof): форматы крипто-аттестаций разных платформ
// ============================================================================

message Evidence {
  oneof kind {
    WindowsAttestation     windows_attestation      = 1;
    AppleDeviceCheck       apple_device_check       = 2;
    AndroidPlayIntegrity   android_play_integrity   = 3;
    ChromeVerifiedAccess   chrome_verified_access   = 4;
    CustomEvidence         custom                   = 100; // расширение
  }
}

message WindowsAttestation {
  bytes tpm_quote     = 1;  // цитата TPM (AIK)
  bytes aik_cert      = 2;  // сертификат AIK
  bytes event_log     = 3;  // PCR event log (опционально)
  string os_build     = 4;
  bool secure_boot    = 5;
  bool bitlocker_on   = 6;
}

message AppleDeviceCheck {
  // Обобщённая форма: токен DeviceCheck / декларативная аттестация.
  bytes  token              = 1;
  string team_id            = 2;
  string bundle_id          = 3;
  bool   notarized_binary   = 4;
  bool   filevault_enabled  = 5;
}

message AndroidPlayIntegrity {
  bytes jws_result = 1; // JWS от Play Integrity
  bool  basic_integrity = 2;
  bool  device_integrity= 3;
  bool  strong_integrity= 4;
  string cts_profile_match = 5;
}

message ChromeVerifiedAccess {
  bytes va_challenge_response = 1; // Enterprise Verified Access
  string machine_enrollment_id = 2;
  bool   verified_mode         = 3;
}

message CustomEvidence {
  // Для новых источников. Хранится "как есть".
  google.protobuf.Struct value = 1;
}

// ============================================================================
// Перечисления
// ============================================================================

enum Ownership {
  OWNERSHIP_UNSPECIFIED = 0;
  OWNERSHIP_CORPORATE   = 1;
  OWNERSHIP_BYOD        = 2;
}

enum Platform {
  PLATFORM_UNSPECIFIED = 0;
  PLATFORM_WINDOWS     = 1;
  PLATFORM_MACOS       = 2;
  PLATFORM_LINUX       = 3;
  PLATFORM_IOS         = 4;
  PLATFORM_ANDROID     = 5;
  PLATFORM_CHROMEOS    = 6;
}

enum DiskEncryptionState {
  DISK_ENCRYPTION_UNSPECIFIED = 0;
  DISK_ENCRYPTION_OFF         = 1;
  DISK_ENCRYPTION_ON          = 2;
  DISK_ENCRYPTION_PARTIAL     = 3; // не все тома
}

enum SecureBootState {
  SECURE_BOOT_UNSPECIFIED = 0;
  SECURE_BOOT_OFF         = 1;
  SECURE_BOOT_ON          = 2;
}

enum JailbreakRootState {
  JR_UNSPECIFIED = 0;
  JR_NOT_DETECTED= 1;
  JR_SUSPECTED   = 2;
  JR_CONFIRMED   = 3;
}

enum MDMState {
  MDM_UNSPECIFIED = 0;
  MDM_NOT_ENROLLED= 1;
  MDM_ENROLLED    = 2;
  MDM_ENFORCING   = 3; // активные профили политик применяются
}

enum EDRState {
  EDR_UNSPECIFIED  = 0;
  EDR_NOT_PRESENT  = 1;
  EDR_PRESENT      = 2;
  EDR_ACTIVE       = 3; // драйвер/защита включены
}

enum FirewallState {
  FW_UNSPECIFIED = 0;
  FW_OFF         = 1;
  FW_ON          = 2;
}

enum ScreenLockState {
  SL_UNSPECIFIED = 0;
  SL_OFF         = 1;
  SL_ON          = 2;
}

enum TPMState {
  TPM_UNSPECIFIED = 0;
  TPM_ABSENT      = 1;
  TPM_PRESENT     = 2;
  TPM_ACTIVE      = 3;
}

enum BootVerificationState {
  BV_UNSPECIFIED = 0;
  BV_DISABLED    = 1;
  BV_ENABLED     = 2; // verified boot/DM-Verity включены
}

enum VerificationStatus {
  VERIFICATION_UNSPECIFIED = 0;
  VERIFICATION_VERIFIED    = 1;
  VERIFICATION_PARTIAL     = 2;
  VERIFICATION_FAILED      = 3;
}

enum Status {
  STATUS_UNSPECIFIED = 0;
  STATUS_PASS        = 1;
  STATUS_WARN        = 2;
  STATUS_FAIL        = 3;
  STATUS_NA          = 4;
}

enum Severity {
  SEVERITY_UNSPECIFIED = 0;
  SEVERITY_LOW         = 1;
  SEVERITY_MEDIUM      = 2;
  SEVERITY_HIGH        = 3;
  SEVERITY_CRITICAL    = 4;
}

enum TrustLevel {
  TRUST_UNSPECIFIED = 0;
  TRUST_UNTRUSTED   = 1;
  TRUST_LOW         = 2;
  TRUST_MEDIUM      = 3;
  TRUST_HIGH        = 4;
}

enum SigAlgorithm {
  SIGALG_UNSPECIFIED      = 0;
  SIGALG_NONE             = 1;
  SIGALG_ED25519          = 2;
  SIGALG_ECDSA_P256_SHA256= 3;
  SIGALG_RSASSA_PSS_SHA256= 4;
}

enum HashAlgorithm {
  HASHALG_UNSPECIFIED = 0;
  HASHALG_SHA256      = 1;
  HASHALG_SHA384      = 2;
  HASHALG_SHA512      = 3;
}
