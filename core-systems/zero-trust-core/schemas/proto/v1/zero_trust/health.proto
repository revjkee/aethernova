syntax = "proto3";

package zero_trust.v1;

option optimize_for = SPEED;
option cc_enable_arenas = true;
option go_package = "github.com/yourorg/zero-trust-core/schemas/gen/go/zero_trust/v1;zerotrustv1";
option java_multiple_files = true;
option java_package = "com.yourorg.zerotrust.v1";
option csharp_namespace = "YourOrg.ZeroTrust.V1";
option php_namespace = "YourOrg\\ZeroTrust\\V1";
option ruby_package = "YourOrg::ZeroTrust::V1";
option objc_class_prefix = "ZTC";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

// ============================================================================
// Статусы и коды
// ============================================================================

enum ServingStatus {
  // Старайтесь маппить в grpc.health.v1.ServingStatus при необходимости.
  SERVING_STATUS_UNKNOWN = 0;
  SERVING = 1;
  NOT_SERVING = 2;
  DEGRADED = 3;     // Работает, но с частичной потерей функций/производительности.
  MAINTENANCE = 4;  // Преднамеренное обслуживание.
  STARTING = 5;     // Инициализация, прогрев кэшей/моделей.
  STOPPING = 6;     // Остановка.
}

enum CheckCode {
  CHECK_CODE_UNSPECIFIED = 0;
  OK = 1;
  WARN = 2;
  ERROR = 3;
  TIMEOUT = 4;
  UNAUTHORIZED = 5;
  FORBIDDEN = 6;
  DEPENDENCY_FAILURE = 7;
  CONFIG_MISMATCH = 8;
}

// Крупные компоненты Zero Trust.
enum ComponentKind {
  COMPONENT_KIND_UNSPECIFIED = 0;
  CORE_API = 1;
  AUTHN = 2;
  SESSIONS = 3;
  RISK_ENGINE = 4;
  POLICY_ENGINE = 5;
  POLICY_DISTRIBUTOR = 6;
  CRYPTO = 7;
  PKI = 8;
  TELEMETRY = 9;
  AUDIT = 10;
  STORAGE_DB = 11;
  CACHE = 12;
  QUEUE = 13;
  SIEM_SINK = 14;
  EXTERNAL_IDP = 15;
}

// ============================================================================
// Базовые структуры
// ============================================================================

message BuildInfo {
  string service_name = 1;
  string version = 2;                 // SemVer/commit.
  string build_commit = 3;
  string build_date_utc = 4;
  string go_version = 5;              // или runtime сведения.
  map<string, string> labels = 6;     // env, region, zone, instance_id и т.д.
}

message TransportSecurityStatus {
  bool tls_enabled = 1;
  string tls_version = 2;             // например "TLSv1.3"
  string cipher_suite = 3;
  bool mtls_required = 4;
  bool mtls_active = 5;
  string spiffe_trust_domain = 6;     // spiffe://corp.example
  string spiffe_id = 7;               // spiffe://.../sa/...
  string sni = 8;
  string peer_spki_sha256_b64 = 9;    // для пиннинга
  bool client_cert_valid = 10;
  google.protobuf.Timestamp client_cert_not_after = 11;
  // Резерв под будущее.
  reserved 12 to 15;
}

message AttestationStatus {
  bool required = 1;
  bool present = 2;
  enum Result {
    RESULT_UNSPECIFIED = 0;
    PASSED = 1;
    FAILED = 2;
    UNSUPPORTED = 3;
  }
  Result result = 3;
  string vendor = 4;                   // Intel TDX, AMD SEV, Apple, Android SafetyNet, и т.д.
  string evidence_format = 5;          // JWT/COSE/Quote
  string policy_digest_hex = 6;
  string last_error = 7;
}

message PolicyStatus {
  string bundle_id = 1;                // идентификатор набора политик
  string version = 2;                  // SemVer/commit
  string digest_sha256_hex = 3;        // целостность
  google.protobuf.Timestamp last_applied_at = 4;
  bool in_sync = 5;
  repeated string warnings = 6;
  repeated string violations = 7;      // явные противоречия/ошибки
}

message ModelStatus {
  string model_id = 1;
  string kind = 2;                     // anomaly/supervised/rules
  string version = 3;
  google.protobuf.Timestamp loaded_at = 4;
  string endpoint = 5;                 // если внешний рантайм
  repeated string labels = 6;
  string last_error = 7;
}

message RiskEngineStatus {
  uint32 queue_depth = 1;
  uint32 workers = 2;
  google.protobuf.Duration avg_latency = 3;
  uint64 decisions_per_min = 4;
  uint64 errors_per_min = 5;
  repeated ModelStatus models = 6;
  string thresholds = 7;               // сериализованные пороги (low/medium/high/critical)
  bool ip_velocity_enabled = 8;
  bool impossible_travel_enabled = 9;
  // Резерв
  reserved 10 to 19;
}

message ComponentStatus {
  string name = 1;                     // человекочитаемое имя
  ComponentKind kind = 2;
  ServingStatus status = 3;
  CheckCode code = 4;
  string message = 5;
  repeated string dependencies = 6;    // имена/uri зависимостей
  map<string, string> metrics = 7;     // ключевые метрики
  google.protobuf.Timestamp observed_at = 8;
  // Расширенные статусы подкомпонентов
  TransportSecurityStatus transport = 9;
  PolicyStatus policy = 10;
  RiskEngineStatus risk = 11;
  AttestationStatus attestation = 12;
  // Резерв для совместимости
  reserved 13 to 19;
}

message CheckResult {
  string check_id = 1;                 // уникальный id проверки
  string title = 2;
  CheckCode code = 3;
  string message = 4;
  google.protobuf.Duration ttl = 5;    // сколько результат валиден
  map<string, string> details = 6;     // произвольные пары
  google.protobuf.Timestamp observed_at = 7;
}

// ============================================================================
// Запросы/ответы Health API
// ============================================================================

message HealthCheckRequest {
  // Фильтры совместимы с типичным gRPC health: service -> имя компонента.
  string service = 1;                  // component/service name; пусто = общий статус
  string tenant_id = 2;                // контекст тенанта (для multi-tenant)
  map<string, string> labels = 3;      // произвольные метки запроса
  // Резерв
  reserved 4 to 9;
}

message HealthCheckResponse {
  ServingStatus status = 1;
  BuildInfo build = 2;
  repeated ComponentStatus components = 3;
  repeated CheckResult checks = 4;     // плоский список проверок
  google.protobuf.Timestamp server_time = 5;
  // Для совместимости с внешними health‑проксирующими системами можно передать агрегатный код.
  CheckCode aggregate_code = 6;
  // Резерв
  reserved 7 to 9;
}

message WatchRequest {
  string tenant_id = 1;
  // Если указан service — стримим изменения только по нему.
  string service = 2;
  // Минимальный интервал между событиями, чтобы не спамить.
  google.protobuf.Duration min_interval = 3;
  bool send_initial = 4;               // отправить текущий снимок сразу
  // Резерв
  reserved 5 to 9;
}

message ProbeRequest {
  // Диагностический запрос по конкретному компоненту/подкомпоненту.
  string component = 1;                // имя или enum в текстовом виде
  string tenant_id = 2;
  // Встроенные цели: "transport", "policy", "risk", "attestation", "storage", ...
  string target = 3;
  map<string, string> args = 4;        // параметры проб (например, host=..., sni=...)
}

message ProbeResponse {
  ServingStatus status = 1;
  CheckCode code = 2;
  string message = 3;
  repeated CheckResult checks = 4;
  map<string, string> echo_args = 5;   // для трассировки аргументов
  google.protobuf.Timestamp observed_at = 6;
}

message ListComponentsRequest {
  string tenant_id = 1;
  // Фильтрация по zone/label/kind
  map<string, string> filters = 2;
}

message ListComponentsResponse {
  repeated ComponentStatus components = 1;
  google.protobuf.Timestamp server_time = 2;
}

message PolicyDigestRequest {
  string tenant_id = 1;
  // Конкретный компонент политики (например, "segmentation", "risk")
  string policy_name = 2;
}

message PolicyDigestResponse {
  string bundle_id = 1;
  string version = 2;
  string digest_sha256_hex = 3;
  google.protobuf.Timestamp last_applied_at = 4;
  repeated string warnings = 5;
}

// ============================================================================
// Health Service
// ============================================================================

service ZeroTrustHealth {
  // Быстрый статус сервиса/компонента (агрегированный).
  rpc Check(HealthCheckRequest) returns (HealthCheckResponse);

  // Подписка на изменения статуса (server-side streaming).
  rpc Watch(WatchRequest) returns (stream HealthCheckResponse);

  // Детальная диагностическая проверка целевого подкомпонента.
  rpc Probe(ProbeRequest) returns (ProbeResponse);

  // Список компонентов с их текущим состоянием.
  rpc ListComponents(ListComponentsRequest) returns (ListComponentsResponse);

  // Возвращает дайджест активной политики (для кэш‑валидации и соответствия).
  rpc GetPolicyDigest(PolicyDigestRequest) returns (PolicyDigestResponse);
}
