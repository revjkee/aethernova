// zero-trust-core/schemas/proto/v1/zero_trust/device.proto
syntax = "proto3";

package zero_trust.v1;

// Codegen / language options (примерные значения; адаптируйте под ваш org)
option csharp_namespace = "ZeroTrust.V1";
option go_package = "github.com/example/zero-trust-core/gen/go/zerotrust/v1;zerotrustv1";
option java_multiple_files = true;
option java_package = "com.example.zerotrust.v1";
option objc_class_prefix = "ZTV1";
option php_namespace = "Example\\ZeroTrust\\V1";
option ruby_package = "Example::ZeroTrust::V1";

import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

// -----------------------------------------------------------------------------
// Enums
// -----------------------------------------------------------------------------

// Платформа устройства.
enum DevicePlatform {
  DEVICE_PLATFORM_UNSPECIFIED = 0;
  DEVICE_PLATFORM_IOS = 1;
  DEVICE_PLATFORM_ANDROID = 2;
  DEVICE_PLATFORM_MACOS = 3;
  DEVICE_PLATFORM_WINDOWS = 4;
  DEVICE_PLATFORM_LINUX = 5;
  DEVICE_PLATFORM_CHROME_OS = 6;
}

// Состояние соответствия требованиям.
enum ComplianceState {
  COMPLIANCE_STATE_UNSPECIFIED = 0;
  COMPLIANCE_STATE_COMPLIANT = 1;
  COMPLIANCE_STATE_NON_COMPLIANT = 2;
  COMPLIANCE_STATE_QUARANTINED = 3;
  COMPLIANCE_STATE_BLOCKED = 4;
}

// Доверительный уровень, рассчитанный движком Zero Trust.
enum TrustLevel {
  TRUST_LEVEL_UNSPECIFIED = 0;
  TRUST_LEVEL_LOW = 1;
  TRUST_LEVEL_MEDIUM = 2;
  TRUST_LEVEL_HIGH = 3;
  TRUST_LEVEL_CRITICAL = 4; // критический риск
}

// Тип источника/метода аттестации.
enum AttestationType {
  ATTESTATION_TYPE_UNSPECIFIED = 0;
  ATTESTATION_TYPE_APPLE_DEVICE_CHECK = 1;
  ATTESTATION_TYPE_APPLE_ATTESTATION = 2;
  ATTESTATION_TYPE_GOOGLE_SAFETYNET = 3;
  ATTESTATION_TYPE_ANDROID_PLAY_INTEGRITY = 4;
  ATTESTATION_TYPE_TPM_REMOTE_ATTESTATION = 5;
  ATTESTATION_TYPE_WINDOWS_HELLO = 6;
}

// Состояние зачисления в MDM/управление.
enum EnrollmentState {
  ENROLLMENT_STATE_UNSPECIFIED = 0;
  ENROLLMENT_STATE_ENROLLED = 1;
  ENROLLMENT_STATE_PENDING = 2;
  ENROLLMENT_STATE_DISENROLLED = 3;
}

// Алгоритм ключевого материала.
enum KeyAlgorithm {
  KEY_ALGORITHM_UNSPECIFIED = 0;
  KEY_ALGORITHM_RSA_2048 = 1;
  KEY_ALGORITHM_RSA_3072 = 2;
  KEY_ALGORITHM_RSA_4096 = 3;
  KEY_ALGORITHM_EC_P256 = 10;
  KEY_ALGORITHM_EC_P384 = 11;
  KEY_ALGORITHM_ED25519 = 20;
}

// Происхождение ключа.
enum KeyOrigin {
  KEY_ORIGIN_UNSPECIFIED = 0;
  KEY_ORIGIN_SOFTWARE = 1;
  KEY_ORIGIN_SECURE_ELEMENT = 2;
  KEY_ORIGIN_TPM = 3;
  KEY_ORIGIN_HSM = 4;
}

// Требуемые действия по результату оценки.
enum RequiredAction {
  REQUIRED_ACTION_UNSPECIFIED = 0;
  REQUIRED_ACTION_REQUIRE_MFA = 1;                 // Step‑up MFA
  REQUIRED_ACTION_REMEDIATE_COMPLIANCE = 2;        // Приведение устройства к compliant
  REQUIRED_ACTION_QUARANTINE = 3;                  // Ограниченный доступ
  REQUIRED_ACTION_BLOCK = 4;                       // Полная блокировка
  REQUIRED_ACTION_REQUIRE_TRUSTED_NETWORK = 5;     // Доступ только из доверенной сети
}

// -----------------------------------------------------------------------------
// Core entities
// -----------------------------------------------------------------------------

// Сертификат X.509, связанный с устройством (идентификация/клиентский mTLS).
message Certificate {
  // SHA‑256 отпечаток DER‑сертификата.
  bytes fingerprint_sha256 = 1;
  // SHA‑256 от SubjectPublicKeyInfo (SPKI), для pinning.
  bytes spki_sha256 = 2;

  string subject = 3;
  string issuer = 4;
  string serial_number = 5;

  google.protobuf.Timestamp not_before = 6;
  google.protobuf.Timestamp not_after = 7;

  // Упрощённые представления SAN (если есть).
  repeated string san_dns = 8;
  repeated string san_uri = 9;

  bool is_ca = 10;
}

// Ключевой материал устройства.
message KeyMaterial {
  string key_id = 1;
  KeyAlgorithm algorithm = 2;
  KeyOrigin origin = 3;
  bool attested = 4; // подтвержден безопасным окружением
  google.protobuf.Timestamp created_time = 5;

  // Публичный ключ в DER (SubjectPublicKeyInfo).
  bytes public_key_der = 6;
}

// Сигнал постуры/сети/аттестации, полученный от агента/MDM/провайдера.
message DeviceSignal {
  // Идентификатор/тип источника (например, "mdm", "agent", "attestation_service").
  string source = 1;
  google.protobuf.Timestamp observed_at = 2;

  oneof data {
    PostureSignal posture = 10;
    NetworkSignal network = 11;
    AttestationSignal attestation = 12;
  }
}

// Сигнал постуры (состояние хоста).
message PostureSignal {
  bool screen_lock_enabled = 1;
  bool firewall_enabled = 2;
  bool disk_encrypted = 3;
  bool secure_boot = 4;
  bool antivirus_running = 5;
  string antivirus_vendor = 6;
  // Уровень патчей ОС (строковый вид, например "2025-07-01" или "KB5031234")
  string os_patch_level = 7;
}

// Сетевой сигнал (последняя наблюдаемая сессия).
message NetworkSignal {
  string ip_address = 1;      // последняя известная публичная IP
  string asn = 2;             // автономная система (если доступно)
  string country = 3;         // ISO‑3166‑1 alpha‑2
  bool corporate_network = 4; // true, если из доверной сети
}

// Сигнал аттестации.
message AttestationSignal {
  AttestationType type = 1;
  // Непрозрачные доказательства/клеймы (base64/ASN.1/JWT) — по типу.
  bytes evidence_blob = 2;
  string nonce = 3;
  bool verified = 4;
  string verifier = 5; // кто верифицировал (сервис/версия)
  google.protobuf.Timestamp verified_time = 6;
  // Дополнительные клеймы (key/value); значения — как строки.
  map<string, string> claims = 7;
}

// Устройство в модели Zero Trust.
message Device {
  // Ресурсное имя: projects/{project}/tenants/{tenant}/devices/{device}
  string name = 1;

  // Сервер‑назначаемый UID устройства ( стабильный идентификатор ).
  string uid = 2;

  // Идентификатор арендатора (для мульти‑тенантной изоляции).
  string tenant_id = 3;

  // Дружественное имя (из MDM/инвентаря).
  string display_name = 4;

  DevicePlatform platform = 5;
  string os_version = 6;
  string model = 7;
  string manufacturer = 8;
  string serial_number = 9;
  string asset_tag = 10;

  EnrollmentState enrollment_state = 11;
  bool mdm_managed = 12;
  bool jailbroken = 13;  // jailbreak/root
  bool secure_boot = 14;
  bool disk_encrypted = 15;

  ComplianceState compliance_state = 16;
  TrustLevel computed_trust_level = 17;
  double risk_score = 18; // 0.0 .. 1.0

  map<string, string> labels = 19;

  repeated Certificate certificates = 20;
  repeated KeyMaterial key_materials = 21;
  repeated DeviceSignal signals = 22;

  google.protobuf.Timestamp create_time = 23;
  google.protobuf.Timestamp update_time = 24;
  google.protobuf.Timestamp last_seen_time = 25;

  // Оперативные признаки сессии/клиента.
  string last_ip = 26;
  string last_user_agent = 27;
}

// -----------------------------------------------------------------------------
// Requests / Responses
// -----------------------------------------------------------------------------

message CreateDeviceRequest {
  // Имя родителя: projects/{project}/tenants/{tenant}
  string parent = 1;
  Device device = 2;
  // Идемпотентность.
  string request_id = 3;
  // Проверка без сохранения.
  bool validate_only = 4;
}

message GetDeviceRequest {
  string name = 1; // projects/{project}/tenants/{tenant}/devices/{device}
}

message UpdateDeviceRequest {
  Device device = 1;
  google.protobuf.FieldMask update_mask = 2;
  string request_id = 3;
  bool allow_missing = 4;
  bool validate_only = 5;
}

message DeleteDeviceRequest {
  string name = 1;
  string request_id = 2;
  bool allow_missing = 3;
}

message ListDevicesRequest {
  string parent = 1;   // projects/{project}/tenants/{tenant}
  int32 page_size = 2;
  string page_token = 3;
  // Фильтр (например: 'platform="ANDROID" AND compliance_state="COMPLIANT"').
  string filter = 4;
  // Порядок (например: 'update_time desc, risk_score desc').
  string order_by = 5;
}

message ListDevicesResponse {
  repeated Device devices = 1;
  string next_page_token = 2;
  int64 total_size = 3;
}

message ReportSignalsRequest {
  string name = 1; // целевое устройство
  repeated DeviceSignal signals = 2;
}

message ReportSignalsResponse {
  // Актуализированная проекция устройства (минимально: last_seen_time/risk/trust).
  Device device = 1;
}

message EvaluateDeviceRequest {
  string name = 1;
  // Дополнительный контекст (например, действие/ресурс), если политику нужно учитывать.
  google.protobuf.Struct context = 2;
}

message EvaluateDeviceResponse {
  bool allowed = 1;
  TrustLevel trust_level = 2;
  double risk_score = 3;
  repeated string reasons = 4;
  repeated RequiredAction required_actions = 5;
  google.protobuf.Timestamp evaluated_at = 6;
}

// -----------------------------------------------------------------------------
// Service (Unary‑only, публичный API v1)
// -----------------------------------------------------------------------------

service DeviceService {
  rpc CreateDevice(CreateDeviceRequest) returns (Device);
  rpc GetDevice(GetDeviceRequest) returns (Device);
  rpc UpdateDevice(UpdateDeviceRequest) returns (Device);
  rpc DeleteDevice(DeleteDeviceRequest) returns (google.protobuf.Empty);
  rpc ListDevices(ListDevicesRequest) returns (ListDevicesResponse);

  // Приём новых сигналов от агентов/MDM/провайдеров.
  rpc ReportSignals(ReportSignalsRequest) returns (ReportSignalsResponse);

  // Оценка устройства относительно Zero Trust политики.
  rpc EvaluateDevice(EvaluateDeviceRequest) returns (EvaluateDeviceResponse);
}
