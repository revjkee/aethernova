// zero-trust-core/schemas/proto/v1/zero_trust/subject.proto
syntax = "proto3";

package zero_trust.v1;

// ---------- Language-specific options (cross-language friendly) ----------
option csharp_namespace   = "Aethernova.ZeroTrust.V1";
option go_package         = "github.com/aethernova/zero-trust-core/gen/proto/zero_trust/v1;zerotrustv1";
option java_multiple_files = true;
option java_package       = "com.aethernova.zerotrust.v1";
option objc_class_prefix  = "ANZT";

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

// -----------------------------------------------------------------------------
// Subject — каноническое представление действующего лица/сущности в Zero Trust.
// Используется в логировании, решениях IAM/ReBAC, аудите, политике и телеметрии.
// -----------------------------------------------------------------------------
message Subject {
  // Стабильный канонический идентификатор субъекта (строковый вид).
  // Примеры: "user:alice", "service:payments-api", "workload:spiffe://prod/ns/payments/sa/api".
  string subject = 1;

  // Внутренний тип субъекта (человек, сервис, ворклоад, устройство, робот).
  SubjectKind kind = 2;

  // Идентификатор арендатора/организации (если мультитенант).
  string tenant_id = 3;

  // Каноническое имя ресурса (CRN/URN) для унифицированных ссылок в системах.
  // Пример: "crn://tenant/acme/subject/user/alice".
  string crn = 7;

  // Отображаемое имя (для человека/сервиса); не использовать для авторизации.
  string display_name = 8;

  // Контекст идентичности; oneof гарантирует взаимоисключающие подтипы.
  oneof identity {
    Human   human    = 10;
    Service service  = 11;
    Workload workload = 12;
    Device  device   = 13;
    Robot   robot    = 14;
  }

  // Роли, группы и атрибуты субъекта, попадающие в IAM/ABAC.
  // Дубликаты недопустимы по договорённости сторон.
  repeated string roles  = 20;
  repeated string groups = 21;
  map<string, string> attributes = 22;

  // Скоупы/разрешения из активного токена (если применимо).
  repeated string scopes = 23;

  // Ссылки на внешние креденшилы/идентификаторы (OIDC/SAML/SPIFFE/mTLS и т.п.).
  repeated CredentialLink credentials = 30;

  // Богатый контекст аутентификации (issuer/sub/amr/acr/AAL/IAL/времена/клиент).
  AuthContext auth = 40;

  // Контекст устройства (поза, OS, комплаенс) при наличии.
  DeviceContext device_ctx = 41;

  // Сетевой контекст запроса (IP, ASN, гео, приватность).
  NetworkContext network = 42;

  // Оценка риска и причины.
  RiskContext risk = 43;

  // Контекст сессии приложения.
  SessionContext session = 44;

  // Метки для маршрутизации/политик (например, "env:prod", "sensitivity:high").
  repeated string labels = 60;

  // Системные метаданные.
  google.protobuf.Timestamp created_at = 90;
  google.protobuf.Timestamp updated_at = 91;
  // Этикетка согласованности для optimistic concurrency.
  string etag = 92;

  // Зарезервированные номера под будущие поля (эволюция без конфликтов).
  reserved 4, 5, 6;
  reserved "email"; // избегаем конфликтов имён при будущем добавлении.
}

// ----------------------------- Подтипы идентичности ---------------------------

// Человек (конечный пользователь).
message Human {
  // Локальный стабильный user_id в домене системы (без префикса "user:").
  string user_id = 1;

  // Уровень подтверждения личности (IAL) по NIST 800-63.
  IdentityAssuranceLevel ial = 2;

  // Подтверждение аутентификаторов (AAL) по NIST 800-63.
  AuthenticatorAssuranceLevel aal = 3;

  // Контактные/профильные поля — не использовать для авторизации.
  string email = 10;
  bool   email_verified = 11;
  string phone = 12;
  bool   phone_verified = 13;
  string locale = 14;

  // Дополнительные атрибуты профиля (PII хранить с осторожностью).
  map<string, string> profile_attributes = 50;
}

// Машинный сервис (backend/daemon).
message Service {
  string service_id = 1;    // локальный ID сервиса
  string namespace  = 2;    // логический неймспейс/система ("payments", "billing")
  string workload   = 3;    // конкретная роль/подсервис
  map<string, string> metadata = 50; // произвольные метки
}

// Ворклоад/под (SPIFFE, Kubernetes SA и т.д.).
message Workload {
  // SPIFFE ID (если есть), иначе иной устойчивый ID ворклоада.
  string spiffe_id = 1;       // пример: "spiffe://prod/ns/payments/sa/api"
  string workload_id = 2;     // локальный ID
  map<string, string> metadata = 50;
}

// Устройство (для mTLS/WebAuthn/MDM-сценариев).
message Device {
  string device_id = 1;       // корпоративный ID устройства
  string platform  = 2;       // пример: "windows","macos","linux","ios","android"
  string os_version = 3;
  bool   compliant = 4;       // соотв. политикам (MDM/Intune/Jamf и т.п.)
  DevicePosture posture = 5;
  string attestation_type = 6; // пример: "tpm","android-key","webauthn"
  map<string, string> attributes = 50; // серийник, модель и т.п.
}

// Робот/бот (RPA/скриптовые агенты вне сервисной учётки).
message Robot {
  string robot_id = 1;
  string description = 2;
  map<string, string> metadata = 50;
}

// ----------------------------- Контекст аутентификации ------------------------

message AuthContext {
  // Источник выдачи (OIDC/SAML/внутренний), субъект и ключ.
  string issuer = 1;         // пример: "https://idp.example.com"
  string subject = 2;        // "sub" в терминах OIDC
  string kid = 3;            // идентификатор ключа подписи токена

  // Authentication Methods References и Authentication Context Class Reference.
  repeated string amr = 10;  // пример: ["pwd","otp","hwk"]
  string acr = 11;           // пример: "urn:mace:incommon:iap:silver" или "urn:ietf:rfc:8176:loa2"

  // Уровни доверия по NIST 800-63.
  AuthenticatorAssuranceLevel aal = 12;
  IdentityAssuranceLevel       ial = 13;

  // Времена и аудит.
  google.protobuf.Timestamp auth_time = 20; // "auth_time" (OIDC)
  string client_id = 21;
  repeated string audience = 22;            // "aud"

  // Оригинальные клеймы токена (безопасно для логирования — не класть PII).
  // Для ненужных данных хранить только whitelisted клеймы.
  map<string, google.protobuf.Value> claims = 30;

  // Метаданные токена (ид, тип, сроки).
  TokenInfo token = 40;
}

message TokenInfo {
  string token_id   = 1; // "jti"
  string token_type = 2; // "access","refresh","id"
  google.protobuf.Timestamp issued_at  = 10; // "iat"
  google.protobuf.Timestamp expires_at = 11; // "exp"
}

// ----------------------------- Контекст устройства ---------------------------

message DeviceContext {
  string device_id = 1;          // может совпадать с Device.device_id
  DevicePosture posture = 2;
  bool   managed = 3;            // управляется MDM/EDR
  string management_system = 4;  // "intune","jamf","workspace-one"
  map<string, string> evidence = 10; // доказательства комплаенса/аттестации
}

// ----------------------------- Сетевой контекст ------------------------------

message NetworkContext {
  string ip = 1;                  // исходный клиентский IP (до прокси)
  string forwarder_ip = 2;        // адрес прокси/шлюза, если применимо
  string asn = 3;                 // автономная система (для телеметрии)
  string country_code = 4;        // ISO-3166-1 alpha-2
  string city = 5;
  bool   private_network = 6;     // true, если RFC1918/ULA и т.п.
  repeated string matched_cidrs = 7; // какие CIDR-политики совпали
}

// ----------------------------- Риск и объяснимость ---------------------------

message RiskContext {
  RiskLevel level = 1;              // агрегированный уровень риска
  map<string, double> scores = 2;   // по источникам: "geo_mismatch":0.7, "ip_reputation":0.9
  repeated string reasons = 3;      // человекочитаемые причины
  map<string, google.protobuf.Value> features = 4; // нормализованные признаки
}

enum RiskLevel {
  RISK_LEVEL_UNSPECIFIED = 0;
  RISK_LEVEL_LOW         = 1;
  RISK_LEVEL_MEDIUM      = 2;
  RISK_LEVEL_HIGH        = 3;
  RISK_LEVEL_CRITICAL    = 4;
}

// ----------------------------- Сессия приложения -----------------------------

message SessionContext {
  string session_id = 1;
  google.protobuf.Timestamp issued_at  = 2;
  google.protobuf.Timestamp expires_at = 3;
  string ip = 4;
  string user_agent = 5;
  map<string, string> attributes = 10;
}

// ----------------------------- Ссылки на креденшилы --------------------------

message CredentialLink {
  // Тип внешнего аккаунта/учётных данных.
  // Примеры: "oidc","saml","webauthn","x509","spiffe","ldap".
  string type = 1;

  // Пара issuer/subject для внешнего провайдера, или иной стойкий идентификатор.
  string issuer = 2;
  string subject = 3;

  // Идентификаторы ключа/сертификата (если применимо).
  string kid = 10;          // идентификатор ключа подписи/проверки
  string thumbprint = 11;   // x5t/SHA-1 или SHA-256 отпечаток сертификата

  // Дополнительные атрибуты (например, "cn", "san", "aaguid").
  map<string, string> attributes = 50;
}

// ----------------------------- Перечисления ----------------------------------

enum SubjectKind {
  SUBJECT_KIND_UNSPECIFIED = 0;
  SUBJECT_KIND_HUMAN       = 1; // пользователь
  SUBJECT_KIND_SERVICE     = 2; // сервисная учётка
  SUBJECT_KIND_WORKLOAD    = 3; // вычислительный ворклоад/под
  SUBJECT_KIND_DEVICE      = 4; // устройство
  SUBJECT_KIND_ROBOT       = 5; // бот/робот/скрипт вне сервисной учётки
}

// NIST 800-63-3: IAL (Identity Assurance Level)
enum IdentityAssuranceLevel {
  IDENTITY_ASSURANCE_LEVEL_UNSPECIFIED = 0;
  IAL1 = 1;
  IAL2 = 2;
  IAL3 = 3;
}

// NIST 800-63-3: AAL (Authenticator Assurance Level)
enum AuthenticatorAssuranceLevel {
  AUTHENTICATOR_ASSURANCE_LEVEL_UNSPECIFIED = 0;
  AAL1 = 1;
  AAL2 = 2;
  AAL3 = 3;
}

// Постура устройства (агрегированная оценка).
enum DevicePosture {
  DEVICE_POSTURE_UNSPECIFIED = 0;
  DEVICE_POSTURE_HEALTHY      = 1; // соответствует политикам, обновлён
  DEVICE_POSTURE_OUT_OF_DATE  = 2; // требуются обновления/политики
  DEVICE_POSTURE_UNVERIFIED   = 3; // нет достоверной аттестации
  DEVICE_POSTURE_COMPROMISED  = 4; // индикаторы компрометации/рута
}
