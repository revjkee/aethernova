[build-system]
requires = [
  "poetry-core>=1.9.0",
  # Плагин динамической версии из git-тегов (используется на build/ci)
  "poetry-dynamic-versioning[plugin]>=1.0.0",
]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "zero-trust-core"
version = "0.0.0"  # будет переопределено poetry-dynamic-versioning из git-тега vX.Y.Z
description = "Core primitives for Zero-Trust authentication/authorization, policies and runtime."
license = "Proprietary"
readme = "README.md"
homepage = "https://example.com/zero-trust-core"
repository = "https://git.example.com/core-systems/zero-trust-core"
documentation = "https://docs.example.com/zero-trust-core"
keywords = ["zero-trust", "authn", "authz", "opa", "security", "policies"]
authors = ["NeuroCity Engineering <eng@example.com>"]
packages = [{ include = "zero_trust_core", from = "src" }]
# Включаем полезные артефакты в sdist (коллекции политик/схем и т.д.)
include = [
  { path = "LICENSE" },
  { path = "CHANGELOG.md" },
  { path = "src/zero_trust_core/py.typed" },
  { path = "src/zero_trust_core/policies/**/*", format = "sdist" },
  { path = "src/zero_trust_core/schemas/**/*", format = "sdist" }
]

[tool.poetry.urls]
"Security Policy" = "https://example.com/security"
"Changelog" = "https://docs.example.com/zero-trust-core/changelog"

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
# Минимальный рантайм (без тяжёлых фреймворков)
pydantic = "^2.6"
typing-extensions = { version = ">=4.12", python = "<3.12" }
orjson = "^3.10"
pyyaml = "^6.0.1"
prometheus-client = "^0.20.0"
structlog = "^24.1"
httpx = { version = "^0.27.0", extras = ["http2"] }

# Опциональные компоненты
redis = { version = "^5.0.0", optional = true }
sqlalchemy = { version = "^2.0.0", optional = true }
asyncpg = { version = "^0.29.0", optional = true }
uvloop = { version = "^0.19.0", optional = true, markers = "sys_platform != 'win32'" }
# Криптография/JWT
cryptography = { version = ">=41,<44", optional = true }
python-jose = { version = "^3.3.0", optional = true, extras = ["cryptography"] }
argon2-cffi = { version = "^23.1.0", optional = true }
passlib = { version = "^1.7.4", optional = true, extras = ["bcrypt"] }
# API и сервер
fastapi = { version = "^0.111.0", optional = true }
uvicorn = { version = "^0.30.0", optional = true, extras = ["standard"] }
# Observability
opentelemetry-api = { version = "^1.25.0", optional = true }
opentelemetry-sdk = { version = "^1.25.0", optional = true }
opentelemetry-exporter-otlp = { version = "^1.25.0", optional = true }

[tool.poetry.extras]
db = ["sqlalchemy", "asyncpg"]
cache = ["redis"]
crypto = ["cryptography", "python-jose", "argon2-cffi", "passlib"]
api = ["fastapi", "uvicorn"]
otel = ["opentelemetry-api", "opentelemetry-sdk", "opentelemetry-exporter-otlp"]

[tool.poetry.group.dev.dependencies]
ruff = "^0.5.0"
black = "^24.4.0"
isort = "^5.13.2"
mypy = "^1.10.0"
pre-commit = "^3.7.0"
types-requests = "^2.32.0.20240622"
types-redis = "^4.6.0.20240425"
types-PyYAML = "^6.0.12"

[tool.poetry.group.test.dependencies]
pytest = "^8.2.0"
pytest-asyncio = "^0.23.7"
pytest-cov = "^5.0.0"
coverage = "^7.5.0"
freezegun = "^1.5.0"
hypothesis = "^6.103.0"

[tool.poetry.group.audit.dependencies]
bandit = "^1.7.9"
pip-audit = "^2.7.3"
safety = "^3.2.0"
cyclonedx-bom = "^4.3.10"

[tool.poetry.group.docs.dependencies]
mkdocs-material = "^9.5.0"
mkdocs = "^1.6.0"
mkdocstrings = { version = "^0.24.0", extras = ["python"] }

[tool.poetry.scripts]
ztc = "zero_trust_core.cli:main"
ztc-policy = "zero_trust_core.cli:policy_tool"

# -------------------------
# Lint/Format/Test config
# -------------------------
[tool.ruff]
target-version = "py311"
line-length = 100
fix = true
unsafe-fixes = false
select = [
  "E", "F", "I",        # pycodestyle/pyflakes/isort
  "UP", "B", "C90",     # pyupgrade/bugbear
  "S",                  # flake8-bandit (частично)
  "PL",                 # pylint-like
  "RUF"
]
ignore = ["E501"]       # длину строк контролируем в black
src = ["src", "tests"]

[tool.ruff.isort]
known-first-party = ["zero_trust_core"]

[tool.black]
target-version = ["py311"]
line-length = 100

[tool.isort]
profile = "black"
line_length = 100
known_first_party = ["zero_trust_core"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_unused_configs = true
warn_unreachable = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_return_any = true
warn_redundant_casts = true
warn_unused_ignores = true
plugins = ["pydantic.mypy"]
mypy_path = ["src"]

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-q -ra --strict-markers --strict-config --cov=zero_trust_core --cov-report=term-missing"
testpaths = ["tests"]
markers = [
  "unit: fast unit tests",
  "integration: slower, touching IO",
]
xfail_strict = true

[tool.coverage.run]
branch = true
source = ["zero_trust_core"]
omit = ["tests/*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "if __name__ == .__main__.:",
  "def __repr__",
  "def __str__",
]

[tool.bandit]
skips = ["B101"]  # assert usage допускается в тестах
exclude_dirs = ["tests", "docs"]

# -------------------------
# Build/Versioning
# -------------------------
[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "semver"
pattern = "^(?P<base>\\d+\\.\\d+\\.\\d+)(?:-(?P<stage>[a-z]+)\\.(?P<revision>\\d+))?$"
bump = true
metadata = true  # добавлять +metadata из коммитов
dirty = "allow"
tagged-metadata = true
