# OpenTelemetry Collector (contrib) — промышленная конфигурация Zero-Trust Core
# Профиль: prod‑ready, безопасная обработка, параметризация окружением.
# Требуется комплект из otel-collector-contrib (ради filelog/loki/prom_rw/k8s-*).

extensions:
  health_check:
    endpoint: 0.0.0.0:13133
  pprof:
    endpoint: 0.0.0.0:1777
  zpages:
    endpoint: 0.0.0.0:55679
  # OAuth2 для аутентификации экспортеров (по необходимости)
  oauth2client:
    client_id: ${OTEL_OAUTH2_CLIENT_ID:-}
    client_secret: ${OTEL_OAUTH2_CLIENT_SECRET:-}
    token_url: ${OTEL_OAUTH2_TOKEN_URL:-}
    endpoint_params:
      audience: ${OTEL_OAUTH2_AUDIENCE:-}
    timeout: 5s

receivers:
  # Универсальный приём телеметрии от сервисов
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
        # Входной mTLS (включите при наличии секретов)
        tls:
          ca_file: ${OTEL_IN_CA_FILE:-}
          cert_file: ${OTEL_IN_CERT_FILE:-}
          key_file: ${OTEL_IN_KEY_FILE:-}
          # Если ключ зашифрован, добавьте password_file
      http:
        endpoint: 0.0.0.0:4318
        cors:
          allowed_origins: ["https://*.zero-trust.example.com", "https://localhost:*"]
          allowed_headers: ["Authorization","Content-Type","X-Request-Id"]

  # Сбор метрик Prometheus‑стилем (коллектор, сервисы, поды)
  prometheus:
    config:
      global:
        scrape_interval: 30s
        scrape_timeout: 10s
        evaluation_interval: 30s
        external_labels:
          cluster: ${CLUSTER_NAME:="prod-cluster"}
      scrape_configs:
        # Сам коллектор
        - job_name: otel-collector
          static_configs:
            - targets: ["0.0.0.0:8888"]
        # Поддержка k8s‑автообнаружения по аннотациям
        - job_name: k8s-pods
          kubernetes_sd_configs:
            - role: pod
          relabel_configs:
            - action: keep
              source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
              regex: "true"
            - action: replace
              source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
              target_label: __metrics_path__
              regex: "(.+)"
            - action: replace
              source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port]
              target_label: __address__
              regex: "(.+)"
              replacement: $1
            - action: replace
              source_labels: [__meta_kubernetes_namespace]
              target_label: namespace
            - action: replace
              source_labels: [__meta_kubernetes_pod_name]
              target_label: pod
        # Сервисы с аннотациями
        - job_name: k8s-services
          kubernetes_sd_configs:
            - role: service
          relabel_configs:
            - action: keep
              source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
              regex: "true"
            - action: replace
              source_labels: [__meta_kubernetes_service_annotation_prometheus_io_port, __meta_kubernetes_service_address]
              target_label: __address__
              regex: "(.+);(.+)"
              replacement: $2:$1
            - action: replace
              source_labels: [__meta_kubernetes_namespace]
              target_label: namespace
            - action: replace
              source_labels: [__meta_kubernetes_service_name]
              target_label: service

  # Метрики узла (daemonset‑сценарий)
  hostmetrics:
    collection_interval: 30s
    scrapers:
      cpu: {}
      load: {}
      memory: {}
      paging: {}
      disk: {}
      filesystem: {}
      network: {}
      process:
        mute_process_name_error: true

  # Метрики кластера (API‑сервер, контроллеры) — требует RBAC
  k8s_cluster:
    collection_interval: 60s

  # Логи контейнеров (редакция PII/секретов ниже в processors)
  filelog:
    include:
      - /var/log/containers/*.log
    start_at: beginning
    include_file_path: false
    include_file_name: false
    operators:
      - type: json_parser
        parse_from: body
        timestamp:
          parse_from: attributes.time
          layout: '%Y-%m-%dT%H:%M:%S.%L%z'
        severity:
          parse_from: attributes.severity
      - type: move
        from: attributes.log
        to: body
      - type: add
        field: resource.container
        value: attributes.k8s.container.name
      - type: add
        field: resource.pod
        value: attributes.k8s.pod.name

  # Приём Jaeger/Zipkin (если есть старые агенты)
  jaeger:
    protocols:
      thrift_compact:
        endpoint: 0.0.0.0:6831
      thrift_http:
        endpoint: 0.0.0.0:14268
  zipkin:
    endpoint: 0.0.0.0:9411

processors:
  # Обогащение k8s‑атрибутами
  k8sattributes:
    auth_type: serviceAccount
    # Подхват меток/аннотаций
    extract:
      metadata:
        - k8s.namespace.name
        - k8s.pod.name
        - k8s.pod.uid
        - k8s.pod.start_time
        - k8s.container.name
        - k8s.node.name
        - k8s.deployment.name
        - k8s.statefulset.name
        - k8s.daemonset.name

  # Детекция ресурса (cloud/k8s/node)
  resourcedetection:
    detectors: [env, system, k8snode, gcp, ec2]
    timeout: 5s
    override: true

  # Лимитер памяти (стабильность)
  memory_limiter:
    check_interval: 5s
    limit_mib: ${OTEL_MEMORY_LIMIT_MIB:1024}
    spike_limit_mib: ${OTEL_MEMORY_SPIKE_MIB:256}

  # Батчинг/ретраи (эффективность)
  batch:
    send_batch_size: 8192
    send_batch_max_size: 16384
    timeout: 5s

  # Маскирование секретов/PII в логах и спанах
  transform/logs_pii:
    error_mode: ignore
    log_statements:
      - context: log
        statements:
          # Маска токенов/паролей в body (простые паттерны)
          - replace_pattern(body, `(?i)(password|pass|pwd)"?\s*[:=]\s*"?[^",\s]+`, "${1}=\"***\"")
          - replace_pattern(body, `(?i)(authorization|bearer|api[_-]?key)"?\s*[:=]\s*"?[^",\s]+`, "${1}=\"***\"")

  transform/spans_pii:
    error_mode: ignore
    trace_statements:
      - context: span
        statements:
          - replace_pattern(attributes["http.request.header.authorization"], `.+`, "***") where attributes["http.request.header.authorization"] != nil
          - replace_pattern(attributes["db.statement"], `(?i)(password|pass|pwd)\s*=\s*[^ \t;]+`, "password=***") where attributes["db.statement"] != nil

  # Фильтры шума (здоровье/пробы)
  filter/drop_health:
    logs:
      include:
        match_type: strict
        resource_attributes:
          - key: k8s.container.name
            value: "otel-collector"
      exclude: {}  # шаблон, модифицируйте под свои health endpoints
    spans:
      span:
        - attributes:
            - key: http.target
              value: "/healthz"
        - attributes:
            - key: http.route
              value: "/ready"

  # Трансформация метрик (снижение кардинальности)
  metricstransform/normalize:
    transforms:
      - include: .*
        match_type: regexp
        action: update
        operations:
          - action: aggregate_labels
            aggregation_type: sum
            label_set: ["cluster","namespace","pod","container"]

  # Роутинг по тенанту (если используется multi-tenant)
  routing:
    attribute_source: context
    from_attribute: tenant.id
    default_exporters: [otlp/upstream]
    table:
      - value: "secops"
        exporters: [otlp/secops]
      - value: "platform"
        exporters: [otlp/platform]

  # Генерация метрик из спанов (SLO, RPS, latency)
  spanmetrics:
    metrics_exporter: prometheus
    latency_histogram:
      boundaries: [5ms, 10ms, 25ms, 50ms, 100ms, 250ms, 500ms, 1s, 2s]
    dimensions:
      - name: http.method
      - name: http.route
      - name: k8s.namespace.name

exporters:
  # Основной OTLP‑экспорт (в бэкенд трасс/логов/метрик; поддерживает gRPC/HTTP)
  otlp/upstream:
    endpoint: ${OTEL_EXPORTER_OTLP_ENDPOINT:?set OTEL_EXPORTER_OTLP_ENDPOINT}
    # Включите один из протоколов
    tls:
      insecure: ${OTEL_EXPORTER_OTLP_INSECURE:false}
      ca_file: ${OTEL_EXPORTER_OTLP_CA_FILE:-}
      cert_file: ${OTEL_EXPORTER_OTLP_CERT_FILE:-}
      key_file: ${OTEL_EXPORTER_OTLP_KEY_FILE:-}
    headers:
      # Для простого Bearer‑токена
      Authorization: ${OTEL_EXPORTER_OTLP_AUTH_HEADER:-}
    sending_queue:
      enabled: true
      num_consumers: 8
      queue_size: 50000
    retry_on_failure:
      enabled: true
      initial_interval: 500ms
      max_interval: 10s
      max_elapsed_time: 1m
    # Если нужен OAuth2 — раскомментируйте:
    # auth:
    #   authenticator: oauth2client

  # Раздельные экспортеры под routing/тенанты (по желанию)
  otlp/secops:
    endpoint: ${OTEL_EXPORTER_OTLP_SECOps_ENDPOINT:-${OTEL_EXPORTER_OTLP_ENDPOINT}}
    tls:
      insecure: ${OTEL_EXPORTER_OTLP_INSECURE:false}
    headers:
      Authorization: ${OTEL_EXPORTER_OTLP_SECOps_AUTH:-}

  otlp/platform:
    endpoint: ${OTEL_EXPORTER_OTLP_PLATFORM_ENDPOINT:-${OTEL_EXPORTER_OTLP_ENDPOINT}}
    tls:
      insecure: ${OTEL_EXPORTER_OTLP_INSECURE:false}

  # Prometheus Remote Write — метрики в Victoria/Prometheus
  prometheusremotewrite:
    endpoint: ${PROM_REMOTE_WRITE_URL:-}
    external_labels:
      cluster: ${CLUSTER_NAME:="prod-cluster"}
    headers:
      Authorization: ${PROM_REMOTE_WRITE_AUTH:-}
    timeout: 10s
    tls:
      insecure: ${PROM_REMOTE_WRITE_INSECURE:false}

  # Встроенный Prometheus endpoint для экспорта spanmetrics и внутренних метрик
  prometheus:
    endpoint: 0.0.0.0:8889
    namespace: otel
    send_timestamps: true

  # Loki (опционально) — экспорт логов
  loki:
    endpoint: ${LOKI_ENDPOINT:-}
    tls:
      insecure: ${LOKI_INSECURE:false}
    headers:
      X-Scope-OrgID: ${LOKI_TENANT_ID:-}
      Authorization: ${LOKI_AUTH_HEADER:-}
    default_labels_enabled:
      exporter: true
      job: true
      instance: true
      level: true
      k8s: true

  # Локальный логгер (только для отладки)
  logging:
    verbosity: normal
    sampling_initial: 5
    sampling_thereafter: 200

connectors:
  # Коннектор формирует метрики из спанов для Prometheus‑экспорта выше
  spanmetrics:

service:
  telemetry:
    logs:
      level: ${OTEL_LOG_LEVEL:info}
    metrics:
      address: 0.0.0.0:8888
  extensions: [health_check, pprof, zpages, oauth2client]

  # Конвейеры обработки телеметрии
  pipelines:
    traces:
      receivers: [otlp, jaeger, zipkin]
      processors: [k8sattributes, resourcedetection, transform/spans_pii, filter/drop_health, batch, memory_limiter]
      exporters: [routing, otlp/upstream, logging]
    metrics:
      receivers: [otlp, prometheus, hostmetrics, k8s_cluster, spanmetrics]
      processors: [k8sattributes, resourcedetection, metricstransform/normalize, batch, memory_limiter]
      exporters: [prometheusremotewrite, prometheus, otlp/upstream]
    logs:
      receivers: [otlp, filelog]
      processors: [k8sattributes, resourcedetection, transform/logs_pii, filter/drop_health, batch, memory_limiter]
      exporters: [loki, otlp/upstream, logging]
