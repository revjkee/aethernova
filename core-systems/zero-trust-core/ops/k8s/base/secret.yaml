# ServiceAccount, под которым приложение и/или контроллер будут получать токен для Vault k8s-auth
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ztc-app
  namespace: zero-trust-core
  labels:
    app.kubernetes.io/name: zero-trust-core
    app.kubernetes.io/part-of: zero-trust-core
---
# SecretStore: подключение к HashiCorp Vault (kv v2). Требуется установленный External Secrets Operator.
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: ztc-vault-store
  namespace: zero-trust-core
  labels:
    app.kubernetes.io/name: zero-trust-core
    app.kubernetes.io/part-of: zero-trust-core
spec:
  provider:
    vault:
      server: https://vault.zero-trust-core.svc:8200
      path: kv/zero-trust-core
      version: v2
      # caBundle можно добавить при использовании внутреннего CA
      # caBundle: |
      #   -----BEGIN CERTIFICATE-----
      #   MIIC...
      #   -----END CERTIFICATE-----
      auth:
        kubernetes:
          mountPath: kubernetes
          role: ztc-app
          serviceAccountRef:
            name: ztc-app
---
# ExternalSecret: сборка реальных секретов из Vault в один Secret для приложения.
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: ztc-app-secrets
  namespace: zero-trust-core
  labels:
    app.kubernetes.io/name: zero-trust-core
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: zero-trust-core
spec:
  refreshInterval: 1h
  secretStoreRef:
    kind: SecretStore
    name: ztc-vault-store
  target:
    name: ztc-app-secrets
    creationPolicy: Owner
    deletionPolicy: Delete
    immutable: true
    template:
      type: Opaque
      engineVersion: v2
      metadata:
        labels:
          app.kubernetes.io/name: zero-trust-core
          app.kubernetes.io/managed-by: external-secrets
        # Аннотацию можно использовать для триггера рестартов (sidecars/операторы могут реагировать)
        annotations:
          ztc.aethernova.io/secret-purpose: "runtime-config"
      # Маппинг ключей шаблона на данные, полученные из секции data ниже
      data:
        AVM_AUTH_ISSUER: "{{ .jwt_issuer }}"
        AVM_AUTH_AUDIENCE: "{{ .jwt_audience }}"
        AVM_DB_DSN: "{{ .db_dsn }}"
        AVM_KAFKA_USERNAME: "{{ .kafka_username }}"
        AVM_KAFKA_PASSWORD: "{{ .kafka_password }}"
        AVM_S3_ACCESS_KEY: "{{ .s3_access_key }}"
        AVM_S3_SECRET_KEY: "{{ .s3_secret_key }}"
        AVM_OIDC_JWKS_URL: "{{ .jwks_url }}"
        AVM_TLS_CA_PEM: "{{ .tls_ca_pem }}"
  # Извлечение конкретных значений из Vault (kv v2): key — путь, property — поле.
  data:
    - secretKey: jwt_issuer
      remoteRef:
        key: jwt
        property: issuer
    - secretKey: jwt_audience
      remoteRef:
        key: jwt
        property: audience
    - secretKey: jwks_url
      remoteRef:
        key: jwt
        property: jwks_url
    - secretKey: db_dsn
      remoteRef:
        key: database
        property: dsn
    - secretKey: kafka_username
      remoteRef:
        key: kafka/primary
        property: username
    - secretKey: kafka_password
      remoteRef:
        key: kafka/primary
        property: password
    - secretKey: s3_access_key
      remoteRef:
        key: s3/avm
        property: access_key
    - secretKey: s3_secret_key
      remoteRef:
        key: s3/avm
        property: secret_key
    - secretKey: tls_ca_pem
      remoteRef:
        key: tls/ca
        property: pem
