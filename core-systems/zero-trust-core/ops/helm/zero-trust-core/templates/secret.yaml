{{- /*
zero-trust-core :: Secret / ExternalSecret / SealedSecret (industrial-grade)

Поддерживаемые режимы (по приоритету):
1) ExternalSecret — если включен .Values.secrets.externalSecret.enabled и CRD доступна.
2) SealedSecret — если включен .Values.secrets.sealed.enabled и CRD доступна.
3) Обычный v1/Secret — по умолчанию.

Конвенции values:
.secrets:
  enabled: true
  nameOverride: ""             # опционально, иначе <fullname>-secret
  type: "Opaque"               # тип Kubernetes секрета
  immutable: true              # делает секрет неизменяемым на апи‑сервере
  extraLabels: {}              # дополнительные метки
  extraAnnotations: {}         # дополнительные аннотации
  # Ветвь для обычного Secret:
  data: {}                     # ключи уже base64 (если нужно вручную)
  stringData: {}               # ключи в чистом виде (будут b64enc)
  # Ветвь ExternalSecret:
  externalSecret:
    enabled: false
    refreshInterval: "1h"
    secretStoreRef:
      kind: ClusterSecretStore  # или SecretStore
      name: "external-secrets"  # имя сторе
    target:
      creationPolicy: "Owner"   # Orphan|Owner
      deletionPolicy: "Retain"  # Delete|Retain
      template:
        type: "Opaque"
        engineVersion: v2       # для templating движка
        metadata:
          labels: {}
          annotations: {}
    data: []                    # список из { secretKey, remoteRef{key, property, version, ...} }
    dataFrom: []                # список источников { extract: {key: ...}, rewrite: [...] }
  # Ветвь SealedSecret (Bitnami):
  sealed:
    enabled: false
    encryptedData: {}           # ключи уже зашифрованы ctl‑ом (kubeseal)
    type: "Opaque"
*/ -}}

{{- if and .Values.secrets.enabled (.Values.secrets.externalSecret.enabled) (has "external-secrets.io/v1beta1" .Capabilities.APIVersions) }}
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ default (printf "%s-secret" (include "zero-trust-core.fullname" .)) .Values.secrets.nameOverride | trunc 63 | trimSuffix "-" }}
  labels:
    app.kubernetes.io/name: {{ include "zero-trust-core.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/part-of: zero-trust-core
    app.kubernetes.io/component: api
    {{- with .Values.secrets.extraLabels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  annotations:
    {{- with .Values.secrets.extraAnnotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  refreshInterval: {{ default "1h" .Values.secrets.externalSecret.refreshInterval | quote }}
  secretStoreRef:
    kind: {{ required "secrets.externalSecret.secretStoreRef.kind is required" .Values.secrets.externalSecret.secretStoreRef.kind | quote }}
    name: {{ required "secrets.externalSecret.secretStoreRef.name is required" .Values.secrets.externalSecret.secretStoreRef.name | quote }}
  target:
    name: {{ default (printf "%s-secret" (include "zero-trust-core.fullname" .)) .Values.secrets.nameOverride | trunc 63 | trimSuffix "-" }}
    creationPolicy: {{ default "Owner" .Values.secrets.externalSecret.target.creationPolicy | quote }}
    deletionPolicy: {{ default "Retain" .Values.secrets.externalSecret.target.deletionPolicy | quote }}
    {{- if hasKey .Values.secrets "immutable" }}
    immutable: {{ .Values.secrets.immutable }}
    {{- end }}
    template:
      type: {{ default "Opaque" (coalesce .Values.secrets.externalSecret.target.template.type .Values.secrets.type) | quote }}
      engineVersion: {{ default "v2" .Values.secrets.externalSecret.target.template.engineVersion | quote }}
      metadata:
        labels:
          app.kubernetes.io/name: {{ include "zero-trust-core.name" . }}
          app.kubernetes.io/instance: {{ .Release.Name }}
          {{- with .Values.secrets.externalSecret.target.template.metadata.labels }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
        annotations:
          {{- with .Values.secrets.externalSecret.target.template.metadata.annotations }}
          {{- toYaml . | nindent 10 }}
          {{- end }}
  {{- with .Values.secrets.externalSecret.data }}
  data:
    {{- toYaml . | nindent 2 }}
  {{- end }}
  {{- with .Values.secrets.externalSecret.dataFrom }}
  dataFrom:
    {{- toYaml . | nindent 2 }}
  {{- end }}

{{- else if and .Values.secrets.enabled (.Values.secrets.sealed.enabled) (has "bitnami.com/v1alpha1" .Capabilities.APIVersions) }}
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: {{ default (printf "%s-secret" (include "zero-trust-core.fullname" .)) .Values.secrets.nameOverride | trunc 63 | trimSuffix "-" }}
  labels:
    app.kubernetes.io/name: {{ include "zero-trust-core.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/part-of: zero-trust-core
    app.kubernetes.io/component: api
    {{- with .Values.secrets.extraLabels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  annotations:
    {{- with .Values.secrets.extraAnnotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "zero-trust-core.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
      annotations:
        {{- with .Values.secrets.extraAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    type: {{ default "Opaque" (coalesce .Values.secrets.sealed.type .Values.secrets.type) | quote }}
    {{- if hasKey .Values.secrets "immutable" }}
    immutable: {{ .Values.secrets.immutable }}
    {{- end }}
  encryptedData:
    {{- /* encryptedData заполняется значениями, созданными kubeseal; не декодируем */ -}}
    {{- range $k, $v := .Values.secrets.sealed.encryptedData }}
    {{ $k }}: {{ $v | quote }}
    {{- end }}

{{- else if .Values.secrets.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ default (printf "%s-secret" (include "zero-trust-core.fullname" .)) .Values.secrets.nameOverride | trunc 63 | trimSuffix "-" }}
  labels:
    app.kubernetes.io/name: {{ include "zero-trust-core.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/part-of: zero-trust-core
    app.kubernetes.io/component: api
    {{- with .Values.secrets.extraLabels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  annotations:
    {{- with .Values.secrets.extraAnnotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
type: {{ default "Opaque" .Values.secrets.type | quote }}
{{- if hasKey .Values.secrets "immutable" }}
immutable: {{ .Values.secrets.immutable }}
{{- end }}
{{- /* stringData: шаблонизируем и кодируем в base64 на стороне API (K8s сам кодирует),
       но мы используем tpl для интерполяции Helm, если требуется. */}}
{{- if .Values.secrets.stringData }}
stringData:
  {{- range $k, $v := .Values.secrets.stringData }}
  {{ $k }}: {{ tpl (toString $v) $ | quote }}
  {{- end }}
{{- end }}
{{- /* data: предполагаем сырой base64, но если прислали plain — можно обернуть через tpl|b64enc.
       Включим авто‑b64, если ключ помечен специальным полем: {value: "...", b64: false}. */}}
{{- if .Values.secrets.data }}
data:
  {{- range $k, $v := .Values.secrets.data }}
  {{- if kindIs "map" $v }}
  {{- $raw := (hasKey $v "value") | ternary (toString ($v.value)) (toString $v) -}}
  {{- $isB64 := (hasKey $v "b64") | ternary ($v.b64) (true) -}}
  {{ $k }}: {{- if $isB64 -}}{{ $raw | quote }}{{- else -}}{{ tpl $raw $ | b64enc | quote }}{{- end }}
  {{- else }}
  {{ $k }}: {{ toString $v | quote }}
  {{- end }}
  {{- end }}
{{- end }}

{{- end }}
