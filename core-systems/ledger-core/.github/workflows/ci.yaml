name: CI

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
    paths:
      - '**.py'
      - 'pyproject.toml'
      - 'poetry.lock'
      - 'requirements*.txt'
      - '.github/workflows/ci.yaml'
      - 'ruff.toml'
      - 'mypy.ini'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**.py'
      - 'pyproject.toml'
      - 'poetry.lock'
      - 'requirements*.txt'
      - '.github/workflows/ci.yaml'
      - 'ruff.toml'
      - 'mypy.ini'
  workflow_dispatch: {}

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  checks: write
  pull-requests: read
  security-events: write

env:
  PIP_DISABLE_PIP_VERSION_CHECK: '1'
  PIP_NO_PYTHON_VERSION_WARNING: '1'
  FORCE_COLOR: '1'
  PYTHONDONTWRITEBYTECODE: '1'
  # Каталог проекта (если исходники лежат не в корне, скорректируйте)
  PROJECT_DIR: .

jobs:
  lint:
    name: Lint and format (Ruff)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Ruff
        run: |
          python -m pip install -U pip
          pip install ruff

      - name: Ruff format check
        working-directory: ${{ env.PROJECT_DIR }}
        run: ruff format --check .

      - name: Ruff lint
        working-directory: ${{ env.PROJECT_DIR }}
        run: ruff check --output-format=github .

      - name: Optional pre-commit hooks
        if: hashFiles('.pre-commit-config.yaml') != ''
        run: |
          pip install pre-commit
          pre-commit run --all-files

  typecheck:
    name: Type check (mypy)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f pyproject.toml ] && [ -f poetry.lock ]; then pip install poetry && poetry export -f requirements.txt --without-hashes -o /tmp/req.txt && pip install -r /tmp/req.txt; fi
          # Установим сам пакет для корректной проверки типов
          if [ -f pyproject.toml ]; then pip install -e .; fi
          pip install mypy types-requests types-setuptools

      - name: Run mypy
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          if [ -f mypy.ini ] || grep -q '\[tool.mypy\]' pyproject.toml 2>/dev/null; then
            mypy .
          else
            mypy . --ignore-missing-imports
          fi

  security:
    name: Security scan (Bandit → SARIF)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install Bandit
        run: |
          python -m pip install -U pip
          pip install bandit[toml]
      - name: Run Bandit
        run: |
          bandit -r ${{ env.PROJECT_DIR }} -x "tests,**/migrations/**,**/generated/**" -f sarif -o bandit.sarif
      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit.sarif

  tests:
    name: Tests ${{ matrix.os }} / py${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        python: [ '3.10', '3.11', '3.12' ]
        exclude:
          - os: macos-latest
            python: '3.10'
          - os: macos-latest
            python: '3.12'
          - os: windows-latest
            python: '3.10'
          - os: windows-latest
            python: '3.12'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: 'pip'

      - name: Install dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          if [ -f pyproject.toml ] && [ -f poetry.lock ]; then pip install poetry && poetry export -f requirements.txt --without-hashes -o /tmp/req.txt && pip install -r /tmp/req.txt; fi
          pip install -e . pytest pytest-cov

      - name: Run tests
        working-directory: ${{ env.PROJECT_DIR }}
        shell: bash
        run: |
          mkdir -p test-results coverage
          pytest -q --disable-warnings \
                 --junitxml=test-results/junit-${{ matrix.os }}-py${{ matrix.python }}.xml \
                 --cov=. --cov-report=xml:coverage/coverage-${{ matrix.os }}-py${{ matrix.python }}.xml \
                 --cov-report=term-missing

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-${{ matrix.os }}-py${{ matrix.python }}
          path: test-results/*.xml
          retention-days: 7

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.os }}-py${{ matrix.python }}
          path: coverage/*.xml
          retention-days: 7

      - name: Codecov upload (tokenless on public)
        if: always()
        uses: codecov/codecov-action@v5
        with:
          files: coverage/coverage-${{ matrix.os }}-py${{ matrix.python }}.xml
          fail_ci_if_error: false
          verbose: false

  build:
    name: Build sdist/wheel
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [ lint, typecheck, tests ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Build
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          python -m pip install -U pip build twine
          python -m build
          python -m twine check dist/*

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*
          retention-days: 7

  # Дополнительная быстрая проверка только на изменениях документации/конфигов (опционально)
  noop:
    if: github.event_name == 'pull_request' && !contains(join(github.event.pull_request.changed_files, ','), '.py')
    runs-on: ubuntu-latest
    steps:
      - run: echo "No Python changes detected. Skipping heavy jobs."
