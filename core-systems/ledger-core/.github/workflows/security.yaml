name: security

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: "0 3 * * 1" # еженедельно по понедельникам 03:00 UTC
  workflow_dispatch:

# Минимальные привилегии для защиты
permissions:
  contents: read
  actions: read
  security-events: write

concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"
  GO_VERSION: "1.22"
  RUST_TOOLCHAIN: "stable"
  # лимиты
  JOB_TIMEOUT_MIN: "25"

jobs:
  # Определяем, что изменилось, чтобы условно запускать тяжёлые сканы
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      has_python: ${{ steps.filter.outputs.python }}
      has_node: ${{ steps.filter.outputs.node }}
      has_rust: ${{ steps.filter.outputs.rust }}
      has_go: ${{ steps.filter.outputs.go }}
      has_docker: ${{ steps.filter.outputs.docker }}
      has_iac: ${{ steps.filter.outputs.iac }}
      any: ${{ steps.filter.outputs.any }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            python:
              - '**/*.py'
              - 'requirements*.txt'
              - 'pyproject.toml'
            node:
              - '**/*.js'
              - '**/*.ts'
              - 'package.json'
              - 'package-lock.json'
              - 'yarn.lock'
            rust:
              - '**/*.rs'
              - 'Cargo.toml'
              - 'Cargo.lock'
            go:
              - '**/*.go'
              - 'go.mod'
              - 'go.sum'
            docker:
              - 'Dockerfile'
              - '**/Dockerfile'
            iac:
              - '**/*.tf'
              - '**/*.yaml'
              - '**/*.yml'
              - '**/*.json'
            any:
              - '**/*'

  dependency-review:
    name: Dependency review (PR)
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ github.event_name == 'pull_request' }}
    timeout-minutes: 10
    permissions:
      contents: read
      pull-requests: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          # блокируем высокие и критичные
          fail-on-severity: high
          # игнор известных/одобренных advisories при необходимости:
          # allow-ghsas: GHSA-xxxx-xxxx-xxxx,GHSA-yyyy-yyyy-yyyy

  codeql:
    name: CodeQL (SAST)
    runs-on: ubuntu-latest
    needs: changes
    timeout-minutes: 45
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4
      - name: Init CodeQL
        uses: github/codeql-action/init@v3
        with:
          # Автовыбор языков: Python/JS/TS/Go/Rust/Java и т.д.
          languages: auto
          config: |
            paths-ignore:
              - "**/tests/**"
              - "**/node_modules/**"
              - "**/target/**"
              - "**/dist/**"
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:multi"

  sca-osv:
    name: SCA (OSV scanner)
    runs-on: ubuntu-latest
    needs: changes
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - name: Run OSV-Scanner
        uses: google/osv-scanner-action@v1
        with:
          scan-args: >
            --recursive
            --skip-git
            --format sarif
            --output osv.sarif
      - name: Upload SARIF (OSV)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: osv.sarif

  sca-lang:
    name: SCA (lang-specific)
    runs-on: ubuntu-latest
    needs: changes
    timeout-minutes: 40
    steps:
      - uses: actions/checkout@v4

      # ---------- Python ----------
      - name: Setup Python
        if: needs.changes.outputs.has_python == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip
        if: needs.changes.outputs.has_python == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements*.txt', 'pyproject.toml') }}

      - name: Install pip-audit
        if: needs.changes.outputs.has_python == 'true'
        run: |
          python -m pip install --upgrade pip
          python -m pip install pip-audit safety

      - name: pip-audit
        if: needs.changes.outputs.has_python == 'true'
        run: |
          set -e
          if ls requirements*.txt >/dev/null 2>&1; then
            pip-audit -r requirements.txt -f sarif -o pip-audit.sarif || true
          elif [ -f pyproject.toml ]; then
            pip-audit -f sarif -o pip-audit.sarif || true
          else
            echo "No Python manifest found."
          fi

      - name: Upload SARIF (pip-audit)
        if: needs.changes.outputs.has_python == 'true' && hashFiles('pip-audit.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pip-audit.sarif

      - name: safety (advisory DB)
        if: needs.changes.outputs.has_python == 'true' && hashFiles('**/requirements*.txt') != ''
        run: |
          safety check -r requirements.txt || true

      # ---------- Node.js ----------
      - name: Setup Node
        if: needs.changes.outputs.has_node == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: npm audit
        if: needs.changes.outputs.has_node == 'true' && hashFiles('package-lock.json') != ''
        run: |
          npm ci --ignore-scripts
          # Ошибку держим как предупреждение (не падаем из-за дев-зависимостей)
          npm audit --audit-level=high || true

      # ---------- Rust ----------
      - name: Setup Rust
        if: needs.changes.outputs.has_rust == 'true'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}

      - name: Cache cargo
        if: needs.changes.outputs.has_rust == 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: cargo-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}

      - name: cargo audit
        if: needs.changes.outputs.has_rust == 'true' && hashFiles('**/Cargo.lock') != ''
        run: |
          cargo install --locked cargo-audit || true
          cargo audit || true

      # ---------- Go ----------
      - name: Setup Go
        if: needs.changes.outputs.has_go == 'true'
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: govulncheck
        if: needs.changes.outputs.has_go == 'true' && hashFiles('**/go.mod') != ''
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./... || true

  secrets-scan:
    name: Secret scanning (Gitleaks + TruffleHog)
    runs-on: ubuntu-latest
    needs: changes
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # для скана истории
      - name: Gitleaks scan
        uses: gitleaks/gitleaks-action@v2
        continue-on-error: true
        with:
          args: detect --no-banner -v --redact --report-format sarif --report-path gitleaks.sarif
      - name: Upload SARIF (Gitleaks)
        if: hashFiles('gitleaks.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif

      - name: TruffleHog scan
        uses: trufflesecurity/trufflehog@v3
        continue-on-error: true
        with:
          path: .
          base: ${{ github.event.pull_request.base.sha || 'HEAD~1' }}
          head: ${{ github.sha }}
          extra_args: --json --no-update
      # TruffleHog выводит JSON в stdout; при необходимости можно парсить и конвертировать в SARIF сторонним скриптом.

  iac-and-fs-scan:
    name: IaC & FS scan (Trivy + Checkov)
    runs-on: ubuntu-latest
    needs: changes
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Trivy FS scan (deps + config)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-fs.sarif'
          severity: 'HIGH,CRITICAL'

      - name: Upload SARIF (Trivy FS)
        if: hashFiles('trivy-fs.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif

      - name: Checkov (IaC: Terraform/K8s/CloudFormation)
        if: needs.changes.outputs.has_iac == 'true'
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          framework: terraform,kubernetes,cloudformation
          quiet: true
          soft_fail: true          # отчётить в логах, но не падать билд
          output_format: sarif
          output_file_path: checkov.sarif

      - name: Upload SARIF (Checkov)
        if: needs.changes.outputs.has_iac == 'true' && hashFiles('checkov.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov.sarif

  # Итоговый «гейт» для PR — объединяет критичные проверки
  gate:
    name: Security gate
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    needs:
      - dependency-review
      - codeql
      - sca-osv
      - sca-lang
      - secrets-scan
      - iac-and-fs-scan
    timeout-minutes: 5
    steps:
      - name: Evaluate gate
        run: |
          echo "All security checks completed."
          # Правила ужесточения можно добавить здесь (парсинг артефактов/SARIF и fail при определённых уровнях).
