syntax = "proto3";

package ledger.v1;

option go_package        = "github.com/yourorg/ledger-core/gen/ledger/v1;ledgerv1";
option java_multiple_files = true;
option java_package        = "com.yourorg.ledger.v1";
option csharp_namespace    = "YourOrg.Ledger.V1";
option optimize_for        = SPEED;

// Optional (remove if not using protoc-gen-validate):
import "validate/validate.proto";

import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/wrappers.proto";

// ==============================
// Enums
// ==============================

/**
 * Статус жизненного цикла транзакции.
 */
enum TxStatus {
  TX_STATUS_UNSPECIFIED = 0;
  TX_STATUS_DRAFT       = 1;  // Создана, не зафиксирована.
  TX_STATUS_PENDING     = 2;  // Ожидает постинга (например, outbox).
  TX_STATUS_POSTED      = 3;  // Зафиксирована в книге.
  TX_STATUS_FAILED      = 4;  // Ошибка постинга.
  TX_STATUS_REVERSED    = 5;  // Сторнирована компенсирующей записью.
}

/**
 * Сторона проводки в двойной записи.
 */
enum Side {
  SIDE_UNSPECIFIED = 0;
  SIDE_DEBIT       = 1;
  SIDE_CREDIT      = 2;
}

/**
 * Направление сортировки.
 */
enum SortOrder {
  SORT_ORDER_UNSPECIFIED = 0;
  SORT_ASC               = 1;
  SORT_DESC              = 2;
}

// ==============================
// Core value objects
// ==============================

/**
 * Денежная сумма с произвольной точностью.
 * amount — каноничная десятичная строка без экспоненты (^-?\d+(\.\d+)?$).
 * currency — код валюты (ISO 4217 или неймспейс токена).
 */
message Money {
  string currency = 1 [
    (validate.rules).string = {min_len: 3, max_len: 32, pattern: "^[A-Z0-9:_\\-\\.]+$"}
  ];
  string amount   = 2 [
    (validate.rules).string = {pattern: "^-?\\d{1,32}(\\.\\d{1,18})?$"}
  ];
}

/**
 * Допконтекст для аудита/трассировки.
 */
message AuditContext {
  string request_id   = 1 [(validate.rules).string.uuid = true];
  string actor        = 2;  // subject / user / service principal
  string ip_address   = 3;  // IPv4/IPv6
  map<string, string> attributes = 10; // произвольный контекст
}

/**
 * Пара ключ-значение для детальных атрибутов.
 */
message Attribute {
  string key   = 1 [(validate.rules).string = {min_len: 1, max_len: 128}];
  string value = 2 [(validate.rules).string = {max_len: 2048}];
}

// ==============================
// Ledger domain
// ==============================

/**
 * Проводка (entry) — атомарная запись по счёту.
 * В сумме по транзакции сумма дебетов должна равняться сумме кредитов той же валюты.
 */
message Entry {
  string account_id = 1 [(validate.rules).string = {min_len: 1, max_len: 256}];
  Side   side       = 2 [(validate.rules).enum = {defined_only: true}];
  Money  money      = 3;
  string memo       = 4 [(validate.rules).string = {max_len: 512}];

  // Произвольные атрибуты; храните небольшие объёмы метаданных
  map<string, string> attributes = 10;
  // Необязательный суб-реестр/сегмент (например, юрлицо/линия бизнеса)
  string subledger = 11 [(validate.rules).string = {max_len: 128}];

  reserved 5, 6, 7, 8, 9; // место под эволюцию Entry без ломания нумерации
}

/**
 * Транзакция — набор проводок, соответствующий правилу двойной записи.
 */
message Transaction {
  string id               = 1 [(validate.rules).string.uuid = true]; // UUID
  TxStatus status         = 2 [(validate.rules).enum = {defined_only: true}];

  string journal          = 3 [(validate.rules).string = {min_len: 1, max_len: 128}]; // книга/журнал
  string reference        = 4 [(validate.rules).string = {max_len: 256}]; // внешняя ссылка
  string description      = 5 [(validate.rules).string = {max_len: 512}];

  repeated Entry entries  = 6 [(validate.rules).repeated = {min_items: 1, max_items: 1000}];

  // Итоги по балансу; возвращаются сервером для удобства
  Money total_debits      = 7;
  Money total_credits     = 8;

  google.protobuf.Timestamp created_at = 9;
  google.protobuf.Timestamp updated_at = 10;
  google.protobuf.Timestamp posted_at  = 11;

  // Идемпотентность: ключ запроса, по которому сервер дедуплицирует Create
  string idempotency_key  = 12 [(validate.rules).string = {min_len: 1, max_len: 128}];

  // Лейблы для поиска/агрегаций (не чувствительны к PII)
  map<string, string> labels = 13;

  // Произвольные атрибуты (ограничить объём на уровне сервера/БД)
  map<string, string> attributes = 14;

  // ETag/версия для оптимистической блокировки
  string etag = 15 [(validate.rules).string = {max_len: 64}];

  reserved 16, 17, 18, 19, 20;
}

// ==============================
// Requests / Responses
// ==============================

message CreateTransactionRequest {
  string journal         = 1 [(validate.rules).string = {min_len: 1, max_len: 128}];
  string description     = 2 [(validate.rules).string = {max_len: 512}];
  string reference       = 3 [(validate.rules).string = {max_len: 256}];
  repeated Entry entries = 4 [(validate.rules).repeated = {min_items: 1, max_items: 1000}];

  // Если true, сервер сразу пытается постинг; иначе создаёт DRAFT/PENDING.
  google.protobuf.BoolValue post_immediately = 5;
  // Клиентский ключ для идемпотентности create/post.
  string idempotency_key = 6 [(validate.rules).string = {min_len: 1, max_len: 128}];

  // Необязательная дата-эффективности для учёта (backdate запрещён политикой по умолчанию).
  google.protobuf.Timestamp effective_at = 7;

  AuditContext audit = 10;

  reserved 8, 9;
}

message CreateTransactionResponse {
  Transaction transaction = 1;
}

message GetTransactionRequest {
  string id = 1 [(validate.rules).string.uuid = true];
  // Маска полей для экономии трафика
  google.protobuf.FieldMask field_mask = 2;
}

message ListTransactionsRequest {
  string journal    = 1 [(validate.rules).string = {min_len: 1, max_len: 128}];
  // Выражение фильтра (пример: "status=POSTED AND labels.env='prod' AND created_at>=2025-01-01")
  string filter     = 2 [(validate.rules).string = {max_len: 2048}];
  int32  page_size  = 3 [(validate.rules).int32 = {gte: 1, lte: 1000}];
  string page_token = 4;
  // Поле сортировки: "created_at|posted_at|amount|id"
  string order_by   = 5 [(validate.rules).string = {max_len: 64}];
  SortOrder order   = 6 [(validate.rules).enum = {defined_only: true}];
  google.protobuf.FieldMask field_mask = 7;
  map<string, string> label_selector = 8; // точное совпадение по label'ам
}

message ListTransactionsResponse {
  repeated Transaction transactions = 1;
  string next_page_token = 2;
}

message PostTransactionRequest {
  string id = 1 [(validate.rules).string.uuid = true];
  // Жёсткая проверка баланса; если false — сервер может нормализовать копейки по политике
  google.protobuf.BoolValue require_balanced = 2;
  google.protobuf.Timestamp posted_at        = 3;
  string idempotency_key                     = 4 [(validate.rules).string = {min_len: 1, max_len: 128}];
  AuditContext audit                         = 10;
}

message ReverseTransactionRequest {
  string id     = 1 [(validate.rules).string.uuid = true];
  string reason = 2 [(validate.rules).string = {max_len: 512}];
  // Если true — создаётся компенсационная POSTED-транзакция.
  google.protobuf.BoolValue post_compensation = 3;
  google.protobuf.Timestamp effective_at      = 4;
  string idempotency_key                      = 5 [(validate.rules).string = {min_len: 1, max_len: 128}];
  AuditContext audit                           = 10;
}

message ReconcileRequest {
  string journal = 1 [(validate.rules).string = {min_len: 1, max_len: 128}];
  google.protobuf.Timestamp from = 2;
  google.protobuf.Timestamp to   = 3;
  // Допустимая погрешность по сумме
  Money tolerance = 4;
  // Согласовывать только метками, если заданы
  map<String, string> label_selector = 5;
}

message ReconcileResponse {
  // Баланс по счётам/валютам на конец периода.
  repeated Balance balances = 1;
  // Несогласованные расхождения.
  repeated Mismatch mismatches = 2;
  // Техническая сводка.
  Summary summary = 3;

  message Balance {
    string account_id = 1;
    Money  opening    = 2;
    Money  closing    = 3;
    Money  delta      = 4;
    string currency   = 5; // дублирование для быстрых агрегаций
  }

  message Mismatch {
    string account_id = 1;
    Money  expected   = 2;
    Money  actual     = 3;
    Money  diff       = 4;
  }

  message Summary {
    int64 checked_transactions = 1;
    int64 posted               = 2;
    int64 failed               = 3;
    int64 reversed             = 4;
    google.protobuf.Timestamp generated_at = 10;
  }
}

// ==============================
// Events (server-streaming)
// ==============================

/**
 * Обёртка событий книги для стрима/репликации.
 */
message LedgerEvent {
  string event_id = 1 [(validate.rules).string.uuid = true];
  google.protobuf.Timestamp occurred_at = 2;
  string journal = 3;

  oneof payload {
    TransactionCreated  created  = 10;
    TransactionPosted   posted   = 11;
    TransactionReversed reversed = 12;
    TransactionFailed   failed   = 13;
  }

  // Корреляция/трассировка
  AuditContext audit = 20;
}

message TransactionCreated { Transaction transaction = 1; }
message TransactionPosted  { Transaction transaction = 1; }
message TransactionReversed{
  Transaction transaction = 1;
  string reason = 2;
}
message TransactionFailed  {
  Transaction transaction = 1;
  string error_code = 2;   // доменный код
  string error_msg  = 3;   // безопасное описание
}

// ==============================
// Service
// ==============================

service LedgerService {
  rpc CreateTransaction(CreateTransactionRequest) returns (CreateTransactionResponse);
  rpc GetTransaction(GetTransactionRequest)       returns (Transaction);
  rpc ListTransactions(ListTransactionsRequest)   returns (ListTransactionsResponse);
  rpc PostTransaction(PostTransactionRequest)     returns (Transaction);
  rpc ReverseTransaction(ReverseTransactionRequest) returns (Transaction);
  rpc Reconcile(ReconcileRequest)                 returns (ReconcileResponse);

  // Серверный стрим доменных событий для CDC/интеграций
  rpc StreamEvents(StreamEventsRequest) returns (stream LedgerEvent);
}

message StreamEventsRequest {
  string journal = 1 [(validate.rules).string = {min_len: 1, max_len: 128}];
  // Возобновление стрима с позиции (например, event_id из чекпоинта)
  string after_event_id = 2;
  // Фильтр по статусам/лейблам
  repeated TxStatus statuses = 3;
  map<string, string> label_selector = 4;
  // Сервер может применять окно de-dup/merge
  int32  heartbeat_seconds = 10 [(validate.rules).int32 = {gte: 1, lte: 60}];
}

// ==============================
// Backward/Forward compatibility notes
// - use reserved fields for future changes
// - avoid changing semantics of existing fields
// - only add new fields with new tags
// ==============================
