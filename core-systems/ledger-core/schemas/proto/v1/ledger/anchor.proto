syntax = "proto3";

package ledger.v1.anchor;

// Версия схемы
option go_package = "github.com/ledger-core/proto/v1/ledger;ledgerpb";
option java_multiple_files = true;
option java_package = "com.ledger.v1.anchor";
option java_outer_classname = "AnchorProto";
option csharp_namespace = "Ledger.V1.Anchor";

// Метаданные для идентификации и аудита
message Metadata {
  string schema_version = 1;       // Версия схемы (например, v1.2.0)
  string created_by = 2;           // Идентификатор сервиса или узла
  string created_at = 3;           // RFC3339 timestamp
  string updated_at = 4;           // RFC3339 timestamp
  map<string, string> tags = 5;    // Произвольные метки
}

// Информация об анкере в блокчейне
message Anchor {
  string anchor_id = 1;            // Уникальный идентификатор анкера (UUIDv7)
  bytes root_hash = 2;             // Меркл- или другой корневой хэш
  uint64 block_height = 3;         // Высота блока
  string chain_id = 4;             // Идентификатор цепочки
  string tx_id = 5;                // Хэш транзакции
  repeated Proof proofs = 6;       // Доказательства (Merkle/Zero-Knowledge)
  Metadata metadata = 7;           // Метаданные
}

// Структура доказательства целостности
message Proof {
  string type = 1;                 // Тип (Merkle, SNARK, STARK)
  bytes data = 2;                  // Сырые данные доказательства
  string algorithm = 3;            // Алгоритм хэширования/доказательства
  repeated bytes path = 4;         // Путь в дереве хэшей
}

// Запрос на создание анкера
message CreateAnchorRequest {
  bytes root_hash = 1;             // Хэш данных
  string chain_id = 2;             // Цепочка для анкера
  Metadata metadata = 3;           // Метаданные
}

// Ответ при создании анкера
message CreateAnchorResponse {
  Anchor anchor = 1;
}

// Запрос на получение анкера
message GetAnchorRequest {
  string anchor_id = 1;
}

// Ответ с данными анкера
message GetAnchorResponse {
  Anchor anchor = 1;
}

// Сервис управления анкером
service AnchorService {
  rpc CreateAnchor (CreateAnchorRequest) returns (CreateAnchorResponse);
  rpc GetAnchor (GetAnchorRequest) returns (GetAnchorResponse);
}
