syntax = "proto3";

/**
 * ledger-core / schemas/proto/v1/common.proto
 * Базовые типы и перечисления для всего API.
 *
 * Совместимость:
 *  - Используется proto3, только well-known types: timestamp/duration/any/wrappers.
 *  - Для эволюции: НЕ переиспользовать удалённые поля (reserved), новые поля — только с новыми номерами.
 */

package ledger.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/any.proto";
import "google/protobuf/wrappers.proto";

// ---------------------------
// Code generation options
// ---------------------------
option optimize_for = SPEED;
option cc_enable_arenas = true;

option go_package = "github.com/yourorg/ledger-core/gen/go/ledgerv1;ledgerv1";
option java_multiple_files = true;
option java_package = "com.yourorg.ledger.v1";
option java_outer_classname = "CommonProto";
option csharp_namespace = "YourOrg.Ledger.V1";
option php_namespace = "YourOrg\\Ledger\\V1";
option ruby_package = "YourOrg::Ledger::V1";

// ---------------------------
// Universal identifiers
// ---------------------------

/**
 * Универсальный идентификатор (UUID v4 или ULID в строковом представлении).
 * Хранится как строка, чтобы сохранить совместимость между хранилищами/языками.
 * Рекомендуемый формат: UUID v4 (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx) в нижнем регистре.
 */
message Uid {
  string value = 1; // REQUIRED. Example: "550e8400-e29b-41d4-a716-446655440000"
}

/**
 * Натуральный ключ доменного объекта (необязателен, используется вместе с Uid).
 * Например: "orders:2025-01-01:12345".
 */
message NaturalKey {
  string value = 1;
}

/**
 * Идемпотентный ключ для безопасной обработки запросов (создание платежа, и т.п.).
 * Рекомендуется использовать криптостойкие случайные значения длиной 16–48 байт (base64/base32/hex).
 */
message IdempotencyKey {
  string value = 1;
}

// ---------------------------
// Time / trace / actor
// ---------------------------

/**
 * Контекст трассировки, совместимый с W3C Trace Context.
 * trace_id/span_id — 16/8 байт в hex (lowercase, без префикса 0x).
 */
message TraceContext {
  string trace_id = 1; // 32 hex chars
  string span_id  = 2; // 16 hex chars
  string parent_span_id = 3; // optional 16 hex chars
  // Baggage или пользовательские атрибуты трассировки
  map<string, string> attributes = 10;
}

/** Сведения об акторе (пользователь/сервис), инициировавшем действие. */
message Actor {
  enum Type {
    TYPE_UNSPECIFIED = 0;
    USER             = 1;
    SERVICE          = 2;
    SYSTEM           = 3;
  }
  Type type = 1;
  string id = 2;          // Уникальный идентификатор субъекта (user_id, service name).
  string display_name = 3;
  string tenant_id = 4;   // Для мультитенантных систем.
  map<string, string> attributes = 10; // Произвольные атрибуты (роль, орг, и т.д.)
}

/** Контекст запроса: идемпотентность, трассировка, источник и клиент. */
message RequestContext {
  IdempotencyKey idempotency_key = 1;
  TraceContext trace = 2;
  string client_version = 3; // Версия клиента/SDK.
  string source_ip = 4;
  string user_agent = 5;
  Actor actor = 6;
  google.protobuf.Timestamp received_at = 7;
  // Зарезервировано для будущего: geo, locale и т.п.
  reserved 100 to 119;
}

// ---------------------------
// Money / currency
// ---------------------------

/**
 * Валюта ISO 4217. Список сокращён до часто используемых; расширяйте при необходимости.
 * Для неизвестной валюты используйте CURRENCY_UNSPECIFIED и указывайте alphanumeric_code строкой в Money.
 */
enum Currency {
  CURRENCY_UNSPECIFIED = 0;
  USD = 1;
  EUR = 2;
  GBP = 3;
  SEK = 4;
  RUB = 5;
  CHF = 6;
  JPY = 7;
  CNY = 8;
  AUD = 9;
  CAD = 10;
  NOK = 11;
  DKK = 12;
}

/**
 * Денежная величина в формате units+nanos (как google.type.Money, но без внешней зависимости).
 * - units: целые денежные единицы (например, доллары/евро).
 * - nanos: дробная часть в наносах (-999,999,999..+999,999,999).
 * Знак хранится согласованно: units и nanos одного знака или ноль.
 *
 * Пример: 1.23 USD => units=1, nanos=230000000, currency=USD
 */
message Money {
  Currency currency = 1;
  int64 units = 2;
  int32 nanos = 3; // [-999999999, 999999999]
  // Для не стандартных валют можно передать строковый код:
  google.protobuf.StringValue alphanumeric_code = 10; // e.g., "XBT"
}

/**
 * Диапазон денежных значений (для фильтров/лимитов).
 */
message MoneyRange {
  Money min = 1;
  Money max = 2;
}

// ---------------------------
// Pagination / sorting
// ---------------------------

/** Запрос постраничной выборки. */
message PageRequest {
  uint32 limit = 1;      // max items per page
  string cursor = 2;     // opaque cursor (server-issued)
  // Альтернатива для offset-страниц — не рекомендуется на больших наборах:
  google.protobuf.UInt64Value offset = 10;
}

/** Ответ постраничной выборки. */
message PageResponse {
  string next_cursor = 1; // пусто, если страницы закончились
  uint64 total = 2;       // опционально: общая мощность (дорого считать)
}

/** Правило сортировки. */
message Sort {
  enum Direction {
    DIRECTION_UNSPECIFIED = 0;
    ASC  = 1;
    DESC = 2;
  }
  string field = 1;      // имя поля в доменной сущности
  Direction direction = 2;
}

// ---------------------------
// Error model
// ---------------------------

/**
 * Коды ошибок (приближены к google.rpc.Code, без импорта).
 */
enum ErrorCode {
  ERROR_CODE_UNSPECIFIED = 0;
  OK                     = 1;
  INVALID_ARGUMENT       = 3;
  DEADLINE_EXCEEDED      = 4;
  NOT_FOUND              = 5;
  ALREADY_EXISTS         = 6;
  PERMISSION_DENIED      = 7;
  UNAUTHENTICATED        = 16;
  RESOURCE_EXHAUSTED     = 8;
  FAILED_PRECONDITION    = 9;
  ABORTED                = 10;
  OUT_OF_RANGE           = 11;
  UNIMPLEMENTED          = 12;
  INTERNAL               = 13;
  UNAVAILABLE            = 14;
  DATA_LOSS              = 15;
  CONFLICT               = 17; // domain-specific conflict (e.g., version/ETag)
}

/**
 * Детали ошибки: поле, ограничение, значение, произвольные атрибуты.
 */
message ErrorDetail {
  string field = 1;
  string reason = 2;   // короткий код причины, например "required", "format", "range"
  string message = 3;  // человекочитаемое пояснение
  google.protobuf.Any meta = 10; // произвольные структурированные детали
}

/** Объект ошибки ответа API. */
message Error {
  ErrorCode code = 1;
  string message = 2;                       // человекочитаемое сообщение
  repeated ErrorDetail details = 3;         // детали валидации и пр.
  TraceContext trace = 4;                   // копия контекста трассировки для корреляции
  google.protobuf.Timestamp occurred_at = 5;
}

// ---------------------------
// Audit / signature
// ---------------------------

/** Криптографическая подпись полезной нагрузки (для веб-хуков/журнала). */
message Signature {
  enum Algo {
    ALGO_UNSPECIFIED = 0;
    HMAC_SHA256 = 1;
    ED25519     = 2;
    RSA_PSS_SHA256 = 3;
  }
  Algo algo = 1;
  bytes signature = 2;
  // Идентификатор ключа (KID) для ротации.
  string key_id = 3;
  // Байт‑слой, по которому считалась подпись (например, canonical JSON).
  string canonicalization = 4;
}

/** Запись аудита. */
message AuditEntry {
  enum Action {
    ACTION_UNSPECIFIED = 0;
    CREATE = 1;
    UPDATE = 2;
    DELETE = 3;
    READ   = 4;
    EXEC   = 5;
  }
  Uid audit_id = 1;
  string resource_type = 2;  // e.g., "ledger.Transaction"
  string resource_id = 3;    // доменный идентификатор
  Action action = 4;
  Actor actor = 5;
  google.protobuf.Timestamp occurred_at = 6;
  string reason = 7;
  map<string, string> attributes = 10; // дополнительные атрибуты (ip, ua, etc.)
  // Слоты на будущее
  reserved 100 to 119;
}

// ---------------------------
// Envelope (bus/http)
// ---------------------------

/**
 * Универсальная оболочка сообщения для шины событий или веб‑хуков.
 * Включает идентификаторы, заголовки, подпись и трассировку.
 */
message Envelope {
  Uid message_id = 1;
  string topic = 2;                         // имя топика/канала
  map<string, string> headers = 3;          // тип сообщения, версия схемы и т.п.
  google.protobuf.Any payload = 4;          // фактическое содержимое (доменные типы)
  TraceContext trace = 5;
  Actor producer = 6;
  google.protobuf.Timestamp produced_at = 7;
  Signature signature = 8;                  // опционально
  // Идемпотентность/ключ повторной обработки
  IdempotencyKey idempotency_key = 9;
  // Слоты на будущее
  reserved 100 to 129;
}

// ---------------------------
// Data Quality (общие перечисления)
// ---------------------------

/** Общий результат проверки качества данных. */
enum QualityStatus {
  QUALITY_STATUS_UNSPECIFIED = 0;
  PASS = 1;
  WARN = 2;
  FAIL = 3;
}

/** Типы стандартных ожиданий (для отчётов DQ). */
enum ExpectationType {
  EXPECTATION_TYPE_UNSPECIFIED = 0;
  SCHEMA = 1;
  NOT_NULL = 2;
  UNIQUE = 3;
  RANGE = 4;
  REGEX = 5;
}

// ---------------------------
// Utility types
// ---------------------------

/** Пара «ключ‑значение», когда map неуместен (сохраняем порядок). */
message Pair {
  string key = 1;
  string value = 2;
}

/** Интервал времени. */
message TimeRange {
  google.protobuf.Timestamp start = 1;
  google.protobuf.Timestamp end = 2;
}

/** SLA для свежести данных. */
message FreshnessSla {
  google.protobuf.Duration max_age = 1; // допустимый возраст данных
  google.protobuf.Timestamp as_of = 2;  // момент отсчёта
}

// ---------------------------
// Evolution guards
// ---------------------------

// Пример зарезервированных номеров на будущее расширение общих типов.
// Не переиспользуйте эти номера при добавлении новых полей.
message _ReservedNumbersDoNotUse {
  reserved 1 to 50;
}
