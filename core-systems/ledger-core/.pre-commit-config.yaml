# ledger-core / .pre-commit-config.yaml
# Стратегия:
# - Быстрые автофикс-хуки на commit.
# - Усиленные проверки (типизация, безопасность) на push/ci.
# - Жёсткие исключения путей, чтобы не трогать сгенерированное/вендор.
# ВНИМАНИЕ: замените все REV_PLACEHOLDER на проверенные теги соответствующих репозиториев.
# I cannot verify this.

minimum_pre_commit_version: "3.5.0"

default_install_hook_types:
  - pre-commit
  - pre-push

default_language_version:
  python: python3.11

ci:
  skip: []   # явно не пропускаем хуки в CI
  autofix_prs: false
  autoupdate_schedule: quarterly

# Глобальные исключения (не линтить и не форматировать эти пути)
exclude: |
  (?x)(
      ^\.?venv/|
      ^\.mypy_cache/|
      ^\.ruff_cache/|
      ^\.pytest_cache/|
      ^\.tox/|
      ^build/|
      ^dist/|
      ^node_modules/|
      ^third_party/|
      ^vendor/|
      ^docs/_build/|
      ^.idea/|
      ^.vscode/|
      ^coverage/|
      ^reports/|
      \.min\.(js|css)$
  )

repos:
  # 1) Базовая гигиена (быстро)
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: REV_PLACEHOLDER_pre_commit_hooks   # пример: v4.6.0 — заменить фактическим
    hooks:
      - id: check-ast
      - id: check-added-large-files
        args: ["--maxkb=500"]
      - id: check-merge-conflict
      - id: end-of-file-fixer
      - id: trailing-whitespace
      - id: mixed-line-ending
        args: ["--fix=auto"]
      - id: detect-private-key
      - id: debug-statements
      - id: check-yaml
      - id: check-json
      - id: check-toml

  # 2) Форматирование Python (детерминированно)
  - repo: https://github.com/psf/black
    rev: REV_PLACEHOLDER_black   # пример: 24.4.2 — заменить фактическим
    hooks:
      - id: black
        language_version: python3.11
        args: ["--safe", "--target-version=py311"]
        stages: [commit, push, manual]

  # 3) Ruff: линтинг (и только линтинг) — быстрый
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: REV_PLACEHOLDER_ruff   # пример: v0.5.0 — заменить фактическим
    hooks:
      - id: ruff
        args:
          - "--fix"
          - "--exit-non-zero-on-fix"
        stages: [commit, push]
        additional_dependencies: []  # при необходимости добавить плагины
      # Если НЕ используете Black, можно включить ruff-format:
      # - id: ruff-format

  # 4) isort (если не используете ruff organize-imports)
  - repo: https://github.com/pycqa/isort
    rev: REV_PLACEHOLDER_isort  # пример: 5.13.2 — заменить фактическим
    hooks:
      - id: isort
        args: ["--profile", "black"]
        stages: [commit, push]

  # 5) Mypy (тяжелее, только на push/ci)
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: REV_PLACEHOLDER_mypy   # пример: v1.10.0 — заменить фактическим
    hooks:
      - id: mypy
        stages: [push]
        args:
          - "--no-warn-no-return"
          - "--warn-redundant-casts"
          - "--warn-unused-ignores"
          - "--disallow-untyped-defs"
          - "--disallow-incomplete-defs"
          - "--pretty"
        additional_dependencies:
          - types-PyYAML
          - types-requests

  # 6) Безопасность Python (Bandit) — на push/ci
  - repo: https://github.com/PyCQA/bandit
    rev: REV_PLACEHOLDER_bandit  # пример: 1.7.9 — заменить фактическим
    hooks:
      - id: bandit
        name: bandit (app)
        stages: [push]
        args: ["-q", "-r", "src", "-x", "tests,examples"]
      - id: bandit
        name: bandit (tests)
        stages: [push]
        args: ["-q", "-r", "tests"]

  # 7) Поиск секретов
  - repo: https://github.com/Yelp/detect-secrets
    rev: REV_PLACEHOLDER_detect_secrets  # пример: v1.5.0 — заменить фактическим
    hooks:
      - id: detect-secrets
        name: detect-secrets (commit)
        stages: [commit]
        args: ["--baseline", ".secrets.baseline"]
        # Примечание: сгенерируйте baseline: `detect-secrets scan > .secrets.baseline`

  # 8) Форматирование/проверка Markdown, JSON, YAML (Prettier)
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: REV_PLACEHOLDER_prettier   # пример: v3.3.2 — заменить фактическим
    hooks:
      - id: prettier
        stages: [commit, push]
        additional_dependencies: []  # добавить плагины при необходимости
        types_or: [markdown, json, yaml, css, scss, html]

  # 9) Markdownlint (правила для документации)
  - repo: https://github.com/DavidAnson/markdownlint-cli2
    rev: REV_PLACEHOLDER_markdownlint  # пример: v0.13.0 — заменить фактическим
    hooks:
      - id: markdownlint-cli2
        files: "\\.(md|markdown)$"
        stages: [commit, push]

  # 10) YAML линтер
  - repo: https://github.com/adrienverge/yamllint
    rev: REV_PLACEHOLDER_yamllint   # пример: v1.35.1 — заменить фактическим
    hooks:
      - id: yamllint
        args: ["-s"]  # quiet, вывод только ошибок
        stages: [commit, push]

  # 11) Shell — ShellCheck
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: REV_PLACEHOLDER_shellcheck  # пример: v0.10.0.1 — заменить фактическим
    hooks:
      - id: shellcheck
        stages: [push]
        files: "\\.(sh|bash)$"

  # 12) Dockerfile — Hadolint
  - repo: https://github.com/hadolint/hadolint
    rev: REV_PLACEHOLDER_hadolint  # пример: v2.12.0 — заменить фактическим
    hooks:
      - id: hadolint
        stages: [push]
        files: "(^|/)(Dockerfile|.*\\.Dockerfile)$"

  # 13) Лицензии — REUSE (соответствие SPDX)
  - repo: https://github.com/fsfe/reuse-tool
    rev: REV_PLACEHOLDER_reuse  # пример: v3.0.2 — заменить фактическим
    hooks:
      - id: reuse
        stages: [push, manual]

  # 14) Пакетная безопасность — pip-audit (advisories) на push/ci
  - repo: https://github.com/pypa/pip-audit
    rev: REV_PLACEHOLDER_pip_audit   # пример: v2.7.3 — заменить фактическим
    hooks:
      - id: pip-audit
        name: pip-audit (requirements)
        stages: [push]
        args:
          - "--strict"
          - "--progress-spinner=off"
        files: "(^|/)(requirements(\\..*)?\\.txt|requirements/.*\\.txt)$"

  # 15) Commit messages — Conventional Commits (commitizen)
  - repo: https://github.com/commitizen-tools/commitizen
    rev: REV_PLACEHOLDER_commitizen  # пример: v3.27.0 — заменить фактическим
    hooks:
      - id: commitizen
        stages: [commit-msg]
        additional_dependencies: []
        # Требуется pyproject.toml с конфигом cz

  # 16) Локальный быстрый тест-пакет (опционально)
  - repo: local
    hooks:
      - id: pytest-unit-quick
        name: pytest unit quick
        entry: bash -c 'pytest -q tests/unit -k "not slow"'
        language: system
        pass_filenames: false
        stages: [push]
        types: [python]
