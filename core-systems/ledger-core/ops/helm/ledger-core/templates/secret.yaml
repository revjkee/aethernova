{{- /*
ledger-core/ops/helm/ledger-core/templates/secret.yaml

Промышленный шаблон секрета со следующими возможностями:
- .Values.secrets.enabled: включение/выключение рендера
- .Values.secrets.externalSecrets.enabled: рендер ExternalSecret вместо Secret
- .Values.secrets.type: тип секрета (по умолчанию Opaque)
- .Values.secrets.immutable: делаем Secret неизменяемым (immutable: true)
- .Values.secrets.annotations / labels: дополнительные аннотации/метки
- .Values.secrets.stringData: строковые пары (не base64)
- .Values.secrets.data: бинарные/уже base64-энкодед пары (будут заэнкодены шаблоном)
- .Values.secrets.files: массив объектов {key, path, binary} — загрузка содержимого из файлов чарта
- .Values.secrets.checksumSources: произвольные YAML-фрагменты для аннотации checksum/* (роллаута)
- .Values.secrets.externalSecrets.*: настройки для ExternalSecret (см. ниже)
*/ -}}

{{- if .Values.secrets.enabled }}

{{- /* Общие вычисления имени и метаданных без зависимостей от _helpers.tpl */ -}}
{{- $chartName := default "ledger-core" .Chart.Name -}}
{{- $fullname := printf "%s-%s" .Release.Name $chartName | trunc 63 | trimSuffix "-" -}}
{{- $secretName := default (printf "%s" $fullname) .Values.secrets.name -}}
{{- $labels := dict
      "app.kubernetes.io/name" $chartName
      "app.kubernetes.io/instance" .Release.Name
      "app.kubernetes.io/managed-by" "Helm"
      "app.kubernetes.io/part-of" "ledger-core"
      "helm.sh/chart" (printf "%s-%s" .Chart.Name (.Chart.Version | replace "+" "_"))
-}}
{{- $extraLabels := default (dict) .Values.secrets.labels -}}
{{- $allLabels := merge (deepCopy $labels) $extraLabels -}}

{{- /* checksum аннотации для принудительного проката деплоймента при изменении секретов */ -}}
{{- $ann := default (dict) .Values.secrets.annotations -}}
{{- $checksumSources := default (list) .Values.secrets.checksumSources -}}
{{- $checks := dict -}}
{{- range $i, $src := $checksumSources }}
  {{- $key := printf "checksum/%d" $i -}}
  {{- $_ := set $checks $key ($src | toYaml | sha256sum) -}}
{{- end -}}
{{- $allAnn := merge (deepCopy $ann) $checks -}}

{{- if (and .Values.secrets.externalSecrets .Values.secrets.externalSecrets.enabled) }}
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ $secretName }}
  labels: {{- toYaml $allLabels | nindent 4 }}
  annotations: {{- toYaml $allAnn | nindent 4 }}
spec:
  refreshInterval: {{ default "1h" .Values.secrets.externalSecrets.refreshInterval | quote }}
  secretStoreRef:
    name: {{ required "secrets.externalSecrets.secretStoreRef.name is required" .Values.secrets.externalSecrets.secretStoreRef.name | quote }}
    kind: {{ default "ClusterSecretStore" .Values.secrets.externalSecrets.secretStoreRef.kind | quote }}
  target:
    name: {{ $secretName }}
    creationPolicy: {{ default "Owner" .Values.secrets.externalSecrets.creationPolicy | quote }}
    template:
      type: {{ default "Opaque" .Values.secrets.type | quote }}
      metadata:
        labels: {{- toYaml $allLabels | nindent 10 }}
        annotations: {{- toYaml $allAnn | nindent 10 }}
  {{- with .Values.secrets.externalSecrets.data }}
  data:
    {{- /* data: список элементов {secretKey, remoteRef: {key, property, ...}} */}}
    {{- toYaml . | nindent 2 }}
  {{- end }}
  {{- with .Values.secrets.externalSecrets.dataFrom }}
  dataFrom:
    {{- /* dataFrom: список remoteRef/key */}}
    {{- toYaml . | nindent 2 }}
  {{- end }}

{{- else }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
  labels: {{- toYaml $allLabels | nindent 4 }}
  annotations: {{- toYaml $allAnn | nindent 4 }}
type: {{ default "Opaque" .Values.secrets.type | quote }}
{{- if hasKey .Values.secrets "immutable" }}
immutable: {{ .Values.secrets.immutable }}
{{- end }}
data:
  {{- /* .Values.secrets.data — пары будут закодированы в base64 */ -}}
  {{- range $k, $v := (default (dict) .Values.secrets.data) }}
  {{ $k }}: {{ $v | toString | b64enc }}
  {{- end }}
  {{- /* .Values.secrets.files — загрузка из файлов чарта */ -}}
  {{- range $f := (default (list) .Values.secrets.files) }}
  {{- $key := required "secrets.files[].key is required" $f.key -}}
  {{- $path := required "secrets.files[].path is required" $f.path -}}
  {{- $binary := default false $f.binary -}}
  {{- $content := .Files.Get $path | default "" -}}
  {{- if not $content }}{{- fail (printf "file not found: %s" $path) }}{{- end -}}
  {{- if $binary }}
  {{ $key }}: {{ $content | b64enc }}
  {{- else }}
  {{ $key }}: {{ $content | b64enc }}
  {{- end }}
  {{- end }}
stringData:
  {{- /* .Values.secrets.stringData — попадут в Secret как обычные строки */ -}}
  {{- range $k, $v := (default (dict) .Values.secrets.stringData) }}
  {{ $k }}: {{ $v | toString | quote }}
  {{- end }}
{{- end }}
{{- end }}
