# ops/helm/ledger-core/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ledger-core.fullname" . }}
  labels:
    {{- include "ledger-core.labels" . | nindent 4 }}
  annotations:
    # Перекатка при изменениях конфигов/секретов
    checksum/config: {{ include (print .Template.BasePath "/configmap.yaml") . | sha256sum }}
    {{- if .Values.secrets.enabled }}
    checksum/secrets: {{ include (print .Template.BasePath "/secrets.yaml") . | sha256sum }}
    {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: {{ default 10 .Values.revisionHistoryLimit }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: {{ default "25%" .Values.updateStrategy.maxUnavailable }}
      maxSurge: {{ default "25%" .Values.updateStrategy.maxSurge }}
  selector:
    matchLabels:
      {{- include "ledger-core.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "ledger-core.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        # Служебные таймауты/хинты для ingress/sidecar’ов могут подмешиваться тут
    spec:
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      {{- end }}
      serviceAccountName: {{ include "ledger-core.serviceAccountName" . }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml .Values.imagePullSecrets | nindent 8 }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.podSecurityContext.fsGroup | default 2000 }}
        fsGroupChangePolicy: {{ .Values.podSecurityContext.fsGroupChangePolicy | default "OnRootMismatch" | quote }}
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      {{- end }}
      terminationGracePeriodSeconds: {{ default 30 .Values.terminationGracePeriodSeconds }}
      topologySpreadConstraints:
        {{- if .Values.topologySpread.enabled }}
        - maxSkew: {{ default 1 .Values.topologySpread.maxSkew }}
          topologyKey: {{ default "topology.kubernetes.io/zone" .Values.topologySpread.topologyKey }}
          whenUnsatisfiable: {{ default "ScheduleAnyway" .Values.topologySpread.whenUnsatisfiable }}
          labelSelector:
            matchLabels:
              {{- include "ledger-core.selectorLabels" . | nindent 14 }}
        {{- end }}
      affinity:
        {{- if .Values.affinity }}
        {{- toYaml .Values.affinity | nindent 8 }}
        {{- else }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    {{- include "ledger-core.selectorLabels" . | nindent 20 }}
        {{- end }}
      nodeSelector:
        {{- toYaml (.Values.nodeSelector | default dict) | nindent 8 }}
      tolerations:
        {{- toYaml (.Values.tolerations | default list) | nindent 8 }}

      {{- if .Values.initContainers }}
      initContainers:
        {{- range $i, $c := .Values.initContainers }}
        - name: {{ $c.name }}
          image: {{ $c.image }}
          imagePullPolicy: {{ default "IfNotPresent" $c.imagePullPolicy }}
          command: {{- if $c.command }} {{ toYaml $c.command | nindent 12 }} {{- end }}
          args: {{- if $c.args }} {{ toYaml $c.args | nindent 12 }} {{- end }}
          env: {{- if $c.env }} {{ toYaml $c.env | nindent 12 }} {{- end }}
          envFrom: {{- if $c.envFrom }} {{ toYaml $c.envFrom | nindent 12 }} {{- end }}
          volumeMounts: {{- if $c.volumeMounts }} {{ toYaml $c.volumeMounts | nindent 12 }} {{- end }}
          resources: {{- if $c.resources }} {{ toYaml $c.resources | nindent 12 }} {{- end }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities: { drop: ["ALL"] }
            runAsNonRoot: true
            readOnlyRootFilesystem: true
        {{- end }}
      {{- end }}

      containers:
        - name: {{ include "ledger-core.name" . }}
          image: "{{ .Values.image.repository }}@{{ .Values.image.digest }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities: { drop: ["ALL"] }
            runAsNonRoot: true
            runAsUser: {{ .Values.containerSecurityContext.runAsUser | default 10001 }}
            readOnlyRootFilesystem: true
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
            {{- if .Values.metrics.enabled }}
            - name: metrics
              containerPort: {{ .Values.metrics.port }}
              protocol: TCP
            {{- end }}
          env:
            - name: NODE_NAME
              valueFrom: { fieldRef: { fieldPath: spec.nodeName } }
            - name: POD_NAME
              valueFrom: { fieldRef: { fieldPath: metadata.name } }
            - name: POD_NAMESPACE
              valueFrom: { fieldRef: { fieldPath: metadata.namespace } }
            {{- range $k, $v := .Values.env }}
            - name: {{ $k }}
              value: {{ $v | quote }}
            {{- end }}
          envFrom:
            {{- if .Values.envFrom.configMapRef }}
            - configMapRef:
                name: {{ include "ledger-core.configMapName" . }}
            {{- end }}
            {{- if and .Values.secrets.enabled .Values.envFrom.secretRef }}
            - secretRef:
                name: {{ include "ledger-core.secretsName" . }}
            {{- end }}
          volumeMounts:
            {{- if .Values.envFrom.configMapRef }}
            - name: config
              mountPath: /etc/ledger
              readOnly: true
            {{- end }}
            {{- if and .Values.secrets.enabled .Values.secrets.mount.enabled }}
            - name: app-secrets
              mountPath: /var/run/secrets/ledger
              readOnly: true
            {{- end }}
            {{- if .Values.extraVolumeMounts }}
            {{- toYaml .Values.extraVolumeMounts | nindent 12 }}
            {{- end }}
          args:
            {{- if .Values.args }}
            {{- toYaml .Values.args | nindent 12 }}
            {{- end }}

          startupProbe:
            httpGet:
              path: {{ .Values.probes.startup.path }}
              port: http
            initialDelaySeconds: {{ .Values.probes.startup.initialDelaySeconds | default 0 }}
            periodSeconds: {{ .Values.probes.startup.periodSeconds | default 5 }}
            failureThreshold: {{ .Values.probes.startup.failureThreshold | default 30 }}

          livenessProbe:
            httpGet:
              path: {{ .Values.probes.liveness.path }}
              port: http
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds | default 5 }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds | default 10 }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds | default 2 }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold | default 3 }}

          readinessProbe:
            httpGet:
              path: {{ .Values.probes.readiness.path }}
              port: http
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds | default 2 }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds | default 5 }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds | default 2 }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold | default 3 }}

          resources:
            {{- toYaml .Values.resources | nindent 12 }}

        {{- if .Values.otelCollector.enabled }}
        - name: otel-agent
          image: "{{ .Values.otelCollector.image.repository }}:{{ .Values.otelCollector.image.tag }}"
          imagePullPolicy: {{ default "IfNotPresent" .Values.otelCollector.image.pullPolicy }}
          args:
            - "--config=/etc/otel/config.yaml"
          ports:
            - name: otlp
              containerPort: {{ .Values.otelCollector.ports.otlp }}
          volumeMounts:
            - name: otel-config
              mountPath: /etc/otel
              readOnly: true
          securityContext:
            allowPrivilegeEscalation: false
            capabilities: { drop: ["ALL"] }
            runAsNonRoot: true
            readOnlyRootFilesystem: true
          resources:
            {{- toYaml .Values.otelCollector.resources | nindent 12 }}
        {{- end }}

        {{- if .Values.sidecars }}
        {{- toYaml .Values.sidecars | nindent 8 }}
        {{- end }}

      volumes:
        {{- if .Values.envFrom.configMapRef }}
        - name: config
          configMap:
            name: {{ include "ledger-core.configMapName" . }}
        {{- end }}
        {{- if and .Values.secrets.enabled .Values.secrets.mount.enabled }}
        - name: app-secrets
          secret:
            secretName: {{ include "ledger-core.secretsName" . }}
            optional: false
        {{- end }}
        {{- if .Values.otelCollector.enabled }}
        - name: otel-config
          configMap:
            name: {{ include "ledger-core.fullname" . }}-otel
        {{- end }}
        {{- if .Values.extraVolumes }}
        {{- toYaml .Values.extraVolumes | nindent 8 }}
        {{- end }}
