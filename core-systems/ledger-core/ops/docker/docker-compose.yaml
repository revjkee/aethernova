version: "3.9"

# Глобальные якоря для повторного использования
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "5"
    compress: "true"

x-security: &hardened
  read_only: true
  cap_drop: [ "ALL" ]
  security_opt:
    - no-new-privileges:true
  tmpfs:
    - /tmp:rw,noexec,nosuid,nodev
  ulimits:
    nofile: 65536
    nproc: 4096

x-restart: &restart
  restart: unless-stopped

x-resources: &resources
  deploy:
    resources:
      limits:
        cpus: "1.50"
        memory: 1024M
      reservations:
        cpus: "0.25"
        memory: 256M

# Сети: публичная (для nginx) и внутренняя (данные)
networks:
  public:
    driver: bridge
  backend:
    driver: bridge
    internal: true

# Persist‑тома
volumes:
  pg_data:
  redis_data:
  ledger_data:

# Docker secrets: создайте файлы в ops/docker/secrets/*
secrets:
  db_password:
    file: ./secrets/db_password.txt
  api_secret:
    file: ./secrets/api_secret.txt
  jwt_signing_key:
    file: ./secrets/jwt_key.pem

# Базовые переменные (подхватываются из .env)
# Пример .env:
#   POSTGRES_DB=ledger
#   POSTGRES_USER=ledger
#   POSTGRES_HOST=postgres
#   POSTGRES_PORT=5432
#   REDIS_HOST=redis
#   REDIS_PORT=6379
#   APP_ENV=production
#   LOG_LEVEL=info
#   LEDGER_TAG=latest
#   EXTERNAL_HTTP_PORT=8080
#   EXTERNAL_HTTPS_PORT=8443
#   OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
#
# НЕ храните пароли в .env — используйте secrets.
services:

  postgres:
    image: postgres:16-alpine
    <<: [ *restart ]
    logging: *default-logging
    networks: [ backend ]
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ledger}
      POSTGRES_USER: ${POSTGRES_USER:-ledger}
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      POSTGRES_INITDB_ARGS: "--data-checksums"
    secrets:
      - db_password
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 10s
    volumes:
      - pg_data:/var/lib/postgresql/data:Z
    sysctls:
      net.core.somaxconn: 1024
    mem_swappiness: 0

  redis:
    image: redis:7.2-alpine
    <<: [ *restart ]
    logging: *default-logging
    networks: [ backend ]
    command: >
      redis-server --appendonly yes
                   --save 900 1 --save 300 10 --save 60 10000
                   --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data:Z
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 5s

  # Одноразовая миграция БД — запускается профилем "migrate" или автоматически
  migrate:
    build:
      context: ../..
      dockerfile: ops/docker/Dockerfile
      target: api
    image: ledger-core-api:${LEDGER_TAG:-latest}
    networks: [ backend ]
    environment:
      APP_ENV: ${APP_ENV:-production}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LEDGER_DB_URL: postgres://${POSTGRES_USER:-ledger}:_secret_@${POSTGRES_HOST:-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-ledger}
      # Пароль подставляется entrypoint'ом через секрет
    secrets:
      - db_password
    entrypoint: [ "/bin/sh", "-c" ]
    command: >
      'export PGPASSWORD=$$(cat /run/secrets/db_password) &&
       LEDGER_DB_URL=$${LEDGER_DB_URL/_secret_/$$PGPASSWORD}
       && ledger-core migrate --database "$$LEDGER_DB_URL" --lock --timeout 60'
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"
    profiles: [ "migrate" ]
    logging: *default-logging

  api:
    build:
      context: ../..
      dockerfile: ops/docker/Dockerfile
      target: api
    image: ledger-core-api:${LEDGER_TAG:-latest}
    <<: [ *restart, *resources ]
    logging: *default-logging
    networks: [ backend, public ]
    env_file:
      - ../../.env
    environment:
      APP_ENV: ${APP_ENV:-production}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      # DB URL с подстановкой пароля из секрета в entrypoint
      LEDGER_DB_URL: postgres://${POSTGRES_USER:-ledger}:_secret_@${POSTGRES_HOST:-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-ledger}
      REDIS_URL: redis://${REDIS_HOST:-redis}:${REDIS_PORT:-6379}/0
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-http://otel-collector:4317}
      OTEL_SERVICE_NAME: ledger-core-api
    secrets:
      - db_password
      - api_secret
      - jwt_signing_key
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_started
    ports:
      # Для локалки используйте профиль "dev"
      - target: 8080
        published: ${EXTERNAL_HTTP_PORT:-8080}
        protocol: tcp
        mode: host
        # Уберите публикацию портов в продакшне, если используется nginx
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:8080/api/v1/health" ]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 15s
    volumes:
      - ledger_data:/var/lib/ledger:Z
    security_opt:
      - no-new-privileges:true
    # Пример сильной изоляции (включайте после проверки):
    # <<: [ *hardened ]

  worker:
    build:
      context: ../..
      dockerfile: ops/docker/Dockerfile
      target: worker
    image: ledger-core-worker:${LEDGER_TAG:-latest}
    <<: [ *restart, *resources ]
    logging: *default-logging
    networks: [ backend ]
    env_file:
      - ../../.env
    environment:
      APP_ENV: ${APP_ENV:-production}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LEDGER_DB_URL: postgres://${POSTGRES_USER:-ledger}:_secret_@${POSTGRES_HOST:-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-ledger}
      REDIS_URL: redis://${REDIS_HOST:-redis}:${REDIS_PORT:-6379}/0
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-http://otel-collector:4317}
      OTEL_SERVICE_NAME: ledger-core-worker
    secrets:
      - db_password
      - api_secret
    command: ["ledger-core", "worker", "--concurrency", "4"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_started
    healthcheck:
      test: [ "CMD", "sh", "-c", "pgrep -f 'ledger-core worker' >/dev/null" ]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 15s

  # Обратный прокси (опционально): профили "dev" и "prod"
  nginx:
    image: nginx:1.27-alpine
    <<: [ *restart ]
    logging: *default-logging
    networks: [ public, backend ]
    depends_on:
      api:
        condition: service_healthy
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/certs:/etc/nginx/certs:ro
    ports:
      - target: 80
        published: ${EXTERNAL_HTTP_PORT:-8080}
        protocol: tcp
        mode: host
      - target: 443
        published: ${EXTERNAL_HTTPS_PORT:-8443}
        protocol: tcp
        mode: host
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://localhost/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 10s
    profiles: [ "dev", "prod" ]
    security_opt:
      - no-new-privileges:true

  # Наблюдаемость (опционально): OpenTelemetry Collector + Jaeger
  otel-collector:
    image: otel/opentelemetry-collector:0.102.1
    <<: [ *restart ]
    logging: *default-logging
    networks: [ backend ]
    command: [ "--config=/etc/otelcol/config.yaml" ]
    volumes:
      - ./observability/otel-collector.yaml:/etc/otelcol/config.yaml:ro
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
    profiles: [ "obs" ]

  jaeger:
    image: jaegertracing/all-in-one:1.57
    <<: [ *restart ]
    logging: *default-logging
    networks: [ backend, public ]
    ports:
      - "16686:16686"  # UI
    environment:
      COLLECTOR_OTLP_ENABLED: "true"
    profiles: [ "obs" ]
