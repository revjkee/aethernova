apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

# 1) База
resources:
  - ../../base

# 2) Окружение и нейминг
namespace: ledger-staging
nameSuffix: -stg
commonLabels:
  app.kubernetes.io/environment: staging
  environment: staging
commonAnnotations:
  deploy.datafabric.io/owner: platform
  deploy.datafabric.io/purpose: staging
  deploy.datafabric.io/last-reviewed: "2025-08-15"

# 3) Образы (CI должен подменять newTag)
images:
  - name: ledger-core
    newName: ghcr.io/ORG/ledger-core
    newTag: v1.0.0 # CI заменит на актуальный тег/sha (например, build‑id или из файла VERSION)

# 4) Генераторы конфигов/секретов
generatorOptions:
  disableNameSuffixHash: false   # хеш в имени => гарантированный rollout при изменениях
  labels:
    app.kubernetes.io/managed-by: kustomize
configMapGenerator:
  - name: ledger-core-config
    behavior: merge
    literals:
      - APP_ENV=staging
      - HTTP_PORT=8080
      - GRPC_PORT=9091
      - METRICS_PORT=9090
      - LOG_LEVEL=info
      - FEATURE_FLAGS=ledger:v2,limits:strict
    # При необходимости можно добавить files: [application-staging.yaml]
secretGenerator:
  - name: ledger-core-secrets
    behavior: replace
    # В CI передайте файл secrets.env (не хранить в VCS)
    envs:
      - secrets.env
    type: Opaque

# 5) Масштабирование
replicas:
  - name: ledger-core
    count: 3

# 6) Патчи (Deployment и Service)
patches:
  # 6.1 Deployment: ресурсы, пробы, env, tolerations/affinity
  - target:
      kind: Deployment
      name: ledger-core
    patch: |-
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: ledger-core
      spec:
        strategy:
          type: RollingUpdate
          rollingUpdate:
            maxUnavailable: 0
            maxSurge: 25%
        template:
          metadata:
            annotations:
              prometheus.io/scrape: "true"
              prometheus.io/port: "9090"
              prometheus.io/path: "/metrics"
          spec:
            # Пример: разрешаем запуск на staging‑нодах
            tolerations:
              - key: "workload"
                operator: "Equal"
                value: "staging"
                effect: "NoSchedule"
            affinity:
              nodeAffinity:
                preferredDuringSchedulingIgnoredDuringExecution:
                  - weight: 50
                    preference:
                      matchExpressions:
                        - key: "nodepool"
                          operator: In
                          values: ["general"]
            containers:
              - name: ledger-core
                env:
                  - name: APP_ENV
                    valueFrom:
                      configMapKeyRef:
                        name: ledger-core-config-stg
                        key: APP_ENV
                  - name: LOG_LEVEL
                    valueFrom:
                      configMapKeyRef:
                        name: ledger-core-config-stg
                        key: LOG_LEVEL
                  - name: FEATURE_FLAGS
                    valueFrom:
                      configMapKeyRef:
                        name: ledger-core-config-stg
                        key: FEATURE_FLAGS
                resources:
                  requests:
                    cpu: "250m"
                    memory: "512Mi"
                  limits:
                    cpu: "1"
                    memory: "1Gi"
                readinessProbe:
                  httpGet:
                    path: /ready
                    port: 8080
                  initialDelaySeconds: 10
                  periodSeconds: 5
                  timeoutSeconds: 2
                  failureThreshold: 6
                livenessProbe:
                  httpGet:
                    path: /health
                    port: 8080
                  initialDelaySeconds: 30
                  periodSeconds: 10
                  timeoutSeconds: 3
                  failureThreshold: 3
                startupProbe:
                  httpGet:
                    path: /startup
                    port: 8080
                  initialDelaySeconds: 5
                  periodSeconds: 5
                  failureThreshold: 30

  # 6.2 Service: аннотации/политики (если база минимальная — дополним)
  - target:
      kind: Service
      name: ledger-core
    patch: |-
      apiVersion: v1
      kind: Service
      metadata:
        name: ledger-core
        annotations:
          prometheus.io/scrape: "true"
          prometheus.io/port: "9090"
          prometheus.io/path: "/metrics"
      spec:
        sessionAffinity: None
        internalTrafficPolicy: Cluster

# 7) (Опционально) Replacements — можно прокинуть тег образа в аннотации/ConfigMap при необходимости
# replacements:
#   - source:
#       kind: Deployment
#       name: ledger-core
#       fieldPath: spec.template.spec.containers.0.image
#     targets:
#       - select:
#           kind: ConfigMap
#           name: ledger-core-config
#         fieldPaths:
#           - data.IMAGE
#         options:
#           create: true
