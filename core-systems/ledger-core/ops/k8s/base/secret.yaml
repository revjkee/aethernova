# =========================================
# 1) ExternalSecret (рекомендуется)
# Требует установленный External Secrets Operator (ESO)
# и настроенный ClusterSecretStore "ledger-vault" (или другой провайдер).
# Док-генерируемый Secret будет: ledger-core-env
# =========================================
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: ledger-core-env
  namespace: ledger-core
  labels:
    app.kubernetes.io/name: ledger-core
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: ledger-core
    app.kubernetes.io/managed-by: gitops
  annotations:
    kubernetes.io/description: "Runtime secrets for ledger-core. Managed by External Secrets."
    reloader.stakater.com/auto: "true"   # Тригерит рестарт при изменении Secret
spec:
  refreshInterval: 1h
  # Используйте существующий ClusterSecretStore (Vault/AWS/Azure/GCP)
  secretStoreRef:
    kind: ClusterSecretStore
    name: ledger-vault
  target:
    name: ledger-core-env
    creationPolicy: Owner
    deletionPolicy: Retain
    template:
      type: Opaque
      metadata:
        labels:
          app.kubernetes.io/name: ledger-core
          app.kubernetes.io/component: api
      # Плейсхолдеры превращаются в ключи секретов (stringData)
      data:
        APP_ENV: "production"
        LOG_LEVEL: "INFO"
        # Значения подставляются из внешнего стора ниже через data[].remoteRef
        APP_SECRET_KEY: "{{ .APP_SECRET_KEY }}"
        DATABASE_URL: "{{ .DATABASE_URL }}"
        SENTRY_DSN: "{{ .SENTRY_DSN }}"
        KMS_KEY_ID: "{{ .KMS_KEY_ID }}"
        # Дополнительно: переменные интеграций/фичфлаги
        FEATURE_FLAGS: "{{ .FEATURE_FLAGS | default \"\" }}"
      # Immutable — защищает от мутаций через API; обновления идут через ротацию версии
      immutable: true
  data:
    - secretKey: APP_SECRET_KEY
      remoteRef:
        # Пример для Vault: путь и имя поля
        # Для AWS SM/Parameter Store/Azure KV укажите формат, поддерживаемый вашим SecretStore.
        key: kv/data/prod/ledger-core/app
        property: APP_SECRET_KEY
    - secretKey: DATABASE_URL
      remoteRef:
        key: kv/data/prod/ledger-core/db
        property: DATABASE_URL
    - secretKey: SENTRY_DSN
      remoteRef:
        key: kv/data/prod/ledger-core/obs
        property: SENTRY_DSN
    - secretKey: KMS_KEY_ID
      remoteRef:
        key: kv/data/prod/ledger-core/kms
        property: KMS_KEY_ID
    - secretKey: FEATURE_FLAGS
      remoteRef:
        key: kv/data/prod/ledger-core/flags
        property: FEATURE_FLAGS

---
# =========================================
# 2) Fallback: обычный Secret (если ES недоступен)
# Не храните реальные значения в репозитории. Заполняйте через CI/CD,
# kustomize secretGenerator, SOPS или SealedSecrets.
# =========================================
apiVersion: v1
kind: Secret
metadata:
  name: ledger-core-env-fallback
  namespace: ledger-core
  labels:
    app.kubernetes.io/name: ledger-core
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: ledger-core
  annotations:
    kubernetes.io/description: "Fallback Secret for ledger-core. Prefer ExternalSecret."
    reloader.stakater.com/auto: "true"
type: Opaque
immutable: true
stringData:
  # Замените значения инъекцией через CI/CD или шифрованием (SOPS/SealedSecrets).
  APP_ENV: "production"
  LOG_LEVEL: "INFO"
  APP_SECRET_KEY: "${APP_SECRET_KEY?inject_via_ci}"
  DATABASE_URL: "${DATABASE_URL?inject_via_ci}"
  SENTRY_DSN: "${SENTRY_DSN:-}"
  KMS_KEY_ID: "${KMS_KEY_ID:-}"
  FEATURE_FLAGS: "${FEATURE_FLAGS:-}"

---
# =========================================
# 3) SecretProviderClass (CSI driver, опционально)
# Для прямого монтирования секретов как томов. Полезно, если приложение
# не должно видеть secret через API/kubelet или требуется HSM/KMS‑подпись.
# Требует установленный Secrets Store CSI Driver + соответствующий провайдер.
# =========================================
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: spc-ledger-core
  namespace: ledger-core
  labels:
    app.kubernetes.io/name: ledger-core
    app.kubernetes.io/component: api
spec:
  provider: vault  # или aws/azure/gcp — зависит от установленного провайдера
  secretObjects:
    - secretName: ledger-core-env-csi
      type: Opaque
      labels:
        app.kubernetes.io/name: ledger-core
      data:
        - objectName: APP_SECRET_KEY
          key: APP_SECRET_KEY
        - objectName: DATABASE_URL
          key: DATABASE_URL
        - objectName: SENTRY_DSN
          key: SENTRY_DSN
        - objectName: KMS_KEY_ID
          key: KMS_KEY_ID
  parameters:
    # Пример для HashiCorp Vault (настройте под свою инфраструктуру)
    roleName: "k8s-ledger-core"
    vaultAddress: "https://vault.example.com"
    objects: |
      - objectName: "APP_SECRET_KEY"
        secretPath: "kv/data/prod/ledger-core/app"
        secretKey: "APP_SECRET_KEY"
      - objectName: "DATABASE_URL"
        secretPath: "kv/data/prod/ledger-core/db"
        secretKey: "DATABASE_URL"
      - objectName: "SENTRY_DSN"
        secretPath: "kv/data/prod/ledger-core/obs"
        secretKey: "SENTRY_DSN"
      - objectName: "KMS_KEY_ID"
        secretPath: "kv/data/prod/ledger-core/kms"
        secretKey: "KMS_KEY_ID"
