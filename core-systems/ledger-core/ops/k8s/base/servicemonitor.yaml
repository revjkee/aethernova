apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: ledger-core
  namespace: observability
  labels:
    app.kubernetes.io/name: ledger-core
    app.kubernetes.io/part-of: ledger
    app.kubernetes.io/component: monitoring
    monitoring: enabled
    # Укажите лейбл релиза вашего kube‑prometheus‑stack/Prometheus,
    # чтобы оператор подхватил объект (пример для helm-чарта):
    release: prometheus
spec:
  # Слежение за сервисами в целевых неймспейсах.
  # Вариант 1: перечислить конкретные пространства имён.
  namespaceSelector:
    matchNames:
      - ledger
      - ledger-workers
  # Если требуется «все неймспейсы», используйте:
  # namespaceSelector:
  #   any: true

  # Ищем сервисы с нужными лейблами (пример — общий app и роли).
  selector:
    matchExpressions:
      - key: app.kubernetes.io/name
        operator: In
        values: ["ledger-core"]
      - key: app.kubernetes.io/instance
        operator: Exists
  # Переносим полезные лейблы сервиса/пода в метрики для удобства запросов.
  targetLabels:
    - app.kubernetes.io/instance
    - app.kubernetes.io/environment
  podTargetLabels:
    - app.kubernetes.io/version
    - app.kubernetes.io/component

  # Общие настройки (если нужны по умолчанию для всех endpoints)
  # sampleLimit=0 означает без ограничения (регулируйте при необходимости).
  sampleLimit: 0
  endpoints:
    # -------- Web endpoint --------
    - interval: 15s
      scrapeTimeout: 10s
      honorLabels: true
      honorTimestamps: true
      scheme: http
      # Предпочтение — по имени порта сервиса (рекомендуется):
      port: metrics
      # Либо укажите явный путь и/или номер порта, если нет именованного:
      path: /metrics
      # targetPort: 9464    # используйте при необходимости
      # Авторизация (если включена аутентификация экспорта):
      # authorization:
      #   type: Bearer
      #   credentials:
      #     name: ledger-metrics-token
      #     key: token
      # TLS (если метрики отдаются по https с самоподписанным сертификатом):
      # tlsConfig:
      #   insecureSkipVerify: false
      #   ca:
      #     secret:
      #       name: ledger-metrics-ca
      #       key: ca.crt
      # relabelings — управление метками таргетов
      relabelings:
        # Перенесём имя сервиса и неймспейса в стабильные лейблы
        - action: replace
          sourceLabels: [__meta_kubernetes_namespace]
          targetLabel: namespace
        - action: replace
          sourceLabels: [__meta_kubernetes_service_name]
          targetLabel: service
        - action: replace
          sourceLabels: [__meta_kubernetes_pod_name]
          targetLabel: pod
        # Удалим шумные аннотации из лейблов таргета
        - action: labeldrop
          regex: "annotation_.*"
      # metricRelabelings — снижение кардинальности метрик
      metricRelabelings:
        # Дроп внутренних гистограмм с чрезмерной кардинальностью (пример)
        - action: drop
          sourceLabels: [__name__]
          regex: "http_server_duration_seconds_bucket|grpc_server_handling_seconds_bucket"
        # Ограничим высококардинальные лейблы запросов
        - action: labeldrop
          regex: "pod_template_hash|controller_revision_hash|endpoint|instance"
        # Стандартизируем environment из лейблов сервиса
        - action: replace
          sourceLabels: [environment, app_kubernetes_io_environment]
          targetLabel: environment
          separator: ""
          regex: "(.*);?(.*)"
          replacement: "$1$2"

    # -------- Worker endpoint --------
    - interval: 30s
      scrapeTimeout: 10s
      honorLabels: true
      honorTimestamps: true
      scheme: http
      # Если у worker отдельный сервис с портом metrics-worker:
      port: metrics-worker
      path: /metrics
      relabelings:
        - action: replace
          sourceLabels: [__meta_kubernetes_namespace]
          targetLabel: namespace
        - action: replace
          sourceLabels: [__meta_kubernetes_service_name]
          targetLabel: service
        - action: replace
          sourceLabels: [__meta_kubernetes_pod_name]
          targetLabel: pod
        - action: labeldrop
          regex: "annotation_.*"
      metricRelabelings:
        # Отбрасываем очень редкие метрики очереди, если они создают шум
        - action: drop
          sourceLabels: [__name__]
          regex: "queue_task_payload_size_bytes.*"
        - action: labeldrop
          regex: "pod_template_hash|controller_revision_hash|endpoint|instance"

  # Опционально: таргет‑подмножество по лейблам эндпоинтов/портов (ServiceMonitor v0.65+)
  # targetLimit: 0  # 0 = без ограничения

---
# Пример Service c именованными портами, чтобы ServiceMonitor «подхватил» endpoints.
# Разместите отдельно в каталоге вашего сервиса; показан для контекста.
apiVersion: v1
kind: Service
metadata:
  name: ledger-core-web
  namespace: ledger
  labels:
    app.kubernetes.io/name: ledger-core
    app.kubernetes.io/instance: ledger-core-web
    app.kubernetes.io/environment: production
spec:
  selector:
    app.kubernetes.io/name: ledger-core
    app.kubernetes.io/component: web
  ports:
    - name: http
      port: 8080
      targetPort: 8080
    - name: metrics
      port: 9464
      targetPort: 9464
---
apiVersion: v1
kind: Service
metadata:
  name: ledger-core-worker
  namespace: ledger-workers
  labels:
    app.kubernetes.io/name: ledger-core
    app.kubernetes.io/instance: ledger-core-worker
    app.kubernetes.io/environment: production
spec:
  selector:
    app.kubernetes.io/name: ledger-core
    app.kubernetes.io/component: worker
  ports:
    - name: metrics-worker
      port: 9465
      targetPort: 9465
