# genius-core/learning-engine/gym-envs/exploit-env.py

import gym
import numpy as np
from gym import spaces
import random

class ExploitEnv(gym.Env):
    """
    RL-окружение: обучение агентов эксплуатации уязвимостей (CVE-based).
    Агенты учатся проходить типовые цепочки: сканирование -> эксплуатация -> повышение прав.
    """
    def __init__(self):
        super(ExploitEnv, self).__init__()
        self.max_steps = 50
        self.current_step = 0

        # Примерные CVE уровни (упрощены): [неуязвим, low, medium, high, critical]
        self.cve_level = random.choice([1, 2, 3, 4])

        # Пространство наблюдений: [CVSS, открыт порт, антивирус активен]
        self.observation_space = spaces.Box(low=0, high=1, shape=(3,), dtype=np.float32)

        # Пространство действий: [0] ничего, [1] скан, [2] эксплойт, [3] эскалация
        self.action_space = spaces.Discrete(4)

        self.vulnerability_discovered = False
        self.exploit_successful = False

        self.state = self._get_obs()

    def reset(self):
        self.current_step = 0
        self.cve_level = random.choice([1, 2, 3, 4])
        self.vulnerability_discovered = False
        self.exploit_successful = False
        self.state = self._get_obs()
        return self.state

    def _get_obs(self):
        cvss_scaled = self.cve_level / 5.0  # нормализуем
        port_open = 1.0 if random.random() > 0.3 else 0.0
        antivirus = 1.0 if random.random() > 0.5 else 0.0
        return np.array([cvss_scaled, port_open, antivirus], dtype=np.float32)

    def step(self, action):
        self.current_step += 1
        done = False
        reward = 0.0

        if action == 0:
            reward = -0.1  # бездействие
        elif action == 1:
            reward = self._simulate_scan()
        elif action == 2:
            reward = self._simulate_exploit()
        elif action == 3:
            reward = self._simulate_escalation()
        else:
            reward = -1.0  # невалидное действие

        if self.current_step >= self.max_steps or self.exploit_successful:
            done = True

        self.state = self._get_obs()
        return self.state, reward, done, {}

    def _simulate_scan(self):
        if self.vulnerability_discovered:
            return -0.2  # повторный скан бесполезен
        self.vulnerability_discovered = True
        return 0.5 if self.cve_level >= 2 else 0.1

    def _simulate_exploit(self):
        if not self.vulnerability_discovered:
            return -1.0  # атака без сканирования
        if self.cve_level >= 3:
            self.exploit_successful = True
            return 1.0 + self.cve_level * 0.2
        return -0.5  # эксплойт провалился

    def _simulate_escalation(self):
        if not self.exploit_successful:
            return -1.0  # нельзя эскалировать без доступа
        success = random.random() < 0.5
        return 1.5 if success else -0.5

    def render(self, mode='human'):
        print(f"[{self.current_step}] CVE: {self.cve_level}, State: {self.state}")

    def close(self):
        pass
