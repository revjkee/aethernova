# genius-core/vulnerability-discovery/ai-fuzzer/fuzzer_engine.py

import random
import string
from typing import List, Callable

class AIFuzzerEngine:
    """
    AI-движок для генерации мутантных входных данных (фаззинг) с целью нахождения уязвимостей.
    Поддерживает подключение стратегий мутаций и фильтрацию откликов.
    """

    def __init__(self, mutation_strategies: List[Callable[[str], str]] = None):
        self.mutation_strategies = mutation_strategies or [self.basic_mutation]

    def basic_mutation(self, input_str: str) -> str:
        """
        Простая мутация: случайная замена, вставка или удаление символа.
        """
        if not input_str:
            return ''.join(random.choices(string.printable, k=10))

        s = list(input_str)
        mutation_type = random.choice(['replace', 'insert', 'delete'])

        if mutation_type == 'replace' and len(s) > 0:
            idx = random.randint(0, len(s) - 1)
            s[idx] = random.choice(string.printable)
        elif mutation_type == 'insert':
            idx = random.randint(0, len(s))
            s.insert(idx, random.choice(string.printable))
        elif mutation_type == 'delete' and len(s) > 0:
            idx = random.randint(0, len(s) - 1)
            s.pop(idx)

        return ''.join(s)

    def generate_mutations(self, base_inputs: List[str], count: int = 10) -> List[str]:
        """
        Генерирует список мутантных входных данных на основе базовых.
        """
        mutated_inputs = []
        for _ in range(count):
            base = random.choice(base_inputs) if base_inputs else ''
            strategy = random.choice(self.mutation_strategies)
            mutated = strategy(base)
            mutated_inputs.append(mutated)
        return mutated_inputs

    def filter_responses(self, responses: List[str], anomaly_detector: Callable[[str], bool]) -> List[str]:
        """
        Фильтрует отклики, выделяя потенциально уязвимые (анормальные).
        """
        return [resp for resp in responses if anomaly_detector(resp)]

