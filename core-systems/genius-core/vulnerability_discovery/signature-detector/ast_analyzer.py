# genius-core/vulnerability-discovery/signature-detector/ast_analyzer.py

import ast
import logging

class ASTAnalyzer(ast.NodeVisitor):
    """
    Анализатор AST (Abstract Syntax Tree) для поиска уязвимостей и подозрительных паттернов в коде.
    """

    def __init__(self):
        self.logger = logging.getLogger("ASTAnalyzer")
        self.vulnerabilities = []

    def analyze_code(self, code_str):
        """
        Принимает строку с исходным кодом, парсит в AST и запускает обход.
        Возвращает список найденных уязвимостей.
        """
        try:
            tree = ast.parse(code_str)
            self.visit(tree)
            return self.vulnerabilities
        except SyntaxError as e:
            self.logger.error(f"Syntax error during parsing: {e}")
            return []

    def visit_Call(self, node):
        """
        Обрабатывает вызовы функций, ищет подозрительные вызовы (например, eval, exec, os.system).
        """
        func_name = self._get_func_name(node.func)
        if func_name in ["eval", "exec", "os.system", "subprocess.Popen"]:
            vuln = {
                "type": "dangerous_function_call",
                "function": func_name,
                "lineno": node.lineno,
                "col_offset": node.col_offset,
                "message": f"Использование опасной функции {func_name}"
            }
            self.vulnerabilities.append(vuln)
            self.logger.warning(f"Detected dangerous function call: {vuln}")
        self.generic_visit(node)

    def visit_Import(self, node):
        """
        Проверяет импорт опасных или подозрительных модулей.
        """
        for alias in node.names:
            if alias.name in ["pickle", "subprocess", "ctypes"]:
                vuln = {
                    "type": "dangerous_import",
                    "module": alias.name,
                    "lineno": node.lineno,
                    "message": f"Импорт подозрительного модуля {alias.name}"
                }
                self.vulnerabilities.append(vuln)
                self.logger.warning(f"Detected suspicious import: {vuln}")
        self.generic_visit(node)

    def visit_ImportFrom(self, node):
        """
        Аналогично visit_Import, но для from-import.
        """
        module = node.module
        if module in ["pickle", "subprocess", "ctypes"]:
            vuln = {
                "type": "dangerous_import_from",
                "module": module,
                "lineno": node.lineno,
                "message": f"Импорт подозрительного модуля {module}"
            }
            self.vulnerabilities.append(vuln)
            self.logger.warning(f"Detected suspicious from-import: {vuln}")
        self.generic_visit(node)

    def visit_Attribute(self, node):
        """
        Обработка атрибутов, например, os.system и подобные конструкции.
        """
        attr_full = self._get_attr_full_name(node)
        if attr_full in ["os.system", "subprocess.Popen"]:
            vuln = {
                "type": "dangerous_attribute",
                "attribute": attr_full,
                "lineno": node.lineno,
                "message": f"Использование опасного атрибута {attr_full}"
            }
            self.vulnerabilities.append(vuln)
            self.logger.warning(f"Detected dangerous attribute use: {vuln}")
        self.generic_visit(node)

    def _get_func_name(self, node):
        """
        Вспомогательная функция для получения имени функции из AST узла.
        """
        if isinstance(node, ast.Name):
            return node.id
        elif isinstance(node, ast.Attribute):
            return self._get_attr_full_name(node)
        else:
            return ""

    def _get_attr_full_name(self, node):
        """
        Вспомогательная функция для рекурсивного получения полного имени атрибута.
        """
        if isinstance(node, ast.Attribute):
            return self._get_attr_full_name(node.value) + "." + node.attr
        elif isinstance(node, ast.Name):
            return node.id
        else:
            return ""

