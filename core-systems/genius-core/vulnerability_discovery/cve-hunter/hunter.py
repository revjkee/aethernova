# genius-core/vulnerability-discovery/cve-hunter/hunter.py

import requests
import json
import time
from typing import List, Dict, Any
from datetime import datetime

NVD_API = "https://services.nvd.nist.gov/rest/json/cves/2.0"
MAX_RESULTS = 50

class CVEHunter:
    """
    Класс для поиска CVE по ключевым словам, продукту и временным рамкам.
    """

    def __init__(self, cwe_filter: List[str] = None, sleep_time: float = 1.5):
        self.session = requests.Session()
        self.sleep_time = sleep_time
        self.cwe_filter = cwe_filter or []

    def search_cve(self, keyword: str, start_date: str, end_date: str) -> List[Dict[str, Any]]:
        """
        Выполняет запрос к NVD API, фильтруя по ключевому слову и дате.
        """
        params = {
            "keywordSearch": keyword,
            "pubStartDate": f"{start_date}T00:00:00.000Z",
            "pubEndDate": f"{end_date}T23:59:59.000Z",
            "resultsPerPage": MAX_RESULTS
        }

        print(f"[CVE-HUNTER] Поиск: {keyword} | {start_date} → {end_date}")
        response = self.session.get(NVD_API, params=params)

        if response.status_code != 200:
            print(f"[ERROR] Запрос неудачен: {response.status_code}")
            return []

        data = response.json()
        cve_items = data.get("vulnerabilities", [])

        print(f"[CVE-HUNTER] Найдено: {len(cve_items)} CVE")
        return self._filter_cves(cve_items)

    def _filter_cves(self, cve_items: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        Фильтрует CVE по интересующим CWE или ключевым паттернам.
        """
        filtered = []
        for item in cve_items:
            cve = item.get("cve", {})
            cve_id = cve.get("id", "UNKNOWN")
            description = cve.get("descriptions", [{}])[0].get("value", "")
            cwes = [p.get("value") for p in cve.get("weaknesses", []) if p.get("value")]

            if self.cwe_filter:
                if not any(cwe in cwes for cwe in self.cwe_filter):
                    continue

            filtered.append({
                "id": cve_id,
                "description": description,
                "cwes": cwes,
                "published": cve.get("published", ""),
                "score": self._extract_cvss(cve),
            })

        return filtered

    def _extract_cvss(self, cve: Dict[str, Any]) -> float:
        """
        Извлекает CVSS v3.1 Base Score.
        """
        metrics = cve.get("metrics", {})
        if "cvssMetricV31" in metrics:
            return metrics["cvssMetricV31"][0]["cvssData"]["baseScore"]
        if "cvssMetricV30" in metrics:
            return metrics["cvssMetricV30"][0]["cvssData"]["baseScore"]
        return 0.0

    def save_results(self, results: List[Dict[str, Any]], path: str):
        """
        Сохраняет найденные CVE в файл.
        """
        with open(path, "w", encoding="utf-8") as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
        print(f"[CVE-HUNTER] Сохранено: {path}")


# Пример использования (можно вызвать из скрипта)
if __name__ == "__main__":
    hunter = CVEHunter(cwe_filter=["CWE-79", "CWE-89"])
    today = datetime.utcnow().strftime("%Y-%m-%d")
    one_month_ago = (datetime.utcnow().replace(day=1)).strftime("%Y-%m-%d")
    results = hunter.search_cve("sql injection", one_month_ago, today)
    hunter.save_results(results, "recent_sql_injections.json")
