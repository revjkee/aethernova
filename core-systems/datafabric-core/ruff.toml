# datafabric-core / ruff.toml
# Базовые целевые версии и параметры форматирования
line-length = 100
target-version = "py310"
extend-exclude = [
  "build/",
  "dist/",
  ".venv/",
  ".mypy_cache/",
  ".ruff_cache/",
  ".pytest_cache/",
  "**/__pycache__/",
  "docs/_build/",
  "node_modules/",
  # Миграции/сгенерированный код (если присутствуют)
  "migrations/",
  "**/*_pb2.py",
  "**/*_pb2_grpc.py",
]

# Включаем автофиксы по умолчанию и отображение применённых фиксов
fix = true
show-fixes = true
unsafe-fixes = false
preview = true

# Источники/пакеты проекта для корректной сортировки импортов
src = ["src", "engine", "datafabric_core"]

[lint]
# Строгий промышленный профиль правил
# Документация по кодам: https://docs.astral.sh/ruff/rules/
select = [
  "F",    # pyflakes
  "E", "W",           # pycodestyle
  "I",                # isort (сортировка импортов)
  "N",                # pep8-naming
  "UP",               # pyupgrade (модернизация синтаксиса)
  "B",                # flake8-bugbear
  "A",                # flake8-builtins
  "ANN",              # flake8-annotations
  "C4",               # flake8-comprehensions
  "DTZ",              # flake8-datetimez
  "PIE",              # flake8-pie
  "PTH",              # flake8-use-pathlib
  "Q",                # flake8-quotes
  "RET",              # flake8-return
  "RSE",              # flake8-raise
  "SIM",              # flake8-simplify
  "T20",              # flake8-print (запрет print)
  "TID",              # flake8-tidy-imports
  "TRY",              # tryceratops (исключения/ошибки)
  "PL",               # pylint (подмножество правил)
  "RUF",              # собственные правила Ruff
  "S",                # flake8-bandit (базовая безопасность)
  "ISC",              # implicit-str-concat
  "PT",               # flake8-pytest-style
]

# Глобальные исключения/подавления (минимально необходимые)
ignore = [
  "E501",   # Длину строки контролируем линейкой и форматтером
  "ANN101", # Параметр self без аннотаций
  "ANN102", # Параметр cls без аннотаций
  "D203", "D213", # Конфликты стиля docstring (если включите D-правила — настроить)
]

# Порог сложности и другие лимиты
[lint.mccabe]
max-complexity = 12

[lint.pylint]
# Мягкие лимиты на размер/сложность — промышленный баланс
max-args = 8
max-branches = 12
max-statements = 60
max-returns = 6

[lint.isort]
known-first-party = ["datafabric_core"]
known-third-party = [
  "pytest",
  "requests",
  "pydantic",
  "sqlalchemy",
  "google",
  "grpc",
]
combine-as-imports = true
force-sort-within-sections = true
lines-after-imports = 2
required-imports = ["from __future__ import annotations"]

[lint.pep8-naming]
classmethod-decorators = ["classmethod", "pydantic.validator", "pydantic.root_validator"]

[lint.flake8-quotes]
# Единый стиль кавычек во всём проекте
inline-quotes = "double"
multiline-quotes = "double"
docstring-quotes = "double"
avoid-escape = true

[lint.pycodestyle]
max-doc-length = 100

[lint.per-file-ignores]
# Тестам дозволено чуть больше: assert/print, магические числа, отсутствие аннотаций и docstring
"tests/**" = [
  "S101",    # use of assert
  "T20",     # print in tests
  "PLR2004", # magic value
  "ANN201",  # missing return type annotation for public function
  "ANN001",  # missing type annotation for function argument
  "D",       # правила pydocstyle (если включите D) игнорим в тестах
  "PT011",   # переменные фикстур без явного @pytest.fixture допускаются
]
# Сценарии/скрипты — допускаем print
"scripts/**" = ["T20"]
# Миграции/генерация кода — минимальные проверки
"migrations/**" = ["ALL"]
"**/*_pb2.py" = ["ALL"]
"**/*_pb2_grpc.py" = ["ALL"]

[format]
# Единое форматирование Ruff Formatter (при использовании ruff format)
quote-style = "double"
indent-style = "space"
line-ending = "lf"
skip-magic-trailing-comma = false
docstring-code-format = true
docstring-code-line-length = 100
preview = true
