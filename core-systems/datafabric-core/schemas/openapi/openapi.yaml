openapi: 3.1.0
info:
  title: DataFabric Core API
  version: 1.0.0
  summary: HTTP контракт API v1 для ядра Data Fabric
  description: >
    Промышленный контракт для управления политиками и правилами,
    валидации JSON-документов против утверждённых схем, ведения аудита,
    приёма событий и мониторинга состояния сервиса.
  termsOfService: https://neurocity.ai/terms
  contact:
    name: NeuroCity Platform Team
    url: https://neurocity.ai
    email: platform@neurocity.ai
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0
servers:
  - url: https://api.neurocity.ai/datafabric/v1
    description: Production
  - url: https://staging.neurocity.ai/datafabric/v1
    description: Staging
tags:
  - name: policies
    description: Управление политиками Data Fabric
  - name: rules
    description: Управление правилами в составе политик
  - name: schemas
    description: Работа с JSON Schema и валидацией
  - name: audit
    description: Доступ к аудиторским журналам
  - name: events
    description: Приём доменных событий
  - name: ops
    description: Здоровье сервиса и метрики

security:
  - OAuth2: [policy:read]
  - ApiKeyAuth: []

x-api-lifecycle:
  stability: stable
  backwardCompatibilityPolicy: semver

paths:
  /health:
    get:
      tags: [ops]
      summary: Проверка здоровья сервиса
      operationId: getHealth
      parameters:
        - $ref: '#/components/parameters/XTraceId'
      responses:
        '200':
          description: Сервис работает штатно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Health'
        '503':
          description: Сервис деградирован/недоступен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security: []
  /metrics:
    get:
      tags: [ops]
      summary: Метрики Prometheus
      operationId: getMetrics
      responses:
        '200':
          description: Текст в формате Prometheus exposition
          content:
            text/plain:
              schema:
                type: string
      security: []
  /policies:
    get:
      tags: [policies]
      summary: Список политик
      operationId: listPolicies
      parameters:
        - $ref: '#/components/parameters/XTraceId'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Sort'
        - name: status
          in: query
          description: Фильтр по статусу
          schema:
            $ref: '#/components/schemas/PolicyStatus'
        - name: q
          in: query
          description: Поиск по имени/описанию
          schema:
            type: string
            maxLength: 256
      responses:
        '200':
          description: Пагинированный список политик
          headers:
            X-RateLimit-Limit: { $ref: '#/components/headers/XRateLimitLimit' }
            X-RateLimit-Remaining: { $ref: '#/components/headers/XRateLimitRemaining' }
            X-RateLimit-Reset: { $ref: '#/components/headers/XRateLimitReset' }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page_Policy_'
    post:
      tags: [policies]
      summary: Создать политику
      operationId: createPolicy
      parameters:
        - $ref: '#/components/parameters/XTraceId'
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyCreate'
      responses:
        '201':
          description: Политика создана
          headers:
            Location:
              description: URL созданного ресурса
              schema: { type: string, format: uri }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
        '400': { $ref: '#/components/responses/BadRequest' }
        '409': { $ref: '#/components/responses/Conflict' }
  /policies/{policyId}:
    get:
      tags: [policies]
      summary: Получить политику
      operationId: getPolicy
      parameters:
        - $ref: '#/components/parameters/XTraceId'
        - $ref: '#/components/parameters/PolicyId'
      responses:
        '200':
          description: Политика
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
        '404': { $ref: '#/components/responses/NotFound' }
    put:
      tags: [policies]
      summary: Полное обновление политики
      operationId: replacePolicy
      parameters:
        - $ref: '#/components/parameters/XTraceId'
        - $ref: '#/components/parameters/PolicyId'
        - $ref: '#/components/parameters/IfMatch'
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyUpdate'
      responses:
        '200':
          description: Политика обновлена
          headers:
            ETag: { $ref: '#/components/headers/ETag' }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
        '412': { $ref: '#/components/responses/PreconditionFailed' }
    patch:
      tags: [policies]
      summary: Частичное обновление политики (JSON Merge Patch)
      operationId: patchPolicy
      parameters:
        - $ref: '#/components/parameters/XTraceId'
        - $ref: '#/components/parameters/PolicyId'
        - $ref: '#/components/parameters/IfMatch'
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/PolicyPatch'
      responses:
        '200':
          description: Политика обновлена
          headers:
            ETag: { $ref: '#/components/headers/ETag' }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
        '412': { $ref: '#/components/responses/PreconditionFailed' }
    delete:
      tags: [policies]
      summary: Удалить политику
      operationId: deletePolicy
      parameters:
        - $ref: '#/components/parameters/XTraceId'
        - $ref: '#/components/parameters/PolicyId'
      responses:
        '204':
          description: Удалено
        '404': { $ref: '#/components/responses/NotFound' }
  /policies/{policyId}/rules:
    get:
      tags: [rules]
      summary: Список правил политики
      operationId: listRules
      parameters:
        - $ref: '#/components/parameters/XTraceId'
        - $ref: '#/components/parameters/PolicyId'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Sort'
        - name: type
          in: query
          schema:
            $ref: '#/components/schemas/RuleType'
      responses:
        '200':
          description: Пагинированный список правил
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page_Rule_'
        '404': { $ref: '#/components/responses/NotFound' }
    post:
      tags: [rules]
      summary: Добавить правило в политику
      operationId: createRule
      parameters:
        - $ref: '#/components/parameters/XTraceId'
        - $ref: '#/components/parameters/PolicyId'
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleCreate'
      responses:
        '201':
          description: Правило создано
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
  /policies/{policyId}/rules/{ruleId}:
    get:
      tags: [rules]
      summary: Получить правило
      operationId: getRule
      parameters:
        - $ref: '#/components/parameters/XTraceId'
        - $ref: '#/components/parameters/PolicyId'
        - $ref: '#/components/parameters/RuleId'
      responses:
        '200':
          description: Правило
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
        '404': { $ref: '#/components/responses/NotFound' }
    put:
      tags: [rules]
      summary: Полное обновление правила
      operationId: replaceRule
      parameters:
        - $ref: '#/components/parameters/XTraceId'
        - $ref: '#/components/parameters/PolicyId'
        - $ref: '#/components/parameters/RuleId'
        - $ref: '#/components/parameters/IfMatch'
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleUpdate'
      responses:
        '200':
          description: Правило обновлено
          headers:
            ETag: { $ref: '#/components/headers/ETag' }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
        '412': { $ref: '#/components/responses/PreconditionFailed' }
    delete:
      tags: [rules]
      summary: Удалить правило
      operationId: deleteRule
      parameters:
        - $ref: '#/components/parameters/XTraceId'
        - $ref: '#/components/parameters/PolicyId'
        - $ref: '#/components/parameters/RuleId'
      responses:
        '204':
          description: Удалено
        '404': { $ref: '#/components/responses/NotFound' }
  /schemas/validate:
    post:
      tags: [schemas]
      summary: Валидация JSON-документа по зарегистрированной схеме
      operationId: validateDocument
      parameters:
        - $ref: '#/components/parameters/XTraceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              required: [schemaId, document]
              properties:
                schemaId:
                  type: string
                  format: uri
                  description: Идентификатор JSON Schema ($id)
                document:
                  description: Валидируемый JSON-документ
                  type: object
      responses:
        '200':
          description: Результат валидации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResult'
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
  /audit/logs:
    get:
      tags: [audit]
      summary: Получить аудиторские записи
      operationId: listAuditLogs
      parameters:
        - $ref: '#/components/parameters/XTraceId'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PerPage'
        - $ref: '#/components/parameters/Sort'
        - name: subjectId
          in: query
          schema:
            type: string
            format: uuid
        - name: action
          in: query
          schema:
            type: string
        - name: from
          in: query
          description: Начало интервала (ISO 8601)
          schema: { type: string, format: date-time }
        - name: to
          in: query
          description: Конец интервала (ISO 8601)
          schema: { type: string, format: date-time }
      responses:
        '200':
          description: Пагинированный список аудиторских записей
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page_AuditLog_'
  /events:
    post:
      tags: [events]
      summary: Приём одного доменного события
      operationId: ingestEvent
      parameters:
        - $ref: '#/components/parameters/XTraceId'
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '202':
          description: Событие принято в обработку
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ack'
        '400': { $ref: '#/components/responses/BadRequest' }
    put:
      tags: [events]
      summary: Пакетная загрузка событий
      operationId: ingestEventsBatch
      parameters:
        - $ref: '#/components/parameters/XTraceId'
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              minItems: 1
              maxItems: 1000
              items:
                $ref: '#/components/schemas/Event'
      responses:
        '202':
          description: Пакет принят
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ack'

components:
  securitySchemes:
    OAuth2:
      type: oauth2
      description: OAuth2 с грантом client‑credentials и scope‑ами RBAC
      flows:
        clientCredentials:
          tokenUrl: https://auth.neurocity.ai/oauth2/token
          scopes:
            policy:read: Чтение политик
            policy:write: Запись политик
            audit:read: Чтение аудита
            event:write: Отправка событий
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
  parameters:
    XTraceId:
      name: X-Trace-Id
      in: header
      description: Корреляционный идентификатор запроса
      required: false
      schema: { type: string, maxLength: 128 }
    IdempotencyKey:
      name: Idempotency-Key
      in: header
      description: Ключ идемпотентности для безопасных повторов
      required: false
      schema: { type: string, maxLength: 128 }
    IfMatch:
      name: If-Match
      in: header
      description: ETag для контроля конкурентных обновлений
      required: false
      schema: { type: string }
    PolicyId:
      name: policyId
      in: path
      required: true
      schema: { type: string, format: uuid }
    RuleId:
      name: ruleId
      in: path
      required: true
      schema: { type: string, format: uuid }
    Page:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
    PerPage:
      name: perPage
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 200
        default: 20
    Sort:
      name: sort
      in: query
      description: Поле сортировки (с префиксом '-' для убывания)
      schema:
        type: string
        examples: [ "-createdAt", "name" ]
  headers:
    ETag:
      description: Текущий ETag ресурса
      schema: { type: string }
    XRateLimitLimit:
      description: Максимум запросов за окно
      schema: { type: integer }
    XRateLimitRemaining:
      description: Остаток запросов в окне
      schema: { type: integer }
    XRateLimitReset:
      description: Время сброса окна (epoch seconds)
      schema: { type: integer }
  responses:
    BadRequest:
      description: Неверный запрос
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    NotFound:
      description: Ресурс не найден
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    Conflict:
      description: Конфликт состояния/уникальности
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    PreconditionFailed:
      description: Нарушен ETag/If‑Match
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
  schemas:
    # Базовые типы
    UUID:
      type: string
      format: uuid
      description: UUID v4
    DateTime:
      type: string
      format: date-time
      description: ISO 8601 timestamp
    NonEmptyString:
      type: string
      minLength: 1

    # Policy
    PolicyStatus:
      type: string
      enum: [ active, inactive, deprecated, archived ]
    RuleType:
      type: string
      enum: [ access_control, data_retention, encryption, masking, validation, custom ]
    RuleEffect:
      type: string
      enum: [ allow, deny, log, alert ]

    RuleBase:
      type: object
      additionalProperties: false
      required: [ id, type, parameters, effect ]
      properties:
        id: { $ref: '#/components/schemas/UUID' }
        type: { $ref: '#/components/schemas/RuleType' }
        parameters:
          type: object
          description: Параметры специфичны для типа правила
          minProperties: 1
          additionalProperties: true
        effect: { $ref: '#/components/schemas/RuleEffect' }
        priority:
          type: integer
          minimum: 1
          maximum: 100
          default: 50

    RuleCreate:
      allOf:
        - type: object
          required: [ type, parameters, effect ]
          properties:
            type: { $ref: '#/components/schemas/RuleType' }
            parameters:
              type: object
              minProperties: 1
              additionalProperties: true
            effect: { $ref: '#/components/schemas/RuleEffect' }
            priority:
              type: integer
              minimum: 1
              maximum: 100
              default: 50
    RuleUpdate:
      allOf:
        - $ref: '#/components/schemas/RuleCreate'
    Rule:
      allOf:
        - $ref: '#/components/schemas/RuleBase'

    PolicyBase:
      type: object
      additionalProperties: false
      required: [ name, description, status ]
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 128
          pattern: '^[A-Za-z0-9_\-\s]+$'
        description:
          type: string
          minLength: 10
          maxLength: 2048
        status: { $ref: '#/components/schemas/PolicyStatus' }
        tags:
          type: array
          items:
            type: string
            minLength: 2
            maxLength: 64
          uniqueItems: true

    PolicyCreate:
      allOf:
        - $ref: '#/components/schemas/PolicyBase'
        - type: object
          properties:
            version:
              type: string
              pattern: '^[0-9]+\.[0-9]+\.[0-9]+$'
              default: '1.0.0'
            rules:
              type: array
              items: { $ref: '#/components/schemas/RuleCreate' }
              default: []
    PolicyUpdate:
      allOf:
        - $ref: '#/components/schemas/PolicyBase'
        - type: object
          properties:
            version:
              type: string
              pattern: '^[0-9]+\.[0-9]+\.[0-9]+$'
            rules:
              type: array
              items: { $ref: '#/components/schemas/RuleUpdate' }

    Policy:
      type: object
      additionalProperties: false
      required: [ id, version, name, description, status, rules, createdAt, updatedAt ]
      properties:
        id: { $ref: '#/components/schemas/UUID' }
        version:
          type: string
          pattern: '^[0-9]+\.[0-9]+\.[0-9]+$'
        name:
          type: string
          minLength: 3
          maxLength: 128
          pattern: '^[A-Za-z0-9_\-\s]+$'
        description:
          type: string
          minLength: 10
          maxLength: 2048
        status: { $ref: '#/components/schemas/PolicyStatus' }
        tags:
          type: array
          items:
            type: string
            minLength: 2
            maxLength: 64
          uniqueItems: true
        rules:
          type: array
          items: { $ref: '#/components/schemas/Rule' }
        owner:
          type: string
          description: Идентификатор владельца (UUID или системный ID)
        createdAt: { $ref: '#/components/schemas/DateTime' }
        updatedAt: { $ref: '#/components/schemas/DateTime' }
        etag:
          type: string
          description: Текущий ETag ресурса

    # Валидация
    ValidationErrorItem:
      type: object
      additionalProperties: false
      required: [ instancePath, schemaPath, message ]
      properties:
        instancePath: { type: string }
        schemaPath: { type: string }
        message: { type: string }
        params:
          type: object
          additionalProperties: true

    ValidationResult:
      type: object
      additionalProperties: false
      required: [ valid ]
      properties:
        valid: { type: boolean }
        errors:
          type: array
          items: { $ref: '#/components/schemas/ValidationErrorItem' }
        schemaRef:
          type: string
          format: uri
        traceId:
          type: string

    # Аудит
    AuditLog:
      type: object
      additionalProperties: false
      required: [ id, timestamp, actor, action, subjectId, outcome ]
      properties:
        id: { $ref: '#/components/schemas/UUID' }
        timestamp: { $ref: '#/components/schemas/DateTime' }
        actor:
          type: object
          required: [ type, id ]
          properties:
            type: { type: string, enum: [ user, service ] }
            id: { type: string }
        action: { type: string }
        subjectId: { type: string }
        outcome: { type: string, enum: [ success, failure ] }
        details:
          type: object
          additionalProperties: true

    # События
    Event:
      type: object
      additionalProperties: false
      required: [ id, type, source, time, data ]
      properties:
        id: { $ref: '#/components/schemas/UUID' }
        type: { type: string, minLength: 3, maxLength: 128 }
        source: { type: string, format: uri }
        time: { $ref: '#/components/schemas/DateTime' }
        subject: { type: string }
        data:
          type: object
          additionalProperties: true
        datacontenttype:
          type: string
          default: application/json

    # Пагинация
    PageMeta:
      type: object
      required: [ page, perPage, total ]
      properties:
        page: { type: integer, minimum: 1 }
        perPage: { type: integer, minimum: 1, maximum: 200 }
        total: { type: integer, minimum: 0 }

    Page_Policy_:
      type: object
      required: [ items, meta ]
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/Policy' }
        meta: { $ref: '#/components/schemas/PageMeta' }

    Page_Rule_:
      type: object
      required: [ items, meta ]
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/Rule' }
        meta: { $ref: '#/components/schemas/PageMeta' }

    Page_AuditLog_:
      type: object
      required: [ items, meta ]
      properties:
        items:
          type: array
          items: { $ref: '#/components/schemas/AuditLog' }
        meta: { $ref: '#/components/schemas/PageMeta' }

    # Акк/ошибки
    Ack:
      type: object
      additionalProperties: false
      required: [ accepted, traceId ]
      properties:
        accepted: { type: boolean, const: true }
        traceId: { type: string }

    Error:
      type: object
      additionalProperties: false
      required: [ type, title, status, traceId ]
      properties:
        type:
          type: string
          format: uri
          description: URI типа ошибки (RFC 7807)
        title:
          type: string
          description: Краткое описание ошибки
        status:
          type: integer
          description: HTTP статус
        detail:
          type: string
        instance:
          type: string
          format: uri
        traceId:
          type: string
        errors:
          type: array
          description: Детализация по полям/валидации
          items:
            $ref: '#/components/schemas/ValidationErrorItem'

x-examples:
  policyExample:
    id: "550e8400-e29b-41d4-a716-446655440000"
    version: "1.2.3"
    name: "Data Retention Policy"
    description: "Политика хранения логов транзакций."
    status: "active"
    tags: [ "retention", "compliance" ]
    rules:
      - id: "660e8400-e29b-41d4-a716-446655440111"
        type: "data_retention"
        parameters: { retention_days: 365 }
        effect: "allow"
        priority: 10
    createdAt: "2025-08-14T10:15:30Z"
    updatedAt: "2025-08-14T10:15:30Z"
    etag: "W/\"p-1.2.3-1692000000\""
