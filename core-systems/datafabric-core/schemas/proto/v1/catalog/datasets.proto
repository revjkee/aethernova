syntax = "proto3";

package datafabric.v1.stream.catalog;

option optimize_for = SPEED;
option cc_enable_arenas = true;

option java_multiple_files = true;
option java_package = "org.example.datafabric.v1.stream.catalog";
option java_outer_classname = "DatasetsProto";

option csharp_namespace = "Example.Datafabric.V1.Stream.Catalog";
option go_package = "github.com/your-org/datafabric-core/schemas/proto/v1/stream/catalog;catalogpb";

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

// ============================================================================
// ENUMS
// ============================================================================

enum DatasetType {
  DATASET_TYPE_UNSPECIFIED = 0;
  DATASET_TYPE_STREAM      = 1;
  DATASET_TYPE_BATCH       = 2;
  DATASET_TYPE_VIRTUAL     = 3; // Представление
}

enum DatasetState {
  DATASET_STATE_UNSPECIFIED = 0;
  DATASET_STATE_ACTIVE      = 1;
  DATASET_STATE_INACTIVE    = 2;
  DATASET_STATE_DEPRECATED  = 3;
  DATASET_STATE_DELETED     = 4;
}

enum StorageFormat {
  STORAGE_FORMAT_UNSPECIFIED = 0;
  STORAGE_FORMAT_JSON        = 1;
  STORAGE_FORMAT_AVRO        = 2;
  STORAGE_FORMAT_PROTOBUF    = 3;
  STORAGE_FORMAT_PARQUET     = 4;
  STORAGE_FORMAT_CSV         = 5;
}

enum AccessLevel {
  ACCESS_LEVEL_UNSPECIFIED = 0;
  ACCESS_LEVEL_PUBLIC      = 1;
  ACCESS_LEVEL_INTERNAL    = 2;
  ACCESS_LEVEL_RESTRICTED  = 3;
}

enum RetentionPolicy {
  RETENTION_POLICY_UNSPECIFIED = 0;
  RETENTION_POLICY_TTL         = 1;
  RETENTION_POLICY_FOREVER     = 2;
}

// ============================================================================
// MODELS
// ============================================================================

message LabelSet {
  map<string, string> labels = 1;
}

message AccessControl {
  AccessLevel access_level = 1;
  repeated string allowed_principals = 2; // users/groups/roles
}

message StoragePolicy {
  RetentionPolicy policy = 1;
  uint64 retention_seconds = 2; // if policy=TTL
}

message SchemaDescriptor {
  string schema_uri = 1;     // URI до схемы (Avro/Proto/JSON)
  uint32 schema_version = 2; // версия схемы
  StorageFormat format = 3;
}

message DatasetVersion {
  string version_id = 1; // ULID/UUID
  SchemaDescriptor schema = 2;
  string source_uri = 3;  // откуда берутся данные
  string sink_uri = 4;    // куда пишутся
  google.protobuf.Timestamp created_at = 5;
  string created_by = 6;
  LabelSet labels = 7;
}

message Dataset {
  string dataset_id = 1; // ULID/UUID
  string name = 2;
  string description = 3;
  DatasetType type = 4;
  DatasetState state = 5;
  LabelSet labels = 6;
  AccessControl access = 7;
  StoragePolicy storage = 8;
  repeated DatasetVersion versions = 9;
  google.protobuf.Timestamp created_at = 10;
  string created_by = 11;
  google.protobuf.Timestamp updated_at = 12;
  string updated_by = 13;

  reserved 14, 15;
  reserved "deprecated_field", "old_source";
}

// ============================================================================
// REQUESTS & RESPONSES
// ============================================================================

message CreateDatasetRequest {
  Dataset dataset = 1;
}

message CreateDatasetResponse {
  Dataset dataset = 1;
}

message GetDatasetRequest {
  string dataset_id = 1;
}

message GetDatasetResponse {
  Dataset dataset = 1;
}

message ListDatasetsRequest {
  uint32 page_size = 1;
  string page_token = 2;
  map<string, string> filter_labels = 3;
  DatasetType type = 4;
  DatasetState state = 5;
}

message ListDatasetsResponse {
  repeated Dataset datasets = 1;
  string next_page_token = 2;
}

message UpdateDatasetRequest {
  Dataset dataset = 1;
}

message UpdateDatasetResponse {
  Dataset dataset = 1;
}

message DeleteDatasetRequest {
  string dataset_id = 1;
}

message DeleteDatasetResponse {
  bool success = 1;
}

// ============================================================================
// SERVICE
// ============================================================================

service DatasetCatalogService {
  rpc CreateDataset (CreateDatasetRequest) returns (CreateDatasetResponse);
  rpc GetDataset (GetDatasetRequest) returns (GetDatasetResponse);
  rpc ListDatasets (ListDatasetsRequest) returns (ListDatasetsResponse);
  rpc UpdateDataset (UpdateDatasetRequest) returns (UpdateDatasetResponse);
  rpc DeleteDataset (DeleteDatasetRequest) returns (DeleteDatasetResponse);
}
