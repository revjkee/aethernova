name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  test:
    name: Test (Linux, ${{ matrix.python }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python: ["3.10", "3.11", "3.12"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: "pip"
          cache-dependency-path: |
            requirements*.txt
            pyproject.toml
            **/requirements*.txt

      - name: Create venv and sync tools
        run: |
          python -m pip install --upgrade pip wheel
          pip install -e .[dev] || pip install -e .
          pip install ruff black mypy pytest pytest-cov coverage bandit pip-audit

      - name: Lint
        run: |
          ruff check .
          ruff format --check .
          black --check .
          bandit -q -r src || true

      - name: Type check
        run: mypy src

      - name: Test with coverage
        run: |
          pytest -q --cov=datafabric_core --cov-report=term-missing:skip-covered --cov-report=xml
        env:
          PYTHONHASHSEED: "0"

      - name: Upload coverage.xml
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python }}
          path: coverage.xml
          if-no-files-found: ignore

      - name: Dependency audit
        run: pip-audit || true

  build:
    name: Build sdist+wheel
    runs-on: ubuntu-latest
    needs: [test]
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: |
            requirements*.txt
            pyproject.toml
            **/requirements*.txt

      - name: Install build backend
        run: |
          python -m pip install --upgrade pip build
          pip install -e . || true

      - name: Build distribution
        run: python -m build
      - name: List dist
        run: ls -alh dist

      - name: Extract version from artifacts
        id: ver
        run: |
          PYVER=$(python - << 'PY'
import pathlib, re
d = pathlib.Path("dist")
files = list(d.glob("*.whl")) + list(d.glob("*.tar.gz"))
if not files:
    raise SystemExit("No artifacts in dist/")
# wheel and sdist should share the same version segment after the first '-' or between name- and .tar.gz
def pick_version(p):
    s = p.name
    # Try wheel: pkgname-version-...
    m = re.match(r"^[A-Za-z0-9_]+-([0-9][A-Za-z0-9\.\+rcpostdev]+)-", s)
    if m:
        return m.group(1)
    # Try sdist: pkgname-version.tar.gz
    m = re.match(r"^[A-Za-z0-9_]+-([0-9][A-Za-z0-9\.\+rcpostdev]+)\.tar\.gz$", s)
    if m:
        return m.group(1)
    raise SystemExit(f"Cannot parse version from {s}")
vers = {pick_version(p) for p in files}
if len(vers) != 1:
    raise SystemExit(f"Inconsistent versions in dist/: {vers}")
print(list(vers)[0])
PY
)
          echo "pkg_version=${PYVER}" >> $GITHUB_OUTPUT
          echo "Package version: ${PYVER}"

      - name: Verify tag matches version
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          if [ "v${{ steps.ver.outputs.pkg_version }}" != "$TAG" ]; then
            echo "Tag ${TAG} does not match built version v${{ steps.ver.outputs.pkg_version }}"
            exit 1
          fi

      - name: Generate SBOM (Syft)
        uses: anchore/sbom-action@v0
        with:
          format: spdx-json
          artifact-name: sbom-spdx
          upload-artifact: true
          path: .
        env:
          SYFT_GO_DISABLED: true

      - name: Upload dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*
          if-no-files-found: error
          retention-days: 14

  sign_and_publish:
    name: Sign, attest, release, publish
    runs-on: ubuntu-latest
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/')
    environment:
      name: pypi
    permissions:
      contents: write               # create release / upload assets
      id-token: write               # OIDC for Sigstore + PyPI Trusted Publishing
      attestations: write           # provenance attestations
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Verify artifacts exist
        run: |
          ls -alh dist
          test -n "$(ls -1 dist/*.whl 2>/dev/null)" || (echo "No wheel found"; exit 1)
          test -n "$(ls -1 dist/*.tar.gz 2>/dev/null)" || (echo "No sdist found"; exit 1)

      - name: Sign artifacts with Sigstore (OIDC)
        uses: sigstore/gh-action-sigstore-python@v2
        with:
          inputs: "dist/*"
          # transparency_log: default Rekor via OIDC

      - name: Attest build provenance (SLSA style)
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: "dist/*"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: |
            dist/*.whl
            dist/*.tar.gz
            dist/*.sig
            dist/*.crt
            dist/*.intoto.jsonl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python for publish
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Publish to PyPI (Trusted Publishing)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          attestations: true
          verbose: true

      - name: Attach SBOM to release (if present)
        continue-on-error: true
        run: |
          SBOM_DIR="${{ runner.temp }}/sbom-download"
          mkdir -p "$SBOM_DIR"
          echo "Downloading all artifacts to locate SBOM"
          gh run download ${{ github.run_id }} -D "$SBOM_DIR"
          SBOM_FILE=$(find "$SBOM_DIR" -maxdepth 3 -type f -name "*.spdx.json" | head -n1 || true)
          if [ -n "$SBOM_FILE" ]; then
            gh release upload "${GITHUB_REF#refs/tags/}" "$SBOM_FILE" --clobber
          else
            echo "SBOM not found; skipping"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
