# DataFabric Core — unified configuration
# Все значения можно переопределять переменными окружения: ${VAR:-default}.
# Профиль окружения задаётся APP_ENV (production|staging|development|test).

app:
  name: ${APP_NAME:-datafabric-core}
  env: ${APP_ENV:-production}
  version: ${APP_VERSION:-0.0.0}
  instance: ${APP_INSTANCE_ID:-${HOSTNAME:-local}}
  timezone: ${APP_TZ:-UTC}
  # Грейс‑периоды для плавного завершения (соответствует preStop/terminationGracePeriod)
  shutdown:
    graceful_timeout_sec: ${APP_SHUTDOWN_TIMEOUT:-25}
    drain_delay_sec: ${APP_DRAIN_DELAY:-5}

server:
  http:
    host: ${HTTP_HOST:-0.0.0.0}
    port: ${HTTP_PORT:-8080}
    base_path: ${HTTP_BASE_PATH:-/}
    request_body_limit_mb: ${HTTP_BODY_LIMIT_MB:-8}
    read_timeout_ms: ${HTTP_READ_TIMEOUT_MS:-60000}
    write_timeout_ms: ${HTTP_WRITE_TIMEOUT_MS:-60000}
    idle_timeout_ms: ${HTTP_IDLE_TIMEOUT_MS:-90000}
    keep_alive_conns: ${HTTP_KEEPALIVE_CONNS:-64}
    compression:
      enabled: ${HTTP_COMPRESSION_ENABLED:-true}
      min_length_bytes: ${HTTP_COMPRESSION_MIN:-1024}
    cors:
      enabled: ${HTTP_CORS_ENABLED:-false}
      allow_origins: ${HTTP_CORS_ORIGINS:-https://datafabric.example.com}
      allow_methods: ${HTTP_CORS_METHODS:-GET,POST,PUT,DELETE,OPTIONS}
      allow_headers: ${HTTP_CORS_HEADERS:-Authorization,Content-Type,Accept,User-Agent}
      expose_headers: ${HTTP_CORS_EXPOSE:-X-Request-Id}
      allow_credentials: ${HTTP_CORS_CREDENTIALS:-false}
      max_age_sec: ${HTTP_CORS_MAXAGE:-600}
    security_headers:
      hsts_max_age_sec: ${SEC_HSTS_MAX_AGE:-31536000}
      hsts_include_subdomains: ${SEC_HSTS_INCLUDE_SUBDOMAINS:-true}
      hsts_preload: ${SEC_HSTS_PRELOAD:-false}
      frame_options: ${SEC_FRAME_OPTIONS:-DENY}
      xss_protection: ${SEC_XXS_PROTECTION:-1; mode=block}
      content_type_nosniff: ${SEC_NO_SNIFF:-true}
      referrer_policy: ${SEC_REFERRER_POLICY:-no-referrer}
      permissions_policy: ${SEC_PERMISSIONS_POLICY:-geolocation=(), microphone=()}
    tls:
      enabled: ${TLS_ENABLED:-false}
      cert_file: ${TLS_CERT_FILE:-}
      key_file: ${TLS_KEY_FILE:-}
      client_auth: ${TLS_CLIENT_AUTH:-none} # none|request|require

  grpc:
    enabled: ${GRPC_ENABLED:-false}
    port: ${GRPC_PORT:-9090}
    max_recv_mb: ${GRPC_MAX_RECV_MB:-16}
    max_send_mb: ${GRPC_MAX_SEND_MB:-16}
    keepalive_time_ms: ${GRPC_KEEPALIVE_MS:-20000}

endpoints:
  health:
    live_path: ${HEALTH_LIVENESS_PATH:-/health}
    ready_path: ${HEALTH_READINESS_PATH:-/ready}
    startup_path: ${HEALTH_STARTUP_PATH:-/startup}
  metrics:
    path: ${METRICS_PATH:-/metrics}
  docs:
    openapi_path: ${OPENAPI_PATH:-/openapi.json}
    swagger_ui_path: ${SWAGGER_UI_PATH:-/docs}

logging:
  level: ${LOG_LEVEL:-info}             # trace|debug|info|warn|error
  format: ${LOG_FORMAT:-json}           # json|text
  sample:
    enabled: ${LOG_SAMPLE_ENABLED:-true}
    rate_per_sec: ${LOG_SAMPLE_RPS:-50}
  redact_fields:                        # поля для маскирования
    - password
    - token
    - authorization
    - set-cookie
  fields:
    service: ${app.name}
    env: ${app.env}
    instance: ${app.instance}
  sinks:
    stdout: true
    file:
      enabled: ${LOG_FILE_ENABLED:-false}
      path: ${LOG_FILE_PATH:-/var/log/datafabric/app.log}
      rotate_mb: ${LOG_FILE_ROTATE_MB:-100}
      rotate_keep: ${LOG_FILE_ROTATE_KEEP:-5}

tracing:
  enabled: ${TRACE_ENABLED:-true}
  provider: ${TRACE_PROVIDER:-otlp}     # otlp|jaeger|zipkin|none
  sample_ratio: ${TRACE_SAMPLE_RATIO:-0.1}
  otlp:
    endpoint: ${OTLP_ENDPOINT:-http://otel-collector:4317}
    protocol: ${OTLP_PROTOCOL:-grpc}    # grpc|http
  attributes:
    service.name: ${app.name}
    service.version: ${app.version}
    deployment.environment: ${app.env}
    service.instance.id: ${app.instance}

metrics:
  enabled: ${METRICS_ENABLED:-true}
  runtime:
    gc: true
    process: true
  labels:
    service: ${app.name}
    env: ${app.env}
    instance: ${app.instance}

security:
  auth:
    enabled: ${AUTH_ENABLED:-true}
    mode: ${AUTH_MODE:-jwt}            # jwt|opaque|m2m|none
    audience: ${AUTH_AUD:-datafabric}
    issuers: ${AUTH_ISSUERS:-https://issuer.example.com}
    jwks_uri: ${AUTH_JWKS_URI:-https://issuer.example.com/.well-known/jwks.json}
    required_scopes: ${AUTH_REQUIRED_SCOPES:-datafabric.read}
    clock_skew_sec: ${AUTH_CLOCK_SKEW:-60}
  access_control:
    model: ${ACL_MODEL:-rbac}           # rbac|abac
    default_deny: ${ACL_DEFAULT_DENY:-true}
    # Пример правил RBAC (можно загрузить из БД/политик)
    roles:
      - name: admin
        allow: ["*"]
      - name: reader
        allow:
          - "GET:/api/v1/*"
  csrf:
    enabled: ${CSRF_ENABLED:-false}
  rate_limit:
    enabled: ${RATE_LIMIT_ENABLED:-true}
    strategy: ${RATE_LIMIT_STRATEGY:-token_bucket}
    requests_per_sec: ${RATE_LIMIT_RPS:-20}
    burst: ${RATE_LIMIT_BURST:-100}
    by_header: ${RATE_LIMIT_KEY_HEADER:-X-Api-Key}
  ip_filter:
    allow_cidrs: ${IP_ALLOW_CIDRS:-}    # пример: 10.0.0.0/8,192.168.0.0/16
    deny_cidrs: ${IP_DENY_CIDRS:-}

resilience:
  timeouts_ms:
    default: ${TIMEOUT_DEFAULT_MS:-2000}
    db: ${TIMEOUT_DB_MS:-3000}
    http_client: ${TIMEOUT_HTTP_CLIENT_MS:-2500}
    kafka: ${TIMEOUT_KAFKA_MS:-3000}
  retries:
    default:
      attempts: ${RETRY_DEFAULT_ATTEMPTS:-2}
      backoff_ms: ${RETRY_DEFAULT_BACKOFF_MS:-100}
      max_backoff_ms: ${RETRY_DEFAULT_MAX_BACKOFF_MS:-1000}
      jitter: ${RETRY_DEFAULT_JITTER:-true}
  circuit_breakers:
    enabled: ${CB_ENABLED:-true}
    default:
      failure_threshold: ${CB_FAIL_THRESHOLD:-0.5}
      rolling_window_sec: ${CB_WINDOW_SEC:-60}
      min_throughput: ${CB_MIN_THROUGHPUT:-20}
      open_state_sec: ${CB_OPEN_SEC:-30}

database:
  postgres:
    enabled: ${PG_ENABLED:-true}
    dsn: ${PG_DSN:-postgresql://df_user:df_pass@postgres:5432/datafabric}
    pool:
      min: ${PG_POOL_MIN:-2}
      max: ${PG_POOL_MAX:-20}
      max_idle_time_sec: ${PG_POOL_IDLE_SEC:-60}
      acquire_timeout_ms: ${PG_ACQUIRE_MS:-2000}
    migrations:
      enabled: ${PG_MIGRATIONS_ENABLED:-true}
      path: ${PG_MIGRATIONS_PATH:-/app/migrations}
    health:
      interval_sec: ${PG_HEALTH_INTERVAL:-15}
      timeout_ms: ${PG_HEALTH_TIMEOUT_MS:-800}

cache:
  redis:
    enabled: ${REDIS_ENABLED:-true}
    url: ${REDIS_URL:-redis://redis:6379/0}
    pool_max_conns: ${REDIS_MAX_CONNS:-100}
    tls: ${REDIS_TLS_ENABLED:-false}
    health:
      interval_sec: ${REDIS_HEALTH_INTERVAL:-15}
      timeout_ms: ${REDIS_HEALTH_TIMEOUT_MS:-500}
    ttl_defaults:
      generic_sec: ${CACHE_TTL_GENERIC_SEC:-600}
      session_sec: ${CACHE_TTL_SESSION_SEC:-1800}

queue:
  kafka:
    enabled: ${KAFKA_ENABLED:-false}
    brokers: ${KAFKA_BROKERS:-kafka:9092}
    client_id: ${KAFKA_CLIENT_ID:-datafabric-core}
    acks: ${KAFKA_ACKS:-all}
    compression: ${KAFKA_COMPRESSION:-lz4}
    tls:
      enabled: ${KAFKA_TLS_ENABLED:-false}
      ca_file: ${KAFKA_TLS_CA:-}
      cert_file: ${KAFKA_TLS_CERT:-}
      key_file: ${KAFKA_TLS_KEY:-}
    sasl:
      enabled: ${KAFKA_SASL_ENABLED:-false}
      mechanism: ${KAFKA_SASL_MECH:-SCRAM-SHA-512}
      username: ${KAFKA_SASL_USER:-}
      password: ${KAFKA_SASL_PASS:-}
    topics:
      events: ${KAFKA_TOPIC_EVENTS:-df.events.v1}
      audit: ${KAFKA_TOPIC_AUDIT:-df.audit.v1}
    producer:
      linger_ms: ${KAFKA_PRODUCER_LINGER_MS:-10}
      batch_size_kb: ${KAFKA_PRODUCER_BATCH_KB:-64}
      retries: ${KAFKA_PRODUCER_RETRIES:-5}
    consumer:
      group_id: ${KAFKA_GROUP_ID:-df-core}
      auto_offset_reset: ${KAFKA_AUTO_OFFSET_RESET:-latest}
      max_poll_records: ${KAFKA_MAX_POLL_RECORDS:-500}

storage:
  s3:
    enabled: ${S3_ENABLED:-false}
    endpoint: ${S3_ENDPOINT:-https://s3.amazonaws.com}
    region: ${S3_REGION:-eu-central-1}
    bucket: ${S3_BUCKET:-datafabric-core}
    path_style: ${S3_PATH_STYLE:-false}
    kms_key_id: ${S3_KMS_KEY_ID:-}
    access_key_id: ${S3_ACCESS_KEY_ID:-}
    secret_access_key: ${S3_SECRET_ACCESS_KEY:-}
    upload:
      multipart_threshold_mb: ${S3_MULTIPART_THRESHOLD_MB:-16}
      part_size_mb: ${S3_PART_SIZE_MB:-8}
      max_concurrency: ${S3_MAX_CONCURRENCY:-4}
    timeouts_ms:
      connect: ${S3_TIMEOUT_CONNECT_MS:-1000}
      read: ${S3_TIMEOUT_READ_MS:-5000}

http_clients:
  defaults:
    timeout_ms: ${HTTP_CLIENT_TIMEOUT_MS:-2000}
    retries:
      attempts: ${HTTP_CLIENT_RETRIES:-2}
      backoff_ms: ${HTTP_CLIENT_BACKOFF_MS:-100}
      max_backoff_ms: ${HTTP_CLIENT_BACKOFF_MAX_MS:-1000}
      retry_on:
        - 429
        - 502
        - 503
        - 504

scheduler:
  enabled: ${SCHED_ENABLED:-true}
  timezone: ${app.timezone}
  jobs:
    # Пример: периодический сбор метрик/агрегаций
    - id: aggregate-metrics
      cron: ${JOB_AGGREGATE_CRON:-"*/5 * * * *"}
      timeout_ms: ${JOB_AGGREGATE_TIMEOUT_MS:-20000}
      concurrency: ${JOB_AGGREGATE_CONCURRENCY:-1}
      enabled: ${JOB_AGGREGATE_ENABLED:-true}

features:
  # Унифицированные фиче‑флаги (перекрываемы через окружение или консоль управления)
  experimental_api: ${FF_EXPERIMENTAL_API:-false}
  strict_validation: ${FF_STRICT_VALIDATION:-true}
  enable_audit: ${FF_ENABLE_AUDIT:-true}

validation:
  request:
    max_query_params: ${VAL_MAX_QUERY_PARAMS:-128}
    max_headers: ${VAL_MAX_HEADERS:-100}
    max_payload_mb: ${server.http.request_body_limit_mb}
  response:
    max_payload_mb: ${VAL_RESP_MAX_MB:-16}
  openapi:
    enabled: ${OPENAPI_VALIDATION_ENABLED:-true}
    fail_on_violation: ${OPENAPI_FAIL_ON_VIOLATION:-false}

audit:
  enabled: ${AUDIT_ENABLED:-true}
  sink: ${AUDIT_SINK:-kafka}  # kafka|log|db|none
  redact_payload: ${AUDIT_REDACT:-true}
  topics:
    kafka: ${queue.kafka.topics.audit}

# Профильные оверлеи (значения ниже дополняют/переопределяют базовые)
profiles:

  production:
    logging:
      level: ${LOG_LEVEL_PROD:-info}
      sample:
        rate_per_sec: ${LOG_SAMPLE_RPS_PROD:-20}
    security:
      rate_limit:
        requests_per_sec: ${RATE_LIMIT_RPS_PROD:-50}
        burst: ${RATE_LIMIT_BURST_PROD:-200}
    resilience:
      retries:
        default:
          attempts: ${RETRY_DEFAULT_ATTEMPTS_PROD:-2}
    server:
      http:
        compression:
          enabled: ${HTTP_COMPRESSION_ENABLED_PROD:-true}

  staging:
    logging:
      level: ${LOG_LEVEL_STG:-debug}
    features:
      experimental_api: ${FF_EXPERIMENTAL_API_STG:-true}

  development:
    logging:
      level: ${LOG_LEVEL_DEV:-debug}
      format: ${LOG_FORMAT_DEV:-text}
    security:
      auth:
        enabled: ${AUTH_ENABLED_DEV:-false}
    database:
      postgres:
        dsn: ${PG_DSN_DEV:-postgresql://df_user:df_pass@localhost:5432/datafabric}
    cache:
      redis:
        url: ${REDIS_URL_DEV:-redis://localhost:6379/0}
    queue:
      kafka:
        enabled: ${KAFKA_ENABLED_DEV:-false}

integrations:
  # Примеры внешних интеграций (переопределяйте по мере необходимости)
  sentry:
    enabled: ${SENTRY_ENABLED:-false}
    dsn: ${SENTRY_DSN:-}
    environment: ${app.env}
    release: ${app.version}
  pagerduty:
    enabled: ${PD_ENABLED:-false}
    routing_key: ${PD_ROUTING_KEY:-}

# Консистентная карта меток для экспорта в Prometheus/логи
labels:
  app.kubernetes.io/name: ${app.name}
  app.kubernetes.io/instance: ${app.instance}
  app.kubernetes.io/version: ${app.version}
  app.kubernetes.io/part-of: datafabric-core
  deployment.environment: ${app.env}
