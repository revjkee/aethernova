[package]
name = "datafabric-native"
version = "0.1.0"
edition = "2021"
rust-version = "1.75"
license = "Apache-2.0"
authors = ["DataFabric Contributors"]
description = "Native Rust core for DataFabric: high-performance primitives, optional FFI (Python/Node), gRPC, and CLI."
homepage = "https://example.com/datafabric"
repository = "https://example.com/datafabric/core"
documentation = "https://docs.rs/datafabric-native"
readme = "README.md"
# Важно для корректной резолюции фич и dev-deps
resolver = "2"

# Библиотека по умолчанию — rlib; cdylib нужна только при FFI-фичах.
[lib]
name = "datafabric_native"
path = "src/lib.rs"
# crate-type не делаем обязательным "cdylib", чтобы не тянуть системные тулчейны без нужды.
crate-type = ["rlib"]

# Опциональная CLI (включается фичей `cli`)
[[bin]]
name = "df-native-cli"
path = "src/bin/cli.rs"
required-features = ["cli"]

[features]
# Базовый набор: без FFI, только rlib с async/telemetry.
default = ["core"]

# Минимальное ядро: ошибокедение, сериализация, трассировка.
core = ["dep:anyhow", "dep:thiserror", "dep:serde", "serde/derive", "dep:bytes", "dep:tracing"]

# Поддержка асинхронности и задач (включается автоматически при grpc/cli)
rt = ["dep:tokio", "tokio/macros", "tokio/rt-multi-thread", "tokio/sync", "tokio/time", "tokio/fs", "tokio/io"]

# Наблюдаемость и логирование
telemetry = ["dep:tracing-subscriber"]

# FFI-слой для Python через PyO3 (cdylib, abi3)
python = [
    "core",
    "dep:pyo3",
    "pyo3/extension-module",
    "pyo3/abi3",
    "pyo3/abi3-py39"
]

# FFI-слой для Node.js через N-API (napi-rs)
node = ["core", "dep:napi", "dep:napi-derive"]

# gRPC API (tonic + prost)
grpc = ["rt", "dep:tonic", "dep:prost", "dep:prost-types"]

# CLI‑утилиты (аргументы/форматирование)
cli = ["rt", "core", "dep:clap", "clap/derive", "dep:humantime"]

# Сборка cdylib при любой FFI-фиче (управляется из кода через #[cfg(feature = "...")])
ffi = ["python", "node"]

[dependencies]
# Базовые
anyhow = { version = "1.0", optional = true }
thiserror = { version = "1.0", optional = true }
serde = { version = "1.0", features = ["std"], optional = true }
serde_json = { version = "1.0", optional = true }
bytes = { version = "1.7", optional = true }

# Async
tokio = { version = "1.39", features = [], optional = true }

# Telemetry
tracing = { version = "0.1", optional = true }
tracing-subscriber = { version = "0.3", features = ["fmt", "env-filter"], optional = true }

# CLI
clap = { version = "4.5", features = [], optional = true }
humantime = { version = "2.1", optional = true }

# gRPC
tonic = { version = "0.12", default-features = false, features = ["codegen", "transport"], optional = true }
prost = { version = "0.13", optional = true }
prost-types = { version = "0.13", optional = true }

# Python FFI
pyo3 = { version = "0.22", optional = true }

# Node FFI
napi = { version = "2.16", default-features = false, features = ["napi4"], optional = true }
napi-derive = { version = "2.16", optional = true }

# Вспомогательное
once_cell = { version = "1.19" }
parking_lot = { version = "0.12" }
uuid = { version = "1.10", features = ["v4"] }

# Поддержка (де)сериализации протоколов/метаданных (опционально, подключайте в коде через cfg(feature))
bincode = { version = "1.3", optional = true }

[dev-dependencies]
# Тестовая телеметрия/фреймворк
tracing-test = "0.2"
rstest = "0.21"
serde_json = "1.0"
tempfile = "3.10"

[profile.dev]
# Чуть быстрее проверки и профилирования
opt-level = 1
debug = true
debug-assertions = true
overflow-checks = true
lto = "off"
incremental = true

[profile.release]
# Индустриальные параметры: размер + производительность
opt-level = "z"         # или "s" / 3 — под цель проекта; z = минимальный размер
lto = "fat"
codegen-units = 1
panic = "abort"
strip = "symbols"
debug = false
incremental = false
# При критичных путях замените opt-level на 3 для максимальной скорости.

[profile.bench]
opt-level = 3
lto = "thin"
codegen-units = 1
debug = false
panic = "abort"

[package.metadata.docs.rs]
# Документация собирается без тяжёлых FFI/грайпсисов
features = ["core"]
rustdoc-args = ["--cfg", "docsrs"]

# Таргет-специфичная настройка для статической линковки на Linux-musl (опционально)
# Уберите комментарии, если используете musl toolchain.
# [target.x86_64-unknown-linux-musl]
# linker = "musl-gcc"

# Пример секции для Windows, если нужна статическая CRT (при сборке CLI):
# [target.'cfg(target_env="msvc")'.rustflags]
# rustflags = ["-Ctarget-feature=+crt-static"]

# Пример конфигурации публикации (cargo-release), если используете релизный флоу:
# [workspace.metadata.release]
# tag = true
# push = false
# publish = false
# pre-release-commit-message = "chore(release): {{version}}"
