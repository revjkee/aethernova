# datafabric-core / ops/k8s/base/secret.yaml
# Kubernetes: policy — хранение плейнтекста в репозитории запрещено.
# Здесь плейсхолдеры — их должен подставлять CI/CD (например, через envsubst или kustomize vars).
# Для локальной разработки допускается временная подстановка значений вне VCS.

---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: datafabric
  labels:
    app.kubernetes.io/name: datafabric-core
    app.kubernetes.io/component: postgres
    app.kubernetes.io/part-of: datafabric
type: Opaque
immutable: true
stringData:
  POSTGRES_DB: "${POSTGRES_DB}"
  POSTGRES_USER: "${POSTGRES_USER}"
  POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"

---
apiVersion: v1
kind: Secret
metadata:
  name: redis-secret
  namespace: datafabric
  labels:
    app.kubernetes.io/name: datafabric-core
    app.kubernetes.io/component: redis
    app.kubernetes.io/part-of: datafabric
type: Opaque
immutable: true
stringData:
  # Если Redis без аутентификации, оставьте пустым или не используйте секрет в Deployment.
  REDIS_PASSWORD: "${REDIS_PASSWORD}"

---
apiVersion: v1
kind: Secret
metadata:
  name: kafka-secret
  namespace: datafabric
  labels:
    app.kubernetes.io/name: datafabric-core
    app.kubernetes.io/component: kafka
    app.kubernetes.io/part-of: datafabric
type: Opaque
immutable: true
stringData:
  # Параметры SASL/PLAIN, если брокер защищён. При PLAINTEXT без SASL можно не использовать этот секрет.
  KAFKA_SASL_MECHANISM: "${KAFKA_SASL_MECHANISM}"  # например: PLAIN или SCRAM-SHA-256
  KAFKA_SASL_USERNAME: "${KAFKA_SASL_USERNAME}"
  KAFKA_SASL_PASSWORD: "${KAFKA_SASL_PASSWORD}"
  # Дополнительно для TLS, если требуется клиентский TLS:
  # KAFKA_TRUSTSTORE_CRT: |
  #   -----BEGIN CERTIFICATE-----
  #   ...
  #   -----END CERTIFICATE-----

---
apiVersion: v1
kind: Secret
metadata:
  name: minio-secret
  namespace: datafabric
  labels:
    app.kubernetes.io/name: datafabric-core
    app.kubernetes.io/component: minio
    app.kubernetes.io/part-of: datafabric
type: Opaque
immutable: true
stringData:
  MINIO_ROOT_USER: "${MINIO_ROOT_USER}"
  MINIO_ROOT_PASSWORD: "${MINIO_ROOT_PASSWORD}"

---
apiVersion: v1
kind: Secret
metadata:
  name: app-secret
  namespace: datafabric
  labels:
    app.kubernetes.io/name: datafabric-core
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: datafabric
type: Opaque
immutable: true
stringData:
  # Ключи приложения
  APP_SECRET_KEY: "${APP_SECRET_KEY}"              # криптографический, >=32 байт
  JWT_SIGNING_KEY: "${JWT_SIGNING_KEY}"            # асимметричный (PEM) или симметричный
  # Интеграции (опционально)
  OAUTH_CLIENT_ID: "${OAUTH_CLIENT_ID}"
  OAUTH_CLIENT_SECRET: "${OAUTH_CLIENT_SECRET}"
  # Внешние endpoints
  EXTERNAL_MINIO_ENDPOINT: "${MINIO_ENDPOINT}"
  EXTERNAL_KAFKA_BROKER: "${KAFKA_BROKER}"

---
apiVersion: v1
kind: Secret
metadata:
  name: tls-app
  namespace: datafabric
  labels:
    app.kubernetes.io/name: datafabric-core
    app.kubernetes.io/component: ingress
    app.kubernetes.io/part-of: datafabric
type: kubernetes.io/tls
immutable: true
stringData:
  tls.crt: |
    ${TLS_CERT_PEM}
  tls.key: |
    ${TLS_KEY_PEM}
