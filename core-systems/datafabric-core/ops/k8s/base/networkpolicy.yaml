# ops/k8s/base/networkpolicy.yaml
# Базовая модель: "по умолчанию запрещено" + точечные allow-политики.

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: datafabric-core-default-deny
  labels:
    app.kubernetes.io/name: datafabric-core
    app.kubernetes.io/instance: datafabric-core
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: datafabric-core
      app.kubernetes.io/instance: datafabric-core
  policyTypes:
    - Ingress
    - Egress
  ingress: []   # запретить всё входящее
  egress:  []   # запретить всё исходящее

# --- Разрешить DNS (CoreDNS в kube-system)
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: datafabric-core-egress-dns
  labels:
    app.kubernetes.io/name: datafabric-core
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: datafabric-core
      app.kubernetes.io/instance: datafabric-core
  policyTypes: [Egress]
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
          podSelector:
            matchLabels:
              k8s-app: kube-dns
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53

# --- (Опционально) Разрешить NTP для корректного времени
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: datafabric-core-egress-ntp
  labels:
    app.kubernetes.io/name: datafabric-core
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: datafabric-core
      app.kubernetes.io/instance: datafabric-core
  policyTypes: [Egress]
  egress:
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0   # ограничьте корпоративными NTP в оверлеях
      ports:
        - protocol: UDP
          port: 123

# --- Разрешить вход от ingress-контроллера (например, ingress-nginx)
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: datafabric-core-ingress-from-ingress-controller
  labels:
    app.kubernetes.io/name: datafabric-core
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: datafabric-core
      app.kubernetes.io/instance: datafabric-core
  policyTypes: [Ingress]
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: ingress-nginx   # замените при иной установке
          podSelector:
            matchLabels:
              app.kubernetes.io/name: ingress-nginx
      ports:
        - port: 8080
          protocol: TCP

# --- Разрешить вход от сервисов в том же namespace (внутрикластерные вызовы/sidecar/джобы)
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: datafabric-core-ingress-same-namespace
  labels:
    app.kubernetes.io/name: datafabric-core
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: datafabric-core
      app.kubernetes.io/instance: datafabric-core
  policyTypes: [Ingress]
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: PLACEHOLDER_NAMESPACE  # переопределите оверлеем через namespaceSelector
      ports:
        - port: 8080
          protocol: TCP
        - port: 9090
          protocol: TCP

# --- Разрешить scrape метрик из monitoring namespace (Prometheus/VMAgent)
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: datafabric-core-ingress-metrics
  labels:
    app.kubernetes.io/name: datafabric-core
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: datafabric-core
      app.kubernetes.io/instance: datafabric-core
  policyTypes: [Ingress]
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: monitoring
      ports:
        - port: 9090
          protocol: TCP

# --- Разрешить egress к Redis (кэш), селектор по сервису/подам
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: datafabric-core-egress-redis
  labels:
    app.kubernetes.io/name: datafabric-core
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: datafabric-core
      app.kubernetes.io/instance: datafabric-core
  policyTypes: [Egress]
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: PLACEHOLDER_NS_CACHE
          podSelector:
            matchLabels:
              app.kubernetes.io/name: redis
      ports:
        - port: 6379
          protocol: TCP

# --- Разрешить egress к шине событий (Kafka/NATS/RabbitMQ) — примеры профилей портов
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: datafabric-core-egress-event-bus
  labels:
    app.kubernetes.io/name: datafabric-core
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: datafabric-core
      app.kubernetes.io/instance: datafabric-core
  policyTypes: [Egress]
  egress:
    # Kafka
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: PLACEHOLDER_NS_BUS
          podSelector:
            matchLabels:
              app.kubernetes.io/name: kafka
      ports:
        - port: 9092
          protocol: TCP
    # NATS
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: PLACEHOLDER_NS_BUS
          podSelector:
            matchLabels:
              app.kubernetes.io/name: nats
      ports:
        - port: 4222
          protocol: TCP
    # RabbitMQ (AMQP)
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: PLACEHOLDER_NS_BUS
          podSelector:
            matchLabels:
              app.kubernetes.io/name: rabbitmq
      ports:
        - port: 5672
          protocol: TCP

# --- Разрешить egress к DataFabric SQL API (HTTP/HTTPS)
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: datafabric-core-egress-sql-endpoint
  labels:
    app.kubernetes.io/name: datafabric-core
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: datafabric-core
      app.kubernetes.io/instance: datafabric-core
  policyTypes: [Egress]
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: PLACEHOLDER_NS_DATAFABRIC
          podSelector:
            matchLabels:
              app.kubernetes.io/name: datafabric-sql
      ports:
        - port: 443
          protocol: TCP

# --- Разрешить egress к бэкенду якорения (ledger API) по HTTPS
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: datafabric-core-egress-ledger
  labels:
    app.kubernetes.io/name: datafabric-core
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: datafabric-core
      app.kubernetes.io/instance: datafabric-core
  policyTypes: [Egress]
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: PLACEHOLDER_NS_LEDGER
          podSelector:
            matchLabels:
              app.kubernetes.io/name: ledger-api
      ports:
        - port: 443
          protocol: TCP

# --- (Опционально) Разрешить внутреннее межподовое взаимодействие самого приложения (горизонтальный трафик)
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: datafabric-core-ingress-from-self
  labels:
    app.kubernetes.io/name: datafabric-core
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: datafabric-core
      app.kubernetes.io/instance: datafabric-core
  policyTypes: [Ingress]
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: datafabric-core
              app.kubernetes.io/instance: datafabric-core
      ports:
        - port: 8080
          protocol: TCP
        - port: 9090
          protocol: TCP
