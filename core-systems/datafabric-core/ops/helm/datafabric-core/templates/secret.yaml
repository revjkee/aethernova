{{- /*
Secret template for datafabric-core

Helpers expected:
  - "datafabric-core.fullname"
  - "datafabric-core.labels"

Values contract (safe defaults):
secret:
  enabled: true
  existingSecret: ""          # if set, this template will not create the main secret
  nameOverride: ""            # optional name override
  type: Opaque                # Opaque|kubernetes.io/tls|kubernetes.io/dockerconfigjson|...
  immutable: true
  labels: {}
  annotations: {}
  data: {}                    # binary-safe (will be base64-encoded here)
  stringData: {}              # plaintext (K8s will base64-encode)
  # tls example (type=kubernetes.io/tls):
  # stringData:
  #   tls.crt: |-
  #   tls.key: |-
  additional: []              # list of extra secrets to create (see example below)

imagePullSecrets:
  create: false
  name: ""                    # if empty -> <release>-registry
  registry: ghcr.io
  username: ""
  password: ""
  email: ""                   # optional
*/ -}}

{{/* --------------------------- Primary application Secret --------------------------- */}}
{{- if and .Values.secret.enabled (not .Values.secret.existingSecret) }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ default (include "datafabric-core.fullname" .) .Values.secret.nameOverride }}
  labels:
    {{- include "datafabric-core.labels" . | nindent 4 }}
  {{- with .Values.secret.labels }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.secret.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
type: {{ default "Opaque" .Values.secret.type | quote }}
{{- if hasKey .Values.secret "immutable" }}
immutable: {{ .Values.secret.immutable }}
{{- end }}
{{- $d := (default dict .Values.secret.data) -}}
{{- $sd := (default dict .Values.secret.stringData) -}}
{{- if $d }}
data:
  {{- range $k, $v := $d }}
  {{- /* If the user passes already base64-encoded, keep it; otherwise encode */ -}}
  {{- if kindIs "string" $v }}
  {{ $k }}: {{ $v | b64enc | quote }}
  {{- else }}
  {{ $k }}: {{ toJson $v | b64enc | quote }}
  {{- end }}
  {{- end }}
{{- end }}
{{- if $sd }}
stringData:
  {{- range $k, $v := $sd }}
  {{- if kindIs "string" $v }}
  {{ $k }}: {{ tpl $v $ | quote }}
  {{- else }}
  {{ $k }}: {{ toJson $v | quote }}
  {{- end }}
  {{- end }}
{{- end }}
---
{{- end }}

{{/* --------------------------- Additional Secrets (list) --------------------------- */}}
{{- /*
Values example:
secret:
  additional:
    - name: dfc-db
      type: Opaque
      immutable: true
      stringData:
        PG_USER: "postgres"
        PG_PASSWORD: "changeme"
    - name: dfc-s3
      type: Opaque
      data:
        S3_ACCESS_KEY: {{ "minioadmin" | b64enc }}   # pre-encoded OK
        S3_SECRET_KEY: {{ "minioadmin" | b64enc }}
*/ -}}
{{- range $i, $s := (default list .Values.secret.additional) }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ required (printf "secret.additional[%d].name is required" $i) $s.name }}
  labels:
    {{- include "datafabric-core.labels" $ | nindent 4 }}
  {{- with $s.labels }}
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with $s.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
type: {{ default "Opaque" $s.type | quote }}
{{- if hasKey $s "immutable" }}
immutable: {{ $s.immutable }}
{{- end }}
{{- if $s.data }}
data:
  {{- range $k, $v := $s.data }}
  {{- if kindIs "string" $v }}
  {{ $k }}: {{ $v | b64enc | quote }}
  {{- else }}
  {{ $k }}: {{ toJson $v | b64enc | quote }}
  {{- end }}
  {{- end }}
{{- end }}
{{- if $s.stringData }}
stringData:
  {{- range $k, $v := $s.stringData }}
  {{- if kindIs "string" $v }}
  {{ $k }}: {{ tpl $v $ | quote }}
  {{- else }}
  {{ $k }}: {{ toJson $v | quote }}
  {{- end }}
  {{- end }}
{{- end }}
---
{{- end }}

{{/* --------------------------- Docker registry pull secret --------------------------- */}}
{{- if .Values.imagePullSecrets.create }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ default (printf "%s-registry" (include "datafabric-core.fullname" .)) .Values.imagePullSecrets.name }}
  labels:
    {{- include "datafabric-core.labels" . | nindent 4 }}
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: >-
    {{- $auth := printf "%s:%s" (required "imagePullSecrets.username is required" .Values.imagePullSecrets.username) (required "imagePullSecrets.password is required" .Values.imagePullSecrets.password) -}}
    {{- $cfg := dict
          "auths" (dict
            (required "imagePullSecrets.registry is required" .Values.imagePullSecrets.registry)
            (dict
              "username" .Values.imagePullSecrets.username
              "password" .Values.imagePullSecrets.password
              "email" (default "" .Values.imagePullSecrets.email)
              "auth" ($auth | b64enc)
            )
          )
        | toJson -}}
    {{ $cfg | b64enc }}
---
{{- end }}

{{/* --------------------------- Notes ---------------------------
If .Values.secret.existingSecret is set, wire it in your Deployment via:
envFrom:
  - secretRef:
      name: {{ .Values.secret.existingSecret }}

This template avoids printing secret values in annotations/notes to prevent leaks.
----------------------------------------------------------------- */}}
