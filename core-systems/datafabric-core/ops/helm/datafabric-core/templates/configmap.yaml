apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "datafabric-core.fullname" . }}-config
  labels:
    {{- include "datafabric-core.labels" . | nindent 4 }}
    app.kubernetes.io/component: config
  annotations:
    {{- with .Values.configAnnotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
    # Если используется reloader (например, stakater), можно включить авто‑перекат подов:
    {{- if .Values.configReloader.enabled }}
    reloader.stakater.com/auto: "true"
    {{- end }}

data:
  # Базовая конфигурация приложения (YAML). tpl позволяет использовать {{ ... }} из values.
  application.yaml: |
    {{- /* Печатаем YAML даже при пустом config, чтобы ресурс всегда имел хотя бы один ключ */ -}}
    {{- $base := .Values.config | default dict -}}
    {{- tpl (toYaml $base) . | nindent 4 }}

  # Дополнительная секция (объединяемая в рантайме самим приложением, если оно поддерживает)
  extra-config.yaml: |
    {{- $extra := .Values.extraConfig | default dict -}}
    {{- tpl (toYaml $extra) . | nindent 4 }}

  # Именованные конфиги из values.configFiles: { "filename.yaml": "<yaml or text>" }
  {{- range $name, $content := (.Values.configFiles | default dict) | toYaml | fromYaml }}
  {{ $name }}: |
    {{- tpl (printf "%v" $content) $ | nindent 4 }}
  {{- end }}

  # Конфиги из каталога чарта: charts/datafabric-core/configs/* (если есть)
  # Имя ключа — относительный путь без префикса configs/.
  {{- $files := .Files.Glob "configs/**" }}
  {{- if $files }}
  {{- range $path, $f := $files.AsConfig }}
  {{- $name := regexReplaceAll "^configs/" $path "" }}
  {{ $name }}: |
    {{- tpl $f $ | nindent 4 }}
  {{- end }}
  {{- end }}

  # Необязательная "env"‑проекция (если удобно приложению)
  {{- if .Values.envConfig }}
  env.yaml: |
    {{- tpl (toYaml .Values.envConfig) . | nindent 4 }}
  {{- end }}

binaryData:
  # Бинарные данные (значения должны быть base64‑строками).
  # Пример в values: binaryData: { "cert.pem": "BASE64...", "blob.bin": "BASE64..." }
  {{- range $name, $b64 := (.Values.binaryData | default dict) }}
  {{ $name }}: {{ $b64 | quote }}
  {{- end }}
