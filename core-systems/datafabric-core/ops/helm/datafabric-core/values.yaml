# charts/datafabric-core/values.yaml

# -------------------------------
# Образ и запуск
# -------------------------------
image:
  repository: registry.example.com/datafabric/datafabric-core
  tag: "v1.2.3"
  pullPolicy: IfNotPresent
imagePullSecrets: []
  # - name: regcred

command: ["python", "-m", "engine.cli.main"]
args:
  - "run"
  - "--grace"
  - "5.0"

replicaCount: 2

# -------------------------------
# Автоскейлинг (HPA)
# -------------------------------
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 8
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleUp:
      policies:
        - type: Pods
          value: 2
          periodSeconds: 60
      stabilizationWindowSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300

# -------------------------------
# Ресурсы и лимиты
# -------------------------------
resources:
  requests:
    cpu: "250m"
    memory: "256Mi"
  limits:
    cpu: "1"
    memory: "1Gi"

# -------------------------------
# Пробы
# -------------------------------
startupProbe:
  httpGet:
    path: /health
    port: http
  failureThreshold: 30
  periodSeconds: 3
  timeoutSeconds: 2

livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 20
  periodSeconds: 10
  timeoutSeconds: 2
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /ready
    port: http
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 2
  failureThreshold: 6

# -------------------------------
# Сервис и порты
# -------------------------------
service:
  type: ClusterIP
  annotations: {}
  labels: {}
  ports:
    http:
      port: 8080
      targetPort: 8080
    metrics:
      port: 9090
      targetPort: 9090

# -------------------------------
# Ingress
# -------------------------------
ingress:
  enabled: true
  className: "nginx"
  annotations: {}
  hosts:
    - host: core.datafabric.example.com
      paths:
        - path: /
          pathType: Prefix
          service:
            name: ""   # по умолчанию — release fullName
            port: http
  tls:
    - secretName: datafabric-core-tls
      hosts:
        - core.datafabric.example.com

# -------------------------------
# Конфигурация приложения
# -------------------------------
env:
  ENGINE_LOG_LEVEL: "INFO"
  ENGINE_LOG_FORMAT: "json"
  ENGINE_PROFILE_DIR: "/var/lib/datafabric/profiles"
envFrom: []
  # - configMapRef:
  #     name: datafabric-config
  # - secretRef:
  #     name: datafabric-secrets

config:
  enabled: true
  name: datafabric-config
  data:
    DF_SQL_ENDPOINT: "https://df-sql.datafabric.svc.cluster.local"
    LEDGER_ENDPOINT: "https://ledger-api.datafabric.svc.cluster.local"
  files: {}
  #  application.yaml: |
  #    key: value

secrets:
  enabled: true
  name: datafabric-secrets
  stringData:
    DF_AUTH_TOKEN: "PLACEHOLDER_TOKEN"
    LEDGER_API_KEY: "PLACEHOLDER_KEY"
    CACHE_REDIS_URL: "redis://redis.data-cache.svc.cluster.local:6379/0"

extraEnv: []
extraEnvFrom: []

# -------------------------------
# RBAC и ServiceAccount
# -------------------------------
rbac:
  create: true
serviceAccount:
  create: true
  name: ""
  annotations: {}
  automount: false

# -------------------------------
# SecurityContext
# -------------------------------
podSecurityContext:
  runAsUser: 10001
  runAsGroup: 10001
  fsGroup: 10001
  runAsNonRoot: true
  seccompProfile:
    type: RuntimeDefault

containerSecurityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop: ["ALL"]

# -------------------------------
# Планировщик и распределение
# -------------------------------
priorityClassName: ""
nodeSelector:
  kubernetes.io/os: linux
tolerations: []
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          topologyKey: kubernetes.io/hostname
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: datafabric-core
topologySpreadConstraints:
  - maxSkew: 1
    topologyKey: topology.kubernetes.io/zone
    whenUnsatisfiable: ScheduleAnyway
    labelSelector:
      matchLabels:
        app.kubernetes.io/name: datafabric-core

# -------------------------------
# Volumes и монтирование
# -------------------------------
volumes:
  - name: tmp
    emptyDir:
      medium: Memory
      sizeLimit: "256Mi"
  - name: runtime
    emptyDir: {}
  - name: config
    projected:
      sources:
        - configMap:
            name: datafabric-config
            optional: true
        - secret:
            name: datafabric-secrets
            optional: true

volumeMounts:
  - name: tmp
    mountPath: /tmp
  - name: runtime
    mountPath: /var/lib/datafabric
  - name: config
    mountPath: /etc/datafabric
    readOnly: true

# -------------------------------
# Доп. контейнеры
# -------------------------------
initContainers: []
  # - name: wait-redis
  #   image: ghcr.io/curl/curl:8.7.1
  #   command: ["sh","-c","until nc -zv redis.data-cache.svc.cluster.local 6379; do sleep 2; done"]

sidecars: []
  # - name: log-shipper
  #   image: vectorized/ vector:latest
  #   resources: {}

# -------------------------------
# PDB (PodDisruptionBudget)
# -------------------------------
podDisruptionBudget:
  enabled: true
  minAvailable: 1
  maxUnavailable: null

# -------------------------------
# NetworkPolicy (вкл/выкл)
# -------------------------------
networkPolicy:
  enabled: true
  # Если chart шаблонизирует политику — можно параметризовать следующие значения:
  sameNamespace: "datafabric-prod"
  redisNamespace: "cache"
  busNamespaces:
    kafka: "kafka"
    nats: "nats"
    rabbitmq: "rabbitmq"
  sqlNamespace: "datafabric"
  ledgerNamespace: "datafabric"
  ingressControllerNamespace: "ingress-nginx"

# -------------------------------
# ServiceMonitor (Prometheus Operator)
# -------------------------------
serviceMonitor:
  enabled: true
  namespace: "monitoring"
  additionalLabels:
    release: "prom-operator"
  interval: 15s
  scrapeTimeout: 10s
  scheme: http
  path: /metrics
  portName: metrics
  relabelings:
    - action: replace
      sourceLabels: [__meta_kubernetes_pod_node_name]
      targetLabel: node
    - action: replace
      sourceLabels: [__meta_kubernetes_namespace]
      targetLabel: namespace
    - action: replace
      sourceLabels: [__meta_kubernetes_pod_name]
      targetLabel: pod
    - action: replace
      sourceLabels: [__address__]
      regex: "([^:]+)(?::\\d+)?"
      targetLabel: instance
      replacement: "$1"
    - action: labeldrop
      regex: "pod_template_hash|controller_revision_hash|job|pod_ip|endpoint|service_account|uid"
  metricRelabelings:
    - action: drop
      sourceLabels: [__name__]
      regex: "go_gc_heap_.+|go_memstats_.+_bytes_total"

# -------------------------------
# PrometheusRule (алерты)
# -------------------------------
prometheusRule:
  enabled: true
  groups:
    - name: datafabric-core.rules
      rules:
        - alert: DatafabricCorePodNotReady
          expr: |
            sum by (pod) (kube_pod_status_ready{condition="true"} * on(pod) group_left kube_pod_info{namespace=~".*"}) == 0
            and on(pod) kube_pod_info{pod=~"datafabric-core-.*"}
          for: 5m
          labels:
            severity: warning
          annotations:
            summary: "Pod не готов"
            description: "Pod {{ $labels.pod }} не в состоянии Ready > 5m"
        - alert: DatafabricCoreHighLatency
          expr: |
            histogram_quantile(0.99, sum by (le) (rate(app_request_duration_seconds_bucket{job="datafabric-core"}[5m]))) > 0.25
          for: 10m
          labels:
            severity: warning
          annotations:
            summary: "Высокая задержка p99"
            description: "Задержка p99 > 250ms в течение 10m"

# -------------------------------
# Логи/аннотации/метки
# -------------------------------
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "9090"
  prometheus.io/path: "/metrics"

podLabels:
  app.kubernetes.io/component: engine
  app.kubernetes.io/part-of: datafabric

# -------------------------------
# Дополнительные опции
# -------------------------------
terminationGracePeriodSeconds: 30
enableServiceLinks: false
dnsPolicy: ClusterFirst
