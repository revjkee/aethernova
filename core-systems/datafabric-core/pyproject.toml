[build-system]
requires = ["hatchling>=1.25"]
build-backend = "hatchling.build"

[project]
name = "datafabric-core"
description = "DataFabric Core: базовые примитивы поточной обработки, схем, io и оркестрации."
readme = "README.md"
requires-python = ">=3.11"
# Версия берется динамически из src/datafabric_core/__init__.py (__version__)
dynamic = ["version"]
license = { text = "Proprietary" }

authors = [
  { name = "NeuroCity / Aethernova", email = "core@aethernova.dev" }
]

keywords = [
  "data-fabric",
  "streaming",
  "orchestration",
  "schemas",
  "io",
  "python"
]

classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: Other/Proprietary License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Typing :: Typed",
]

# Минимальные рантайм-зависимости оставлены пустыми для строгого ядра.
# Добавляйте в подмодулях или через extras при необходимости.
dependencies = [
  "typing-extensions>=4.12"
]

[project.optional-dependencies]
dev = [
  "ruff==0.5.7",
  "mypy==1.11.2",
  "pytest==8.3.2",
  "pytest-cov==5.0.0",
  "hypothesis==6.112.1",
  "anyio==4.4.0",
  "httpx==0.27.2",
  "coverage[toml]==7.6.1",
  "build==1.2.1",
  "twine==5.1.1",
  "pre-commit==3.7.1",
]
# Профиль для e2e/нагрузки — опционально подключается при необходимости
load = [
  "anyio==4.4.0",
  "httpx==0.27.2",
]

[project.urls]
Homepage = "https://aethernova.dev"
Repository = "https://git.example.com/aethernova/datafabric-core"
Issues = "https://git.example.com/aethernova/datafabric-core/issues"

[tool.hatch.version]
# __init__.py должен содержать строку: __version__ = "0.1.0-rc.0"
path = "src/datafabric_core/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/datafabric_core"]

[tool.hatch.build]
# Исключаем мусор и тяжелые артефакты из релизных колёс
exclude = [
  "/.git",
  "/.github",
  "/.devcontainer",
  "/.vscode",
  "/benchmarks",
  "/docs/_build",
  "/**/*.ipynb_checkpoints/*",
  "/**/__pycache__/*",
  "/**/*.pyc",
  "/**/*.pyo",
  "/**/*.pyd",
  "/**/.mypy_cache/*",
  "/**/.ruff_cache/*",
  "/**/.pytest_cache/*",
]

# ----------------------------- QA/CI инструменты ------------------------------

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --disable-warnings --maxfail=1"
testpaths = ["engine/tests", "engine/fuzz", "engine/e2e"]
xfail_strict = true
filterwarnings = [
  "error::DeprecationWarning",
  "ignore::UserWarning:hypothesis.*:",
]
# Маркеры для селективного запуска
markers = [
  "e2e: end-to-end тесты",
  "load: нагрузочные тесты",
  "fuzz: fuzz-тесты",
]

[tool.coverage.run]
branch = true
source = ["src/datafabric_core"]
omit = [
  "*/__init__.py",
]
dynamic_context = "test_function"

[tool.coverage.report]
show_missing = true
skip_covered = true
precision = 2
fail_under = 90

[tool.ruff]
target-version = "py311"
line-length = 100
fix = true
lint.select = [
  "E",  # pycodestyle
  "F",  # pyflakes
  "I",  # isort
  "UP", # pyupgrade
  "B",  # flake8-bugbear
  "PIE",
  "T20", # flake8-print
  "SIM",
  "C4",  # flake8-comprehensions
  "PLE", "PLW", "PLC", # pylint-like
]
lint.ignore = [
  "E501",  # длину строки контролируем отдельно
]
exclude = [
  ".git",
  ".mypy_cache",
  ".ruff_cache",
  ".pytest_cache",
  "build",
  "dist",
]

[tool.ruff.lint.isort]
known-first-party = ["datafabric_core"]
combine-as-imports = true
force-wrap-aliases = true

[tool.mypy]
python_version = "3.11"
strict = true
warn_unused_configs = true
warn_return_any = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_calls = false
no_implicit_optional = true
show_error_codes = true
pretty = true
files = ["src/datafabric_core"]
exclude = [
  "engine/tests",
  "engine/fuzz",
  "engine/e2e",
]

[tool.black]
line-length = 100
target-version = ["py311"]

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0-rc.0"
version_files = [
  "src/datafabric_core/__init__.py:__version__",
  "VERSION",
]
tag_format = "v$version"
update_changelog_on_bump = true

# ----------------------------- Профили для CI --------------------------------

[tool.hatch.envs.default]
dependencies = [
  ".[dev]"
]

[tool.hatch.envs.ci]
dependencies = [
  ".[dev]",
]
[tool.hatch.envs.ci.scripts]
lint = [
  "ruff check --silent .",
  "ruff format --check .",
]
typecheck = "mypy"
test = "pytest --cov --cov-report=xml --cov-report=term-missing"
qa = [
  "hatch run ci:lint",
  "hatch run ci:typecheck",
  "hatch run ci:test",
]
