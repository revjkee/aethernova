# examples/quickstart_local/config.yaml
# DataFabric Quickstart (local) — промышленный пример конфигурации с безопасными дефолтами.
# Все параметры переопределяются переменными окружения, указаны в комментариях.

version: "1"

meta:
  project: "datafabric-core"
  profile: "quickstart-local"
  env: ${DF_ENV:-dev}
  node: ${DF_NODE:-localhost}
  service_name: ${DF_SERVICE_NAME:-datafabric-core}
  # Каталог для временных и рабочих артефактов
  work_dir: ${DF_WORK_DIR:-./.datafabric/work}
  data_dir: ${DF_DATA_DIR:-./.datafabric/data}
  logs_dir: ${DF_LOGS_DIR:-./.datafabric/logs}
  # Строгая инициализация каталогов при старте (создавать/очищать tmp)
  init_fs:
    ensure_dirs: true
    clean_temp_on_boot: false

observability:
  logging:
    level: ${DF_LOG_LEVEL:-INFO}           # DEBUG|INFO|WARN|ERROR
    json: ${DF_LOG_JSON:-true}             # JSON формат логов
    stdout: ${DF_LOG_STDOUT:-true}
    file:
      enabled: ${DF_LOG_FILE_ENABLED:-true}
      dir: ${DF_LOG_DIR:-./logs}
      basename: ${DF_LOG_FILE_BASENAME:-datafabric}
      rotation:
        when: ${DF_LOG_ROTATION_WHEN:-D}    # S|M|H|D|W0..W6|midnight
        interval: ${DF_LOG_ROTATION_INTERVAL:-1}
        backup: ${DF_LOG_ROTATION_BACKUP:-14}
    redact:
      enabled: ${DF_LOG_REDACT:-true}
      # Ключ=regex, через запятую. Совместимо с datafabric.observability.logging
      patterns: ${DF_LOG_REDACT_PATTERNS:-"email=\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\\b,card=\\b(?:\\d[ -]*?){13,16}\\b,ssn=\\b\\d{3}-\\d{2}-\\d{4}\\b,phone=\\b\\+?\\d[\\d\\-() ]{7,}\\b"}
    healthcheck_filter:
      enabled: ${DF_LOG_HEALTHCHECK_FILTER:-true}
      patterns: ${DF_LOG_HEALTHCHECK_PATTERNS:-"/health,/ready,/live"}
    rate_limit:
      enabled: ${DF_LOG_RATE_LIMIT:-true}
      window_sec: ${DF_LOG_RATE_LIMIT_WINDOW_SEC:-5.0}
      max_records: ${DF_LOG_RATE_LIMIT_MAX_RECORDS:-200}

  metrics:
    # Экспорт для Prometheus
    prometheus:
      enabled: ${DF_METRICS_ENABLED:-true}
      bind: ${DF_METRICS_BIND:-0.0.0.0}
      port: ${DF_METRICS_PORT:-9108}
      path: ${DF_METRICS_PATH:-/metrics}

  tracing:
    # OTLP экспорт (Совместимо с OpenTelemetry Collector/Tempo)
    otlp:
      enabled: ${DF_TRACE_ENABLED:-false}
      endpoint: ${DF_TRACE_ENDPOINT:-http://localhost:4318}
      protocol: ${DF_TRACE_PROTO:-http/protobuf}
      service_name: ${DF_SERVICE_NAME:-datafabric-core}
      sample_ratio: ${DF_TRACE_SAMPLE:-0.05}

reliability:
  # Глобальные политики повторов/таймаутов — применяются по умолчанию в утилитах и коннекторах.
  retry_defaults: &retry_defaults
    max_attempts: ${DF_RETRY_MAX_ATTEMPTS:-6}
    backoff_base: ${DF_RETRY_BACKOFF_BASE:-0.2}
    backoff_multiplier: ${DF_RETRY_BACKOFF_MULTIPLIER:-2.0}
    backoff_max: ${DF_RETRY_BACKOFF_MAX:-20.0}
    jitter: ${DF_RETRY_JITTER:-full}       # full|half|none
    attempt_timeout: ${DF_RETRY_ATTEMPT_TIMEOUT:-10.0}
    deadline: ${DF_RETRY_DEADLINE:-}
    breaker:
      fail_threshold: ${DF_RETRY_BREAKER_FAILS:-0}   # 0 = выключен
      reset_timeout: ${DF_RETRY_BREAKER_RESET:-30.0}
      half_open_trials: ${DF_RETRY_BREAKER_HALF:-1}

  http_retry: &http_retry
    max_attempts: ${DF_RETRY_HTTP_ATTEMPTS:-6}
    backoff_base: ${DF_RETRY_HTTP_BASE:-0.1}
    backoff_multiplier: ${DF_RETRY_HTTP_MULT:-2.0}
    backoff_max: ${DF_RETRY_HTTP_MAX:-10.0}
    jitter: ${DF_RETRY_HTTP_JITTER:-full}
    attempt_timeout: ${DF_RETRY_HTTP_ATTEMPT_TIMEOUT:-10.0}
    breaker:
      fail_threshold: ${DF_RETRY_HTTP_BREAKER_FAILS:-5}
      reset_timeout: ${DF_RETRY_HTTP_BREAKER_RESET:-30.0}
      half_open_trials: ${DF_RETRY_HTTP_BREAKER_HALF:-1}

  db_retry: &db_retry
    max_attempts: ${DF_RETRY_DB_ATTEMPTS:-8}
    backoff_base: ${DF_RETRY_DB_BASE:-0.05}
    backoff_multiplier: ${DF_RETRY_DB_MULT:-2.0}
    backoff_max: ${DF_RETRY_DB_MAX:-5.0}
    jitter: ${DF_RETRY_DB_JITTER:-half}
    attempt_timeout: ${DF_RETRY_DB_ATTEMPT_TIMEOUT:-5.0}
    breaker:
      fail_threshold: ${DF_RETRY_DB_BREAKER_FAILS:-8}
      reset_timeout: ${DF_RETRY_DB_BREAKER_RESET:-60.0}
      half_open_trials: ${DF_RETRY_DB_BREAKER_HALF:-2}

security:
  # Путь к секретам для локалки (не коммитить в VCS)
  secrets_dir: ${DF_SECRETS_DIR:-./.secrets}
  # Ключи JWT/подписи (демо). В проде — KMS/HSM.
  jwt:
    issuer: ${DF_JWT_ISSUER:-datafabric-local}
    audience: ${DF_JWT_AUD:-datafabric}
    access_ttl: ${DF_JWT_ACCESS_TTL:-900s}
    refresh_ttl: ${DF_JWT_REFRESH_TTL:-7d}
    # Пути к ключам (генерируйте openssl-ом)
    private_key_path: ${DF_JWT_PRIV:-./.secrets/jwt_rsa_priv.pem}
    public_key_path: ${DF_JWT_PUB:-./.secrets/jwt_rsa_pub.pem}
  cors:
    allow_origins: ${DF_CORS_ORIGINS:-http://localhost:3000}
    allow_headers: ${DF_CORS_HEADERS:-"*"}
    allow_methods: ${DF_CORS_METHODS:-GET,POST,PUT,DELETE,OPTIONS}
  rate_limits:
    # Лимиты API на инстанс, локальные безопасные значения
    default_rps: ${DF_RPS_DEFAULT:-100}
    burst: ${DF_RPS_BURST:-200}

server:
  http:
    enabled: ${DF_HTTP_ENABLED:-true}
    bind: ${DF_HTTP_BIND:-0.0.0.0}
    port: ${DF_HTTP_PORT:-8080}
    root_path: ${DF_HTTP_ROOT_PATH:-/}
    request_timeout_sec: ${DF_HTTP_REQ_TIMEOUT:-30}
    # Профайлер/дебаг только локально
    debug: ${DF_HTTP_DEBUG:-false}

scheduler:
  # Простой cron‑планировщик для задач резервного копирования/обслуживания
  enabled: ${DF_SCHED_ENABLED:-true}
  timezone: ${DF_SCHED_TZ:-UTC}
  jobs:
    - id: "snapshot_local_data"
      enabled: ${DF_SCHED_SNAPSHOT_ENABLED:-true}
      cron: ${DF_SCHED_SNAPSHOT_CRON:-"0 2 * * *"}    # ежедневно в 02:00
      task: backups.snapshot
      args:
        source:
          kind: dir
          path: ${DF_SNAP_SOURCE_PATH:-./data}         # каталог для архивации
          includes: []                                  # можно задать шаблоны
          excludes:
            - "**/.git/**"
            - "**/node_modules/**"
        storage:
          type: local
          dir: ${DF_SNAP_DEST_DIR:-./backups}          # куда складывать архивы
        policy:
          name: ${DF_BACKUP_NAME:-snapshot}
          compression: ${DF_BACKUP_COMPRESSION:-gzip}   # gzip|zstd (если установлен модуль zstandard)
          encrypt: ${DF_BACKUP_ENCRYPT:-false}          # true включает openssl AES-256-GCM
          retention_keep: ${DF_BACKUP_RETENTION_COUNT:-7}
          retention_days: ${DF_BACKUP_RETENTION_DAYS:-0}
          labels:
            origin: "quickstart-local"

connectors:
  # Локальная БД Postgres (через docker compose или локальную установку)
  postgres:
    dsn: ${DF_PG_DSN:-postgresql+psycopg://postgres:postgres@localhost:5432/datafabric}
    pool:
      min_size: ${DF_PG_POOL_MIN:-1}
      max_size: ${DF_PG_POOL_MAX:-10}
      timeout_sec: ${DF_PG_POOL_TIMEOUT:-10}
    retry: *db_retry
    migrations:
      auto_run: ${DF_PG_MIGRATE_AUTO:-true}
      path: ${DF_PG_MIGRATE_PATH:-./migrations}

  redis:
    url: ${DF_REDIS_URL:-redis://localhost:6379/0}
    retry: *retry_defaults
    timeouts:
      connect_ms: ${DF_REDIS_CONNECT_MS:-200}
      read_ms: ${DF_REDIS_READ_MS:-1000}
      write_ms: ${DF_REDIS_WRITE_MS:-1000}

  kafka:
    enabled: ${DF_KAFKA_ENABLED:-false}
    brokers: ${DF_KAFKA_BROKERS:-localhost:9092}
    client_id: ${DF_KAFKA_CLIENT_ID:-datafabric-local}
    acks: ${DF_KAFKA_ACKS:-all}
    security:
      sasl_mechanism: ${DF_KAFKA_SASL_MECH:-}
      sasl_username: ${DF_KAFKA_SASL_USER:-}
      sasl_password: ${DF_KAFKA_SASL_PASS:-}
      ssl_cafile: ${DF_KAFKA_SSL_CAFILE:-}
    retry: *retry_defaults

  s3:
    # В локальном quickstart по умолчанию используется файловое хранилище.
    # Но можно включить мок‑клиент S3 из mocks/connectors/s3_mock.py
    enabled: ${DF_S3_ENABLED:-false}
    use_mock: ${DF_S3_USE_MOCK:-true}
    bucket: ${DF_S3_BUCKET:-datafabric-local}
    prefix: ${DF_S3_PREFIX:-artifacts}
    region: ${DF_S3_REGION:-us-east-1}
    endpoint: ${DF_S3_ENDPOINT:-}
    profile: ${DF_S3_PROFILE:-}
    sse: ${DF_S3_SSE:-} # AES256|aws:kms
    retry: *http_retry
    # Для мок‑клиента (файловый backend)
    mock_root_dir: ${DF_S3MOCK_ROOT:-./.s3mock}
    mock_page_size: ${DF_S3MOCK_PAGE_SIZE:-1000}
    mock_eventual_consistency: ${DF_S3MOCK_EVENTUAL:-false}
    mock_consistency_lag_ms: ${DF_S3MOCK_LAG_MS:-0}

backups:
  # Настройки по умолчанию для кода datafabric.tasks.backups.snapshot
  work_dir: ${DF_BACKUP_WORK_DIR:-./.datafabric/backups}
  lock_dir: ${DF_BACKUP_LOCK_DIR:-./.datafabric/locks}
  compression:
    prefer_zstd: ${DF_BACKUP_PREFER_ZSTD:-false}
    zstd_level: ${DF_BACKUP_ZSTD_LEVEL:-10}
    gzip_level: ${DF_BACKUP_GZIP_LEVEL:-6}
  encryption:
    enabled: ${DF_BACKUP_ENC_ENABLED:-false}
    openssl_bin: ${DF_BACKUP_OPENSSL:-openssl}
    passphrase: ${DF_BACKUP_ENC_PASS:-}
    salt: ${DF_BACKUP_ENC_SALT:-datafabric-salt}
    iter: ${DF_BACKUP_ENC_ITER:-100000}
  timeouts:
    total_sec: ${DF_BACKUP_TIMEOUT_SEC:-3600}

limits:
  # Ограничения по памяти/диску для локального запуска (guard‑rails)
  disk_min_free_mb: ${DF_LIMITS_DISK_FREE_MB:-512}
  tmp_quota_mb: ${DF_LIMITS_TMP_QUOTA_MB:-4096}
  http_max_body_mb: ${DF_LIMITS_HTTP_BODY_MB:-64}

features:
  # Флаги возможностей. В проде управляются LaunchDarkly/Unleash, здесь — через env.
  snapshot_task: ${DF_FEAT_SNAPSHOT:-true}
  telemetry: ${DF_FEAT_TELEMETRY:-true}
  experimental_api: ${DF_FEAT_EXPERIMENTAL_API:-false}

# Примеры алиасов для повторного использования
profiles:
  default_retry: *retry_defaults
  http_retry: *http_retry
  db_retry: *db_retry
