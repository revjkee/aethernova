{{- /*
omnimind-core / ops / helm / templates / secret.yaml

Поддержка:
- .Values.secrets.enabled: bool
- .Values.secrets.sops.enabled: bool (ставит аннотацию sops.dev/encrypted: "true")
- .Values.secrets.items: список секретов:
  - name: string (опц.; по умолчанию secret-<idx>)
    component: string (опц.; метка)
    type: Opaque | kubernetes.io/dockerconfigjson | kubernetes.io/tls
    immutable: bool (опц.)
    annotations: map[string]string (опц.)
    # Для Opaque:
    data: map[key]=value (значение пройдет через tpl и затем b64enc)
    stringData: map[key]=value (значение пройдет через tpl)
    fromFiles: [{ key: "FILENAME_KEY", path: "files/secret.bin" }]  # берется из .Files чарта
    # Для dockerconfigjson (если type == kubernetes.io/dockerconfigjson):
    registryAuth:
      server: https://index.docker.io/v1/
      username: youruser
      password: {{ .Values.imagePullSecretPassword | quote }}
      email: you@example.com
    # Для tls (если type == kubernetes.io/tls):
    tls:
      certFile: files/tls.crt
      keyFile: files/tls.key
*/ -}}

{{- if .Values.secrets.enabled }}
{{- $root := . -}}
{{- range $idx, $s := .Values.secrets.items }}

{{- /* Имя секрета (<=63 символов) */ -}}
{{- $baseName := default (printf "secret-%d" $idx) $s.name -}}
{{- $name := printf "%s-%s" (include "omnimind-core.fullname" $root) $baseName | trunc 63 | trimSuffix "-" -}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $name }}
  namespace: {{ $root.Release.Namespace }}
  labels:
    {{- include "omnimind-core.labels" $root | nindent 4 }}
    app.kubernetes.io/component: {{ default "api" $s.component | quote }}
  annotations:
    {{- with $s.annotations }}{{- toYaml . | nindent 4 }}{{- end }}
    {{- if $root.Values.secrets.sops.enabled }}sops.dev/encrypted: "true"{{- end }}
type: {{ default "Opaque" $s.type }}
{{- if hasKey $s "immutable" }}
immutable: {{ $s.immutable | default false }}
{{- end }}

{{- /* Ветвление по типам секрета */ -}}
{{- $typ := default "Opaque" $s.type -}}
{{- if eq $typ "kubernetes.io/dockerconfigjson" }}
  {{- /* dockerconfigjson требует поле data.".dockerconfigjson" */ -}}
data:
  {{- $server := required (printf "secrets.items[%d].registryAuth.server is required for dockerconfigjson" $idx) $s.registryAuth.server -}}
  {{- $user := required (printf "secrets.items[%d].registryAuth.username is required for dockerconfigjson" $idx) $s.registryAuth.username -}}
  {{- $pass := required (printf "secrets.items[%d].registryAuth.password is required for dockerconfigjson" $idx) ($s.registryAuth.password | toString) -}}
  {{- $email := default "" ($s.registryAuth.email | toString) -}}
  {{- $basic := printf "%s:%s" $user $pass | b64enc -}}
  {{- $dockercfg := printf "{\"auths\":{\"%s\":{\"username\":\"%s\",\"password\":\"%s\",\"email\":\"%s\",\"auth\":\"%s\"}}}" $server $user $pass $email $basic -}}
  .dockerconfigjson: {{ $dockercfg | b64enc }}
{{- else if eq $typ "kubernetes.io/tls" }}
  {{- /* TLS: ожидаются файлы в чарте */ -}}
  {{- $crt := required (printf "secrets.items[%d].tls.certFile is required for tls secret" $idx) $s.tls.certFile -}}
  {{- $key := required (printf "secrets.items[%d].tls.keyFile is required for tls secret" $idx) $s.tls.keyFile -}}
data:
  tls.crt: {{ ($root.Files.Get $crt) | b64enc }}
  tls.key: {{ ($root.Files.Get $key) | b64enc }}
{{- else }}
  {{- /* Opaque: единый data-блок, собирающий .data и fromFiles; плюс optional stringData */ -}}
  {{- $hasData := or $s.data $s.fromFiles -}}
  {{- if $hasData }}
data:
    {{- /* .data: значения шаблонизируются через tpl и кодируются b64 */ -}}
    {{- range $k, $v := ($s.data | default dict) }}
  {{ $k }}: {{ tpl ($v | toString) $root | b64enc }}
    {{- end }}
    {{- /* fromFiles: полезно для бинарей или PEM из чарта */ -}}
    {{- range $f := ($s.fromFiles | default list) }}
      {{- $fk := required (printf "secrets.items[%d].fromFiles[].key is required" $idx) $f.key -}}
      {{- $fp := required (printf "secrets.items[%d].fromFiles[].path is required" $idx) $f.path -}}
  {{ $fk }}: {{ ($root.Files.Get $fp) | b64enc }}
    {{- end }}
  {{- end }}
  {{- if $s.stringData }}
stringData:
    {{- range $k, $v := $s.stringData }}
  {{ $k }}: {{ tpl ($v | toString) $root }}
    {{- end }}
  {{- end }}
{{- end }}

---
{{- end }}
{{- end }}
