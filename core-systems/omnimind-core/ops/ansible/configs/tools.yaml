# path: omnimind-core/ops/ansible/configs/tools.yaml
# Industrial tools configuration for Ansible roles/playbooks.
# Все ключи и структура стабильны для CI/CD, staging и prod.
schema_version: 1

meta:
  project: "omnimind-core"
  environment: "prod"                 # prod|stage|dev
  manage_with_ansible: true
  default_umask: "022"
  locale: "C.UTF-8"
  tz: "UTC"

# Глобальные параметры сетевой среды и офлайн-режима
network:
  proxy:
    enabled: false
    http: ""
    https: ""
    no_proxy: "127.0.0.1,localhost"
  airgap:
    enabled: false
    artifact_dir: "/opt/omnimind/artifacts"   # где лежат заранее скачанные tar/sha256/gpg
    verify_checksums: true

# Общие пакеты системы (idempotent)
common_packages:
  enabled: true
  packages:
    - ca-certificates
    - curl
    - wget
    - git
    - jq
    - unzip
    - tar
    - gzip
    - xz-utils
    - bash-completion
  extra_rhel:
    - yum-utils
    - shadow-utils
  extra_debian:
    - apt-transport-https
    - gpg
  hold_back: []     # имена пакетов, которые нельзя трогать (pin/hold)

# Матрица поддерживаемых ОС и архитектур (для выбора ссылок и репозиций)
platform_matrix:
  os_family:        # вычисляется через ansible_facts, указано для читаемости
    - Debian
    - RedHat
  arch:
    - amd64
    - arm64

# Docker Engine + Compose v2
docker:
  enabled: true
  engine:
    version: "24.0"                      # мажорно-минорный пин; патч подтянет репозиторий
    channel: "stable"                    # stable|test
    repo:
      manage: true
      # Значения repo.* используются соответствующей ролью в зависимости от семейства ОС
      deb:
        url: "https://download.docker.com/linux"
        suite_map:                       # маппинг фактических дистрибутивов
          ubuntu: "ubuntu"
          debian: "debian"
        components: ["stable"]
        key_url: "https://download.docker.com/linux/ubuntu/gpg"
        key_fingerprint: "9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88"
      rhel:
        url: "https://download.docker.com/linux/centos/docker-ce.repo"
        gpg_key_url: "https://download.docker.com/linux/centos/gpg"
        key_fingerprint: "060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35"
    daemon:
      cgroup_driver: "systemd"
      live_restore: true
      log_driver: "json-file"
      log_opts:
        max-size: "10m"
        max-file: "5"
      experimental: false
    users:
      add_current_user: false
      extra_users: []                    # например: ["deploy", "ci"]
  compose:
    version: "2.27.1"
    source: "github"                     # github|package
    urls:
      amd64: "https://github.com/docker/compose/releases/download/v2.27.1/docker-compose-linux-x86_64"
      arm64: "https://github.com/docker/compose/releases/download/v2.27.1/docker-compose-linux-aarch64"
    sha256:
      amd64: ""                          # при airgap включить контроль суммы
      arm64: ""

# Kubernetes toolchain: kubectl, helm, kustomize
kubernetes:
  enabled: true
  kubectl:
    version: "1.30.3"
    source: "vendor"                     # vendor|repo
    urls:
      amd64: "https://dl.k8s.io/release/v1.30.3/bin/linux/amd64/kubectl"
      arm64: "https://dl.k8s.io/release/v1.30.3/bin/linux/arm64/kubectl"
    sha256:
      amd64: ""
      arm64: ""
    completion:
      bash: true
      zsh: false
  helm:
    version: "3.15.2"
    source: "archive"                    # archive|repo
    urls:
      amd64: "https://get.helm.sh/helm-v3.15.2-linux-amd64.tar.gz"
      arm64: "https://get.helm.sh/helm-v3.15.2-linux-arm64.tar.gz"
    sha256:
      amd64: ""
      arm64: ""
    completion:
      bash: true
      zsh: false
  kustomize:
    version: "5.4.2"
    source: "archive"
    urls:
      amd64: "https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.4.2/kustomize_v5.4.2_linux_amd64.tar.gz"
      arm64: "https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv5.4.2/kustomize_v5.4.2_linux_arm64.tar.gz"
    sha256:
      amd64: ""
      arm64: ""

# HashiCorp toolchain: terraform, packer (через официальный репозиторий)
hashicorp:
  enabled: true
  repo:
    manage: true
    deb:
      keyring_path: "/usr/share/keyrings/hashicorp-archive-keyring.gpg"
      key_url: "https://apt.releases.hashicorp.com/gpg"
      entry: "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com {{ ansible_distribution_release | default('bookworm') }} main"
      fingerprint: "798A EC65 5FEF 2CB3 2C87 3F5E 72D7 4686 C2D6 39B9"
    rhel:
      repo_name: "hashicorp"
      baseurl: "https://rpm.releases.hashicorp.com/{{ ansible_distribution | lower }}/$releasever/$basearch/stable"
      gpgkey: "https://rpm.releases.hashicorp.com/{{ ansible_distribution | lower }}/gpg"
  terraform:
    version: "1.7.5"
    install: true
  packer:
    version: "1.10.2"
    install: false

# Python toolchain
python:
  enabled: true
  method: "system"                       # system|pyenv
  system:
    version: "3.12"                      # минимально требуемая
    ensure_packages: [ "python3", "python3-pip", "python3-venv" ]
  pyenv:
    version: "2.3.38"
    python_version: "3.12.5"
    root: "/opt/pyenv"
  pipx:
    enabled: true
    packages:
      - name: "ansible-lint"
        version: ">=6.22"
      - name: "molecule"
        version: ">=6.0"
      - name: "yamllint"
        version: ">=1.35"

# Node.js toolchain
nodejs:
  enabled: false
  method: "nodesource"                   # nodesource|nvm|archive
  version: "20.x"
  global_packages: []                    # например: ["pnpm","typescript"]

# Observability CLI/экспортеры
observability:
  enabled: true
  node_exporter:
    install: true
    version: "1.8.1"
    urls:
      amd64: "https://github.com/prometheus/node_exporter/releases/download/v1.8.1/node_exporter-1.8.1.linux-amd64.tar.gz"
      arm64: "https://github.com/prometheus/node_exporter/releases/download/v1.8.1/node_exporter-1.8.1.linux-arm64.tar.gz"
    sha256:
      amd64: ""
      arm64: ""
    systemd:
      enabled: true
      user: "nodeexp"
      group: "nodeexp"
      listen_addr: "0.0.0.0:9100"
      extra_args: []                     # например: ["--collector.systemd"]
      harden:
        protect_system: "strict"
        protect_home: "true"

# Безопасность (опциональные агенты)
security:
  enabled: false
  crowdsec:
    install: false
  falco:
    install: false

# Sysctl/limits для CI/билдов/контейнеров
system_tuning:
  enabled: true
  sysctl:
    net.ipv4.ip_forward: 1
    net.ipv4.tcp_fin_timeout: 30
    vm.max_map_count: 262144
    fs.inotify.max_user_instances: 8192
    fs.inotify.max_user_watches: 1048576
  limits:
    nofile:
      soft: 1048576
      hard: 1048576
    nproc:
      soft: 65535
      hard: 65535

# Карта соответствия пакетов и сервисов по семействам ОС
os_overrides:
  Debian:
    docker_engine_pkg: "docker-ce"
    containerd_pkg: "containerd.io"
    service_names:
      docker: "docker"
  RedHat:
    docker_engine_pkg: "docker-ce"
    containerd_pkg: "containerd.io"
    service_names:
      docker: "docker"

# Публикуемые бинарники (универсальная секция для скачивания через роль «artifact»)
artifacts:
  enabled: true
  bins:
    - name: "yq"
      version: "4.44.2"
      urls:
        amd64: "https://github.com/mikefarah/yq/releases/download/v4.44.2/yq_linux_amd64.tar.gz"
        arm64: "https://github.com/mikefarah/yq/releases/download/v4.44.2/yq_linux_arm64.tar.gz"
      sha256:
        amd64: ""
        arm64: ""
      install_path: "/usr/local/bin/yq"
      strip_components: 0
      inner_path: ""    # если tar несет бинарник в корне; иначе указать путь
      completion:
        bash: true
        zsh: false

# Пост-инсталляционные шаги, управляемые переменными
post_install:
  bash_completion:
    enabled: true
    dir: "/etc/bash_completion.d"
  update_alternatives:
    enabled: true
  services:
    enable_on_boot: true
    restart_changed: true

# Верификация и комплаенс (роль может запускать проверки)
verify:
  enabled: true
  checks:
    - name: "docker --version"
      cmd: "docker --version"
    - name: "kubectl version --client"
      cmd: "kubectl version --client --output=yaml"
    - name: "helm version"
      cmd: "helm version --short"
    - name: "terraform -version"
      cmd: "terraform -version"
    - name: "node_exporter systemd"
      cmd: "systemctl is-enabled node_exporter || true"
