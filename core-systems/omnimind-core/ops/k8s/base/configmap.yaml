apiVersion: v1
kind: ConfigMap
metadata:
  name: omnimind-core-config
  namespace: omnimind
  labels:
    app.kubernetes.io/name: omnimind-core
    app.kubernetes.io/instance: omnimind-core
    app.kubernetes.io/part-of: omnimind-platform
    app.kubernetes.io/component: service
    app.kubernetes.io/managed-by: kustomize
    app.kubernetes.io/version: "0.0.0" # патчится overlay'ями
  annotations:
    # При использовании контроллера рестартов (например, Reloader)
    # включите автоматический rollout при изменении ConfigMap:
    # reloader.stakater.com/search: "true"
    config.kubernetes.io/owning-inventory: "omnimind-core"
immutable: true

data:
  # Основная конфигурация приложения (без секретов).
  application.yaml: |
    app:
      name: "omnimind-core"
      env: "production"        # патчится overlay'ями
      region: "eu-central"     # логическое значение для метрик/логов

    server:
      host: "0.0.0.0"
      port: 8080
      workers: 4
      keepalive_seconds: 75
      graceful_shutdown_seconds: 30
      request_timeout_seconds: 30
      max_request_body_mb: 25

    http_client:
      connect_timeout_seconds: 3
      read_timeout_seconds: 10
      retries: 2
      retry_backoff_ms: 200
      max_connections: 256

    cors:
      enabled: true
      allowed_origins: ["*"]   # production overlay должен сузить
      allowed_methods: ["GET","POST","PUT","PATCH","DELETE","OPTIONS"]
      allowed_headers: ["*"]
      allow_credentials: false

    rate_limit:
      enabled: true
      window_seconds: 60
      rpm: 1200
      burst: 300

    # Никаких секретов: только публичные параметры и имена переменных окружения.
    database:
      engine: "postgresql+asyncpg"
      host_env: "DB_HOST"
      port_env: "DB_PORT"
      name_env: "DB_NAME"
      # user/password берутся из Secret через env
      ssl_mode: "prefer"
      pool_min_size: 2
      pool_max_size: 16
      pool_timeout_seconds: 10

    cache:
      provider: "redis"
      host_env: "REDIS_HOST"
      port_env: "REDIS_PORT"
      db: 0

    queue:
      provider: "rabbitmq"
      host_env: "RABBITMQ_HOST"
      port_env: "RABBITMQ_PORT"
      vhost_env: "RABBITMQ_VHOST"

    features:
      enable_healthcheck: true
      enable_metrics: true
      enable_docs: false
      strict_json_logging: true

  # Строгая схема логирования под промышленный сбор логов (JSON + семплинг).
  logging.yaml: |
    logging:
      level: "INFO"          # overlay может повысить до WARN в prod
      json: true
      include_uvicorn_access: false
      sinks:
        - name: "stdout"
          target: "stdout"
      sampling:
        enabled: true
        initial: 5
        thereafter: 100
      format:
        json_fields:
          - ts
          - level
          - logger
          - message
          - trace_id
          - span_id
          - service
          - env
          - region
          - extra

  # Блок телеметрии под OpenTelemetry/Prometheus.
  opentelemetry.yaml: |
    telemetry:
      service_name: "omnimind-core"
      service_namespace: "omnimind"
      service_version_env: "APP_VERSION"
      metrics:
        enabled: true
        prometheus_endpoint: "/metrics"
        port: 9464
      tracing:
        enabled: true
        sampler_ratio: 0.1
        otlp:
          endpoint: "http://otel-collector:4317"
          protocol: "grpc"
      logs:
        enabled: true
        export_interval_ms: 5000
