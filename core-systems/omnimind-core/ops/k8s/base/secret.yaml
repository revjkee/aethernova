# omnimind-core/ops/k8s/base/secret.yaml
# External Secrets Operator (ESO) — промышленная доставка секретов из внешнего Secret Store.
# Требуется установленный CRD: external-secrets.io/v1beta1

apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: omnimind-core-app
  labels:
    app.kubernetes.io/name: omnimind-core
    app.kubernetes.io/instance: omnimind-core
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: omnimind
    app.kubernetes.io/managed-by: kustomize
  annotations:
    kubernetes.io/description: "Application secrets synchronized from external secret store"
spec:
  # Частота обновления из внешнего хранилища
  refreshInterval: 1h

  # Ссылка на глобальный секрет-стор (настраивается отдельно в кластере)
  secretStoreRef:
    kind: ClusterSecretStore
    name: omnimind-global

  # Целевой Secret, который будет создан в кластере
  target:
    name: omnimind-core-app
    creationPolicy: Owner          # ESO владеет и пере-создаёт Secret
    deletionPolicy: Retain         # Secret сохраняется при удалении ExternalSecret (можно: Delete)
    template:
      type: Opaque
      engineVersion: v2            # шаблонизатор (sprig-функции доступны)
      metadata:
        labels:
          app.kubernetes.io/name: omnimind-core
          app.kubernetes.io/instance: omnimind-core
          security.omnimind.io/classification: confidential
        annotations:
          # Пример аннотации с контрольной суммой для детерминированных деплоев
          secret.omnimind.io/checksum: "{{ .APP_SECRET_KEY | sha256sum }}"
      data:
        # Шаблон итоговых ключей в Kubernetes Secret (значения подставляются из remoteRef ниже)
        DATABASE_URL: "{{ .DATABASE_URL }}"
        REDIS_URL: "{{ .REDIS_URL }}"
        APP_SECRET_KEY: "{{ .APP_SECRET_KEY }}"
        JWT_PRIVATE_KEY: "{{ .JWT_PRIVATE_KEY }}"
        JWT_PUBLIC_KEY: "{{ .JWT_PUBLIC_KEY }}"
        OAUTH_GOOGLE_CLIENT_ID: "{{ .OAUTH_GOOGLE_CLIENT_ID }}"
        OAUTH_GOOGLE_CLIENT_SECRET: "{{ .OAUTH_GOOGLE_CLIENT_SECRET }}"

  # Карта соответствий: какой ключ из внешнего стора попадёт под каким именем в Secret
  data:
    - secretKey: DATABASE_URL
      remoteRef:
        key: omnimind/core/DATABASE_URL
    - secretKey: REDIS_URL
      remoteRef:
        key: omnimind/core/REDIS_URL
    - secretKey: APP_SECRET_KEY
      remoteRef:
        key: omnimind/core/APP_SECRET_KEY
    - secretKey: JWT_PRIVATE_KEY
      remoteRef:
        key: omnimind/core/JWT_PRIVATE_KEY
        # Возможно указание версии/регионов/политик провайдера через дополнительные поля remoteRef.*
    - secretKey: JWT_PUBLIC_KEY
      remoteRef:
        key: omnimind/core/JWT_PUBLIC_KEY
    - secretKey: OAUTH_GOOGLE_CLIENT_ID
      remoteRef:
        key: omnimind/core/OAUTH_GOOGLE_CLIENT_ID
    - secretKey: OAUTH_GOOGLE_CLIENT_SECRET
      remoteRef:
        key: omnimind/core/OAUTH_GOOGLE_CLIENT_SECRET

  # Глобальная стратегия обработки ошибок чтения секретов
  # (опционально, зависит от версии ESO)
  # retryPolicy:
  #   maxRetries: 5
  #   retryInterval: 30s
