// omnimind-core/schemas/proto/v1/error.proto
syntax = "proto3";

package omnimind.v1;

import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

// Language-specific package options for better DX.
option java_multiple_files = true;
option java_package        = "com.omnimind.core.v1";
option csharp_namespace    = "Omnimind.Core.V1";
option go_package          = "github.com/your-org/omnimind-core/schemas/gen/go/omnimind/v1;omnimindv1";
option php_namespace       = "Omnimind\\Core\\V1";

// Canonical error codes aligned with typical HTTP semantics.
// Keep numeric values stable; extend only by adding new numbers.
enum ErrorCode {
  ERROR_CODE_UNSPECIFIED         = 0;   // Map to HTTP 500 if unknown.
  CANCELLED                      = 1;   // 499 Client Closed Request (nginx) or 408
  UNKNOWN                        = 2;   // 500
  INVALID_ARGUMENT               = 3;   // 400
  DEADLINE_EXCEEDED              = 4;   // 504
  NOT_FOUND                      = 5;   // 404
  ALREADY_EXISTS                 = 6;   // 409
  PERMISSION_DENIED              = 7;   // 403
  RESOURCE_EXHAUSTED             = 8;   // 429 (rate/quotas)
  FAILED_PRECONDITION            = 9;   // 412
  ABORTED                        = 10;  // 409
  OUT_OF_RANGE                   = 11;  // 400/416
  UNIMPLEMENTED                  = 12;  // 501
  INTERNAL                       = 13;  // 500
  UNAVAILABLE                    = 14;  // 503
  DATA_LOSS                      = 15;  // 500
  UNAUTHENTICATED                = 16;  // 401
  CONFLICT                       = 17;  // 409 version/etag conflict
  RATE_LIMITED                   = 18;  // 429 explicit rate limit
  QUOTA_EXCEEDED                 = 19;  // 429/403 quotas
  VALIDATION_FAILED              = 20;  // 422 semantic validation
  PAYLOAD_TOO_LARGE              = 21;  // 413
  UNSUPPORTED_MEDIA_TYPE         = 22;  // 415
  TOO_MANY_REQUESTS              = 23;  // 429 synonym
  METHOD_NOT_ALLOWED             = 24;  // 405
  BAD_GATEWAY                    = 25;  // 502 upstream
}

// Primary error envelope for all Omnimind APIs.
// This message is transport-agnostic (REST/gRPC/event).
message Error {
  // Canonical code classifying the error.
  ErrorCode code = 1;

  // Optional HTTP status to surface in REST gateways.
  // If zero, gateways derive it from `code`.
  uint32 http_status = 2;

  // Stable, user-facing, localized message (safe to show).
  string message = 3;

  // ISO BCP47 language tag (e.g., "en", "en-GB", "ru").
  string locale = 4;

  // Correlation identifier propagated across services (e.g., X-Request-ID).
  string request_id = 5;

  // When the error was produced (UTC).
  google.protobuf.Timestamp timestamp = 6;

  // Machine-readable domain and subcode for vendor-specific classification.
  string domain = 7;
  string reason = 8;

  // Optional short hints for remediation, safe for UI/logs.
  repeated string hints = 9;

  // Root cause chain from closest to farthest cause. Free-form but concise.
  repeated string cause_chain = 10;

  // Structured details. Use provided detail messages below, or pack custom ones in Any.
  repeated google.protobuf.Any details = 11;

  // If the operation may succeed after a delay, include retry policy suggestion.
  RetryInfo retry = 12;

  // Reserved for forward-compat fields.
  reserved 100 to 149;
}

// Suggestion on how/when to retry a failed operation.
message RetryInfo {
  // Minimum delay before retrying.
  google.protobuf.Duration retry_after = 1;
  // Optional backoff policy name (e.g., "exponential", "fixed").
  string policy = 2;
  // Maximum attempts a client should try (advisory).
  uint32 max_attempts = 3;
}

// ==== Standardized detail messages ==========================================

// Validation detail for a single field.
message FieldViolation {
  // Fully-qualified field path (e.g., "user.email", "items[3].amount").
  string field = 1;
  // Human-readable description of the violation.
  string description = 2;
  // Optional offending value as string (redacted if sensitive).
  string rejected_value = 3;
  // Optional constraint id (e.g., "string:max=120").
  string constraint = 4;
}

// Aggregate validation error (422).
message ValidationError {
  // Top-level schema name or validator id.
  string schema = 1;
  repeated FieldViolation violations = 2;
}

// Information about a missing resource.
message ResourceNotFound {
  string resource_type = 1; // e.g., "account", "job"
  string resource_id   = 2;
  // Optional alternative: nearest candidates or redirect.
  repeated string suggestions = 3;
}

// Conflict due to version/etag mismatch.
message ConflictInfo {
  string resource_type = 1;
  string resource_id   = 2;
  string expected_etag = 3;
  string actual_etag   = 4;
}

// Authentication problem detail.
message AuthenticationInfo {
  // e.g., "expired_token", "invalid_signature", "missing_credentials"
  string error = 1;
  // Where the credentials were expected (header/cookie/query).
  string location = 2;
  // Token issuer/audience if relevant (redact secrets).
  string issuer   = 3;
  string audience = 4;
}

// Authorization failure detail.
message AuthorizationInfo {
  string subject = 1;       // user/subject id
  string action  = 2;       // verb (e.g., "read", "write")
  string resource= 3;       // arn/resource path
  string policy  = 4;       // policy id evaluated
  repeated string missing_roles = 5; // roles/permissions required
}

// Rate limiting detail.
message RateLimitInfo {
  // Unique key used for limiting (e.g., ip, user, api_key).
  string key = 1;
  // Window size used by limiter.
  google.protobuf.Duration window = 2;
  // Allowed requests per window.
  uint64 limit = 3;
  // Remaining tokens at the time of rejection.
  int64 remaining = 4;
  // When the client may retry safely.
  google.protobuf.Timestamp reset_at = 5;
}

// Quota exceedance detail (longer-term limits).
message QuotaViolation {
  // Name of quota bucket (e.g., "daily_requests", "monthly_tokens").
  string quota = 1;
  // Allowed and used amounts at decision time.
  uint64 allowed = 2;
  uint64 used    = 3;
  // When the quota resets.
  google.protobuf.Timestamp resets_at = 4;
}

// Upstream timeout/availability detail.
message UpstreamTimeout {
  string upstream      = 1;   // dependency name (e.g., "postgres", "redis")
  string operation     = 2;   // operation attempted (e.g., "SELECT", "GET")
  google.protobuf.Duration timeout = 3;
}

// Unsupported media / payload too large.
message PayloadIssue {
  string content_type = 1;
  uint64 content_length = 2;
  uint64 max_allowed = 3;
}

// Request shaping/sanitization detail (useful in 400).
message RequestShapeInfo {
  bool normalized_unicode = 1;
  bool trimmed_strings    = 2;
  bool collapsed_ws       = 3;
  repeated string removed_fields = 4;
}

// Mapping helper to surface HTTP status when required.
// Libraries may keep their own map; this is optional metadata.
message HttpMapping {
  ErrorCode code       = 1;
  uint32 http_status   = 2;
  string description   = 3;
}

// ==== Example: packing details ==============================================
// Server code SHOULD pack one or more detail messages into Error.details:
//
//   Error err;
//   err.code = VALIDATION_FAILED;
//   err.http_status = 422;
//   err.message = "Invalid input";
//   ValidationError v;
//   auto *fv = v.add_violations(); fv->set_field("user.email"); fv->set_description("invalid email");
//   google.protobuf.Any any;
//   any.PackFrom(v);
//   *err.add_details() = any;
//
// Clients SHOULD unpack known details and fallback to display "message".

// ==== Backward/Forward Compatibility Notes ==================================
//
// * Do not reuse numeric tags.
// * Only add new fields with new tags; keep existing behavior intact.
// * Prefer adding new detail messages over changing existing ones.
// * Keep ErrorCode numeric values stable to avoid client breakages.

// END OF FILE
