// omnimind-core/schemas/proto/v1/common.proto
// Универсальные типы для omnimind-core.
// Copyright (c) 2025.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package omnimind.v1;

// ====== File-level options (помогают генераторам разных языков) ======
option optimize_for = SPEED;
option go_package = "github.com/your-org/omnimind-core/gen/proto/omnimind/v1;omnimindv1";
option java_multiple_files = true;
option java_package = "com.yourorg.omnimind.v1";
option java_outer_classname = "CommonProto";
option csharp_namespace = "YourOrg.Omnimind.V1";
option php_namespace = "YourOrg\\Omnimind\\V1";
option ruby_package = "YourOrg::Omnimind::V1";
option objc_class_prefix = "OMV1";
option swift_prefix = "OMV1";

// ====== Well-known types ======
import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

// =====================================================================
// БАЗОВЫЕ ЭНУМЕРАЦИИ
// =====================================================================

enum Status {
  STATUS_UNSPECIFIED = 0;
  STATUS_ACTIVE      = 1;
  STATUS_INACTIVE    = 2;
  STATUS_DELETING    = 3;
  STATUS_DELETED     = 4;
  STATUS_SUSPENDED   = 5;
}

enum SortOrder {
  SORT_ORDER_UNSPECIFIED = 0;
  SORT_ASC               = 1;
  SORT_DESC              = 2;
}

// Внутренние коды ошибок домена (дополняют коды gRPC).
enum ErrorCode {
  ERROR_CODE_UNSPECIFIED     = 0;
  ERROR_CODE_OK              = 1;
  ERROR_CODE_INVALID_ARGUMENT= 2;
  ERROR_CODE_NOT_FOUND       = 3;
  ERROR_CODE_ALREADY_EXISTS  = 4;
  ERROR_CODE_PERMISSION_DENIED = 5;
  ERROR_CODE_UNAUTHENTICATED = 6;
  ERROR_CODE_RESOURCE_EXHAUSTED = 7;
  ERROR_CODE_FAILED_PRECONDITION = 8;
  ERROR_CODE_ABOVE_LIMITS    = 9;  // Доменные квоты/лимиты
  ERROR_CODE_CONFLICT        = 10;
  ERROR_CODE_UNAVAILABLE     = 11;
  ERROR_CODE_INTERNAL        = 12;
  ERROR_CODE_TIMEOUT         = 13;
}

// Алгоритмы хеширования/подписей.
enum HashAlgo {
  HASH_ALGO_UNSPECIFIED = 0;
  HASH_ALGO_SHA256      = 1;
  HASH_ALGO_SHA512      = 2;
  HASH_ALGO_BLAKE2B_256 = 3;
  HASH_ALGO_BLAKE3_256  = 4;
}

enum SignatureAlgo {
  SIGNATURE_ALGO_UNSPECIFIED = 0;
  SIGNATURE_ALGO_ED25519     = 1;
  SIGNATURE_ALGO_ECDSA_P256  = 2;
  SIGNATURE_ALGO_ECDSA_SECP256K1 = 3;
  SIGNATURE_ALGO_RSA_PSS_2048 = 4;
}

enum ContentType {
  CONTENT_TYPE_UNSPECIFIED   = 0;
  CONTENT_TYPE_OCTET_STREAM  = 1;   // application/octet-stream
  CONTENT_TYPE_JSON          = 2;   // application/json
  CONTENT_TYPE_PROTO         = 3;   // application/x-protobuf
  CONTENT_TYPE_TEXT          = 4;   // text/plain
  CONTENT_TYPE_CSV           = 5;   // text/csv
  CONTENT_TYPE_PDF           = 6;   // application/pdf
  CONTENT_TYPE_IMAGE_PNG     = 7;   // image/png
  CONTENT_TYPE_IMAGE_JPEG    = 8;   // image/jpeg
  CONTENT_TYPE_ZSTD          = 9;   // application/zstd
  CONTENT_TYPE_GZIP          = 10;  // application/gzip
}

// =====================================================================
/*
  ИДЕНТИФИКАТОРЫ, ССЫЛКИ И ВЕРСИОНИРОВАНИЕ
*/
// =====================================================================

message UUID {
  // RFC 4122 в строковом представлении (например, "550e8400-e29b-41d4-a716-446655440000").
  string value = 1;
}

message ResourceId {
  // Уникальный идентификатор ресурса (может быть UUID/ULID/снежинка).
  string id = 1;
}

message Version {
  uint32 major = 1;
  uint32 minor = 2;
  uint32 patch = 3;
  // Доп. поля СемВер
  string prerelease = 4; // e.g., "rc1"
  string build      = 5; // e.g., "build.11"
}

message ResourceRef {
  // Тип ресурса (например, "user", "dataset", "document").
  string type = 1;
  // Идентификатор ресурса.
  string id = 2;
  // Человекочитаемое имя (опционально).
  google.protobuf.StringValue name = 3;
  // URI/URL (если есть внешний адрес).
  google.protobuf.StringValue uri = 4;

  // Резерв на будущее расширение
  reserved 50 to 99;
}

// =====================================================================
// МЕТАДАННЫЕ, ТРАССИРОВКА, АУДИТ
// =====================================================================

message TraceContext {
  // Совместим с W3C Trace Context.
  string trace_id = 1;       // 16 байт в hex (32 символа)
  string span_id  = 2;       // 8 байт в hex (16 символов)
  string parent_span_id = 3; // опционально
  bool   sampled = 4;
  // Резерв
  reserved 50 to 59;
}

message RequestContext {
  // Идентификатор запроса (например, X-Request-Id).
  string request_id = 1;
  TraceContext trace = 2;

  // Текущие время/таймзона/локаль на стороне сервера.
  google.protobuf.Timestamp now_utc = 3;
  string tz = 4;         // IANA TZ, например "Europe/Stockholm"
  string locale = 5;     // BCP 47, например "ru-RU"

  // Тенант/актер/приложение.
  google.protobuf.StringValue tenant_id = 6;
  google.protobuf.StringValue actor_id  = 7;
  google.protobuf.StringValue app_id    = 8;

  // Заголовки/лейблы запроса.
  map<string, string> labels = 9;

  reserved 50 to 99;
}

message AuditInfo {
  // Идентификатор субъекта (пользователь/сервис).
  string subject = 1;
  google.protobuf.StringValue subject_type = 2; // "user" | "service" | "system"
  // Сетевой контекст.
  google.protobuf.StringValue ip = 3;
  google.protobuf.StringValue user_agent = 4;
  // Ключевые атрибуты аудита.
  map<string, string> attributes = 5;
  // Момент события.
  google.protobuf.Timestamp at = 6;

  reserved 50 to 99;
}

// =====================================================================
// ПАГИНАЦИЯ И КУРСОРЫ
// =====================================================================

message PageRequest {
  int32 page_size = 1;         // 1..1000 (рекомендуется валидировать на сервере)
  string page_token = 2;       // токен следующей страницы
  SortOrder order = 3;         // ASC/DESC
  string order_by = 4;         // поле сортировки, например "created_at"
  google.protobuf.FieldMask fields = 5; // выбор полей (частичная проекция)
}

message PageResponse {
  string next_page_token = 1;
  int64  total_size = 2;       // общее кол-во (если вычисление не слишком дорого)
}

message CursorRequest {
  // Прозрачный курсор для последующего продолжения выдачи.
  string cursor = 1;
  int32 limit  = 2;            // верхняя граница записей в ответе
  SortOrder order = 3;
}

message CursorResponse {
  string next_cursor = 1;
  bool   has_more    = 2;
}

// =====================================================================
// ДЕНЕЖНЫЕ И ЧИСЛОВЫЕ ВЕЛИЧИНЫ
// =====================================================================

message Money {
  // ISO 4217, например "USD", "EUR".
  string currency_code = 1;
  // Целые единицы валюты.
  int64 units = 2;
  // Нано-доли (добавляются к units). Диапазон: -999,999,999 .. +999,999,999.
  int32 nanos = 3;
}

message Decimal {
  // Десятичное число в строковом представлении с фиксированной точкой,
  // например "123.456789". Для точных финансовых расчетов.
  string value = 1;
  // Масштаб (кол-во знаков после запятой) — опционально.
  google.protobuf.Int32Value scale = 2;
}

// =====================================================================
// КОНТРОЛЬ ЦЕЛОСТНОСТИ, ПОДПИСИ, ФАЙЛЫ
// =====================================================================

message Checksum {
  HashAlgo algo = 1;
  bytes    digest = 2; // сырые байты хеша
}

message Signature {
  SignatureAlgo algo = 1;
  // Идентификатор ключа (например, KMS key-id / JWKS kid).
  string key_id = 2;
  // Подпись над canonical-представлением (определяется контрактом RPC).
  bytes signature = 3;
  // Хеш-функция (если применяется схема hash-then-sign).
  HashAlgo hash_algo = 4;

  reserved 50 to 99;
}

message FileRef {
  // Абсолютный или схемный URI (s3://..., gs://..., file://..., https://...).
  string uri = 1;
  ContentType content_type = 2;
  int64 size_bytes = 3;
  Checksum checksum = 4;
  // Произвольные метаданные (например, оригинальное имя файла).
  map<string, string> metadata = 5;

  reserved 50 to 99;
}

// =====================================================================
// КОНТАКТЫ И АДРЕСА
// =====================================================================

message PersonName {
  string given_name  = 1;  // Имя
  string family_name = 2;  // Фамилия
  google.protobuf.StringValue middle_name = 3;
  google.protobuf.StringValue display_name = 4;
}

message Email {
  string address = 1;
  google.protobuf.BoolValue verified = 2;
}

message Phone {
  string e164 = 1; // +46701234567
  google.protobuf.BoolValue verified = 2;
}

message Address {
  string country_code = 1; // ISO 3166-1 alpha-2, напр. "SE"
  google.protobuf.StringValue region = 2;   // область/штат
  google.protobuf.StringValue city = 3;
  repeated string address_line = 4;         // улица/дом/корпус
  google.protobuf.StringValue postal_code = 5;
}

// =====================================================================
// ОШИБКИ И ОТВЕТЫ
// =====================================================================

message ErrorDetail {
  // Машиночитаемый код (domain-level).
  ErrorCode code = 1;
  // Человекочитаемое сообщение (локализуемое).
  string message = 2;
  // Карта полей с ошибками валидации, например: "email": "invalid format".
  map<string, string> field_violations = 3;
  // Доп. детали в виде Any (например, structured context).
  repeated google.protobuf.Any details = 4;

  reserved 50 to 99;
}

message ResponseMeta {
  RequestContext request = 1;
  // Версионирование контракта/ресурса.
  Version version = 2;
  // Временные характеристики обработчика.
  google.protobuf.Duration processing_time = 3;
  // Произвольные метаданные ответа.
  map<string, string> labels = 4;
}

// Универсальный конверт ответа. Используется как часть RPC-ответов.
message ResponseEnvelope {
  ResponseMeta meta = 1;

  oneof outcome {
    Success success = 10;
    Failure failure = 11;
  }

  // Резерв диапазона для будущих вариантов конверта без поломки wire-формата.
  reserved 100 to 199;
}

message Success {
  // Опциональные дополнительные данные, если нужно вложить произвольный тип.
  // Рекомендуется для агрегирующих RPC, где полезна гетерогенная нагрузка.
  repeated google.protobuf.Any items = 1;
}

message Failure {
  ErrorDetail error = 1;
  // Возможные рекомендации для клиента (например, retry-after).
  map<string, string> hints = 2;
}

// =====================================================================
// ИДЕМПОТЕНТНОСТЬ И КОНКУРЕНТНЫЙ ДОСТУП
// =====================================================================

message IdempotencyKey {
  string value = 1; // opaque токен клиента
}

message ConcurrencyToken {
  // Например, ETag/If-Match в HTTP-эквиваленте.
  string etag = 1;
}

// =====================================================================
// СЛУЖЕБНЫЕ КОНТЕЙНЕРЫ
// =====================================================================

// Набор ключ-значение для унифицированных лейблов/тегов.
message LabelSet {
  map<string, string> labels = 1;
}

// Пара ключ-значение (универсальный элементарный тип).
message Pair {
  string key = 1;
  string value = 2;
}

// Конфиг-параметр с типизированным значением.
message ConfigValue {
  string key = 1;
  oneof val {
    string string_val = 10;
    bool   bool_val   = 11;
    int64  int_val    = 12;
    double double_val = 13;
    Decimal decimal_val = 14;
  }
}

// =====================================================================
// РЕЗЕРВИРОВАНИЕ ПОЛЕЙ (пример практики эволюции)
// =====================================================================
//
// В сообщениях выше зарезервированы диапазоны (50..99 / 100..199).
// Правило: занятые номера полей не переиспользуются и не переименовываются.
// Это позволяет безопасно развивать контракт без wire-сломов.
//
// =====================================================================
