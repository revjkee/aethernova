syntax = "proto3";

package omnimind.core.tool.v1;

option csharp_namespace = "Aethernova.Omnimind.Core.Tool.V1";
option go_package        = "github.com/aethernova/omnimind-core/gen/go/omnimind/core/tool/v1;toolv1";
option java_multiple_files = true;
option java_package      = "com.aethernova.omnimind.core.tool.v1";
option objc_class_prefix = "OMCT";
option php_namespace     = "Aethernova\\Omnimind\\Core\\Tool\\V1";
option ruby_package      = "Aethernova::Omnimind::Core::Tool::V1";

// Imports: REST/HTTP, ресурсы, Long Running Operations и полезные типы
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/longrunning/operations.proto";
import "google/longrunning/operation_info.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

// -----------------------------------------------------------------------------
// РЕСУРСНАЯ МОДЕЛЬ
// -----------------------------------------------------------------------------

// Tool — описывает исполняемый инструмент/интеграцию/воркфлоу внутри проекта.
// Каноническое имя ресурса: projects/{project}/locations/{location}/tools/{tool}
message Tool {
  option (google.api.resource) = {
    type: "omnimind.aethernova/Tool"
    pattern: "projects/{project}/locations/{location}/tools/{tool}"
  };

  // Полное имя ресурса (resource name). Заполняется сервером.
  string name = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Человекочитаемое имя для UI/каталогов.
  string display_name = 2 [(google.api.field_behavior) = REQUIRED];

  // Краткое описание.
  string description = 3;

  // Тип инструмента (напр., встроенная модель, коннектор, пайплайн).
  ToolType type = 4 [(google.api.field_behavior) = REQUIRED];

  // Произвольная конфигурация (схема зависит от type).
  google.protobuf.Struct config = 5;

  // Метки для поиска/квотирования/биллинга.
  map<string, string> labels = 6;

  // Дополнительные аннотации (не индексируются).
  map<string, string> annotations = 7;

  // Состояние публикуемой сущности.
  State state = 8;

  // Оптимистичная блокировка. Должен передаваться в Update/Delete.
  string etag = 9;

  // Владелец/ответственная команда.
  string owner = 10;

  // Альтернативные имена/алиасы (для совместимости и поиска).
  repeated string aliases = 11;

  // Временные метки (только сервер).
  google.protobuf.Timestamp create_time = 12 [(google.api.field_behavior) = OUTPUT_ONLY];
  google.protobuf.Timestamp update_time = 13 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Зарезервировано под поведенческие флаги, чтобы не ломать контракт.
  reserved 14, 15;
}

// Типы инструмента.
enum ToolType {
  TOOL_TYPE_UNSPECIFIED = 0;
  TOOL_TYPE_MODEL       = 1;
  TOOL_TYPE_CONNECTOR   = 2;
  TOOL_TYPE_WORKFLOW    = 3;
  TOOL_TYPE_JOB         = 4;
}

// Состояния жизненного цикла.
enum State {
  STATE_UNSPECIFIED = 0;
  STATE_INACTIVE    = 1;
  STATE_ACTIVE      = 2;
  STATE_DEPRECATED  = 3;
  STATE_DISABLED    = 4;
}

// -----------------------------------------------------------------------------
// ЗАПРОСЫ/ОТВЕТЫ
// -----------------------------------------------------------------------------

message CreateToolRequest {
  // Родительская коллекция.
  // Пример: "projects/alpha/locations/eu-west1"
  string parent = 1 [
    (google.api.resource_reference) = { type: "locations.googleapis.com/Location" },
    (google.api.field_behavior) = REQUIRED
  ];

  // Идентификатор ресурса в пределах parent (если пусто — сгенерируется сервером).
  string tool_id = 2;

  Tool tool = 3 [(google.api.field_behavior) = REQUIRED];
}

message GetToolRequest {
  // Полное имя ресурса Tool.
  string name = 1 [
    (google.api.resource_reference) = { type: "omnimind.aethernova/Tool" },
    (google.api.field_behavior) = REQUIRED
  ];
}

message UpdateToolRequest {
  Tool tool = 1 [(google.api.field_behavior) = REQUIRED];

  // Маска обновления. Если не указана — обновляются все поля, кроме OUTPUT_ONLY.
  google.protobuf.FieldMask update_mask = 2;

  // Требовать совпадения etag из Tool.etag.
  bool allow_missing_etag = 3;
}

message DeleteToolRequest {
  string name = 1 [
    (google.api.resource_reference) = { type: "omnimind.aethernova/Tool" },
    (google.api.field_behavior) = REQUIRED
  ];

  // Мягкое удаление (перевод в DISABLED) вместо физического удаления.
  bool disable_only = 2;

  // Проверять совпадение etag последней версии (рекомендуется).
  string etag = 3;
}

message ListToolsRequest {
  string parent = 1 [
    (google.api.resource_reference) = { type: "locations.googleapis.com/Location" },
    (google.api.field_behavior) = REQUIRED
  ];
  int32 page_size = 2;
  string page_token = 3;

  // Фильтр (пример): 'state="ACTIVE" AND labels.env="prod" AND type=CONNECTOR'
  string filter = 4;

  // Сортировка (пример): "update_time desc, display_name asc"
  string order_by = 5;
}

message ListToolsResponse {
  repeated Tool tools = 1;
  string next_page_token = 2;
  int32 total_size = 3;
}

message BatchUpdateToolStateRequest {
  string parent = 1 [
    (google.api.resource_reference) = { type: "locations.googleapis.com/Location" },
    (google.api.field_behavior) = REQUIRED
  ];

  repeated Entry entries = 2 [(google.api.field_behavior) = REQUIRED];

  message Entry {
    string name = 1 [
      (google.api.resource_reference) = { type: "omnimind.aethernova/Tool" },
      (google.api.field_behavior) = REQUIRED
    ];
    State state = 2 [(google.api.field_behavior) = REQUIRED];
    string etag = 3;
  }
}

message BatchUpdateToolStateResponse {
  repeated Tool tools = 1;
}

// Вызов длительного выполнения (пример: запуск workflow/джоба).
message ExecuteToolRequest {
  // Имя ресурса инструмента.
  string name = 1 [
    (google.api.resource_reference) = { type: "omnimind.aethernova/Tool" },
    (google.api.field_behavior) = REQUIRED
  ];

  // Произвольные входные параметры запуска.
  google.protobuf.Struct input = 2;

  // Идемпотентный request_id для дедупликации (рекомендовано UUID).
  string request_id = 3;

  // Желаемый таймаут выполнения (может быть ограничен сервером).
  google.protobuf.Duration timeout = 4;

  // Только валидация параметров без фактического запуска.
  bool validate_only = 5;
}

message ExecuteToolMetadata {
  string name = 1;
  string operation_id = 2;
  google.protobuf.Timestamp start_time = 3;
  // Прогресс выполнения (0..100).
  int32 progress_percent = 4;
}

message ExecuteToolResponse {
  string name = 1;
  string operation_id = 2;
  // Результат исполнения (произвольная структура).
  google.protobuf.Struct output = 3;
  // Короткие логи исполнения.
  repeated LogEntry logs = 4;
}

message LogEntry {
  google.protobuf.Timestamp time = 1;
  string level = 2; // DEBUG|INFO|WARN|ERROR
  string message = 3;
  google.protobuf.Struct fields = 4; // доп. поля (trace_id, step и т.п.)
}

// -----------------------------------------------------------------------------
// СЕРВИС
// -----------------------------------------------------------------------------

service ToolService {
  // Создать инструмент.
  rpc CreateTool(CreateToolRequest) returns (Tool) {
    option (google.api.http) = {
      post: "/v1/{parent=projects/*/locations/*}/tools"
      body: "tool"
    };
  }

  // Получить инструмент.
  rpc GetTool(GetToolRequest) returns (Tool) {
    option (google.api.http) = {
      get: "/v1/{name=projects/*/locations/*/tools/*}"
    };
  }

  // Обновить инструмент (partial update через FieldMask).
  rpc UpdateTool(UpdateToolRequest) returns (Tool) {
    option (google.api.http) = {
      patch: "/v1/{tool.name=projects/*/locations/*/tools/*}"
      body: "tool"
    };
  }

  // Удалить (или отключить) инструмент.
  rpc DeleteTool(DeleteToolRequest) returns (.google.protobuf.Struct) {
    option (google.api.http) = {
      delete: "/v1/{name=projects/*/locations/*/tools/*}"
    };
  }

  // Список инструментов с пагинацией/фильтрацией/сортировкой.
  rpc ListTools(ListToolsRequest) returns (ListToolsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=projects/*/locations/*}/tools"
    };
  }

  // Пакетное изменение состояний (активация/деактивация/депрекейт).
  rpc BatchUpdateToolState(BatchUpdateToolStateRequest) returns (BatchUpdateToolStateResponse) {
    option (google.api.http) = {
      post: "/v1/{parent=projects/*/locations/*}/tools:batchUpdateState"
      body: "*"
    };
  }

  // Исполнить инструмент как долгующую операцию.
  rpc ExecuteTool(ExecuteToolRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1/{name=projects/*/locations/*/tools/*}:execute"
      body: "*"
    };
    option (google.longrunning.operation_info) = {
      response_type: "omnimind.core.tool.v1.ExecuteToolResponse"
      metadata_type: "omnimind.core.tool.v1.ExecuteToolMetadata"
    };
  }
}
