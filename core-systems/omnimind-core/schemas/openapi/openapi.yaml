# path: ops/schemas/openapi/openapi.yaml
openapi: 3.1.0
jsonSchemaDialect: "https://json-schema.org/draft/2020-12/schema"

info:
  title: Omnimind Core API
  version: "1.0.0"
  description: >
    OpenAPI 3.1 спецификация ядра Omnimind. Включает управление "памятью" (Memory),
    гибридный поиск, батч-операции, а также эксплуатационные эндпоинты здоровья и метрик.
  termsOfService: https://example.com/terms
  contact:
    name: Aethernova Platform Team
    email: platform@example.com
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0

servers:
  - url: https://api.example.com
    description: Production
  - url: https://staging-api.example.com
    description: Staging

tags:
  - name: health
    description: Пробки готовности/живости/метрики
  - name: memory
    description: CRUD и поиск по памяти (v1)
  - name: batch
    description: Пакетные операции
  - name: ops
    description: Эксплуатационные операции (служебные)

security:
  - oauth2: [ memory:read, memory:write ]
  - apiKey: []

paths:

  /v1/healthz:
    get:
      tags: [health]
      summary: Liveness probe
      operationId: getHealthz
      security: []
      responses:
        "200":
          description: Alive
          content:
            text/plain:
              schema:
                type: string
                example: ok
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /v1/readyz:
    get:
      tags: [health]
      summary: Readiness probe
      operationId: getReadyz
      security: []
      responses:
        "200":
          description: Ready
          content:
            text/plain:
              schema:
                type: string
                example: ready
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /v1/metrics:
    get:
      tags: [health]
      summary: Prometheus metrics
      operationId: getMetrics
      security: []
      responses:
        "200":
          description: Prometheus text exposition
          content:
            text/plain:
              schema:
                type: string
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /v1/memories:
    post:
      tags: [memory]
      summary: Upsert памяти (идемпотентно)
      operationId: upsertMemory
      parameters:
        - $ref: "#/components/parameters/IdempotencyKey"
        - $ref: "#/components/parameters/XRequestId"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/UpsertMemoryRequest" }
      responses:
        "200":
          description: Обновлено
          headers:
            X-Request-Id: { $ref: "#/components/headers/X-Request-Id" }
            RateLimit-Limit: { $ref: "#/components/headers/RateLimit-Limit" }
            RateLimit-Remaining: { $ref: "#/components/headers/RateLimit-Remaining" }
            RateLimit-Reset: { $ref: "#/components/headers/RateLimit-Reset" }
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UpsertMemoryResponse" }
        "201":
          description: Создано
          headers:
            Location:
              description: URI созданного ресурса
              schema: { type: string, format: uri }
            X-Request-Id: { $ref: "#/components/headers/X-Request-Id" }
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UpsertMemoryResponse" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "409": { $ref: "#/components/responses/Conflict" }
        "412": { $ref: "#/components/responses/PreconditionFailed" }
        "429": { $ref: "#/components/responses/TooManyRequests" }
        "500": { $ref: "#/components/responses/InternalError" }

    get:
      tags: [memory]
      summary: Листинг памяти с фильтрами и пагинацией
      operationId: listMemories
      parameters:
        - $ref: "#/components/parameters/XRequestId"
        - $ref: "#/components/parameters/Namespace"
        - $ref: "#/components/parameters/OwnerId"
        - $ref: "#/components/parameters/Kinds"
        - $ref: "#/components/parameters/States"
        - $ref: "#/components/parameters/AttrEq"
        - $ref: "#/components/parameters/PageSize"
        - $ref: "#/components/parameters/PageToken"
        - $ref: "#/components/parameters/OrderBy"
        - $ref: "#/components/parameters/View"
      responses:
        "200":
          description: Ок
          headers:
            X-Request-Id: { $ref: "#/components/headers/X-Request-Id" }
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ListMemoriesResponse" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "429": { $ref: "#/components/responses/TooManyRequests" }
        "500": { $ref: "#/components/responses/InternalError" }

  /v1/memories/{id}:
    get:
      tags: [memory]
      summary: Получить память по id
      operationId: getMemory
      parameters:
        - $ref: "#/components/parameters/PathId"
        - $ref: "#/components/parameters/XRequestId"
        - $ref: "#/components/parameters/View"
        - in: query
          name: includeSoftDeleted
          schema: { type: boolean, default: false }
          description: Включать soft-deleted записи
      responses:
        "200":
          description: Ок
          content:
            application/json:
              schema: { $ref: "#/components/schemas/GetMemoryResponse" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
        "410": { $ref: "#/components/responses/Gone" }
        "500": { $ref: "#/components/responses/InternalError" }

    delete:
      tags: [memory]
      summary: Удалить память (soft/hard)
      operationId: deleteMemory
      parameters:
        - $ref: "#/components/parameters/PathId"
        - $ref: "#/components/parameters/XRequestId"
        - in: query
          name: soft
          schema: { type: boolean, default: true }
        - in: query
          name: hard
          schema: { type: boolean, default: false }
        - in: query
          name: cascade
          schema: { type: boolean, default: true }
      responses:
        "200":
          description: Состояние после удаления
          content:
            application/json:
              schema: { $ref: "#/components/schemas/DeleteMemoryResponse" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
        "409": { $ref: "#/components/responses/Conflict" }
        "500": { $ref: "#/components/responses/InternalError" }

    patch:
      tags: [memory]
      summary: Частичный апдейт (JSON Merge Patch)
      operationId: patchMemory
      parameters:
        - $ref: "#/components/parameters/PathId"
        - $ref: "#/components/parameters/XRequestId"
        - in: header
          name: If-Match
          description: ETag/Revision для CAS
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/merge-patch+json:
            schema:
              $ref: "#/components/schemas/Memory"
      responses:
        "200":
          description: Обновлено
          content:
            application/json:
              schema: { $ref: "#/components/schemas/GetMemoryResponse" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "404": { $ref: "#/components/responses/NotFound" }
        "412": { $ref: "#/components/responses/PreconditionFailed" }
        "500": { $ref: "#/components/responses/InternalError" }

  /v1/memories:query:
    post:
      tags: [memory]
      summary: Гибридный поиск (текст + вектор)
      operationId: queryMemory
      parameters:
        - $ref: "#/components/parameters/XRequestId"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/QueryMemoryRequest" }
      responses:
        "200":
          description: Результаты поиска
          headers:
            X-Request-Id: { $ref: "#/components/headers/X-Request-Id" }
          content:
            application/json:
              schema: { $ref: "#/components/schemas/QueryMemoryResponse" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "429": { $ref: "#/components/responses/TooManyRequests" }
        "500": { $ref: "#/components/responses/InternalError" }

  /v1/memories:batchUpsert:
    post:
      tags: [batch]
      summary: Пакетный upsert
      operationId: batchUpsertMemories
      parameters:
        - $ref: "#/components/parameters/XRequestId"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/BatchUpsertMemoriesRequest" }
      responses:
        "200":
          description: Результаты партии
          content:
            application/json:
              schema: { $ref: "#/components/schemas/BatchUpsertMemoriesResponse" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "413": { $ref: "#/components/responses/PayloadTooLarge" }
        "429": { $ref: "#/components/responses/TooManyRequests" }
        "500": { $ref: "#/components/responses/InternalError" }

  /v1/memories:batchDelete:
    post:
      tags: [batch]
      summary: Пакетное удаление
      operationId: batchDeleteMemories
      parameters:
        - $ref: "#/components/parameters/XRequestId"
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/BatchDeleteMemoriesRequest" }
      responses:
        "200":
          description: Результаты партии
          content:
            application/json:
              schema: { $ref: "#/components/schemas/BatchDeleteMemoriesResponse" }
        "400": { $ref: "#/components/responses/BadRequest" }
        "401": { $ref: "#/components/responses/Unauthorized" }
        "403": { $ref: "#/components/responses/Forbidden" }
        "500": { $ref: "#/components/responses/InternalError" }

webhooks:
  memoryAudit:
    post:
      summary: Вебхук аудита изменений памяти
      description: Отправляется на сторонние при создании/обновлении/удалении.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ event, at, actor, memory ]
              properties:
                event:
                  type: string
                  enum: [ created, updated, soft_deleted, hard_deleted, restored ]
                at:
                  type: string
                  format: date-time
                actor:
                  type: string
                memory:
                  $ref: "#/components/schemas/Memory"
      responses:
        "200":
          description: Принято

components:

  securitySchemes:
    oauth2:
      type: oauth2
      description: OAuth2 Authorization Code с PKCE
      flows:
        authorizationCode:
          authorizationUrl: https://auth.example.com/oauth2/authorize
          tokenUrl: https://auth.example.com/oauth2/token
          scopes:
            memory:read: Чтение памяти
            memory:write: Запись/удаление памяти
    apiKey:
      type: apiKey
      in: header
      name: X-API-Key
      description: Статический API ключ

  headers:
    X-Request-Id:
      description: Корреляционный идентификатор запроса
      schema: { type: string }
    RateLimit-Limit:
      description: Лимит запросов в текущем окне
      schema: { type: integer, format: int64 }
    RateLimit-Remaining:
      description: Оставшиеся запросы
      schema: { type: integer, format: int64 }
    RateLimit-Reset:
      description: Секунд до сброса окна
      schema: { type: integer, format: int64 }

  parameters:
    XRequestId:
      in: header
      name: X-Request-Id
      required: false
      schema: { type: string }
      description: Пользовательский корреляционный идентификатор
    IdempotencyKey:
      in: header
      name: Idempotency-Key
      required: false
      schema:
        type: string
        maxLength: 128
      description: Ключ идемпотентности для безопасной повторной отправки
    PathId:
      in: path
      name: id
      required: true
      schema: { type: string, pattern: "^[0-9a-fA-F-]{36}$" }
      description: UUID ресурса Memory
    Namespace:
      in: query
      name: namespace
      schema: { type: string }
    OwnerId:
      in: query
      name: ownerId
      schema: { type: string }
    Kinds:
      in: query
      name: kinds
      description: Фильтр по видам (повторяемый)
      schema:
        type: array
        items: { type: string }
        explode: true
        style: form
    States:
      in: query
      name: states
      description: Состояния Lifecycle
      schema:
        type: array
        items:
          $ref: "#/components/schemas/LifecycleState"
        explode: true
        style: form
    AttrEq:
      in: query
      name: attr
      description: >
        Фильтр по атрибутам metadata.attributes через повторяемые ключ=значение.
        Пример: attr=source:email&attr=lang:en
      schema:
        type: array
        items: { type: string, pattern: "^[^:=]+:[^:=]+$" }
      style: form
      explode: true
    PageSize:
      in: query
      name: pageSize
      schema: { type: integer, minimum: 1, maximum: 1000, default: 50 }
    PageToken:
      in: query
      name: pageToken
      schema: { type: string }
    OrderBy:
      in: query
      name: orderBy
      schema: { type: string, example: "updated_at desc" }
    View:
      in: query
      name: view
      schema:
        $ref: "#/components/schemas/ResponseView"

  responses:
    BadRequest:
      description: Неверный запрос
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }
    Unauthorized:
      description: Требуется аутентификация
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }
    Forbidden:
      description: Доступ запрещен
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }
    NotFound:
      description: Ресурс не найден
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }
    Gone:
      description: Ресурс безвозвратно удален
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }
    Conflict:
      description: Конфликт состояния
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }
    PreconditionFailed:
      description: Нарушение предусловий (If-Match / revision)
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }
    TooManyRequests:
      description: Превышен лимит запросов
      headers:
        RateLimit-Limit: { $ref: "#/components/headers/RateLimit-Limit" }
        RateLimit-Remaining: { $ref: "#/components/headers/RateLimit-Remaining" }
        RateLimit-Reset: { $ref: "#/components/headers/RateLimit-Reset" }
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }
    PayloadTooLarge:
      description: Слишком большой запрос
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }
    ServiceUnavailable:
      description: Сервис временно недоступен
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }
    InternalError:
      description: Внутренняя ошибка сервера
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }

  schemas:

    Problem:
      type: object
      description: RFC7807 problem details
      properties:
        type: { type: string, format: uri, default: "about:blank" }
        title: { type: string }
        status: { type: integer }
        detail: { type: string }
        instance: { type: string, format: uri }
        requestId: { type: string }
        errors:
          type: array
          items:
            type: object
            properties:
              field: { type: string }
              message: { type: string }
      required: [ title, status ]

    ResponseView:
      type: string
      enum: [ HEADERS, BASIC, FULL ]
      default: BASIC

    LifecycleState:
      type: string
      enum: [ ACTIVE, SOFT_DELETED, ARCHIVED ]

    Memory:
      type: object
      additionalProperties: false
      properties:
        id:
          type: string
          description: UUID v4
          pattern: "^[0-9a-fA-F-]{36}$"
        idempotencyKey:
          type: string
          maxLength: 128
        namespace:
          type: string
        ownerId:
          type: string
        kind:
          type: string
        content:
          oneOf:
            - type: object
              properties: { text: { type: string } }
              required: [ text ]
              additionalProperties: false
            - type: object
              properties: { blob: { type: string, contentEncoding: base64 } }
              required: [ blob ]
              additionalProperties: false
            - type: object
              properties: { structured: { type: object } }
              required: [ structured ]
              additionalProperties: true
        chunks:
          type: array
          items: { $ref: "#/components/schemas/Chunk" }
        sources:
          type: array
          items: { $ref: "#/components/schemas/SourceRef" }
        metadata:
          $ref: "#/components/schemas/MemoryMetadata"
        acl:
          $ref: "#/components/schemas/AccessControl"
        retention:
          $ref: "#/components/schemas/RetentionPolicy"
        lifecycle:
          $ref: "#/components/schemas/Lifecycle"
      required: [ namespace, ownerId, kind ]

    Chunk:
      type: object
      additionalProperties: false
      properties:
        id: { type: string }
        index: { type: integer, minimum: 0 }
        text: { type: string }
        embeddings:
          type: array
          items: { $ref: "#/components/schemas/Embedding" }
        contentHash: { type: string }
        tags:
          type: object
          additionalProperties: { type: string }
      required: [ index, text ]

    Embedding:
      type: object
      additionalProperties: false
      properties:
        space: { type: string }
        dim: { type: integer, minimum: 1 }
        vector:
          type: array
          minItems: 1
          items: { type: number }
        preprocessing: { type: string }
        similarity:
          type: string
          enum: [ COSINE, DOT, EUCLIDEAN ]
        createdAt:
          type: string
          format: date-time
      required: [ space, dim, vector ]

    SourceRef:
      type: object
      additionalProperties: false
      properties:
        kind: { type: string }
        locator: { type: string }
        contentHash: { type: string }
        attributes:
          type: object
          additionalProperties: { type: string }
        author: { type: string }
        labels:
          type: array
          items: { type: string }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
      required: [ kind, locator ]

    MemoryMetadata:
      type: object
      additionalProperties: false
      properties:
        attributes:
          type: object
          additionalProperties: { type: string }
        locale: { type: string }
        language: { type: string }
        userVersion: { type: string }
        approxTokens: { type: integer, minimum: 0 }
        approxBytes: { type: integer, minimum: 0 }
        correlations:
          type: object
          additionalProperties: { type: string }
        classifications:
          type: array
          items: { type: string }

    AccessControl:
      type: object
      additionalProperties: false
      properties:
        isPublic: { type: boolean, default: false }
        allow:
          type: array
          items: { type: string }
        deny:
          type: array
          items: { type: string }
        fieldPolicies:
          type: object
          additionalProperties:
            type: object
            additionalProperties: false
            properties:
              redact: { type: boolean, default: false }
              revealTo:
                type: array
                items: { type: string }

    RetentionPolicy:
      type: object
      additionalProperties: false
      properties:
        ttl: { type: string, description: ISO8601 duration, example: "P7D" }
        hardDeleteAfter: { type: string, description: ISO8601 duration, example: "P30D" }
        writeProtect: { type: string, description: ISO8601 duration, example: "P1D" }
        legalHold: { type: boolean, default: false }

    Lifecycle:
      type: object
      additionalProperties: false
      properties:
        revision: { type: integer, minimum: 0 }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
        softDeletedAt: { type: string, format: date-time, nullable: true }
        state: { $ref: "#/components/schemas/LifecycleState" }

    UpsertMemoryRequest:
      type: object
      additionalProperties: false
      properties:
        memory: { $ref: "#/components/schemas/Memory" }
        partialUpdate: { type: boolean, default: false }
        forceReembed: { type: boolean, default: false }
        idempotencyKey:
          type: string
          maxLength: 128
        expectedRevision:
          type: integer
          minimum: 0
        chunking:
          type: object
          additionalProperties: false
          properties:
            mode:
              type: string
              enum: [ BY_TOKENS, BY_SENTENCES, BY_SEMANTIC ]
            maxTokens: { type: integer, minimum: 1 }
            overlapTokens: { type: integer, minimum: 0 }
      required: [ memory ]

    UpsertMemoryResponse:
      type: object
      additionalProperties: false
      properties:
        memory: { $ref: "#/components/schemas/Memory" }
        created: { type: boolean }

    GetMemoryResponse:
      type: object
      additionalProperties: false
      properties:
        memory: { $ref: "#/components/schemas/Memory" }

    DeleteMemoryResponse:
      type: object
      additionalProperties: false
      properties:
        state: { $ref: "#/components/schemas/LifecycleState" }

    ListMemoriesResponse:
      type: object
      additionalProperties: false
      properties:
        memories:
          type: array
          items: { $ref: "#/components/schemas/Memory" }
        nextPageToken: { type: string }

    QueryMemoryRequest:
      type: object
      additionalProperties: false
      properties:
        textQuery: { type: string }
        embed:
          $ref: "#/components/schemas/Embedding"
        textForEmbedding: { type: string }
        embeddingSpace: { type: string }
        namespace: { type: string }
        ownerId: { type: string }
        kinds:
          type: array
          items: { type: string }
        attributeEquals:
          type: object
          additionalProperties: { type: string }
        mustHaveLabels:
          type: array
          items: { type: string }
        mustNotHaveLabels:
          type: array
          items: { type: string }
        scoring:
          type: object
          additionalProperties: false
          properties:
            vectorWeight: { type: number, minimum: 0, maximum: 1, default: 0.5 }
            textWeight: { type: number, minimum: 0, maximum: 1, default: 0.5 }
            aggregate:
              type: string
              enum: [ SUM, MAX, MEAN ]
              default: SUM
        topK: { type: integer, minimum: 1, maximum: 1000, default: 50 }
        pageSize: { type: integer, minimum: 1, maximum: 1000, default: 50 }
        pageToken: { type: string }
        view: { $ref: "#/components/schemas/ResponseView" }
      oneOf:
        - required: [ textQuery ]
        - required: [ embed ]
        - required: [ textForEmbedding ]

    QueryMemoryResponse:
      type: object
      additionalProperties: false
      properties:
        hits:
          type: array
          items:
            $ref: "#/components/schemas/SearchHit"
        nextPageToken: { type: string }

    SearchHit:
      type: object
      additionalProperties: false
      properties:
        memory: { $ref: "#/components/schemas/Memory" }
        score: { type: number }
        vectorScore: { type: number }
        textScore: { type: number }
        snippets:
          type: array
          items:
            type: object
            additionalProperties: false
            properties:
              chunkId: { type: string }
              text: { type: string }
              matches:
                type: array
                items:
                  type: object
                  additionalProperties: false
                  properties:
                    start: { type: integer, minimum: 0 }
                    end: { type: integer, minimum: 0 }
                    term: { type: string }

    BatchUpsertMemoriesRequest:
      type: object
      additionalProperties: false
      properties:
        requests:
          type: array
          minItems: 1
          maxItems: 500
          items: { $ref: "#/components/schemas/UpsertMemoryRequest" }
      required: [ requests ]

    BatchUpsertMemoriesResponse:
      type: object
      additionalProperties: false
      properties:
        results:
          type: array
          items: { $ref: "#/components/schemas/UpsertMemoryResponse" }
        status:
          type: object
          description: Сводный статус партии
          additionalProperties: true

    BatchDeleteMemoriesRequest:
      type: object
      additionalProperties: false
      properties:
        requests:
          type: array
          minItems: 1
          maxItems: 500
          items:
            type: object
            additionalProperties: false
            properties:
              id: { type: string, pattern: "^[0-9a-fA-F-]{36}$" }
              soft: { type: boolean, default: true }
              hard: { type: boolean, default: false }
              cascade: { type: boolean, default: true }
            required: [ id ]
      required: [ requests ]

    BatchDeleteMemoriesResponse:
      type: object
      additionalProperties: false
      properties:
        results:
          type: array
          items: { $ref: "#/components/schemas/DeleteMemoryResponse" }
        status:
          type: object
          additionalProperties: true
