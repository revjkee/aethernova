# omnimind-core/examples/quickstart/config.yaml
# Универсальный пример конфигурации Omnimind Core.
# Все ключи можно переопределять через переменные окружения в стиле:
#   OMNI__app__env=staging
#   OMNI__secrets__postgres__password="s3cr3t"
# Подстановки вида ${ENV:default} читаются из окружения при старте.

app:
  name: omnimind-core
  env: ${APP_ENV:development}        # development|staging|production
  version: "0.1.0"
  instance: ${HOSTNAME:local}

paths:
  logs: ${LOG_DIR:./_var/log}        # будет создан, если отсутствует
  data: ${DATA_DIR:./_var/data}
  tmp:  ${TMP_DIR:./_var/tmp}

server:
  bind_host: ${BIND_HOST:0.0.0.0}
  port: ${PORT:8080}
  # Для reverse-proxy (nginx/ingress):
  proxy_headers: true
  # Health эндпоинты поднимаются bootstrap-ом на том же порту:
  health_endpoints:
    live:  /healthz/live
    ready: /healthz/ready

logging:
  level: ${LOG_LEVEL:INFO}
  json:  ${LOG_JSON:true}
  # Ротация файла логов (stdout всегда включён)
  rotation:
    max_size_mb: ${LOG_MAX_MB:50}
    max_backups: ${LOG_MAX_BACKUPS:5}
  # Дополнительные поля, которые можно добавлять в MDC/extra
  include_request_id: true

metrics:
  enabled: ${METRICS_ENABLED:true}
  port: ${METRICS_PORT:9090}         # Prometheus scrape (отдельный HTTP сервер)
  service_label: ${APP_ENV:development}

tracing:
  enabled: ${OTEL_ENABLED:false}
  endpoint: ${OTEL_EXPORTER_OTLP_ENDPOINT:http://localhost:4318}
  sampler: ${OTEL_SAMPLER:parentbased_always_on}

security:
  cors:
    enabled: ${CORS_ENABLED:true}
    allow_origins: ${CORS_ORIGINS:*}         # * или список через запятую
    allow_methods: "GET,POST,PUT,PATCH,DELETE,OPTIONS"
    allow_headers: "Authorization,Content-Type,If-Match,Idempotency-Key"
    expose_headers: "ETag,X-Request-Id"
    allow_credentials: ${CORS_CREDENTIALS:false}
  auth:
    mode: ${AUTH_MODE:none}                  # none|bearer|apikey|oidc
    # Пример для bearer:
    bearer:
      jwks_url: ${AUTH_JWKS_URL:}
      audience: ${AUTH_AUD:}
      issuer: ${AUTH_ISS:}
      leeway_seconds: 60
    # Пример для apikey:
    apikey:
      header: "X-API-Key"
      keys:
        - ${API_KEY:}                        # храните в секретах/ENV
  rate_limit:
    enabled: ${RATELIMIT_ENABLED:false}
    window_seconds: 60
    max_requests: 600
    strategy: "ip"                           # ip|key|user

# Секреты. Поддерживаются варианты: ENV:NAME | file:/path | literal:value
# В рантайме bootstrap.resolve_secrets заменит эти структуры строковыми значениями.
secrets:
  postgres:
    user: ${PGUSER:omni}
    password: {"$secret": "${PGPASSWORD_SPEC:ENV:PGPASSWORD}"}   # например, ENV:PGPASSWORD
  redis:
    password: {"$secret": "${REDIS_PASS_SPEC:ENV:REDIS_PASSWORD}"}
  minio:
    access_key: {"$secret": "${MINIO_ACCESS_SPEC:ENV:MINIO_ACCESS_KEY}"}
    secret_key: {"$secret": "${MINIO_SECRET_SPEC:ENV:MINIO_SECRET_KEY}"}
  jwt_signing:
    # Пример хранения ключа в файле:
    private_pem: {"$secret": "${JWT_PRIV_SPEC:file:./_secrets/jwt_key.pem}"}

storage:
  postgres:
    dsn: ${PG_DSN:postgresql://omni:${PGPASSWORD}@localhost:5432/omni}
    # Либо раздельно:
    host: ${PGHOST:localhost}
    port: ${PGPORT:5432}
    database: ${PGDATABASE:omni}
    user_from_secret: secrets.postgres.user
    password_from_secret: secrets.postgres.password
    pool:
      min: 2
      max: 20
      timeout_sec: 5
    sslmode: ${PGSSLMODE:disable}
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    db: ${REDIS_DB:0}
    password_from_secret: secrets.redis.password
    ssl: ${REDIS_SSL:false}
    socket_timeout_sec: 2
  object_storage:
    kind: minio                      # minio|s3|fs
    endpoint: ${MINIO_ENDPOINT:http://localhost:9000}
    region: ${S3_REGION:us-east-1}
    bucket: ${OBJ_BUCKET:omni}
    access_key_from_secret: secrets.minio.access_key
    secret_key_from_secret: secrets.minio.secret_key
    secure: ${OBJ_SECURE:false}

vectorstore:
  provider: milvus
  milvus:
    connect:
      alias: default
      uri: ${MILVUS_URI:http://localhost:19530}
      timeout: 5.0
      reconnect_retries: 3
      reconnect_backoff_sec: 0.5
    collection:
      collection: ${MILVUS_COLLECTION:omnimind_vectors}
      dim: ${EMBEDDING_DIM:384}
      description: "Omnimind Vector Collection"
      shards_num: 2
      id_max_length: 64
      namespace_max_length: 64
      doc_id_max_length: 128
      text_max_length: 2048
      with_payload_json: ${MILVUS_JSON:false}
      replicas: 1
      consistency_level: Bounded        # Strong|Bounded|Eventually|Session
    index:
      metric_type: ${MILVUS_METRIC:COSINE}    # COSINE|L2|IP
      index_type: ${MILVUS_INDEX:HNSW}        # HNSW|IVF_FLAT|IVF_SQ8
      params:
        M: ${MILVUS_HNSW_M:16}
        efConstruction: ${MILVUS_HNSW_EFCON:200}
      search_params:
        ef: ${MILVUS_HNSW_EF:128}

http_client:
  # Соответствует промышленному SDK-клиенту (см. ops/sdks/typescript/src/client.ts)
  timeout_ms: 30000
  retry:
    max_attempts: 5
    base_delay_ms: 200
    max_delay_ms: 3000
    jitter: true
    http: [429, 502, 503, 504]
  default_headers:
    X-Client: "omnimind-core"
  idempotency_default: true

features:
  planning:
    enabled: true
    max_steps: 100
    step_timeout_sec: 300
  math_eval:
    enabled: true
    numeric_mode: float           # float|decimal|fraction
    decimal_precision: 28
    time_limit_ms: 100
  tools:
    enabled: true

workers:
  # Настройки фоновых задач
  concurrency: ${WORKERS_CONCURRENCY:4}
  queues:
    - name: default
      priority: 5
    - name: vectors
      priority: 10
  shutdown_grace_sec: 10

quotas:
  # Пример квот по ключам API/tenant
  default:
    requests_per_minute: 3000
    tokens_per_day: 2000000

profiles:
  # Профили окружений: переопределяют базовые ключи при сборке/деплое.
  development:
    logging:
      level: DEBUG
    metrics:
      enabled: true
    tracing:
      enabled: false
    security:
      cors:
        allow_origins: "*"
  staging:
    logging:
      level: INFO
    tracing:
      enabled: true
  production:
    logging:
      level: INFO
      json: true
    server:
      proxy_headers: true
    metrics:
      enabled: true
    tracing:
      enabled: true
    security:
      cors:
        allow_origins: ${CORS_ORIGINS:https://your.domain}
      auth:
        mode: ${AUTH_MODE:bearer}

# Пример переменных, которые удобно переопределять через OMNI__...:
#   OMNI__vectorstore__milvus__collection__dim=768
#   OMNI__logging__level=DEBUG
#   OMNI__security__auth__mode=apikey
#   OMNI__rate_limit__enabled=true
#
# Для JsonSchema-валидации укажите путь в ENV OMNIMIND_CONFIG_SCHEMA
#   export OMNIMIND_CONFIG_SCHEMA=./ops/schemas/jsonschema/v1/tool.schema.json
