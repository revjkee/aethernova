# path: omnimind-core/pyproject.toml

[build-system]
requires = ["poetry-core>=1.9.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "omnimind-core"
version = "0.1.0"
description = "Core runtime for Omnimind: typed, async-first AI/automation kernel with strict QA."
authors = ["Aethernova Core Team"]
license = "Apache-2.0"
# Если README отсутствует, не указываем его, чтобы избежать ошибок сборки.
# readme = "README.md"
homepage = "https://example.com/omnimind-core"
repository = "https://example.com/omnimind-core/repo"
documentation = "https://example.com/omnimind-core/docs"
keywords = ["ai", "core", "async", "observability", "typing"]
classifiers = [
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "License :: OSI Approved :: Apache Software License",
  "Operating System :: OS Independent",
  "Typing :: Typed",
  "Framework :: AsyncIO"
]

# Рекомендуемая src-layout; пакет будет искаться в src/omnimind_core
packages = [
  { include = "omnimind_core", from = "src" }
]

[tool.poetry.dependencies]
python = ">=3.11,<3.14"
anyio = "^4.4"
pydantic = "^2.7"
httpx = "^0.27"
tenacity = "^8.4"
rich = "^13.7"
typing-extensions = "^4.12"
# Опциональные ускорители (экстра 'perf')
uvloop = { version = "^0.19", markers = "sys_platform != 'win32'", optional = true }
orjson = { version = "^3.10", optional = true }
msgspec = { version = "^0.18", optional = true }

[tool.poetry.extras]
perf = ["uvloop", "orjson", "msgspec"]

[tool.poetry.group.dev.dependencies]
black = "^24.4"
ruff = "^0.5"
mypy = "^1.10"
pytest = "^8.3"
pytest-asyncio = "^0.23"
pytest-cov = "^5.0"
coverage = { version = "^7.6", extras = ["toml"] }
pre-commit = "^3.7"
bandit = "^1.7"
pip-audit = "^2.7"
# Поддержка типов для популярных пакетов при необходимости
types-setuptools = "^71.0.0.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.6"
mkdocs-material = "^9.5"
mkdocstrings = { version = "^0.24", extras = ["python"] }

# При появлении CLI можно включить консольный скрипт:
# [tool.poetry.scripts]
# omnimind = "omnimind_core.__main__:main"

[tool.pytest.ini_options]
python_files = ["test_*.py", "*_test.py"]
testpaths = ["tests"]
addopts = "-q --strict-markers --disable-warnings --maxfail=1 --cov=omnimind_core --cov-report=term-missing"
asyncio_mode = "strict"
markers = [
  "slow: marks tests as slow",
  "serial: marks tests that must not run in parallel",
  "chaos: fault-injection and resilience tests"
]
filterwarnings = [
  "error::DeprecationWarning",
  "ignore::UserWarning:httpx.*",
]

[tool.coverage.run]
branch = true
parallel = true
source = ["omnimind_core"]
omit = [
  "src/omnimind_core/__main__.py",
  "src/omnimind_core/_version.py",
  "tests/*"
]

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 80
exclude_lines = [
  "pragma: no cover",
  "if TYPE_CHECKING:",
  "if __name__ == .__main__.:"
]

[tool.coverage.paths]
source = [
  "src/omnimind_core",
  "*/site-packages/omnimind_core"
]

[tool.black]
line-length = 100
target-version = ["py311", "py312", "py313"]
skip-string-normalization = false

# Ruff (новый синтаксис конфигурации)
[tool.ruff]
line-length = 100
target-version = "py312"
src = ["src"]

[tool.ruff.lint]
# Подборка правил: ошибки, форматирование, модернизации, безопасность, производительность и пр.
select = [
  "E",   # pycodestyle errors
  "F",   # pyflakes
  "W",   # pycodestyle warnings
  "I",   # isort
  "N",   # pep8-naming
  "UP",  # pyupgrade
  "B",   # bugbear
  "C4",  # comprehensions
  "DTZ", # datetime timezone
  "T20", # print statements
  "SIM", # flake8-simplify
  "S",   # security (bandit-like)
  "BLE", # blind except
  "PIE", # flake8-pie
  "PL",  # pylint-inspired
  "PT",  # pytest style
  "RUF"  # ruff-specific
]
ignore = [
  "S101",     # assert usage (разрешаем в тестах через per-file-ignores)
  "FBT003",   # boolean-positional-value-in-call (иногда намеренно)
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["S101", "DTZ005", "PLR2004"]
"**/__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.12"
strict = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
no_implicit_optional = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
show_error_codes = true
pretty = true
namespace_packages = true
explicit_package_bases = true
mypy_path = "src"
plugins = ["pydantic.mypy"]

[tool.pydantic-mypy]
init_forbid_extra = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.bandit]
skips = ["B101"]  # assert разрешены в тестах
exclude_dirs = ["tests"]

# Pyright (если используется в IDE)
[tool.pyright]
pythonVersion = "3.12"
typeCheckingMode = "strict"
useLibraryCodeForTypes = true
reportMissingTypeStubs = "warning"
venvPath = "."
venv = ".venv"
