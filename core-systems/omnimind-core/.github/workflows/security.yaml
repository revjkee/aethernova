# omnimind-core/.github/workflows/security.yaml
# Промышленный пайплайн безопасности для Omnimind-Core
# Запускается при PR и push в main, а также по расписанию (ежедневно).
# Включает CodeQL, secret scan, dependency scan, container scan, license check.

name: Security Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "*" ]
  schedule:
    - cron: "0 2 * * *" # ежедневный ночной запуск
  workflow_dispatch:

permissions:
  contents: read
  security-events: write   # для загрузки SARIF
  actions: read
  checks: write

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"

jobs:
  ########################################################
  # 1. CODEQL ANALYSIS
  ########################################################
  codeql:
    name: CodeQL Static Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  ########################################################
  # 2. DEPENDENCY SCAN (OSV + pip-audit + npm audit)
  ########################################################
  depscan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install scanners
        run: |
          pip install pip-audit safety
          npm install -g @ossf/osv-scanner

      - name: Python deps audit (pip-audit)
        run: pip-audit --progress-spinner off -f sarif -o pip-audit.sarif || true

      - name: Node deps audit (osv-scanner)
        run: osv-scanner --format sarif --output osv-scanner.sarif . || true

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: |
            pip-audit.sarif
            osv-scanner.sarif

  ########################################################
  # 3. SECRET SCAN (gitleaks)
  ########################################################
  secrets:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: ""
          args: detect --source . --report-format sarif --report-path gitleaks.sarif

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif

  ########################################################
  # 4. CONTAINER & FS SCAN (Trivy)
  ########################################################
  trivy:
    name: Container and Filesystem Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy FS scan
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: fs
          ignore-unfixed: true
          format: sarif
          output: trivy-fs.sarif

      - name: Run Trivy Config scan (IaC misconfigs)
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: config
          format: sarif
          output: trivy-config.sarif

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: |
            trivy-fs.sarif
            trivy-config.sarif

  ########################################################
  # 5. LICENSE CHECK
  ########################################################
  license-check:
    name: OSS License Compliance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install license-checker
        run: npm install -g license-checker
      - name: Run license check
        run: |
          license-checker --json > licenses.json
          jq . licenses.json > licenses.pretty.json
      - name: Upload licenses as artifact
        uses: actions/upload-artifact@v4
        with:
          name: licenses
          path: licenses.pretty.json

  ########################################################
  # 6. AGGREGATE RESULTS
  ########################################################
  summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql, depscan, secrets, trivy, license-check]
    if: always()
    steps:
      - name: Create summary
        run: |
          echo "### Security Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- CodeQL: ${{ needs.codeql.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Dependencies: ${{ needs.depscan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Secrets: ${{ needs.secrets.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Trivy: ${{ needs.trivy.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Licenses: ${{ needs.license-check.result }}" >> $GITHUB_STEP_SUMMARY
