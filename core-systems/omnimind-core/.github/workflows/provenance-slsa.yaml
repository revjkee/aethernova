name: provenance-slsa

on:
  push:
    tags:
      - "v*"
  release:
    types: [published]
  workflow_dispatch:

concurrency:
  group: provenance-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  id-token: write
  attestations: write

env:
  PROJECT_NAME: omnimind-core
  DIST_DIR: dist

jobs:
  build-and-attest:
    name: Build source tarball, hash, SBOM, attest
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      attestations: write
    outputs:
      artifact: ${{ steps.pkg.outputs.artifact }}
      sha256_file: ${{ steps.hash.outputs.sha256_file }}
    steps:
      - name: Checkout (full history for deterministic versioning)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Normalize environment
        run: |
          set -euo pipefail
          mkdir -p "$DIST_DIR"
          echo "REF_NAME=${GITHUB_REF_NAME}" >> "$GITHUB_ENV"
          echo "SHORT_SHA=$(git rev-parse --short=12 HEAD)" >> "$GITHUB_ENV"
          echo "DATE_UTC=$(date -u +%Y%m%dT%H%M%SZ)" >> "$GITHUB_ENV"

      - name: Package source as tar.gz (deterministic)
        id: pkg
        shell: bash
        run: |
          set -euo pipefail
          ARTIFACT="${PROJECT_NAME}-${REF_NAME:-snapshot}-${SHORT_SHA}.tar.gz"
          # Создаем детерминированный тарбол: sorted, без владельцев, фиксированное время
          git ls-files -z | sort -z | tar --null -T - \
            --sort=name \
            --owner=0 --group=0 --numeric-owner \
            --mtime='UTC 2025-01-01' \
            -czf "${DIST_DIR}/${ARTIFACT}"
          echo "artifact=${DIST_DIR}/${ARTIFACT}" >> "$GITHUB_OUTPUT"

      - name: Compute SHA256
        id: hash
        run: |
          set -euo pipefail
          ART="${{ steps.pkg.outputs.artifact }}"
          sha256sum "$ART" | tee "${ART}.sha256"
          echo "sha256_file=${ART}.sha256" >> "$GITHUB_OUTPUT"

      - name: Generate SBOM (SPDX JSON) via Syft in Docker (best-effort)
        continue-on-error: true
        run: |
          set -euo pipefail
          ART="${{ steps.pkg.outputs.artifact }}"
          SBOM="${ART%.tar.gz}.sbom.spdx.json"
          docker run --rm -v "$PWD:/work" -w /work anchore/syft:latest \
            packages dir:. -o spdx-json > "$SBOM"
          test -s "$SBOM" && echo "SBOM generated at $SBOM" || echo "SBOM generation skipped"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-${{ github.ref_name }}-${{ env.SHORT_SHA }}
          path: |
            ${{ steps.pkg.outputs.artifact }}
            ${{ steps.hash.outputs.sha256_file }}
            ${{ steps.pkg.outputs.artifact && steps.pkg.outputs.artifact != '' && format('{0}', steps.pkg.outputs.artifact) || '' }}.sbom.spdx.json
          if-no-files-found: warn
          retention-days: 14

      - name: Attest build provenance (GitHub attestations)
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: |
            ${{ steps.pkg.outputs.artifact }}
            ${{ steps.hash.outputs.sha256_file }}

  attach-to-release:
    name: Attach artifacts to GitHub Release and attest
    needs: build-and-attest
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      attestations: write
    steps:
      - name: Download artifacts from previous job
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-${{ github.ref_name }}-${{ needs.build-and-attest.outputs.SHORT_SHA }}
          path: dist
        continue-on-error: true

      - name: Discover artifacts (fallback if name unknown)
        id: discover
        shell: bash
        run: |
          set -euo pipefail
          # Найдем основной тарбол и хэш
          TARBALL=$(ls dist/*.tar.gz 2>/dev/null | head -n1 || true)
          HASHFILE=$(ls dist/*.sha256 2>/dev/null | head -n1 || true)
          SBOM=$(ls dist/*.sbom.spdx.json 2>/dev/null | head -n1 || true)
          echo "tarball=$TARBALL" >> "$GITHUB_OUTPUT"
          echo "hashfile=$HASHFILE" >> "$GITHUB_OUTPUT"
          echo "sbom=$SBOM" >> "$GITHUB_OUTPUT"

      - name: Upload to Release (tarball)
        if: steps.discover.outputs.tarball != ''
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ steps.discover.outputs.tarball }}
            ${{ steps.discover.outputs.hashfile }}
            ${{ steps.discover.outputs.sbom }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Attest release assets provenance
        if: steps.discover.outputs.tarball != ''
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: |
            ${{ steps.discover.outputs.tarball }}
            ${{ steps.discover.outputs.hashfile }}
            ${{ steps.discover.outputs.sbom }}
