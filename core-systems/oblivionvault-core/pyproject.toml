[build-system]
requires = [
  "hatchling>=1.27",
  "hatch-vcs>=0.4",
]
build-backend = "hatchling.build"

[project]
name = "oblivionvault-core"
dynamic = ["version"]
description = "Core libraries and CLI for OblivionVault: secure data plumbing, protocols and utilities."
readme = "README.md"
requires-python = ">=3.11"
license = { file = "LICENSE" }
authors = [
  { name = "OblivionVault Team", email = "dev@oblivionvault.example" }
]
maintainers = [
  { name = "Platform Engineering", email = "platform@oblivionvault.example" }
]
keywords = [
  "oblivionvault", "secure", "storage", "protocols", "iot", "edge", "core"
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: Apache Software License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Typing :: Typed",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries",
  "Topic :: Security :: Cryptography",
  "Topic :: System :: Distributed Computing",
]
# Минимальные runtime-зависимости (держите ядро легким; расширяйте по доменам в extras)
dependencies = [
  "anyio>=4.4,<5",
  "pydantic>=2.7,<3",
  "httpx>=0.27,<0.28",
  "rich>=13.7,<14",
]

[project.optional-dependencies]
# Запускайте: pip install -e .[dev]  или  pip install oblivionvault-core[dev]
dev = [
  "ruff>=0.5.5,<0.7",
  "mypy>=1.10,<2",
  "pytest>=8.2,<9",
  "pytest-asyncio>=0.23,<1",
  "coverage[toml]>=7.6,<8",
  "bandit>=1.7,<2",
  "types-requests>=2.31.0.6,<3",
]
test = [
  "pytest>=8.2,<9",
  "pytest-asyncio>=0.23,<1",
  "coverage[toml]>=7.6,<8",
  "hypothesis>=6.100,<7",
]
docs = [
  "mkdocs>=1.6,<2",
  "mkdocs-material>=9.5,<10",
]
cli = [
  "typer>=0.12,<1",
]

[project.urls]
Homepage = "https://github.com/your-org/oblivionvault-core"
Repository = "https://github.com/your-org/oblivionvault-core"
Issues = "https://github.com/your-org/oblivionvault-core/issues"
Documentation = "https://your-org.github.io/oblivionvault-core/"

[project.scripts]
# Консольные команды пакета
obvctl = "oblivionvault.cli:main"

[tool.hatch]
# Разрешить direct refs в зависимостях (если понадобятся)
metadata.allow-direct-references = true

[tool.hatch.version]
source = "vcs"

[tool.hatch.build]
include = [
  "src/oblivionvault/**",
  "LICENSE",
  "README.md",
]
exclude = [
  "tests/**",
  "examples/**",
  "tools/**",
  ".github/**",
  ".devcontainer/**",
]

[tool.hatch.build.targets.sdist]
include = [
  "src/**",
  "tests/**",
  "LICENSE",
  "README.md",
  "pyproject.toml",
]

[tool.hatch.build.targets.wheel]
packages = ["src/oblivionvault"]

[tool.hatch.build.hooks.vcs]
version-file = "src/oblivionvault/_version.py"
template = """
# Auto-generated by hatch-vcs
__all__ = ["__version__"]
__version__ = "{version}"
"""

# ------------------------
# Ruff: линт + форматирование
# ------------------------
[tool.ruff]
target-version = "py311"
line-length = 100
fix = true
unsafe-fixes = false
extend-exclude = ["build", "dist", ".eggs"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
docstring-code-format = true

[tool.ruff.lint]
select = [
  "E", "F", "W",        # pycodestyle/pyflakes
  "I",                  # isort
  "UP",                 # pyupgrade
  "B",                  # bugbear
  "DTZ",                # datetime tz
  "T20",                # print
  "PIE", "SIM", "C4",   # misc simp
  "RUF",                # ruff-specific
]
ignore = [
  "D",                  # docstring checks (включайте при готовности)
]
per-file-ignores = { "tests/**" = ["S101"] }

# ------------------------
# Mypy: строгая типизация
# ------------------------
[tool.mypy]
python_version = "3.11"
packages = ["oblivionvault"]
namespace_packages = true
explicit_package_bases = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_no_return = true
no_implicit_optional = true
strict_equality = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
disallow_any_generics = true
show_error_context = true
pretty = true
# Подключайте при необходимости:
# plugins = ["pydantic.mypy"]

# ------------------------
# Pytest
# ------------------------
[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --disable-warnings"
testpaths = ["tests"]
asyncio_mode = "auto"
xfail_strict = true

# ------------------------
# Coverage
# ------------------------
[tool.coverage.run]
branch = true
source = ["src/oblivionvault"]
omit = [
  "src/oblivionvault/_version.py",
  "src/oblivionvault/__main__.py",
]
parallel = true

[tool.coverage.report]
show_missing = true
skip_covered = true
precision = 1
exclude_lines = [
  "pragma: no cover",
  "if TYPE_CHECKING:",
  "if __name__ == .__main__.:",
]

[tool.coverage.html]
directory = "build/coverage_html"

# ------------------------
# Bandit (SAST)
# ------------------------
[tool.bandit]
targets = ["src/oblivionvault"]
exclude = ["tests", "build"]
skips = ["B101"]  # assert used (допустимо в некоторых местах)

# ------------------------
# Typer (CLI) — опционально через extra [cli]
# ------------------------
[tool.oblivionvault.cli]
# Конфигурация вашего CLI, если требуется (читается модулем при старте)

# ------------------------
# Профиль релиза (настройки сжатия колес и т.п.) — при необходимости
# ------------------------
[tool.hatch.envs.default]
# Позволяет hatch run <task>; не обязателен, но удобен локально
dependencies = [
  ".[dev]",
]
scripts.test = "pytest"
scripts.lint = "ruff check --fix . && ruff format . && mypy"
scripts.cover = "coverage run -m pytest && coverage report -m"
