{{- /*
  OblivionVault Core — Industrial Secret Template
  Features:
    - providers: kubernetes | sealed-secrets | external-secrets
    - strict CRD presence checks with `fail` for CRD-based providers
    - immutable secrets by default
    - checksum annotation to trigger rolling updates on pods consuming secrets
    - data, stringData, file injection (.Files.Get), tpl rendering
    - docker registry secret generation (kubernetes.io/dockerconfigjson)
    - safe name handling and consistent labels
*/ -}}

{{- /* ===================== Helpers ===================== */ -}}

{{- define "oblivionvault.name" -}}
{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" -}}
{{- end -}}

{{- define "oblivionvault.fullname" -}}
{{- $name := include "oblivionvault.name" . -}}
{{- if .Values.fullnameOverride -}}
{{- .Values.fullnameOverride | trunc 63 | trimSuffix "-" -}}
{{- else -}}
{{- printf "%s" $name | trunc 63 | trimSuffix "-" -}}
{{- end -}}
{{- end -}}

{{- define "oblivionvault.labels" -}}
app.kubernetes.io/name: {{ include "oblivionvault.name" . }}
app.kubernetes.io/instance: {{ .Release.Name }}
app.kubernetes.io/managed-by: {{ .Release.Service }}
app.kubernetes.io/part-of: oblivionvault-core
helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
{{- end -}}

{{- /* Render map with tpl + quote */ -}}
{{- define "oblivionvault.renderMapQuoted" -}}
{{- $ctx := index . 0 -}}
{{- $m := index . 1 | default dict -}}
{{- range $k, $v := $m }}
  {{ $k }}: {{ tpl (printf "%v" $v) $ctx | quote }}
{{- end }}
{{- end -}}

{{- /* Render map with tpl + b64enc */ -}}
{{- define "oblivionvault.renderMapB64" -}}
{{- $ctx := index . 0 -}}
{{- $m := index . 1 | default dict -}}
{{- range $k, $v := $m }}
  {{ $k }}: {{ tpl (printf "%v" $v) $ctx | b64enc }}
{{- end }}
{{- end -}}

{{- /* Render docker config json from values: secrets[].docker.auths */ -}}
{{- define "oblivionvault.renderDockerconfig" -}}
{{- $cfg := .cfg | default dict -}}
{{- $authsIn := $cfg.auths | default dict -}}
{{- $authsOut := dict -}}
{{- range $registry, $entry := $authsIn }}
  {{- $username := (default "" $entry.username) -}}
  {{- $password := (default "" $entry.password) -}}
  {{- $email    := (default "" $entry.email) -}}
  {{- $authStr  := printf "%s:%s" $username $password | b64enc -}}
  {{- $node := dict "username" $username "auth" $authStr -}}
  {{- if $email }}{{- $_ := set $node "email" $email -}}{{- end -}}
  {{- $_ := set $authsOut $registry $node -}}
{{- end }}
{{- toJson (dict "auths" $authsOut) -}}
{{- end -}}

{{- /* API/CRD requirements: fail early if provider requires CRD */ -}}
{{- define "oblivionvault.requireAPIs" -}}
{{- $provider := .provider -}}
{{- $ctx := .ctx -}}
{{- if eq $provider "external-secrets" -}}
  {{- if not ($ctx.Capabilities.APIVersions.Has "external-secrets.io/v1beta1/ExternalSecret") -}}
    {{- fail "external-secrets provider selected, but CRD external-secrets.io/v1beta1 (ExternalSecret) not found in cluster capabilities." -}}
  {{- end -}}
{{- end -}}
{{- if eq $provider "sealed-secrets" -}}
  {{- if not ($ctx.Capabilities.APIVersions.Has "bitnami.com/v1alpha1/SealedSecret") -}}
    {{- fail "sealed-secrets provider selected, but CRD bitnami.com/v1alpha1 (SealedSecret) not found in cluster capabilities." -}}
  {{- end -}}
{{- end -}}
{{- end -}}

{{- /* Compute checksum from a secret spec fragment (data/stringData/files) */ -}}
{{- define "oblivionvault.secretChecksum" -}}
{{- $fragment := . | default dict -}}
{{- toYaml $fragment | sha256sum -}}
{{- end -}}

{{- /* Collect items:
      - supports either .Values.secrets.items (recommended) or .Values.secrets as a list for backward-compat
*/ -}}
{{- $root := . -}}
{{- $raw := (cond
      (kindIs "map" .Values.secrets) (get .Values.secrets "items")
      (kindIs "slice" .Values.secrets) .Values.secrets
      true (list)
   ) | default (list) -}}

{{- if not (gt (len $raw) 0) -}}
{{- /* No secrets requested — render nothing */ -}}
{{- end -}}

{{- range $idx, $s := $raw }}
{{- $provider := (default (default "kubernetes" $root.Values.secrets.provider) $s.provider) -}}
{{- include "oblivionvault.requireAPIs" (dict "provider" $provider "ctx" $root) -}}

{{- /* Secret names */ -}}
{{- $baseName := include "oblivionvault.name" $root -}}
{{- $short := (default (printf "%s-%s" $baseName $s.name) $s.fullName) | trunc 63 | trimSuffix "-" -}}
{{- $ns := $root.Release.Namespace -}}

{{- if eq $provider "external-secrets" }}
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ $short }}
  namespace: {{ $ns }}
  labels:
{{ include "oblivionvault.labels" $root | indent 4 }}
  {{- if $s.labels }}
{{ toYaml $s.labels | indent 4 }}
  {{- end }}
  annotations:
  {{- if $s.annotations }}
{{ toYaml $s.annotations | indent 4 }}
  {{- else }}
    {}
  {{- end }}
spec:
  refreshInterval: {{ default "1h" $s.refreshInterval }}
  secretStoreRef:
    kind: {{ default (dig "externalSecrets" "secretStoreRef" "kind" $root.Values "ClusterSecretStore") $s.secretStoreRef.kind }}
    name: {{ default (dig "externalSecrets" "secretStoreRef" "name" $root.Values "default") $s.secretStoreRef.name | quote }}
  target:
    name: {{ default $short $s.targetName | trunc 63 | trimSuffix "-" }}
    creationPolicy: {{ default "Owner" $s.creationPolicy }}
    deletionPolicy: {{ default "Retain" $s.deletionPolicy }}
    template:
      type: {{ default "Opaque" $s.type }}
      metadata:
        labels:
{{ include "oblivionvault.labels" $root | indent 10 }}
        {{- if $s.targetLabels }}
{{ toYaml $s.targetLabels | indent 10 }}
        {{- end }}
  {{- if $s.data }}
  data:
  {{- range $s.data }}
  - secretKey: {{ .secretKey }}
    remoteRef:
      key: {{ required "external-secrets: data[].remoteRef.key is required" .remoteRef.key | quote }}
      {{- if .remoteRef.property }}
      property: {{ .remoteRef.property | quote }}
      {{- end }}
      {{- if .remoteRef.version }}
      version: {{ .remoteRef.version | quote }}
      {{- end }}
      {{- if .remoteRef.decodingStrategy }}
      decodingStrategy: {{ .remoteRef.decodingStrategy | quote }}
      {{- end }}
  {{- end }}
  {{- end }}

{{- else if eq $provider "sealed-secrets" }}
---
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: {{ $short }}
  namespace: {{ $ns }}
  labels:
{{ include "oblivionvault.labels" $root | indent 4 }}
  {{- if $s.labels }}
{{ toYaml $s.labels | indent 4 }}
  {{- end }}
  annotations:
  {{- if $s.annotations }}
{{ toYaml $s.annotations | indent 4 }}
  {{- else }}
    {}
  {{- end }}
spec:
  template:
    metadata:
      labels:
{{ include "oblivionvault.labels" $root | indent 8 }}
    type: {{ default "Opaque" $s.type }}
  {{- if not $s.encryptedData }}
  {{- fail (printf "sealed-secrets: encryptedData is required for secret %q" $short) }}
  {{- end }}
  encryptedData:
  {{- range $k, $v := $s.encryptedData }}
    {{ $k }}: {{ $v | quote }}
  {{- end }}

{{- else }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $short }}
  namespace: {{ $ns }}
  labels:
{{ include "oblivionvault.labels" $root | indent 4 }}
  {{- if $s.labels }}
{{ toYaml $s.labels | indent 4 }}
  {{- end }}
  annotations:
    secret.kubernetes.io/managed-by: "helm"
    {{- if $s.annotations }}
{{ toYaml $s.annotations | indent 4 }}
    {{- end }}
    {{- if $root.Values.podReload.checksumAnnotations }}
    checksum/secret: {{- $checksumSrc := dict -}}
      {{- $_ := set $checksumSrc "data" ($s.data    | default dict) -}}
      {{- $_ := set $checksumSrc "stringData" ($s.stringData | default dict) -}}
      {{- $_ := set $checksumSrc "files" ($s.files  | default list) -}}
      {{- include "oblivionvault.secretChecksum" $checksumSrc | quote }}
    {{- end }}
type: {{ default "Opaque" $s.type }}
immutable: {{ default true $s.immutable }}

{{- /* Special-case dockerconfigjson if docker section is provided */ -}}
{{- if and (eq (default "Opaque" $s.type) "kubernetes.io/dockerconfigjson") $s.docker }}
data:
  .dockerconfigjson: {{ include "oblivionvault.renderDockerconfig" (dict "cfg" $s.docker) | b64enc }}
{{- else }}

{{- if $s.data }}
data:
{{ include "oblivionvault.renderMapB64" (list $root $s.data) | indent 2 }}
{{- end }}

{{- if or $s.stringData $s.files }}
stringData:
  {{- if $s.stringData }}
{{ include "oblivionvault.renderMapQuoted" (list $root $s.stringData) | indent 2 }}
  {{- end }}
  {{- if $s.files }}
  {{- range $f := $s.files }}
  {{- $key := required (printf "files[].key is required for secret %s" $short) $f.key }}
  {{ $key }}: |
    {{- if $f.path }}
    {{- $content := $root.Files.Get $f.path -}}
    {{- if $f.trim }}{{- $content = $content | trim -}}{{- end }}
    {{- if $f.tpl }}
{{ tpl $content $root | nindent 4 }}
    {{- else }}
{{ $content | nindent 4 }}
    {{- end }}
    {{- else if hasKey $f "value" }}
{{ (printf "%v" $f.value) | nindent 4 }}
    {{- else }}
    {{- fail (printf "Either files[].path or files[].value must be set for key %q in secret %q" $key $short) }}
    {{- end }}
  {{- end }}
  {{- end }}
{{- end }} {{/* dockerconfigjson else */}}

{{- end }} {{/* provider switch */}}

{{- end }} {{/* range secrets */}}
