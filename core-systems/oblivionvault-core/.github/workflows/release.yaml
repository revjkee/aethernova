name: Release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      prerelease:
        description: Mark GitHub Release as prerelease
        type: boolean
        required: false
        default: false

# Минимально необходимые разрешения по умолчанию для всех jobs
permissions:
  contents: write         # создать релиз и загрузить артефакты
  id-token: write         # OIDC для PyPI и Sigstore
  attestations: write     # SLSA provenance
  actions: read

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

env:
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PYTHONUNBUFFERED: "1"

jobs:
  test:
    name: Lint, type-check, tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0    # hatch-vcs/теги нужны в последующих стадиях

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install package with dev extras
        run: |
          python -m pip install -U pip
          python -m pip install ".[dev]"
      - name: Ruff lint
        run: ruff check .
      - name: Ruff format check
        run: ruff format --check .
      - name: Mypy
        run: mypy
      - name: Pytest with coverage
        run: |
          coverage run -m pytest
          coverage xml
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: coverage.xml
          if-no-files-found: error
          retention-days: 7

  build:
    name: Build sdist/wheel + SBOM + twine check
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (with tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0    # необходим для hatch-vcs
          persist-credentials: false

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install build tooling
        run: |
          python -m pip install -U pip
          python -m pip install build twine hatchling hatch-vcs

      - name: Build artifacts
        run: python -m build --sdist --wheel --outdir dist

      - name: Twine check
        run: python -m twine check dist/*

      - name: Generate SBOM (SPDX JSON)
        uses: anchore/sbom-action@v0
        with:
          path: .
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*
          if-no-files-found: error
          retention-days: 14

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json
          if-no-files-found: error
          retention-days: 30

      - name: Attest build provenance (SLSA) for artifacts
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: "dist/*"

  sign:
    name: Sigstore sign artifacts
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Set up Python 3.12 (for sigstore wrapper)
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Sigstore sign (OIDC)
        uses: sigstore/gh-action-sigstore-python@v2
        with:
          inputs: "dist/*"
          # создаёт .sig и .crt рядом с артефактами

      - name: Upload signed artifacts (w/ sidecar .sig/.crt)
        uses: actions/upload-artifact@v4
        with:
          name: dist-signed
          path: |
            dist/*
          if-no-files-found: error
          retention-days: 14

  pypi-publish:
    name: Publish to PyPI (Trusted Publisher)
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build]   # публикация не зависит от подписания
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/oblivionvault-core
    steps:
      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Publish via OIDC
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          print-hash: true
          verbose: true
          # Требуется предварительная настройка Trusted Publishers в проекте PyPI

  github-release:
    name: Create GitHub Release and upload assets
    if: startsWith(github.ref, 'refs/tags/')
    needs: [sign, build, pypi-publish]
    runs-on: ubuntu-latest
    steps:
      - name: Download signed dist
        uses: actions/download-artifact@v4
        with:
          name: dist-signed
          path: upload/dist
      - name: Download SBOM
        uses: actions/download-artifact@v4
        with:
          name: sbom
          path: upload

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: ${{ inputs.prerelease }}
          generate_release_notes: true
          files: |
            upload/dist/*
            upload/sbom.spdx.json
