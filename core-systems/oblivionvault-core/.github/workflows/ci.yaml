name: CI

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ '**' ]
  schedule:
    - cron: '17 2 * * *'   # ежедневные проверки безопасности
  workflow_dispatch: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  PYTHON_DEFAULT: '3.12'
  NODE_DEFAULT: '20'
  GO_DEFAULT: '1.22'
  DOCKER_PLATFORMS: linux/amd64
  DOCKERFILE: Dockerfile
  IMAGE_NAME: ghcr.io/${{ github.repository }}

jobs:
  preflight:
    name: Preflight
    runs-on: ubuntu-24.04
    outputs:
      has_python: ${{ steps.detect.outputs.has_python }}
      has_node:   ${{ steps.detect.outputs.has_node }}
      has_go:     ${{ steps.detect.outputs.has_go }}
      has_docker: ${{ steps.detect.outputs.has_docker }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: detect
        name: Detect stacks
        run: |
          has_python=$([ -n "$(git ls-files '**/pyproject.toml' 'requirements*.txt' 'setup.cfg' 'setup.py' 2>/dev/null)" ] && echo true || echo false)
          has_node=$([ -n "$(git ls-files 'package.json' 2>/dev/null)" ] && echo true || echo false)
          has_go=$([ -n "$(git ls-files 'go.mod' 2>/dev/null)" ] && echo true || echo false)
          has_docker=$([ -n "$(git ls-files '${DOCKERFILE}' 'docker/**' 2>/dev/null)" ] && echo true || echo false)
          {
            echo "has_python=$has_python"
            echo "has_node=$has_node"
            echo "has_go=$has_go"
            echo "has_docker=$has_docker"
          } >> "$GITHUB_OUTPUT"

  lint-python:
    name: Lint Python
    needs: preflight
    if: needs.preflight.outputs.has_python == 'true'
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_DEFAULT }}
          cache: 'pip'

      - name: Install linters
        run: |
          python -m pip install -U pip wheel setuptools
          pip install black==24.8.0 isort==5.13.2 flake8==7.1.1 mypy==1.11.1

      - name: Black
        run: black --check .
      - name: isort
        run: isort --check-only .
      - name: Flake8
        run: flake8 .
      - name: Mypy (best-effort)
        continue-on-error: true
        run: |
          if [ -f pyproject.toml ] || [ -f mypy.ini ] || [ -f setup.cfg ]; then
            mypy .
          else
            echo "No mypy config, skipping"; fi

  test-python:
    name: Test Python (${{ matrix.py }})
    needs: preflight
    if: needs.preflight.outputs.has_python == 'true'
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        py: [ '3.10', '3.11', '3.12' ]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install -U pip wheel setuptools
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          # fallback для проектов без requirements
          pip install pytest pytest-cov

      - name: Run tests
        run: |
          mkdir -p reports
          pytest -q --disable-warnings --maxfail=1 \
            --cov=. --cov-report=xml:reports/coverage.xml --junitxml=reports/pytest-${{ matrix.py }}.xml

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-python-${{ matrix.py }}
          path: reports/coverage.xml
          if-no-files-found: warn
          retention-days: 7

      - name: Upload JUnit
        uses: actions/upload-artifact@v4
        with:
          name: junit-python-${{ matrix.py }}
          path: reports/pytest-${{ matrix.py }}.xml
          if-no-files-found: warn
          retention-days: 7

  lint-node:
    name: Lint Node
    needs: preflight
    if: needs.preflight.outputs.has_node == 'true'
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_DEFAULT }}
          cache: 'npm'

      - name: Install deps
        run: |
          if [ -f package-lock.json ]; then npm ci; \
          elif [ -f yarn.lock ]; then npm -g i yarn && yarn install --frozen-lockfile; \
          else npm i; fi

      - name: Lint
        run: |
          npm run -s lint || echo "no lint script, skipping"

  test-node:
    name: Test Node
    needs: preflight
    if: needs.preflight.outputs.has_node == 'true'
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_DEFAULT }}
          cache: 'npm'

      - name: Install deps
        run: |
          if [ -f package-lock.json ]; then npm ci; \
          elif [ -f yarn.lock ]; then npm -g i yarn && yarn install --frozen-lockfile; \
          else npm i; fi

      - name: Test
        run: |
          mkdir -p reports
          npm test --silent --if-present || echo "no tests"
          # Популярные раннеры сами генерируют junit/coverage; при необходимости добавьте репортеры.

  lint-go:
    name: Lint Go
    needs: preflight
    if: needs.preflight.outputs.has_go == 'true'
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_DEFAULT }}

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.59.1
          args: --timeout=5m

  test-go:
    name: Test Go
    needs: preflight
    if: needs.preflight.outputs.has_go == 'true'
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_DEFAULT }}

      - name: Test
        run: |
          mkdir -p reports
          go test ./... -race -coverprofile=reports/coverage.out -covermode=atomic

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-go
          path: reports/coverage.out
          retention-days: 7

  security:
    name: Security Scan and SBOM
    needs: [ preflight, test-python, test-node, test-go ]
    if: always()
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Generate SBOM (CycloneDX)
        uses: anchore/sbom-action@v0
        with:
          path: .
          format: cyclonedx-json
          output-file: sbom.cdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-cyclonedx
          path: sbom.cdx.json
          retention-days: 7

      - name: Trivy FS scan (SARIF)
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-fs.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif

  codeql:
    name: CodeQL
    needs: preflight
    if: github.event_name != 'pull_request' || github.event.pull_request.draft == false
    runs-on: ubuntu-24.04
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: github/codeql-action/init@v3
        with:
          languages: python, javascript, go
      - uses: github/codeql-action/autobuild@v3
      - uses: github/codeql-action/analyze@v3

  docker:
    name: Docker Build and Push
    needs: [ preflight, test-python, test-node, test-go, security ]
    if: needs.preflight.outputs.has_docker == 'true'
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=sha-${{ github.sha }}
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: Build (no push for PR)
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ env.DOCKERFILE }}
          platforms: ${{ env.DOCKER_PLATFORMS }}
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Push
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ env.DOCKERFILE }}
          platforms: ${{ env.DOCKER_PLATFORMS }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Trivy Image scan (SARIF)
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
          format: 'sarif'
          output: 'trivy-image.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          ignore-unfixed: true

      - name: Upload SARIF (image)
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif
