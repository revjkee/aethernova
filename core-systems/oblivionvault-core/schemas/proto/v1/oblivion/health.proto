syntax = "proto3";

package oblivion.v1;

option go_package = "github.com/aethernova/oblivionvault-core/schemas/gen/go/oblivion/v1;oblivionv1";
option java_multiple_files = true;
option java_package = "io.aethernova.oblivion.v1";
option java_outer_classname = "HealthProto";
option csharp_namespace = "Aethernova.Oblivion.V1";
option ruby_package = "Aethernova::Oblivion::V1";
option php_namespace = "Aethernova\\Oblivion\\V1";

// Well-known types
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";

// ----------------------------------------------------------------------------
// Serving statuses for health reporting
// ----------------------------------------------------------------------------
enum ServingStatus {
  SERVING_STATUS_UNSPECIFIED = 0; // Unknown/unspecified
  SERVING_STATUS_SERVING     = 1; // Fully operational
  SERVING_STATUS_NOT_SERVING = 2; // Not operational
  SERVING_STATUS_SERVICE_UNKNOWN = 3; // Target service unknown to this server
  SERVING_STATUS_DEGRADED    = 4; // Degraded (partial functionality, SLO below target)
  SERVING_STATUS_MAINTENANCE = 5; // Explicit maintenance window
  SERVING_STATUS_STARTING    = 6; // Starting / warming up
  SERVING_STATUS_STOPPING    = 7; // Shutting down / draining
}

// Type of dependency (for component inventory)
enum DependencyType {
  DEP_TYPE_UNSPECIFIED = 0;
  DEP_TYPE_DATABASE    = 1;
  DEP_TYPE_MESSAGE_BUS = 2;
  DEP_TYPE_CACHE       = 3;
  DEP_TYPE_STORAGE     = 4;
  DEP_TYPE_EXTERNAL_API= 5;
  DEP_TYPE_IDP         = 6;
  DEP_TYPE_INTERNAL_SVC= 7;
  DEP_TYPE_OTHER       = 8;
}

// Generic severity for conditions
enum Severity {
  SEVERITY_UNSPECIFIED = 0;
  SEVERITY_INFO        = 1;
  SEVERITY_WARNING     = 2;
  SEVERITY_CRITICAL    = 3;
}

// ----------------------------------------------------------------------------
// Common messages
// ----------------------------------------------------------------------------
message KeyValue {
  string key   = 1;
  string value = 2;
}

message ErrorInfo {
  // Machine-readable error code (application-defined)
  int32 code = 1;
  // Short error message
  string message = 2;
  // Last occurrence timestamp
  google.protobuf.Timestamp last_occurrence = 3;
  // Optional details (opaque string, JSON, etc.)
  string details = 4;
}

message LatencyQuantiles {
  google.protobuf.Duration p50 = 1;
  google.protobuf.Duration p95 = 2;
  google.protobuf.Duration p99 = 3;
}

message Condition {
  string type = 1;         // e.g. "DB_CONNECTED", "MIGRATIONS_APPLIED"
  bool ok = 2;             // pass/fail for the condition
  Severity severity = 3;   // severity if not ok
  string message = 4;      // human-readable explanation
  // Optional time-to-live (how long result remains valid)
  google.protobuf.Duration ttl = 5;
  // When this condition was checked
  google.protobuf.Timestamp checked_at = 6;

  // Reserved for future: owners, remediation, runbook links
  reserved 7, 8, 9;
}

message ComponentStatus {
  string name = 1;                    // component logical name
  string kind = 2;                    // e.g. "postgres", "kafka", "redis"
  string endpoint = 3;                // connection string / URL
  ServingStatus status = 4;
  LatencyQuantiles latency = 5;       // recent quantiles
  ErrorInfo last_error = 6;           // last error if any
  map<string, string> labels = 7;     // arbitrary labels (e.g., region=eu-west-1)
  repeated Condition conditions = 8;  // detailed checks within component

  // Future fields: capacity utilization %, queue depth, etc.
  reserved 9, 10, 11;
}

message ProbeStatus {
  ServingStatus status = 1;                 // overall status
  int32 code = 2;                           // application-defined status code
  string reason = 3;                        // short reason
  string message = 4;                       // verbose message
  repeated Condition conditions = 5;        // probe-level conditions
  map<string, ComponentStatus> components = 6; // per-component results
  google.protobuf.Timestamp checked_at = 7;

  // Observability correlation
  string trace_id = 8;
  string span_id = 9;
  string correlation_id = 10;

  // Future fields: SLO impact, error budget remaining, etc.
  reserved 11, 12, 13;
}

// ----------------------------------------------------------------------------
// Build / Version info
// ----------------------------------------------------------------------------
message ModuleInfo {
  string name = 1;
  string version = 2;
  string checksum = 3; // optional module checksum
  map<string, string> metadata = 4;
}

message BuildInfo {
  string version = 1;              // semver, e.g. 1.2.3
  string git_commit = 2;
  string git_branch = 3;
  string build_tag = 4;            // CI tag / container tag
  google.protobuf.Timestamp build_time = 5;
  string compiler = 6;             // e.g. go1.22, rustc 1.79
  repeated ModuleInfo modules = 7; // library/module set
  string platform = 8;             // e.g. linux/amd64
  map<string, string> metadata = 9;
}

// ----------------------------------------------------------------------------
// Requests / Responses
// ----------------------------------------------------------------------------
message HealthCheckRequest {
  // Target service logical name ("", "*", or specific)
  string service = 1;
  // Optional: only these components (names) will be checked
  repeated string components = 2;
  // Additional selector labels (env=prod, region=eu, etc.)
  map<string, string> labels = 3;

  // Run deep checks (may be slower)
  bool deep = 4;
  // Timeout budget for the whole probe
  google.protobuf.Duration timeout = 5;

  // Future fields: tenant id, scope, auth context
  reserved 6, 7, 8;
}

message HealthCheckResponse {
  string service = 1;
  ProbeStatus probe = 2;
  BuildInfo build = 3;
}

message WatchRequest {
  // Same filters as HealthCheckRequest
  HealthCheckRequest check = 1;
  // Suggested streaming interval (server may clamp)
  google.protobuf.Duration interval = 2;
}

message LivenessRequest {
  // Optional: component whitelist (fast path)
  repeated string components = 1;
}

message ReadinessRequest {
  // Optional: require dependencies (DB/migrations/queues) to be ready
  bool require_dependencies = 1;
  repeated string components = 2;
}

message StartupRequest {
  // Optional: check that initial bootstrap steps finished
  bool require_bootstrap = 1;
}

message ProbeReply {
  ProbeStatus probe = 1;
}

message DependenciesRequest {
  // Optional filter by type
  repeated DependencyType types = 1;
}

message Dependency {
  string name = 1;
  DependencyType type = 2;
  string endpoint = 3;
  ServingStatus status = 4;
  LatencyQuantiles latency = 5;
  ErrorInfo last_error = 6;
  map<string, string> labels = 7;
}

message DependenciesResponse {
  repeated Dependency items = 1;
  google.protobuf.Timestamp generated_at = 2;
}

message PingRequest {
  string payload = 1; // opaque payload to echo back
  string trace_id = 2;
}

message PongResponse {
  string payload = 1;
  google.protobuf.Timestamp server_time = 2;
  string trace_id = 3;
}

message EchoRequest {
  string message = 1;
}

message EchoResponse {
  string message = 1;
}

message MetricsRequest {
  // If true, server returns Prometheus exposition (text/plain; version=0.0.4)
  bool prometheus_text = 1;
  // Optional include-only metric names/prefixes
  repeated string names = 2;
}

message MetricsResponse {
  bytes content = 1;
  string content_type = 2; // e.g. "text/plain; version=0.0.4" or "application/protobuf"
  uint64 size_bytes = 3;
}

// ----------------------------------------------------------------------------
// Health service
// ----------------------------------------------------------------------------
service HealthService {
  // Consolidated health check
  rpc Check(HealthCheckRequest) returns (HealthCheckResponse);

  // Server-streaming health updates (polling/push hybrid)
  rpc Watch(WatchRequest) returns (stream HealthCheckResponse);

  // Probes
  rpc Liveness(LivenessRequest) returns (ProbeReply);
  rpc Readiness(ReadinessRequest) returns (ProbeReply);
  rpc Startup(StartupRequest) returns (ProbeReply);

  // Version/build info
  rpc Version(google.protobuf.Empty) returns (BuildInfo);

  // Dependency inventory and statuses
  rpc Dependencies(DependenciesRequest) returns (DependenciesResponse);

  // Diagnostics
  rpc Ping(PingRequest) returns (PongResponse);
  rpc Echo(EchoRequest) returns (EchoResponse);

  // Metrics export (optional convenience endpoint)
  rpc Metrics(MetricsRequest) returns (MetricsResponse);
}
