syntax = "proto3";

package oblivion.v1;

option go_package = "github.com/aethernova/oblivionvault-core/schemas/gen/go/oblivion/v1;oblivionv1";
option java_multiple_files = true;
option java_package = "io.aethernova.oblivion.v1";
option java_outer_classname = "EvidenceProto";
option csharp_namespace = "Aethernova.Oblivion.V1";
option ruby_package = "Aethernova::Oblivion::V1";
option php_namespace = "Aethernova\\Oblivion\\V1";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";

// -----------------------------------------------------------------------------
// ENUMS
// -----------------------------------------------------------------------------
enum EvidenceType {
  EVIDENCE_TYPE_UNSPECIFIED     = 0;
  EVIDENCE_TYPE_SBOM            = 1;  // SPDX / CycloneDX
  EVIDENCE_TYPE_BUILD_PROVENANCE= 2;  // SLSA provenance
  EVIDENCE_TYPE_IN_TOTO_LINK    = 3;  // in-toto link
  EVIDENCE_TYPE_TEST_REPORT     = 4;  // unit/qa/security test
  EVIDENCE_TYPE_VULN_REPORT     = 5;  // vulnerability scan
  EVIDENCE_TYPE_AUDIT_LOG       = 6;  // audit/siem log snapshot
  EVIDENCE_TYPE_RUNTIME_EVENT   = 7;  // runtime attestation/event
  EVIDENCE_TYPE_CONFIG_SNAPSHOT = 8;  // config dump
  EVIDENCE_TYPE_POLICY_ATTEST   = 9;  // policy compliance attest
  EVIDENCE_TYPE_CERT_CHAIN      = 10; // certificate chain
  EVIDENCE_TYPE_TIMESTAMP_TOKEN = 11; // RFC3161 token
  EVIDENCE_TYPE_SIGNED_STATEMENT= 12; // generic signed statement (DSSE)
  EVIDENCE_TYPE_SOURCE_ARCHIVE  = 13; // source code archive
  EVIDENCE_TYPE_IMAGE_MANIFEST  = 14; // container image manifest
  EVIDENCE_TYPE_BINARY_ARTIFACT = 15; // compiled binary
}

enum HashAlgorithm {
  HASH_ALG_UNSPECIFIED = 0;
  HASH_ALG_SHA256      = 1;
  HASH_ALG_SHA512      = 2;
  HASH_ALG_SHA3_256    = 3;
  HASH_ALG_BLAKE3      = 4;
}

enum SignatureAlgorithm {
  SIG_ALG_UNSPECIFIED   = 0;
  SIG_ALG_RSA_PSS_SHA256= 1;
  SIG_ALG_RSA_PSS_SHA512= 2;
  SIG_ALG_ECDSA_P256_SHA256 = 3;
  SIG_ALG_ECDSA_P384_SHA384 = 4;
  SIG_ALG_ED25519       = 5;
}

enum KeyType {
  KEY_TYPE_UNSPECIFIED = 0;
  KEY_TYPE_X509        = 1; // X.509 (PEM/DER)
  KEY_TYPE_PGP         = 2;
  KEY_TYPE_SSH         = 3;
  KEY_TYPE_OIDC        = 4; // OIDC identity (sigstore)
  KEY_TYPE_KMS         = 5; // cloud KMS
  KEY_TYPE_TPM         = 6; // hardware TPM
  KEY_TYPE_DID         = 7; // decentralized identifier
}

enum VerificationStatus {
  VERIF_STATUS_UNSPECIFIED = 0;
  VERIF_STATUS_PASSED      = 1;
  VERIF_STATUS_FAILED      = 2;
  VERIF_STATUS_INCONCLUSIVE= 3;
}

enum PolicyOutcome {
  POLICY_OUTCOME_UNSPECIFIED = 0;
  POLICY_OUTCOME_PASS        = 1;
  POLICY_OUTCOME_WARN        = 2;
  POLICY_OUTCOME_FAIL        = 3;
  POLICY_OUTCOME_ERROR       = 4;
  POLICY_OUTCOME_SKIP        = 5;
}

enum Severity {
  SEVERITY_UNSPECIFIED = 0;
  SEVERITY_INFO        = 1;
  SEVERITY_WARNING     = 2;
  SEVERITY_CRITICAL    = 3;
}

enum CustodyAction {
  CUSTODY_ACTION_UNSPECIFIED = 0;
  CUSTODY_ACTION_CREATED     = 1;
  CUSTODY_ACTION_TRANSFERRED = 2;
  CUSTODY_ACTION_TRANSFORMED = 3;
  CUSTODY_ACTION_VERIFIED    = 4;
  CUSTODY_ACTION_ARCHIVED    = 5;
  CUSTODY_ACTION_DELETED     = 6;
  CUSTODY_ACTION_ACCESSED    = 7;
}

// -----------------------------------------------------------------------------
// COMMON TYPES
// -----------------------------------------------------------------------------
message ErrorInfo {
  int32 code = 1;
  string message = 2;
  google.protobuf.Timestamp last_occurrence = 3;
  string details = 4; // optional JSON/text
}

message Digest {
  HashAlgorithm alg = 1;
  bytes value = 2;             // raw digest bytes
  string multibase = 3;        // optional multibase/multihash string
}

message ArtifactRef {
  string uri = 1;                 // e.g. s3://..., oci://..., ipfs://..., file://...
  repeated Digest digests = 2;    // content-address
  string media_type = 3;          // RFC 6838
  uint64 size_bytes = 4;
  map<string,string> annotations = 5;
}

message Identity {
  string subject = 1;             // subject (CN, email, did, etc.)
  string issuer = 2;              // issuer (CA/OIDC/KMS)
  repeated string san = 3;        // Subject Alternative Names
  string spiffe_id = 4;
  string email = 5;
  string account_id = 6;          // cloud account/project, etc.
  map<string,string> attributes = 7;
}

message Signature {
  SignatureAlgorithm alg = 1;
  KeyType key_type = 2;
  string key_id = 3;                // key identifier
  bytes public_key_hint = 4;        // optional (DER/PEM snippet)
  bytes signature = 5;

  // X.509 chain (leaf first)
  repeated bytes cert_chain = 6;
  // Transparency log data (e.g., Rekor)
  string transparency_log_uri = 7;
  uint64 tlog_index = 8;
  Digest tlog_entry_hash = 9;
}

message TimestampToken {
  // RFC3161 token
  bytes rfc3161_token = 1;
  repeated bytes tsa_cert_chain = 2;

  // Optional blockchain anchoring
  string chain_id = 10;        // e.g., "ethereum:1", "polygon:137"
  string network = 11;         // mainnet/testnet
  uint64 block_height = 12;
  string tx_id = 13;
}

message Envelope {
  // DSSE-compatible structure
  string payload_type = 1;   // e.g., "application/vnd.in-toto+json", "application/slsa+json"
  bytes payload = 2;         // raw payload bytes
  repeated Signature signatures = 3;
  TimestampToken timestamp = 4;
}

message ChainOfCustodyEvent {
  string id = 1;
  CustodyAction action = 2;
  google.protobuf.Timestamp at = 3;
  Identity actor = 4;
  string location = 5;            // logical/geo location
  string tool = 6;                // tool name/version
  google.protobuf.Struct details = 7; // JSON details
  Signature signature = 8;
}

message PolicyCheck {
  string name = 1;
  VerificationStatus status = 2;
  Severity severity = 3;
  string reason = 4;
  google.protobuf.Struct details = 5;
}

message PolicyResult {
  string policy_name = 1;
  string policy_version = 2;
  PolicyOutcome outcome = 3;
  repeated PolicyCheck checks = 4;
  string reason = 5;
}

message VerificationResult {
  string evidence_id = 1;
  VerificationStatus status = 2;
  bool signature_verified = 3;
  bool certificate_valid = 4;
  bool transparency_log_verified = 5;
  bool timestamp_verified = 6;
  bool digest_matched = 7;
  repeated PolicyResult policies = 8;
  repeated ErrorInfo errors = 9;

  // Validity window if present in signing artifacts
  google.protobuf.Timestamp not_before = 10;
  google.protobuf.Timestamp not_after  = 11;

  // Correlation for observability
  string trace_id = 20;
  string span_id = 21;
  string correlation_id = 22;
}

// -----------------------------------------------------------------------------
// EVIDENCE CORE
// -----------------------------------------------------------------------------
message Evidence {
  string id = 1;                         // stable identifier (UUID/ULID)
  EvidenceType type = 2;
  string category = 3;                    // free-form category/class
  ArtifactRef subject = 4;                // main subject artifact
  repeated ArtifactRef related = 5;       // additional related artifacts

  google.protobuf.Timestamp created_at = 6;
  Identity producer = 7;                  // who produced the evidence
  map<string,string> labels = 8;          // labels for selection
  google.protobuf.Struct claims = 9;      // structured claims (JSON)

  Envelope envelope = 10;                 // signed payload + signatures/timestamp
  repeated ArtifactRef attachments = 11;  // side artifacts (optional)

  repeated ChainOfCustodyEvent custody = 20;
  string description = 21;

  // Future fields reserved
  reserved 30, 31, 32;
}

message EvidenceRecord {
  Evidence evidence = 1;
  VerificationResult verification = 2;
}

// Grouped transfer unit
message EvidenceBundle {
  repeated Evidence items = 1;
}

// -----------------------------------------------------------------------------
// SERVICE API
// -----------------------------------------------------------------------------
message PutEvidenceResponse {
  repeated string ids = 1;
}

message GetEvidenceRequest {
  string id = 1;
  bool include_payload = 2;  // include envelope.payload
}

message ListEvidenceRequest {
  // Filters
  repeated EvidenceType types = 1;
  map<string,string> label_selector = 2;     // exact match
  string subject_uri_prefix = 3;             // prefix match on subject.uri
  google.protobuf.Timestamp created_after = 4;
  google.protobuf.Timestamp created_before = 5;

  // Pagination
  int32 page_size = 10;
  string page_token = 11;
}

message ListEvidenceResponse {
  repeated EvidenceRecord records = 1;
  string next_page_token = 2;
}

message WatchEvidenceRequest {
  // Optional narrow filters
  repeated EvidenceType types = 1;
  map<string,string> label_selector = 2;
}

enum EvidenceEventType {
  EVIDENCE_EVENT_TYPE_UNSPECIFIED = 0;
  EVIDENCE_EVENT_ADDED            = 1;
  EVIDENCE_EVENT_UPDATED          = 2;
  EVIDENCE_EVENT_VERIFIED         = 3;
  EVIDENCE_EVENT_DELETED          = 4;
}

message EvidenceEvent {
  EvidenceEventType type = 1;
  EvidenceRecord record = 2;
}

message VerifyEvidenceRequest {
  oneof target {
    string id = 1;                // verify stored evidence by id
    EvidenceBundle bundle = 2;    // or verify ad-hoc bundle
  }
  // Optional policy set name/version (resolved server-side)
  string policy_set = 10;
  string policy_version = 11;
}

message VerifyEvidenceResponse {
  repeated VerificationResult results = 1;
}

// Attachment streaming
message UploadAttachmentMetadata {
  ArtifactRef artifact = 1;     // where server should store/identify
  string evidence_id = 2;       // optional, link to existing evidence
}

message UploadChunk {
  oneof msg {
    UploadAttachmentMetadata meta = 1;
    bytes data = 2;
  }
}

message UploadAttachmentResponse {
  ArtifactRef stored = 1;
}

message DownloadAttachmentRequest {
  ArtifactRef artifact = 1;
}

message DownloadChunk {
  bytes data = 1;
}

// Attestation helper (server-side signing if permitted)
message AttestRequest {
  string payload_type = 1;
  bytes payload = 2;
  // Key selection hints (server-configured)
  string key_selector = 3;
  Identity signer_hint = 4;
}

message AttestResponse {
  Envelope envelope = 1;
}

// -----------------------------------------------------------------------------

service EvidenceService {
  rpc PutEvidence (EvidenceBundle) returns (PutEvidenceResponse);
  rpc GetEvidence (GetEvidenceRequest) returns (EvidenceRecord);
  rpc ListEvidence (ListEvidenceRequest) returns (ListEvidenceResponse);
  rpc WatchEvidence (WatchEvidenceRequest) returns (stream EvidenceEvent);

  rpc VerifyEvidence (VerifyEvidenceRequest) returns (VerifyEvidenceResponse);

  // Attachments (chunked upload/download)
  rpc UploadAttachment (stream UploadChunk) returns (UploadAttachmentResponse);
  rpc DownloadAttachment (DownloadAttachmentRequest) returns (stream DownloadChunk);

  // Convenience: create a signed envelope from raw payload
  rpc Attest (AttestRequest) returns (AttestResponse);
}
