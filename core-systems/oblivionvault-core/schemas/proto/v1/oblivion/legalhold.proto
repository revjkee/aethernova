// File: oblivionvault-core/schemas/proto/v1/oblivion/legalhold.proto
syntax = "proto3";

package oblivion.v1;

option go_package        = "github.com/yourorg/oblivionvault-core/gen/go/oblivion/v1;oblivionv1";
option java_multiple_files = true;
option java_package      = "io.oblivion.v1";
option csharp_namespace  = "Oblivion.V1";
option php_namespace     = "Oblivion\\V1";
option ruby_package      = "Oblivion::V1";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";
import "google/longrunning/operations.proto";
import "google/api/annotations.proto";
import "google/api/resource.proto";

// ---------------------------------------------
// RESOURCE: LegalHold
// ---------------------------------------------
message LegalHold {
  option (google.api.resource) = {
    type: "oblivion.googleapis.com/LegalHold"
    pattern: "projects/{project}/tenants/{tenant}/legalHolds/{legal_hold}"
  };

  // Resource name, e.g.:
  // projects/{project}/tenants/{tenant}/legalHolds/{legal_hold}
  string name = 1;

  // Короткое человекочитаемое имя.
  string display_name = 2;

  // Описание/контекст применения.
  string description = 3;

  // Текущий статус удержания.
  LegalHoldStatus status = 4;

  // Спецификация удержания: основание, область, политика.
  LegalHoldSpec spec = 5;

  // Состояние системы по данному удержанию (агрегаты/последняя оценка).
  LegalHoldState state = 6;

  // Оптимистичная конкуррентность.
  // Меняется при каждом серверном обновлении ресурса.
  string etag = 7;

  // Аудитные метаданные.
  AuditMetadata audit = 8;

  // Резерв под будущее расширение.
  reserved 9, 10;
}

// Cтатусы Legal Hold.
enum LegalHoldStatus {
  LEGAL_HOLD_STATUS_UNSPECIFIED = 0;
  LEGAL_HOLD_STATUS_SCHEDULED   = 1;  // назначен, но ещё не активен
  LEGAL_HOLD_STATUS_ACTIVE      = 2;  // активен: операции блокируются согласно policy
  LEGAL_HOLD_STATUS_EXPIRED     = 3;  // истёк по времени/условиям
  LEGAL_HOLD_STATUS_RELEASED    = 4;  // снят вручную/по решению
  LEGAL_HOLD_STATUS_REJECTED    = 5;  // отклонён на этапе валидации/аппрува
}

// Спецификация удержания.
message LegalHoldSpec {
  // Правовое основание удержания.
  LegalBasis basis = 1;

  // Область действия: на какие сущности/теги/арендаторов распространяется.
  Scope scope = 2;

  // Политика поведения при конфликте и ограничения операций.
  Policy policy = 3;

  // Вложенные материалы (ссылки на решения суда, ордера и т.п.).
  repeated Attachment attachments = 4;

  // Теги/ярлыки произвольной классификации.
  map<string, string> labels = 5;

  // Резерв.
  reserved 6, 7;
}

// Правовое основание.
message LegalBasis {
  enum Type {
    TYPE_UNSPECIFIED    = 0;
    TYPE_COURT_ORDER    = 1; // Судебный приказ/решение
    TYPE_REGULATOR_REQ  = 2; // Запрос регулятора/надзора
    TYPE_LITIGATION     = 3; // Судебное разбирательство/исковая работа
    TYPE_INTERNAL_POLICY= 4; // Внутренняя политика/риск‑контроль
    TYPE_INVESTIGATION  = 5; // Следственные действия/проверка
  }

  Type type = 1;

  // Юрисдикция (ISO‑3166 страна и при необходимости регион), строкой.
  // Пример: "EU", "US-CA", "RU".
  string jurisdiction = 2;

  // Идентификатор дела/производства/запроса (внешний reference).
  string reference_id = 3;

  // Нормативные ссылки/статьи/документы.
  repeated string citations = 4;

  // Краткая формулировка причины.
  string summary = 5;
}

// Область действия.
message Scope {
  // Имя проекта/арендатора можно вычислять из resource name,
  // но допускается явная фиксация (для предварительных превью).
  repeated string tenants = 1;

  // Типы ресурсов: например, "vault-record", "object", "message".
  repeated string resource_types = 2;

  // Полные имена ресурсов (AIP‑style) или префиксы.
  repeated string resource_names = 3;

  // Дата‑теги (например, "pii", "financial", "export‑restricted").
  repeated string data_tags = 4;

  // Распространять ли удержание на будущие объекты, попадающие под scope.
  bool include_new_resources = 5;
}

// Политика удержания.
message Policy {
  // Блокировать удаление объектов (основной смысл Legal Hold).
  bool block_delete = 1;

  // Блокировать обновление (при критичных юз-кейсах возможен запрет модификаций).
  bool block_update = 2;

  // Блокировать экспорт/выгрузку за пределы доверенной зоны.
  bool block_export = 3;

  // Приоритет политики при конфликтах нескольких Legal Hold.
  enum ConflictPolicy {
    CONFLICT_POLICY_UNSPECIFIED = 0;
    CONFLICT_POLICY_PRECEDENCE_HIGHER = 1; // текущий hold имеет приоритет
    CONFLICT_POLICY_MERGE_STRICT     = 2;  // пересечение правил усиливается (наиболее строгий эффект)
    CONFLICT_POLICY_FAIL_ON_CONFLICT = 3;  // операции отвергаются при конфликте
  }
  ConflictPolicy conflict_policy = 4;

  // Максимальная длительность удержания, если задана.
  google.protobuf.Duration max_duration = 5;

  // Точная дата/время истечения (приоритетнее max_duration, если установлена).
  google.protobuf.Timestamp expire_time = 6;
}

// Текущее состояние по удержанию.
message LegalHoldState {
  // Сколько ресурсов попали под действие (агрегат).
  int64 affected_resource_count = 1;

  // Последняя оценка соответствия/применения правил.
  google.protobuf.Timestamp last_evaluation_at = 2;

  // Обнаруженные нарушения/ошибки применения.
  repeated string violations = 3;
}

// Аудитные данные.
message AuditMetadata {
  Identity created_by = 1;
  google.protobuf.Timestamp created_at = 2;

  Identity updated_by = 3;
  google.protobuf.Timestamp updated_at = 4;

  Identity released_by = 5;
  google.protobuf.Timestamp released_at = 6;
}

// Идентичность инициатора/актора.
message Identity {
  oneof principal {
    string user_id = 1;           // внутренняя учётка
    string service_account = 2;   // сервисная учётка
    string external_principal = 3;// внешний субъект/контрагент
  }
  string display_name = 4;
  string email = 5;
  string ip = 6;
}

// Вложение/артефакт.
message Attachment {
  string uri = 1;     // ссылка на документ/хранилище
  string hash = 2;    // контрольная сумма содержимого
  string title = 3;   // человекочитаемый заголовок
}

// ---------------------------------------------
// REQUEST/RESPONSE MESSAGES
// ---------------------------------------------

message CreateLegalHoldRequest {
  // Родитель: projects/{project}/tenants/{tenant}
  string parent = 1 [(google.api.resource_reference) = { type: "oblivion.googleapis.com/Tenant" }];

  LegalHold legal_hold = 2;

  // Только валидация без применения.
  bool validate_only = 3;

  // Идемпотентность клиента (UUID).
  string request_id = 4;
}

message GetLegalHoldRequest {
  string name = 1 [(google.api.resource_reference) = { type: "oblivion.googleapis.com/LegalHold" }];
}

message ListLegalHoldsRequest {
  string parent = 1 [(google.api.resource_reference) = { type: "oblivion.googleapis.com/Tenant" }];

  int32 page_size = 2;
  string page_token = 3;

  // Фильтр, например:
  // "status=ACTIVE AND basis.type=COURT_ORDER AND scope.data_tags:pii"
  string filter = 4;

  // Сортировка, например: "audit.created_at desc"
  string order_by = 5;
}

message ListLegalHoldsResponse {
  repeated LegalHold legal_holds = 1;
  string next_page_token = 2;
}

message UpdateLegalHoldRequest {
  // Поле name внутри legal_hold обязательно.
  LegalHold legal_hold = 1;

  // Какие поля менять.
  google.protobuf.FieldMask update_mask = 2;

  // Требуемый etag для оптимистичной блокировки.
  string if_match_etag = 3;

  bool validate_only = 4;
  string request_id = 5;
}

message ReleaseLegalHoldRequest {
  string name = 1 [(google.api.resource_reference) = { type: "oblivion.googleapis.com/LegalHold" }];

  // Причина снятия удержания (лог/аудит).
  string reason = 2;

  // Момент вступления в силу (если пусто — немедленно).
  google.protobuf.Timestamp effective_time = 3;

  bool validate_only = 4;
  string request_id = 5;
}

message BatchGetLegalHoldsRequest {
  string parent = 1 [(google.api.resource_reference) = { type: "oblivion.googleapis.com/Tenant" }];
  // Полные resource‑имена.
  repeated string names = 2;
}

message BatchGetLegalHoldsResponse {
  repeated LegalHold legal_holds = 1;
  // Имена, которые не удалось прочитать (например, 404/403).
  repeated string unreachable = 2;
}

// Предпросмотр воздействия ещё не созданного удержания.
message PreviewLegalHoldRequest {
  string parent = 1 [(google.api.resource_reference) = { type: "oblivion.googleapis.com/Tenant" }];

  // Спецификация для симуляции.
  LegalHoldSpec spec = 2;

  // Лимит вычислений/агрегаций (защита от тяжёлых запросов).
  int32 max_sample = 3;
}

message PreviewLegalHoldResponse {
  int64 estimated_affected_resources = 1;
  repeated string sample_resources = 2;
  repeated string warnings = 3;
}

// Поток событий (для аудит‑пайплайна/реактивных воркеров).
message LegalHoldEvent {
  string legal_hold = 1; // resource name
  LegalHoldStatus previous_status = 2;
  LegalHoldStatus new_status = 3;
  google.protobuf.Timestamp at = 4;
  Identity actor = 5;
  string etag = 6;
}

// ---------------------------------------------
// SERVICE: LegalHoldService
// ---------------------------------------------
service LegalHoldService {
  // Создать Legal Hold (LRO).
  rpc CreateLegalHold(CreateLegalHoldRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1/{parent=projects/*/tenants/*}/legalHolds"
      body: "legal_hold"
    };
  }

  // Получить Legal Hold.
  rpc GetLegalHold(GetLegalHoldRequest) returns (LegalHold) {
    option (google.api.http) = {
      get: "/v1/{name=projects/*/tenants/*/legalHolds/*}"
    };
  }

  // Список Legal Holds.
  rpc ListLegalHolds(ListLegalHoldsRequest) returns (ListLegalHoldsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=projects/*/tenants/*}/legalHolds"
    };
  }

  // Обновить Legal Hold (LRO).
  rpc UpdateLegalHold(UpdateLegalHoldRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      patch: "/v1/{legal_hold.name=projects/*/tenants/*/legalHolds/*}"
      body: "legal_hold"
    };
  }

  // Снять Legal Hold (LRO).
  rpc ReleaseLegalHold(ReleaseLegalHoldRequest) returns (google.longrunning.Operation) {
    option (google.api.http) = {
      post: "/v1/{name=projects/*/tenants/*/legalHolds/*}:release"
      body: "*"
    };
  }

  // Пакетное чтение.
  rpc BatchGetLegalHolds(BatchGetLegalHoldsRequest) returns (BatchGetLegalHoldsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=projects/*/tenants/*}/legalHolds:batchGet"
    };
  }

  // Предпросмотр воздействия (симуляция).
  rpc PreviewLegalHold(PreviewLegalHoldRequest) returns (PreviewLegalHoldResponse) {
    option (google.api.http) = {
      post: "/v1/{parent=projects/*/tenants/*}/legalHolds:preview"
      body: "*"
    };
  }

  // Поток событий gRPC (HTTP‑аннотация опциональна и может игнорироваться REST‑шлюзом).
  rpc StreamEvents(StreamEventsRequest) returns (stream LegalHoldEvent) {}
}

// Запрос на поток событий.
message StreamEventsRequest {
  // Родитель, по которому фильтруем поток.
  string parent = 1 [(google.api.resource_reference) = { type: "oblivion.googleapis.com/Tenant" }];

  // Фильтр, например: "legal_hold=projects/p1/tenants/t1/legalHolds/* status in (ACTIVE,RELEASED)"
  string filter = 2;
}
