# automation-core/.pre-commit-config.yaml
# Минимальная версия менеджера хуков
minimum_pre_commit_version: "3.7.0"

# Глобальные настройки
default_language_version:
  python: python3.11
default_stages: [commit]

# Глобальные исключения (артефакты, виртуальные окружения, большие деревья)
exclude: |
  (?x)^(
    \.git/|
    \.mypy_cache/|
    \.pytest_cache/|
    \.tox/|
    \.venv/|
    venv/|
    build/|
    dist/|
    node_modules/|
    .+\.min\.(js|css)$
  )

# Конфигурация для pre-commit.ci (авто-фикс PR и автообновление пинов по расписанию)
ci:
  autofix_prs: true
  autoupdate_schedule: quarterly
  autoupdate_commit_msg: "[pre-commit.ci] pre-commit autoupdate"

repos:
  # 1) Базовые универсальные проверки
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v6.0.0
    hooks:
      - id: check-merge-conflict
      - id: check-yaml
      - id: check-json
      - id: check-toml
      - id: end-of-file-fixer
      - id: trailing-whitespace
      - id: mixed-line-ending
        args: ["--fix=lf"]
      - id: detect-private-key
      - id: check-added-large-files
        args: ["--maxkb=1024"]
      - id: pretty-format-json
        files: "\\.(json|json5)$"
        args: ["--autofix", "--no-ensure-ascii", "--no-sort-keys"]
      - id: no-commit-to-branch
        args: ["--branch", "main", "--branch", "master"]

  # 2) Ruff: форматирование + линтинг
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.12.12
    hooks:
      - id: ruff-format
      - id: ruff-check
        args: ["--fix", "--show-fixes"]

  # 3) Типизация mypy (официальный mirror)
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.17.1
    hooks:
      - id: mypy
        # при необходимости: args: ["--config-file", "pyproject.toml"]

  # 4) Security: Bandit (Python SAST)
  - repo: https://github.com/PyCQA/bandit
    rev: 1.8.6
    hooks:
      - id: bandit
        args: ["-ll", "-f", "screen"]
        files: "\\.py$"
        stages: [commit, push]

  # 5) Security: detect-secrets с базлайном
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
      - id: detect-secrets
        args: ["--baseline", ".secrets.baseline"]

  # 6) Security: Gitleaks (второй уровень защиты секретов)
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.24.2
    hooks:
      - id: gitleaks
        # Быстрый режим на изменениях; для полного — запускайте в CI
        args: ["protect", "--staged"]
        stages: [commit, push]

  # 7) Валидация JSON/YAML по JSON Schema
  - repo: https://github.com/python-jsonschema/check-jsonschema
    rev: 0.33.3
    hooks:
      - id: check-jsonschema
        # Пример: валидировать все JSON/YAML по локальной схеме
        # Замените путь на вашу схему или добавьте несколько хуков под разные схемы
        files: "\\.(json|ya?ml)$"
        args: ["--schemafile", "schemas/schema.json"]

  # 8) Линтинг YAML
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.37.1
    hooks:
      - id: yamllint
        # При необходимости укажите строгий конфиг: args: ["--strict", "-c", ".yamllint"]
        files: "\\.(ya?ml)$"

  # 9) Очистка выводов Jupyter-ноутбуков
  - repo: https://github.com/kynan/nbstripout
    rev: 0.7.1
    hooks:
      - id: nbstripout
        files: "\\.ipynb$"

  # 10) Локальные хуки: быстрые тесты на этапе push
  - repo: local
    hooks:
      - id: pytest-on-push
        name: pytest (pre-push)
        entry: pytest -q
        language: system
        pass_filenames: false
        always_run: true
        stages: [push]
