# automation-core/.github/workflows/release.yaml
name: Release

on:
  push:
    branches: [main]
  workflow_dispatch:

# Гарантируем один релизный конвейер на ветку
concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

# Базовые разрешения по умолчанию (повышаем на уровне нужных jobs)
permissions:
  contents: read

jobs:
  verify:
    name: Verify (lint, typecheck, test, audit)
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4 # оф. экшен для получения кода
        # Документация workflow и checkout: GitHub Docs
        # Источник: Workflow syntax, GITHUB_TOKEN permissions. :contentReference[oaicite:1]{index=1}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
        # setup-node поддерживает кэш зависимостей и создание .npmrc
        # Источник: setup-node README (cache, registry, auth). :contentReference[oaicite:2]{index=2}

      - name: Install deps (CI)
        run: npm ci

      - name: Typecheck
        run: npm run typecheck --if-present

      - name: Lint
        run: npm run lint --if-present

      - name: Test
        run: npm run test --if-present

      - name: Security audit (audit-ci)
        run: npx --yes audit-ci@^7 --moderate
        # Рекомендации по использованию audit-ci в CI
        # Источник: audit-ci README. :contentReference[oaicite:3]{index=3}

  build:
    name: Build and SBOM
    runs-on: ubuntu-latest
    needs: verify
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install deps (CI)
        run: npm ci

      - name: Build
        run: npm run build --if-present

      - name: Generate SBOM (CycloneDX)
        run: npx --yes @cyclonedx/cyclonedx-npm@latest --output-file sbom.json --json
        # Генератор CycloneDX для npm-проектов
        # Источник: @cyclonedx/cyclonedx-npm на npm, CycloneDX Tool Center. :contentReference[oaicite:4]{index=4}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/**
            sbom.json
          if-no-files-found: warn

  release:
    name: Semantic Release (GitHub + npm)
    runs-on: ubuntu-latest
    needs: build
    # Права минимально необходимые для релиза:
    # - contents: write — релиз/теги на GitHub
    # - id-token: write — для npm provenance (OIDC)
    # - issues/pull-requests: write — комментарии/релиз-ноты semantic-release (если используются плагины)
    permissions:
      contents: write
      id-token: write
      issues: write
      pull-requests: write
    env:
      CI: true
      # Токены из GitHub Secrets:
      # - NPM_TOKEN: Automation token npm для публикации (рекомендовано semantic-release/npm)
      # - GITHUB_TOKEN: авто-подставляется GitHub Actions для релиза на GitHub
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node with npm auth
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
        # setup-node может создавать .npmrc с аутентификацией по NODE_AUTH_TOKEN
        # Источник: GitHub Docs — building and testing Node.js. :contentReference[oaicite:5]{index=5}

      - name: Install deps (CI)
        run: npm ci

      - name: Enable npm provenance (config)
        run: |
          echo "provenance=true" >> ~/.npmrc
        # Публикация с provenance требует OIDC id-token: write и включённый флаг provenance.
        # Официально поддерживается публикация с --provenance; также параметр можно задавать в конфиге npm.
        # Источники: GitHub Docs (Node.js packages с --provenance), npm Docs (Generating provenance statements), Trusted publishers/конфиг. :contentReference[oaicite:6]{index=6}

      - name: Semantic Release
        run: npx semantic-release
        # Требования semantic-release: NPM_TOKEN для npm-публикации и GITHUB_TOKEN для релиза на GitHub.
        # Источники: semantic-release GitHub Actions рецепт; semantic-release/npm (аутентификация). :contentReference[oaicite:7]{index=7}
