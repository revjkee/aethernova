# automation-core/ruff.toml

# Базовые параметры проекта
line-length = 100
indent-width = 4
target-version = "py311"
src = ["automation_core", "tests"]

# Исключения директорий (поверх .gitignore) и строгая фильтрация для pre-commit
extend-exclude = [
  ".git",
  ".venv",
  "venv",
  ".mypy_cache",
  ".ruff_cache",
  "dist",
  "build",
  "site-packages",
  "node_modules"
]
force-exclude = true

# Включаем автофиксы по умолчанию (только safe-fixes; unsafe — отдельно флагом/опцией)
fix = true
unsafe-fixes = false

# ---------------------------
# Линтер
# ---------------------------
[lint]
# Широкий, но практичный набор семейств правил (см. Rules)
select = [
  "E","W",        # pycodestyle
  "F",            # pyflakes
  "I",            # isort-equivalent (сортировка импортов)
  "B",            # flake8-bugbear
  "UP",           # pyupgrade
  "N",            # pep8-naming
  "S",            # bandit (security)
  "C4",           # flake8-comprehensions
  "SIM",          # flake8-simplify
  "DTZ",          # flake8-datetimez
  "T20",          # flake8-print
  "ARG",          # flake8-unused-arguments
  "ERA",          # eradicate (закомментированный код)
  "PTH",          # flake8-use-pathlib
  "PL",           # pylint-подмножество
  "PERF",         # perflint
  "TRY",          # tryceratops
  "RET",          # flake8-return
  "TCH",          # type-checking-only imports
  "TID",          # flake8-tidy-imports
  "ANN",          # flake8-annotations
  "RUF"           # ruff-specific
]
ignore = []

# Разрешаем автофиксы для всех включенных правил; при необходимости можно ограничить unfixable
fixable = ["ALL"]
unfixable = []

# Исключения по файлам/папкам
per-file-ignores = {
  "__init__.py" = ["F401"],                                # удобные реэкспорты
  "tests/**"    = ["S101","PLR2004","S311","T201","ANN","ARG002","ARG005"],  # тестам можно assert/print, послабления к аннотациям и аргументам
  "scripts/**"  = ["T201","T203"]                          # разрешить print/pprint в скриптах
}

# Ограничение цикломатической сложности
[lint.mccabe]
max-complexity = 10

# Настройка импорт-сортировки (эквивалент isort)
[lint.isort]
known-first-party = ["automation_core"]
combine-as-imports = true
force-sort-within-sections = true

# Политика импортов: запрет относительных
[lint.flake8-tidy-imports]
ban-relative-imports = "all"

# Тонкая настройка pep8-naming (учет «classmethod»-декораторов, например в Pydantic)
[lint.pep8-naming]
classmethod-decorators = ["classmethod", "pydantic.validator", "pydantic.root_validator", "model_validator"]
staticmethod-decorators = ["staticmethod"]

# ---------------------------
# Форматер
# ---------------------------
[format]
quote-style = "double"          # единообразные кавычки
indent-style = "space"          # пробелы, как рекомендует PEP 8
line-ending = "auto"            # подхват из окружения/файла
docstring-code-format = true    # форматирование Python-примеров внутри докстрингов
