apiVersion: v1
kind: ConfigMap
metadata:
  name: automation-core-config
  # namespace определяйте в overlays (dev/staging/prod)
  labels:
    app.kubernetes.io/name: automation-core
    app.kubernetes.io/instance: automation-core
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: automation-suite
    app.kubernetes.io/managed-by: kustomize
  annotations:
    # Не храните секреты в ConfigMap. Для секретов используйте Secret.
    a8r.io/description: "Base application configuration (non-secret)."
    a8r.io/owner: "platform-team"
    # Аннотация-чексумма может заполняться в CI при изменении содержимого
    # checksum/config: "<filled-by-CI>"
immutable: false
data:
  # Единый структурированный конфиг приложения (пример для FastAPI/ASGI или аналогичного сервиса)
  app-config.yaml: |-
    server:
      host: 0.0.0.0
      port: 8080
      rootPath: ""
      timeouts:
        readSeconds: 30
        writeSeconds: 30
        keepAliveSeconds: 5
      maxRequestBodyMb: 10
      workers: 2
      gracefulTimeoutSeconds: 30

    security:
      jwt:
        enabled: true
        alg: HS256
        # Секрет и TTL берите из Secret/ENV, здесь только дефолтные параметры.
        accessTtlMinutes: 30
        refreshTtlHours: 720
      cors:
        enabled: true
        allowedOrigins:
          - "http://localhost:3000"
          - "https://your.domain"
        allowedMethods: ["GET","POST","PUT","PATCH","DELETE","OPTIONS"]
        allowedHeaders: ["Authorization","Content-Type","X-Request-Id"]
        allowCredentials: false
      ipFiltering:
        allow: []   # пример: ["10.0.0.0/8","192.168.0.0/16"]
        deny: []
      rateLimit:
        enabled: true
        windowSeconds: 60
        maxRequests: 900
      dlp:
        maskSecretsInLogs: true
        maskHeaders: ["Authorization","Set-Cookie"]

    database:
      # DSN задаётся через переменные окружения/Secret. Здесь инженерные лимиты.
      pool:
        min: 5
        max: 30
        acquireTimeoutSeconds: 10
      echoSql: false
      sslMode: "disable"  # disable | require | verify-ca | verify-full
      migrationsDir: "./migrations"
      retentionDays: 365

    cache:
      # URL к Redis задаётся через переменные окружения.
      poolMax: 100
      defaultTtlSeconds: 300
      bypass: false

    queues:
      broker: "rabbitmq"   # rabbitmq | redis | none
      resultBackend: "redis"  # redis | none
      concurrency: 100
      prefetch: 20
      ackLate: true
      visibilityTimeoutSeconds: 600

    scheduler:
      enabled: true
      timezone: "UTC"
      maxWorkers: 8
      heartbeatSeconds: 5

    retries:
      maxAttempts: 5
      backoff:
        baseMs: 200
        maxMs: 15000
        jitter: true

    circuitBreaker:
      enabled: true
      windowSeconds: 30
      failureThreshold: 0.5   # 0..1
      minThroughput: 20
      sleepWindowSeconds: 15

    httpClient:
      timeoutSeconds: 15
      maxConnections: 200
      retries: 3
      backoff:
        baseMs: 100
        maxMs: 2000

    storage:
      s3:
        enabled: false
        endpoint: "https://s3.amazonaws.com"
        region: "us-east-1"
        bucket: "automation-artifacts"
        forcePathStyle: false
        useSsl: true
        presignedTtlSeconds: 900
      local:
        dir: "./var/storage"

    email:
      enabled: false
      startTls: true
      from: "Automation <no-reply@your.domain>"
      # host/port/user/password передавайте через Secret/ENV

    telemetry:
      logging:
        level: "INFO"   # DEBUG | INFO | WARN | ERROR
        format: "json"  # json | text
        color: false
        filePath: ""    # пусто => stdout
        traceIdHeader: "X-Request-Id"
      prometheus:
        enabled: true
        bind: "0.0.0.0"
        port: 9100
        path: "/metrics"
      opentelemetry:
        exporterOtlp:
          endpoint: "http://localhost:4317"
          protocol: "grpc"   # grpc | http/protobuf
        serviceName: "automation-core"
        resourceAttributes:
          deployment.environment: "${APP_ENV}"
          service.version: "${APP_VERSION}"
        tracesSampler: "parentbased_traceidratio"
        tracesSamplerArg: 0.1
      sentry:
        dsn: ""
        tracesSampleRate: 0.1
        environment: "${APP_ENV}"

    webhooks:
      signingSecretRef: "webhook-signing-secret"  # имя ключа в Secret (пример)
      timeoutSeconds: 10
      maxRetries: 8
      backoff:
        baseMs: 250
        maxMs: 10000

    features:
      enableWebhooks: true
      enableScheduledJobs: true
      enableAdminApi: true
      enableAuth: true
      enableRateLimiter: true

    admin:
      email: "owner@your.domain"

    # Параметры сериализации
    serialization:
      json:
        sortKeys: true
        indent: 0

    # Полезные переменные окружения для контейнера (дублируются в Deployment env)
    envHints:
      appName: "automation-core"
      appEnv: "${APP_ENV:-development}"
      appVersion: "${APP_VERSION:-0.1.0}"
      tz: "${TZ:-UTC}"
