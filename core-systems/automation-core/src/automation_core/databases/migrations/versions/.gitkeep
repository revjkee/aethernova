# KEEP THIS FILE: ensures the 'versions' directory is tracked by Git.
# Production conventions for Alembic migrations in this repository.
#
# ─────────────────────────────────────────────────────────────────────────────
# NAMING & STRUCTURE
# ─────────────────────────────────────────────────────────────────────────────
# • One revision per logical change-set.
# • Filename format: <UTCYYYYMMDD_HHMMSS>__<slug>.py
#   Examples:
#     20250905_120001__initial_schema.py
#     20250905_120545__add_user_status_index.py
#
# • Each file must contain the Alembic header with:
#     revision       – unique id (string)
#     down_revision  – parent id (or None for roots)
#     branch_labels  – optional labels (usually None)
#     depends_on     – optional dependency (another revision)
#
# • Use explicit, deterministic constraint/index names (see SQLAlchemy
#   naming conventions via target_metadata in env.py).
#
# References:
# - Alembic Tutorial (structure, upgrade/downgrade): 
#   https://alembic.sqlalchemy.org/en/latest/tutorial.html
# - Importance of naming conventions (constraints): 
#   https://alembic.sqlalchemy.org/en/latest/naming.html
# - SQLAlchemy constraints & naming conventions (core docs):
#   https://docs.sqlalchemy.org/en/latest/core/constraints.html
#
# ─────────────────────────────────────────────────────────────────────────────
# AUTOGENERATE & COMMANDS
# ─────────────────────────────────────────────────────────────────────────────
# Autogenerate compares Base.metadata with the live DB schema and emits
# candidate operations. Always review and edit the result.
#
# Create a new revision:
#   alembic revision --autogenerate -m "your message"
# Apply to head:
#   alembic upgrade head
# Step back (last migration):
#   alembic downgrade -1
#
# References:
# - Autogenerate: 
#   https://alembic.sqlalchemy.org/en/latest/autogenerate.html
# - Command API / options:
#   https://alembic.sqlalchemy.org/en/latest/api/commands.html
#
# ─────────────────────────────────────────────────────────────────────────────
# SQLITE & BATCH MIGRATIONS (SAFE DEFAULT)
# ─────────────────────────────────────────────────────────────────────────────
# SQLite has limited ALTER TABLE; use batch mode for column/constraint changes.
# Enable render_as_batch in env.py when targeting SQLite, and prefer:
#     with op.batch_alter_table("<table>") as batch_op:
#         batch_op.add_column(...)
#         ...
#
# References:
# - Batch migrations & render_as_batch:
#   https://alembic.sqlalchemy.org/en/latest/batch.html
# - Operations reference (behavior on SQLite):
#   https://alembic.sqlalchemy.org/en/latest/ops.html
#
# ─────────────────────────────────────────────────────────────────────────────
# REVIEW CHECKLIST (BEFORE COMMIT)
# ─────────────────────────────────────────────────────────────────────────────
# [ ] Explicit names for constraints/indexes (align with naming convention).
# [ ] Backfilled server_default removed after data migration (if temporary).
# [ ] Downgrade is the true inverse of upgrade.
# [ ] Batch context used for SQLite-impacting ALTERs.
# [ ] Idempotent data fixes guarded (where applicable).
#
# ─────────────────────────────────────────────────────────────────────────────
# READY-TO-USE TEMPLATE (COPY INTO A NEW FILE; LINES BELOW ARE COMMENTED OUT)
# ─────────────────────────────────────────────────────────────────────────────
# """add user.status with index
#
# Revision ID: 8b1f1c0e44a9
# Revises: 1f2a3b4c5d6e
# Create Date: 2025-09-05 12:00:00.000000
#
# """
# from alembic import op
# import sqlalchemy as sa
#
# # revision identifiers, used by Alembic.
# revision: str = "8b1f1c0e44a9"
# down_revision: str | None = "1f2a3b4c5d6e"
# branch_labels: tuple[str, ...] | None = None
# depends_on: str | None = None
#
# def upgrade() -> None:
#     # SAFE for SQLite via batch migration:
#     with op.batch_alter_table("users") as batch_op:
#         batch_op.add_column(
#             sa.Column("status", sa.String(length=32), nullable=False, server_default="active")
#         )
#     # Create index with explicit, deterministic name
#     op.create_index("ix_users_status", "users", ["status"])
#     # Optional: drop temporary server_default for cleanliness
#     with op.batch_alter_table("users") as batch_op:
#         batch_op.alter_column("status", server_default=None)
#
# def downgrade() -> None:
#     op.drop_index("ix_users_status", table_name="users")
#     with op.batch_alter_table("users") as batch_op:
#         batch_op.drop_column("status")
#
# # References for the above patterns:
# # - Tutorial (upgrade/downgrade functions & headers):
# #   https://alembic.sqlalchemy.org/en/latest/tutorial.html
# # - Autogenerate basics:
# #   https://alembic.sqlalchemy.org/en/latest/autogenerate.html
# # - Batch migrations (SQLite-safe):
# #   https://alembic.sqlalchemy.org/en/latest/batch.html
# # - Operations API (create_index, alter_column, etc.):
# #   https://alembic.sqlalchemy.org/en/latest/ops.html
