# automation-core/pyproject.toml
# Формат и ключи [build-system] определены PEP 517/518; использование poetry-core подтверждено доками Poetry.

[build-system]
requires = ["poetry-core>=1.9.0"]
build-backend = "poetry.core.masonry.api"

# ---------------------------- МЕТАДАННЫЕ ПО ПРОЕКТУ ---------------------------

[tool.poetry]
name = "automation-core"
version = "0.1.0"
description = "Automation Core: ядро оркестрации задач и интеграций."
authors = ["Aethernova Team <dev@aethernova.local>"]
readme = "README.md"
license = "Apache-2.0"
homepage = "https://example.org/automation-core"
repository = "https://example.org/automation-core.git"
keywords = ["automation", "orchestration", "tasks", "core"]
# src-layout
packages = [
  { include = "automation_core", from = "src" }
]

# Минимально поддерживаемые версии Python
[tool.poetry.dependencies]
python = ">=3.11,<3.14"

# Группы разработческих зависимостей (линтеры, форматтеры, типизация, тесты)
[tool.poetry.group.dev.dependencies]
ruff = "^0.5.0"
black = "^24.10.0"
mypy = "^1.10.0"
pytest = "^8.2.0"
pytest-cov = "^5.0.0"
coverage = { version = "^7.6.0", extras = ["toml"] }
types-toml = "^0.10.8.20240310"
typing-extensions = "^4.12.2"

# При необходимости CLI-точки входа можно определить так:
# [tool.poetry.scripts]
# automation-core = "automation_core.cli:main"

# ---------------------------- RUFF (линтер/форматтер) -------------------------
# Документация подтверждает конфигурацию через [tool.ruff] и подтаблицы lint/format.

[tool.ruff]
line-length = 100
target-version = "py311"
extend-exclude = ["dist", "build", ".venv", ".mypy_cache", ".ruff_cache"]

[tool.ruff.lint]
# Набор правил: базовые ошибки/формат (E,F), импорт (I), bugbear (B), модернизация (UP),
# упрощения (SIM), плагины Pylint-правил (PL), наборов Ruff (RUF).
select = ["E", "F", "I", "B", "UP", "SIM", "PL", "RUF"]
# Совместимость с Black: игнор E203; длину строк контролируем через line-length, а не E501.
ignore = ["E203"]
fixable = ["ALL"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["PLR2004"]  # магические числа в тестах

[tool.ruff.format]
# Разрешить автоформатирование Ruff при необходимости
quote-style = "double"
indent-style = "space"

# ---------------------------- BLACK (форматирование) --------------------------
# Black читает конфигурацию из [tool.black] в pyproject.toml.

[tool.black]
line-length = 100
target-version = ["py311"]
include = "\\.pyi?$"
exclude = '''
/(
  \.git
 |\.ruff_cache
 |\.mypy_cache
 |\.venv
 |build
 |dist
)/
'''

# ---------------------------- MYPY (статическая типизация) --------------------
# Mypy официально поддерживает [tool.mypy] в pyproject.toml.

[tool.mypy]
python_version = "3.11"
strict = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unreachable = true
pretty = true
show_error_codes = true
ignore_missing_imports = false
mypy_path = ["src"]

# Пример модульных исключений:
# [[tool.mypy.overrides]]
# module = ["tests.*"]
# disallow_untyped_defs = false

# ---------------------------- PYTEST (тестовый раннер) ------------------------
# Pytest читает настройки из [tool.pytest.ini_options].

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra --strict-markers --disable-warnings --maxfail=1"
testpaths = ["tests"]
pythonpath = ["src"]

# ---------------------------- COVERAGE.PY -------------------------------------
# Coverage.py читает настройки из pyproject.toml при наличии TOML-поддержки
# (Python 3.11+ или coverage[toml]).

[tool.coverage.run]
branch = true
parallel = true
source = ["automation_core"]
omit = [
  "tests/*",
  "*/__init__.py"
]

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 90
exclude_lines = [
  "pragma: no cover",
  "if __name__ == .__main__.:"
]

[tool.coverage.html]
directory = "htmlcov"
title = "automation-core coverage report"
