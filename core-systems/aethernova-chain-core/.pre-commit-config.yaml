# aethernova-chain-core/.pre-commit-config.yaml
# Промышленная конфигурация pre-commit для Python/Docs/YAML/JSON и DevSecOps-проверок.
# Порядок: быстрые синтакс/мелкие фиксы -> стиль/форматирование -> импорт -> типы -> безопасность/секреты -> документация.
# Запуск локально:  pre-commit install && pre-commit run --all-files

minimum_pre_commit_version: "3.5.0"

ci:
  autofix_prs: true
  autofix_commit_msg: "ci(pre-commit): auto-fix via pre-commit.ci"
  skip: []
  # pre-commit.ci будет автоматически обновлять зависимости хуков.
  submodules: false

default_stages: [pre-commit, pre-push]
# Явно задаём версию интерпретатора для всех python-хуков
default_language_version:
  python: python3.12

repos:
  # --- Базовые быстрые проверки и авто-фиксы ---
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: check-added-large-files
        args: ["--maxkb=1024"]   # запрет на файлы >1 МБ
      - id: end-of-file-fixer
      - id: trailing-whitespace
        args: ["--markdown-linebreak-ext=md"]
      - id: mixed-line-ending
        args: ["--fix=lf"]
      - id: detect-private-key
      - id: check-yaml
      - id: check-json
      - id: pretty-format-json
        args: ["--autofix", "--indent=2"]
      - id: requirements-txt-fixer

  # --- Markdown lint ---
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.41.0
    hooks:
      - id: markdownlint
        args:
          - "--config=.markdownlint.json"
        additional_dependencies: []

  # --- YAML lint (более строгий, чем check-yaml) ---
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.35.1
    hooks:
      - id: yamllint
        args: ["-c", ".yamllint.yaml"]

  # --- Форматирование Python Black ---
  - repo: https://github.com/psf/black
    rev: 24.8.0
    hooks:
      - id: black
        language_version: python3.12

  # --- Ruff: линт и формат ruff-format (быстрее flake8 + isort) ---
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.6.3
    hooks:
      - id: ruff
        args:
          - "--fix"
          - "--unsafe-fixes"
      - id: ruff-format

  # --- Альтернативно/дополнительно isort (если требуется строгая совместимость со старым кодстайлом) ---
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        name: isort (imports)
        args: ["--profile=black"]

  # --- Типизация: mypy (запускается после форматтеров/линтеров) ---
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.11.2
    hooks:
      - id: mypy
        additional_dependencies:
          - types-requests
          - types-PyYAML
          - types-setuptools
        args:
          - "--strict"
          - "--pretty"
          - "--show-error-codes"
          - "--show-column-numbers"
          - "--implicit-reexport"
          - "--warn-unused-ignores"
          - "--warn-redundant-casts"
          - "--no-warn-no-return"
          - "--python-version=3.12"
          - "--config-file=./mypy.ini"

  # --- Безопасность Python-кода (Bandit) ---
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.9
    hooks:
      - id: bandit
        name: bandit (security)
        args: ["-q", "-r", "."]
        exclude: ^tests?/  # ускорение, если тесты не требуют анализа

  # --- Поиск секретов в кодовой базе ---
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
      - id: detect-secrets
        args:
          - "--baseline"
          - ".secrets.baseline"

  # --- Дополнительная проверка секретов/утечек через gitleaks ---
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.18.3
    hooks:
      - id: gitleaks
        name: gitleaks (leaks scan)
        args: ["detect", "--no-banner", "--redact", "--source=.", "--report-format=json", "--report-path=.gitleaks.report.json"]

  # --- Аудит уязвимостей зависимостей (pip-audit) ---
  - repo: https://github.com/pypa/pip-audit
    rev: v2.7.3
    hooks:
      - id: pip-audit
        name: pip-audit (vulns)
        args:
          - "--requirement=requirements.txt"
          - "--skip-editable"
        # при использовании Poetry/uv замените на генерацию requirements через lockfile

  # --- Статический анализ shell-скриптов ---
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.10.0.1
    hooks:
      - id: shellcheck
        name: shellcheck
        types: [shell]
        args: ["--external-sources"]

  # --- Проверка сообщений коммитов (Commitizen, conventional commits) ---
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.30.1
    hooks:
      - id: commitizen
        name: commitizen check (conventional commits)
        stages: [commit-msg]

  # --- Локальные хуки проекта (Poetry/UV и быстрые sanity-checks) ---
  - repo: local
    hooks:
      # Проверка корректности pyproject.toml/poetry.lock
      - id: poetry-check
        name: poetry check
        entry: bash -c 'command -v poetry >/dev/null 2>&1 && poetry check || true'
        language: system
        types: [python]
        files: ^pyproject\.toml$

      # Блокировка случайных отладочных вызовов (print/pdb) в src/
      - id: no-debug-prints
        name: forbid debug prints
        entry: bash -c '! git diff --cached --name-only | xargs -I{} grep -nH -E "(^|[^a-zA-Z0-9_])print\\(|pdb\\.set_trace\\(\\)" {} | grep -vE "(^$|/tests?/)"'
        language: system
        pass_filenames: false
        stages: [pre-commit]

      # Быстрый smoke-тест импорта основного пакета (ускоряет раннее выявление SyntaxError)
      - id: import-smoke
        name: import smoke (aethernova-chain-core)
        entry: python -c "import importlib; import sys; sys.exit(0) if importlib.import_module('aethernova_chain_core') else sys.exit(1)"
        language: system
        files: ^(src/|aethernova_chain_core/)
        stages: [pre-push]
