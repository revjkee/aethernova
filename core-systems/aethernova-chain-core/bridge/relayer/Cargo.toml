# aethernova-chain-core/bridge/relayer/Cargo.toml
[package]
name = "aethernova-relayer"
version = "0.1.0"
description = "Aethernova bridge relayer binary"
edition = "2024"            # Rust 2024 edition (stable)
rust-version = "1.85"       # MSRV pinned to Rust 1.85 (stabilized 2024 edition)
license = "Apache-2.0 OR MIT"
repository = "https://example.com/aethernova/bridge"
homepage = "https://example.com/aethernova"
documentation = "https://docs.example.com/aethernova"
keywords = ["blockchain", "bridge", "relayer"]
categories = ["command-line-utilities", "network-programming"]
publish = false             # prevent accidental publishing

# Use the modern feature resolver.
resolver = "2"

# Binary target (explicit path, if different from auto-discovery)
[[bin]]
name = "relayer"
path = "src/main.rs"

[features]
# Safe, minimal defaults (toggle telemetry/HTTP/JSON/CLI as needed).
default = ["cli", "telemetry", "http-client", "json"]

# Map user-facing features to optional deps using dep: to avoid implicit features.
cli        = ["dep:clap"]
telemetry  = ["dep:tracing-subscriber", "dep:tracing-opentelemetry", "dep:opentelemetry", "dep:opentelemetry-otlp"]
http-client = ["dep:reqwest"]
json       = ["dep:serde_json"]

# An umbrella "full" switch for CI or power users.
full = ["cli", "telemetry", "http-client", "json"]

[dependencies]
anyhow = "1"
thiserror = "1"

# Async runtime for the relayer.
tokio = { version = "1", features = ["rt-multi-thread", "macros", "signal"] }

# Serialization
serde = { version = "1", features = ["derive"] }
serde_json = { version = "1", optional = true }

# Logging/Tracing (base crate is always present; subscribers/exporters are optional)
tracing = { version = "0.1", features = ["std"] }
tracing-subscriber = { version = "0.3", features = ["env-filter", "fmt", "json"], optional = true }

# OpenTelemetry integration (optional; enabled by feature "telemetry")
tracing-opentelemetry = { version = "0.28", optional = true }
opentelemetry = { version = "0.30", optional = true }
opentelemetry-otlp = { version = "0.30", features = ["grpc-tonic", "http-proto", "http-json"], optional = true }

# HTTP client with Rustls TLS and JSON support (optional; enabled by "http-client")
reqwest = { version = "0.12", default-features = false, features = ["json", "rustls-tls"], optional = true }

# CLI
clap = { version = "4.5", features = ["derive"], optional = true }

# Misc
url = "2"

[dev-dependencies]
# Add testing/bench toolchain as needed (examples)
tokio = { version = "1", features = ["rt-multi-thread", "macros"] }
proptest = "1"
assert_cmd = "2"
serde_json = "1"
tempfile = "3"

# Centralized lints: rustc & Clippy (stable [lints] table)
[lints.rust]
unsafe_code = "forbid"
unused_must_use = "deny"
unused_imports = "deny"
missing_debug_implementations = "warn"
# Treat all other warnings strictly in CI if desired:
# warnings = "deny"

[lints.clippy]
pedantic = "warn"
nursery = "warn"
cargo = "warn"

[profile.dev]
opt-level = 1
debug = 2
overflow-checks = true
incremental = true

[profile.release]
lto = "fat"               # maximize runtime speed
codegen-units = 1         # better optimization at cost of compile time
panic = "abort"           # smaller, faster binaries without unwinding
strip = "symbols"         # reduce size (keep minimal symbol info)
debug = 1                 # minimal backtraces in prod if needed
incremental = false

[profile.test]
opt-level = 0
debug = 2

[profile.bench]
lto = "fat"
codegen-units = 1
debug = 1
