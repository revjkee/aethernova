# Base values for aethernova-node Helm chart (industrial-grade)

nameOverride: ""
fullnameOverride: ""

image:
  repository: ghcr.io/aethernova/aethernova-node
  tag: "v1.0.0"
  pullPolicy: IfNotPresent
imagePullSecrets: []

rbac:
  create: true

serviceAccount:
  create: true
  name: ""
  annotations: {}
  automountServiceAccountToken: false

podLabels:
  app.kubernetes.io/part-of: aethernova-chain-core
  app.kubernetes.io/component: node
  app.kubernetes.io/name: aethernova-node
  app.kubernetes.io/version: "v1.0.0"

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "9100"
  prometheus.io/path: "/metrics"

podSecurityContext:
  runAsNonRoot: true
  fsGroup: 10001
  fsGroupChangePolicy: OnRootMismatch
  seccompProfile:
    type: RuntimeDefault

securityContext:
  runAsUser: 10001
  runAsGroup: 10001
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop: ["ALL"]

replicaCount: 1

statefulset:
  enabled: true
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
  extraVolumeClaimTemplates:
    - name: data
      accessModes: ["ReadWriteOnce"]
      storageClassName: ""
      resources:
        requests:
          storage: 100Gi

persistence:
  enabled: true
  existingClaim: ""
  accessModes: ["ReadWriteOnce"]
  size: 100Gi
  storageClass: ""
  mountPath: /data
  annotations: {}
  labels: {}

volumePermissions:
  enabled: true
  image: busybox:1.36
  securityContext:
    runAsUser: 0
  command: ["sh","-c","chown -R 10001:10001 /data || true"]

service:
  type: ClusterIP
  annotations: {}
  labels: {}
  ports:
    p2p:
      enabled: true
      port: 30303
      targetPort: 30303
      protocol: TCP
    rpc:
      enabled: true
      port: 8545
      targetPort: 8545
      protocol: TCP
    metrics:
      enabled: true
      port: 9100
      targetPort: 9100
      protocol: TCP

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: rpc.example.com
      paths:
        - path: /
          pathType: Prefix
          service:
            name: ""
            port: 8545
  tls: []

networkPolicy:
  enabled: true
  labels: {}
  annotations: {}
  policyTypes: ["Ingress","Egress"]
  ingress:
    - from:
        - namespaceSelector: {}
      ports:
        - port: 30303
          protocol: TCP
        - port: 8545
          protocol: TCP
        - port: 9100
          protocol: TCP
  egress:
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - port: 53
          protocol: UDP
        - port: 30303
          protocol: TCP

resources:
  requests:
    cpu: "500m"
    memory: "1Gi"
    ephemeral-storage: "1Gi"
  limits:
    cpu: "2"
    memory: "4Gi"
    ephemeral-storage: "8Gi"

nodeSelector: {}
tolerations: []
priorityClassName: ""

affinity:
  nodeAffinity: {}
  podAffinity: {}
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          topologyKey: kubernetes.io/hostname
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values: ["aethernova-node"]

topologySpreadConstraints:
  - maxSkew: 1
    topologyKey: topology.kubernetes.io/zone
    whenUnsatisfiable: ScheduleAnyway
    labelSelector:
      matchLabels:
        app.kubernetes.io/name: aethernova-node

livenessProbe:
  enabled: true
  httpGet:
    path: /healthz
    port: 8545
  initialDelaySeconds: 30
  periodSeconds: 15
  timeoutSeconds: 5
  failureThreshold: 5
  successThreshold: 1

readinessProbe:
  enabled: true
  httpGet:
    path: /readyz
    port: 8545
  initialDelaySeconds: 15
  periodSeconds: 10
  timeoutSeconds: 3
  failureThreshold: 6
  successThreshold: 1

startupProbe:
  enabled: true
  httpGet:
    path: /startupz
    port: 8545
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 3
  failureThreshold: 30

pdb:
  enabled: true
  minAvailable: 0
  maxUnavailable: 1
  labels: {}
  annotations: {}

serviceMonitor:
  enabled: true
  namespace: ""
  labels: {}
  annotations: {}
  interval: 30s
  scrapeTimeout: 10s
  scheme: http
  endpoints:
    - port: metrics
      path: /metrics
      honorLabels: true
      relabelings: []

prometheusRule:
  enabled: true
  labels: {}
  annotations: {}
  groups:
    - name: aethernova-node.rules
      rules:
        - alert: AethernovaNodeDown
          expr: up{job="aethernova-node"} == 0
          for: 5m
          labels:
            severity: critical
          annotations:
            summary: "aethernova-node is down"
            description: "No metrics scraped for 5 minutes."
        - alert: AethernovaNodeHighMemory
          expr: container_memory_working_set_bytes{container="aethernova-node"} > 3 * 1024 * 1024 * 1024
          for: 10m
          labels:
            severity: warning
          annotations:
            summary: "High memory usage"

hpa:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

env:
  - name: AETHERNOVA_CONFIG
    value: /config/config.toml

command: []
args: []

config:
  enabled: true
  data:
    config.toml: |-
      # Aethernova node config
      network = "mainnet"
      data_dir = "/data"
      p2p_port = 30303
      rpc_enabled = true
      rpc_addr = "0.0.0.0:8545"
      telemetry_enabled = true
      telemetry_addr = "0.0.0.0:9100"

initContainers:
  - name: init-config
    image: busybox:1.36
    command: ["sh","-c","test -f /config/config.toml || cp /config-default/config.toml /config/config.toml"]
    securityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      runAsUser: 10001
      runAsGroup: 10001
      capabilities:
        drop: ["ALL"]
    volumeMounts:
      - name: config
        mountPath: /config
      - name: config-default
        mountPath: /config-default

sidecars:
  metricsExporter:
    enabled: true
    image:
      repository: prom/node-exporter
      tag: v1.8.1
      pullPolicy: IfNotPresent
    ports:
      - name: metrics
        containerPort: 9100
    resources:
      requests:
        cpu: "25m"
        memory: "64Mi"
      limits:
        cpu: "100m"
        memory: "128Mi"
    securityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      runAsUser: 10001
      runAsGroup: 10001
      capabilities:
        drop: ["ALL"]

extraVolumes:
  - name: config
    emptyDir: {}
  - name: config-default
    configMap:
      name: aethernova-node-config
      optional: true
  - name: data
    persistentVolumeClaim:
      claimName: ""  # if using persistence.existingClaim

extraVolumeMounts:
  - name: config
    mountPath: /config
    readOnly: false
  - name: config-default
    mountPath: /config-default
    readOnly: true
  - name: data
    mountPath: /data
    readOnly: false

lifecycle:
  preStop:
    exec:
      command: ["sh","-c","sleep 5"]
logging:
  level: info
  format: json
