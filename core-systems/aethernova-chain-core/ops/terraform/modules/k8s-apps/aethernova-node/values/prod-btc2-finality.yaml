# aethernova-chain-core/ops/terraform/modules/k8s-apps/aethernova-node/values/prod-btc2-finality.yaml
# Профиль: production, stateful blockchain node (без спекуляций о конкретной "BTC 2.0" реализации)

# ------------------------------------------------------------------------------
# Контроллер и масштабирование (stateful)
# ------------------------------------------------------------------------------
controller:
  type: statefulset  # Stateful workloads per K8s docs. :contentReference[oaicite:3]{index=3}
  revisionHistoryLimit: 10
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0

replicaCount: 3  # Для высокой доступности совместно с PDB/topology spread. :contentReference[oaicite:4]{index=4}

# ------------------------------------------------------------------------------
# Образ
# ------------------------------------------------------------------------------
image:
  repository: registry.example.com/aethernova/btc2-node
  tag: "v1.0.0"
  pullPolicy: IfNotPresent
imagePullSecrets: []

# ------------------------------------------------------------------------------
# Сервисный аккаунт
# ------------------------------------------------------------------------------
serviceAccount:
  create: true
  name: ""
  annotations: {}

# ------------------------------------------------------------------------------
# Безопасность Pod/Container (PSS restricted-aligned + seccomp RuntimeDefault)
# ------------------------------------------------------------------------------
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 10001
  runAsGroup: 10001
  fsGroup: 10001
  seccompProfile:
    type: RuntimeDefault  # Рекомендовано PSS/секция seccomp. :contentReference[oaicite:5]{index=5}

containerSecurityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop: ["ALL"]  # PSS restricted рекомендует drop ALL. :contentReference[oaicite:6]{index=6}

# ------------------------------------------------------------------------------
# Ресурсы
# ------------------------------------------------------------------------------
resources:
  requests:
    cpu: "2000m"
    memory: "8Gi"
  limits:
    cpu: "4000m"
    memory: "16Gi"

# ------------------------------------------------------------------------------
# Хранилище
# ------------------------------------------------------------------------------
persistence:
  enabled: true
  # StatefulSet PVC per replica (volumeClaimTemplates в шаблоне чарта)
  accessModes: ["ReadWriteOnce"]
  size: 1000Gi
  storageClass: "fast-ssd"
  annotations: {}
  selector: {}
  existingClaim: ""  # при миграции можно подставить существующий PVC

# ------------------------------------------------------------------------------
# Порты/Сервисы
# ------------------------------------------------------------------------------
service:
  p2p:
    enabled: true
    type: ClusterIP
    clusterIP: None  # headless для стабильных DNS имён pod-ов
    port: 30303
    annotations: {}
    labels: {}
  rpc:
    enabled: true
    type: ClusterIP
    port: 8545
    annotations: {}
    labels: {}
  metrics:
    enabled: true
    type: ClusterIP
    port: 9090

ingress:
  rpc:
    enabled: false
  metrics:
    enabled: false

# ------------------------------------------------------------------------------
# Здоровье (пробы) — длительный старт синка учитывается startupProbe
# ------------------------------------------------------------------------------
probes:
  startupProbe:
    enabled: true
    tcpSocket:
      port: 30303
    failureThreshold: 60   # допускаем длительный старт
    periodSeconds: 10
  livenessProbe:
    enabled: true
    tcpSocket:
      port: 30303
    initialDelaySeconds: 30
    periodSeconds: 10
    failureThreshold: 6
  readinessProbe:
    enabled: true
    httpGet:
      path: /healthz
      port: 8545
    initialDelaySeconds: 20
    periodSeconds: 10
    failureThreshold: 6
# Применение liveness/readiness/startup соответствует официальным практикам. :contentReference[oaicite:7]{index=7}

# ------------------------------------------------------------------------------
# PDB — ограничение добровольных остановок
# ------------------------------------------------------------------------------
podDisruptionBudget:
  enabled: true
  minAvailable: 2  # при 3 репликах
# PDB повышает доступность при обслуживании/обновлении. :contentReference[oaicite:8]{index=8}

# ------------------------------------------------------------------------------
# Распределение по зонам/нодам
# ------------------------------------------------------------------------------
topologySpreadConstraints:
  enabled: true
  rules:
    - maxSkew: 1
      whenUnsatisfiable: DoNotSchedule
      topologyKey: topology.kubernetes.io/zone
      labelSelector:
        matchLabels:
          app.kubernetes.io/name: aethernova-node
    - maxSkew: 1
      whenUnsatisfiable: DoNotSchedule
      topologyKey: kubernetes.io/hostname
      labelSelector:
        matchLabels:
          app.kubernetes.io/name: aethernova-node
# Контролируемое распределение повышает HA. :contentReference[oaicite:9]{index=9}

affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - topologyKey: kubernetes.io/hostname
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: aethernova-node

nodeSelector: {}
tolerations: []
priorityClassName: ""  # при необходимости используйте приоритеты

# ------------------------------------------------------------------------------
# Сетевые политики (default-deny + разрешения на нужные порты)
# ------------------------------------------------------------------------------
networkPolicy:
  enabled: true
  ingress:
    - name: allow-p2p-from-cluster
      podSelector: {}
      policyTypes: ["Ingress"]
      ingress:
        - from:
            - podSelector: {}   # при необходимости сузьте селекторы/namespaceSelector
            - namespaceSelector: {}
          ports:
            - protocol: TCP
              port: 30303
    - name: allow-rpc-from-app-namespace
      podSelector: {}
      policyTypes: ["Ingress"]
      ingress:
        - from:
            - namespaceSelector:
                matchLabels:
                  ns.aethernova.io/role: app
          ports:
            - protocol: TCP
              port: 8545
  egress:
    - name: allow-dns-and-peers
      policyTypes: ["Egress"]
      egress:
        - to:
            - namespaceSelector: {}   # DNS/CoreDNS и пр.
          ports:
            - protocol: UDP
              port: 53
            - protocol: TCP
              port: 53
        - to: []  # добавьте CIDR/namespaceSelector для пиров/бута
          ports:
            - protocol: TCP
              port: 30303
# NetworkPolicy — штатный механизм ограничения трафика. :contentReference[oaicite:10]{index=10}

# ------------------------------------------------------------------------------
# Обсервабилити: Prometheus Operator ServiceMonitor
# ------------------------------------------------------------------------------
metrics:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    scrapeTimeout: 10s
    namespace: "monitoring"
    selector: {}
    endpoints:
      - port: metrics
        path: /metrics
        honorLabels: true

# ------------------------------------------------------------------------------
# Конфигурация ноды (параметры приложения без спекуляций о семантике)
# ------------------------------------------------------------------------------
env:
  - name: AE_NODE_NETWORK
    value: "mainnet"
  - name: AE_NODE_LOG_LEVEL
    value: "info"

extraArgs: []  # укажите аргументы бинарника ноды при наличии

# Блок финализации/чекпойнтов — параметры приложения заполняются вами.
finality:
  checkpointSync:
    enabled: false
    # Ниже — ПРИМЕР полей, не утверждение схемы приложения:
    trustedHeight: ""     # пример: "123456"
    trustedHash: ""       # пример: "0xabc..."
    sourceURL: ""         # пример: "https://snapshots.example.com/checkpoints.json"
  # Доп. параметры финализации, если поддерживаются узлом:
  extra: {}

# ------------------------------------------------------------------------------
# Инициализация и дополнительные контейнеры
# ------------------------------------------------------------------------------
initContainers:
  - name: init-permissions
    image: busybox:1.36
    command: ["sh", "-c", "chown -R 10001:10001 /data || true"]
    securityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop: ["ALL"]

extraContainers: []
extraVolumes: []
extraVolumeMounts: []

# ------------------------------------------------------------------------------
# Маркировка/Аннотации
# ------------------------------------------------------------------------------
podLabels:
  app.kubernetes.io/name: aethernova-node
  app.kubernetes.io/part-of: aethernova-chain-core
  app.kubernetes.io/component: node
podAnnotations: {}

# ------------------------------------------------------------------------------
# Логи/ротация — на уровне DaemonSet лог-агента (в чарте не включаем по умолчанию)
# ------------------------------------------------------------------------------
logging:
  enabled: false
