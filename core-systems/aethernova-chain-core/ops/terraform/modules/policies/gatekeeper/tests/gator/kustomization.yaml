# kustomization.yaml
# Aethernova — Gatekeeper/Gator policy tests assembly
# Собирает ВСЕ тестовые ресурсы (Suite/Test/Case) из подкаталога cases/
# для локального и CI-запуска: `gator verify .` или `gator test .`
# Документация Gator (Suite/Test/Case): https://open-policy-agent.github.io/gatekeeper/website/docs/gator/
# Документация Kustomize: https://kubernetes.io/docs/tasks/manage-kubernetes-objects/kustomization/

apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

# Единые метки для трассировки в CI и артефактах
commonLabels:
  app.kubernetes.io/name: gatekeeper-policy-tests
  app.kubernetes.io/part-of: aethernova-chain-core
  app.kubernetes.io/component: gatekeeper-gator
  app.kubernetes.io/managed-by: kustomize

# ВАЖНО:
# 1) Gator читает файлы Suite/Test/Case как обычные YAML-манифесты.
# 2) Указание каталога `cases/` в resources означает, что kustomize поднимет все YAML-файлы рекурсивно.
# 3) Внутри cases/ обычно лежит и suite.yaml, и подкаталоги pass/fail с объектами.
# 4) Если вы храните шаблоны/констрейнты отдельно, добавьте их как каталоги в resources (см. примеры ниже).

resources:
  # Базовая папка со всеми кейсами (Suite/Test/Case и тестовые объекты)
  - cases/

  # ПРИМЕРЫ (раскомментируйте, если у вас есть такие каталоги рядом с cases/):
  # - templates/      # ConstraintTemplates (*.yaml)
  # - constraints/    # Constraints (*.yaml)
  # - expansions/     # ExpansionTemplates (*.yaml)
  # - mutations/      # Assign/AssignMetadata/ModifySet тестовые артефакты (*.yaml)

# Дополнительно: жёсткие замены значений (если нужно параметризовать тесты)
# patchesStrategicMerge:
#   - patches/override-namespace.yaml
#   - patches/override-violations-threshold.yaml

# Дополнительно: ограничения на тип ресурсов, если нужно исключить что-то из сборки.
# В большинстве случаев НЕ требуется, т.к. Gator парсит только поддерживаемые типы Suite/Test/Case.
# configurations:
#   - kustomize-configs/gator-kinds.yaml

# Пример build-метаданных в аннотациях (опционально, удобно для CI)
# commonAnnotations:
#   ci/build-id: "${BUILD_ID}"
#   ci/commit: "${GIT_COMMIT_SHA}"
#   ci/branch: "${GIT_BRANCH}"

# Пример генераторов (обычно НЕ требуется для gator, но допускается, если кейсы читают такие данные)
# configMapGenerator:
#   - name: gator-test-config
#     literals:
#       - testRun=default
# generatorOptions:
#   disableNameSuffixHash: true
