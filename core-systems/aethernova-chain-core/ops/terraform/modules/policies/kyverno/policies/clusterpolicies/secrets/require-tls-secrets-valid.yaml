apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: require-tls-secrets-valid
  annotations:
    policies.kyverno.io/title: "Require valid TLS Secrets"
    policies.kyverno.io/category: "Secrets / TLS hygiene"
    policies.kyverno.io/subject: "Secret (kubernetes.io/tls)"
    policies.kyverno.io/description: >
      Enforce TLS Secret correctness:
      1) type must be kubernetes.io/tls; 2) keys tls.crt and tls.key must exist and be non-empty;
      3) tls.crt must be a valid PEM-encoded X.509 certificate; 4) certificate must be currently valid
      and must not expire within the configured buffer window (default 14 days).
      Implemented via Kyverno JMESPath filters: base64_decode(), x509_decode(), time_now_utc(),
      time_add(), time_after(), time_before().

spec:
  background: true
  validationFailureAction: Enforce
  rules:

    # 1) Контроль типа и обязательных ключей
    - name: tls-secret-structure
      match:
        any:
          - resources:
              kinds: ["Secret"]
      preconditions:
        all:
          - key: "{{ request.object.type || '' }}"
            operator: Equals
            value: "kubernetes.io/tls"
      validate:
        message: >-
          TLS Secret must have type 'kubernetes.io/tls' and contain non-empty 'tls.crt' and 'tls.key'.
          See Kubernetes docs for TLS Secrets.
        pattern:
          # Тип зафиксирован в preconditions, дублируем для читаемости и отчётности
          type: "kubernetes.io/tls"
          data:
            tls.crt: "?*"
            tls.key: "?*"

    # 2) Криптографическая валидность сертификата и срок действия
    - name: tls-certificate-validity
      match:
        any:
          - resources:
              kinds: ["Secret"]
      preconditions:
        all:
          - key: "{{ request.object.type || '' }}"
            operator: Equals
            value: "kubernetes.io/tls"
          - key: "{{ request.object.data['tls\\.crt'] || '' }}"
            operator: NotEquals
            value: ""
      validate:
        failureAction: Enforce
        # Буфер до истечения (часы). 336h = 14 дней. При необходимости измените.
        context:
          - name: expiry_buffer
            variable:
              value: "336h"
        deny:
          conditions:
            any:
              # a) Сертификат не парсится (невалидный PEM / X.509)
              - key: "{{ x509_decode(base64_decode(request.object.data['tls\\.crt']))['NotAfter'] || '' }}"
                operator: Equals
                value: ""

              # b) Сертификат уже истёк: NotAfter <= now
              - key: "{{ time_after(time_now_utc(), x509_decode(base64_decode(request.object.data['tls\\.crt']))['NotAfter']) }}"
                operator: Equals
                value: true

              # c) Срок годности начинается в будущем (NotBefore > now) — отклоняем
              - key: "{{ time_before(x509_decode(base64_decode(request.object.data['tls\\.crt']))['NotBefore'], time_now_utc()) }}"
                operator: Equals
                value: false

              # d) Истекает слишком скоро: NotAfter < now + buffer
              - key: "{{ time_before(x509_decode(base64_decode(request.object.data['tls\\.crt']))['NotAfter'], time_add(time_now_utc(), expiry_buffer)) }}"
                operator: Equals
                value: true
        message: >-
          TLS certificate in 'tls.crt' must be a valid PEM X.509, currently valid (NotBefore <= now),
          not expired (NotAfter > now), and must not expire within {{ expiry_buffer }} from now.

    # 3) (Опционально) Блокировать пустые или отсутствующие данные даже при stringData-использовании
    - name: tls-secret-nonempty-data
      match:
        any:
          - resources:
              kinds: ["Secret"]
      preconditions:
        all:
          - key: "{{ request.object.type || '' }}"
            operator: Equals
            value: "kubernetes.io/tls"
      validate:
        message: >-
          TLS Secret must contain base64-encoded non-empty data fields 'tls.crt' and 'tls.key'.
        anyPattern:
          - data:
              tls.crt: "?*"
              tls.key: "?*"
          - stringData:
              tls.crt: "?*"
              tls.key: "?*"
