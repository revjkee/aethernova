apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: restrict-secret-types
  annotations:
    policies.kyverno.io/title: Restrict Secret Types and Enforce Structure
    policies.kyverno.io/category: Secrets Governance
    policies.kyverno.io/severity: high
    policies.kyverno.io/subject: Secret
    policies.kyverno.io/description: >
      Enforce an allow-list of Kubernetes Secret types, block legacy service account token
      Secret creation by default, and validate schema for special Secret types (TLS, Docker config JSON).
      Aligns with Kubernetes docs and Kyverno policy patterns.
spec:
  validationFailureAction: Enforce
  background: true
  rules:
    # 1) Разрешаем только определённые типы Secret (или отсутствие type => Opaque по умолчанию)
    - name: allowlist-secret-types
      match:
        any:
          - resources:
              kinds: ["Secret"]
      preconditions:
        all:
          - key: "{{ request.operation || 'BACKGROUND' }}"
            operator: NotEquals
            value: DELETE
      validate:
        message: >-
          Secret 'type' must be one of the approved types: Opaque (default/unspecified),
          kubernetes.io/dockerconfigjson, kubernetes.io/tls, kubernetes.io/basic-auth, kubernetes.io/ssh-auth.
        deny:
          conditions:
            all:
              - key: "{{ request.object.type || 'Opaque' }}"
                operator: AnyNotIn
                value:
                  - Opaque
                  - kubernetes.io/dockerconfigjson
                  - kubernetes.io/tls
                  - kubernetes.io/basic-auth
                  - kubernetes.io/ssh-auth

    # 2) Блокируем ручное создание legacy service account token Secret,
    #    кроме системных NS и явно разрешённых неймспейсов.
    - name: block-manual-sa-token-secrets
      match:
        any:
          - resources:
              kinds: ["Secret"]
      preconditions:
        all:
          # Применяем только к Secret с типом service-account-token
          - key: "{{ request.object.type || '' }}"
            operator: Equals
            value: "kubernetes.io/service-account-token"
          - key: "{{ request.operation || 'BACKGROUND' }}"
            operator: NotEquals
            value: DELETE
          # Исключаем системные NS
          - key: "{{ request.namespace }}"
            operator: AnyNotIn
            value:
              - kube-system
              - kube-public
              - kyverno
      validate:
        message: >-
          Creating Secrets of type 'kubernetes.io/service-account-token' is blocked by default.
          Use projected, bound tokens (TokenRequest) instead. To allow in a specific namespace,
          label it with 'secrets.aethernova.io/allow-sa-token=true'.
        deny:
          conditions:
            all:
              - key: "{{ request.namespace | default(@, '') }}"
                operator: NotIn
                value: []
              - key: "{{ request.namespace | default(@, '') }}"
                operator: AnyNotIn
                value: []
              - key: "{{ request.namespace_labels['secrets.aethernova.io/allow-sa-token'] || 'false' }}"
                operator: NotEquals
                value: "true"

    # 3) Валидация структуры TLS Secret: обязательны tls.crt и tls.key
    - name: validate-tls-secret-keys
      match:
        any:
          - resources:
              kinds: ["Secret"]
      preconditions:
        all:
          - key: "{{ request.object.type || '' }}"
            operator: Equals
            value: "kubernetes.io/tls"
          - key: "{{ request.operation || 'BACKGROUND' }}"
            operator: NotEquals
            value: DELETE
      validate:
        message: "TLS Secret must contain 'tls.crt' and 'tls.key' in data or stringData."
        anyPattern:
          - data:
              tls.crt: "?*"
              tls.key: "?*"
          - stringData:
              tls.crt: "?*"
              tls.key: "?*"

    # 4) Валидация структуры dockerconfigjson: обязателен .dockerconfigjson
    - name: validate-dockerconfigjson-secret-key
      match:
        any:
          - resources:
              kinds: ["Secret"]
      preconditions:
        all:
          - key: "{{ request.object.type || '' }}"
            operator: Equals
            value: "kubernetes.io/dockerconfigjson"
          - key: "{{ request.operation || 'BACKGROUND' }}"
            operator: NotEquals
            value: DELETE
      validate:
        message: "kubernetes.io/dockerconfigjson Secret must contain key '.dockerconfigjson' in data."
        pattern:
          data:
            ".dockerconfigjson": "?*"
