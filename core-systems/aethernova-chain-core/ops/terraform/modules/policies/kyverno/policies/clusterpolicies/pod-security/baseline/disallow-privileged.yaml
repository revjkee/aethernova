apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: disallow-privileged-containers
  labels:
    app.kubernetes.io/managed-by: kyverno
    app.kubernetes.io/part-of: aethernova-chain-core
    policy.aethernova.io/category: pod-security
    policy.aethernova.io/pss-level: baseline
    policy.aethernova.io/severity: high
  annotations:
    policies.kyverno.io/title: "Disallow Privileged Containers"
    policies.kyverno.io/category: "Pod Security"
    policies.kyverno.io/subject: "Pod, Pod controllers"
    policies.kyverno.io/description: >
      Blocks containers running in privileged mode across Pods and Pod controllers
      (Deployment/StatefulSet/DaemonSet/Job/CronJob). Based on Kubernetes Pod Security
      Standards (baseline forbids privileged) and Kyverno best practices.
      Set label policy.aethernova.io/allow-privileged=true to explicitly allow in controlled namespaces.
spec:
  validationFailureAction: Enforce   # Enforce = блокировать, Audit = только отчёт. см. доки Kyverno. 
  background: true
  failurePolicy: Fail
  rules:
    # 1) Непосредственные Pod-объекты
    - name: disallow-privileged-in-pods
      match:
        any:
          - resources:
              kinds:
                - Pod
      exclude:
        any:
          # системные NS и сам Kyverno
          - resources:
              namespaces:
                - kube-system
                - kyverno
          # опциональное точечное разрешение по метке (например, для отладочных NS)
          - resources:
              selector:
                matchLabels:
                  policy.aethernova.io/allow-privileged: "true"
      validate:
        message: "Privileged containers are not allowed by Aethernova PSS:baseline."
        foreach:
          - list: "request.object.spec.containers"
            deny:
              conditions:
                any:
                  - key: "{{ element.securityContext.privileged || false }}"
                    operator: Equals
                    value: true
          - list: "request.object.spec.initContainers"
            deny:
              conditions:
                any:
                  - key: "{{ element.securityContext.privileged || false }}"
                    operator: Equals
                    value: true
          - list: "request.object.spec.ephemeralContainers"
            deny:
              conditions:
                any:
                  - key: "{{ element.securityContext.privileged || false }}"
                    operator: Equals
                    value: true

    # 2) Pod-контроллеры: проверяем шаблон Pod в spec.template
    - name: disallow-privileged-in-controllers
      match:
        any:
          - resources:
              kinds:
                - Deployment
                - StatefulSet
                - DaemonSet
                - Job
                - CronJob
      exclude:
        any:
          - resources:
              namespaces:
                - kube-system
                - kyverno
          - resources:
              selector:
                matchLabels:
                  policy.aethernova.io/allow-privileged: "true"
      preconditions:
        all:
          - key: "{{ request.object.spec.template }}"
            operator: NotEquals
            value: null
      validate:
        message: "Privileged containers are not allowed in Pod templates by Aethernova PSS:baseline."
        foreach:
          - list: "request.object.spec.template.spec.containers"
            deny:
              conditions:
                any:
                  - key: "{{ element.securityContext.privileged || false }}"
                    operator: Equals
                    value: true
          - list: "request.object.spec.template.spec.initContainers"
            deny:
              conditions:
                any:
                  - key: "{{ element.securityContext.privileged || false }}"
                    operator: Equals
                    value: true
          - list: "request.object.spec.template.spec.ephemeralContainers"
            deny:
              conditions:
                any:
                  - key: "{{ element.securityContext.privileged || false }}"
                    operator: Equals
                    value: true
