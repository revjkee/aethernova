# Global knobs applied by your Helm/ytt templates when rendering Kyverno policies
global:
  metadata:
    annotations:
      policies.kyverno.io/owner: "aethernova"
      policies.kyverno.io/environment: "prod"
    labels:
      app.kubernetes.io/part-of: "aethernova-chain-core"
      app.kubernetes.io/managed-by: "terraform"

  # Default enforcement behavior for all rendered ClusterPolicies/Policies.
  # Kyverno: Enforce blocks non-compliant resources; Audit allows but reports. (docs)
  # Ref: https://kyverno.io/docs/policy-types/cluster-policy/validate/
  validationFailureAction: "Enforce"

  # Optional per-namespace overrides of validationFailureAction (e.g., soften to Audit in dev)
  # Kyverno supports validationFailureActionOverrides at ClusterPolicy level. (docs)
  # Ref: https://release-1-12-0.kyverno.io/docs/writing-policies/policy-settings/
  validationFailureActionOverrides:
    - namespaces: ["dev", "sandbox"]
      action: "Audit"

  # Failure policy of the admission webhook for policy evaluation (Fail or Ignore)
  # Keep Fail in production to avoid silent drift.
  failurePolicy: "Fail"

  # Apply validations in background mode as well (true recommended)
  background: true

  # Common match/exclude scaffolding (consumed by templates)
  # Kyverno match/exclude structure. (docs)
  # Ref: https://main.kyverno.io/docs/policy-types/cluster-policy/match-exclude/
  match:
    any:
      - resources:
          kinds:
            - Pod
  exclude:
    any:
      - resources:
          namespaces:
            - kube-system
            - kyverno
            - kube-public
            - gatekeeper-system
            - local-path-storage
          # Example: exclude Rancher & monitoring stacks by labels if desired
          selector:
            matchExpressions:
              - key: "kubernetes.io/metadata.name"
                operator: In
                values: ["cattle-system", "monitoring"]

  # Optional resourceSelectors at webhook level (used by some charts/templates)
  # See Kyverno discussions on excluding namespaces via namespaceSelector/resourceFilters if needed.
  # Ref: https://github.com/kyverno/kyverno/discussions/4495
  webhookNamespaceSelector:
    matchExpressions: []

  # Default severity/category for rendered rules (overridable per policy)
  severity: "medium"
  category: "Best Practices"

  # Standard label selector applied to rules where applicable
  defaultRuleSelector:
    matchExpressions: []

  # Toggle to emit PolicyReports/ClusterPolicyReports (Audit will always report)
  reporting:
    policyReportsEnabled: true

# Category: best-practices (sample group)
bestPractices:
  enabled: true

  # Policy: require-requests-limits
  # Based on Kyverno library "Require Limits and Requests": requires CPU/Memory requests and Memory limits
  # for containers, initContainers, ephemeralContainers. (docs)
  # Ref: https://kyverno.io/policies/best-practices/require-pod-requests-limits/require-pod-requests-limits/
  requireRequestsLimits:
    enabled: true

    # Per-policy overrides (if not set, fall back to global.*)
    validationFailureAction: null         # "Enforce" | "Audit" | null (inherit)
    failurePolicy: null                   # "Fail" | "Ignore" | null (inherit)
    background: null                      # true | false | null (inherit)
    severity: "medium"
    category: "Best Practices"
    subject: "Pod"

    # Match/Exclude refinements specific to this policy
    match:
      any:
        - resources:
            kinds: ["Pod"]
            # Optional additional selectors for this policy only
            selector:
              matchExpressions: []
    exclude:
      any:
        - resources:
            namespaces:
              - kube-system
              - kyverno
              - kube-public
              - gatekeeper-system

    # Message to present on validation failure
    message: "CPU and memory requests and memory limits are required for all containers."

    # Which container groups to check
    check:
      containers: true
      initContainers: true
      ephemeralContainers: true

    # Enforce which resources exactly must be present
    require:
      requests:
        cpu: true
        memory: true
      limits:
        memory: true
        cpu: false   # intentionally false to follow Kyverno library behavior (avoid unintended throttling)

    # Optional namespace-scoped override of validationFailureAction for this policy only
    validationFailureActionOverrides:
      - namespaces: ["dev", "sandbox"]
        action: "Audit"

    # Optional additional dynamic allowlist via ConfigMap lookup, if your templates support it
    # Ref sample: https://kyverno.io/policies/other/exclude-namespaces-dynamically/exclude-namespaces-dynamically/
    dynamicNamespaceAllowlist:
      enabled: false
      configMapRef:
        name: "kyverno-allowlist"
        namespace: "kyverno"
        key: "namespaces.json"   # expects a JSON array of strings

# You may add more policy families below (security, pod-security, images, network, etc.)
# following the same pattern (enabled flags, per-policy overrides, match/exclude, messages).
#
# Example stub for future policies:
security:
  enabled: false
  disallowPrivileged:
    enabled: false
    validationFailureAction: null
    severity: "high"
    category: "Security"
    match:
      any:
        - resources:
            kinds: ["Pod"]
    exclude:
      any:
        - resources:
            namespaces:
              - kube-system
              - kyverno
