# SPDX-License-Identifier: Apache-2.0
# Industrial-grade Helm values for Aethernova Chain Core

# -----------------------------------------------------------------------------
# Feature flags (runtime)
# -----------------------------------------------------------------------------
featureFlags:
  btc2_finality: true        # финализация в стиле BTC 2.0
  parallel_exec: true        # параллельное исполнение блоков/tx
  zk_priv_tx: false          # приватные транзакции с ZK (по умолчанию off)

# -----------------------------------------------------------------------------
# Global image/pull/policy
# -----------------------------------------------------------------------------
image:
  repository: ghcr.io/aethernova/chain-core
  tag: "v1.0.0"
  pullPolicy: IfNotPresent
  pullSecrets: []            # e.g. ["regcred"]

# -----------------------------------------------------------------------------
# Deployment kind & replicas
# -----------------------------------------------------------------------------
controller:
  kind: Deployment            # или StatefulSet, если требуется жёсткая привязка дисков/идентичность
  replicas: 3

# -----------------------------------------------------------------------------
# Service (internal traffic)
# -----------------------------------------------------------------------------
service:
  enabled: true
  type: ClusterIP
  annotations: {}
  labels: {}
  ports:
    p2p:
      port: 30303
      targetPort: 30303
      protocol: TCP
    rpc:
      port: 8545
      targetPort: 8545
      protocol: TCP
    metrics:
      port: 9100
      targetPort: 9100
      protocol: TCP

# -----------------------------------------------------------------------------
# Ingress (RPC/UI), отключено по умолчанию
# -----------------------------------------------------------------------------
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts: []
  tls: []

# -----------------------------------------------------------------------------
# Probes (per K8s guidance)
# -----------------------------------------------------------------------------
probes:
  liveness:
    enabled: true
    httpGet:
      path: /healthz
      port: rpc
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 2
    failureThreshold: 6
  readiness:
    enabled: true
    httpGet:
      path: /ready
      port: rpc
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 2
    failureThreshold: 6
  startup:
    enabled: true
    httpGet:
      path: /startup
      port: rpc
    failureThreshold: 60
    periodSeconds: 5
    timeoutSeconds: 2

# -----------------------------------------------------------------------------
# Resources (defaults tuned for production; overridden by profiles.*)
# -----------------------------------------------------------------------------
resources:
  limits:
    cpu: "4"
    memory: "8Gi"
  requests:
    cpu: "2"
    memory: "4Gi"

# -----------------------------------------------------------------------------
# Profiles (override sections by environment)
# -----------------------------------------------------------------------------
profiles:
  production:
    controller:
      replicas: 5
    resources:
      limits:
        cpu: "8"
        memory: "16Gi"
      requests:
        cpu: "4"
        memory: "8Gi"
    pdb:
      enabled: true
      minAvailable: "80%"
    hpa:
      enabled: true
      minReplicas: 5
      maxReplicas: 20
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 60
  staging:
    controller:
      replicas: 3
    resources:
      limits:
        cpu: "4"
        memory: "8Gi"
      requests:
        cpu: "2"
        memory: "4Gi"
    hpa:
      enabled: true
      minReplicas: 3
      maxReplicas: 10
  dev:
    controller:
      replicas: 1
    resources:
      limits:
        cpu: "2"
        memory: "4Gi"
      requests:
        cpu: "1"
        memory: "2Gi"
    probes:
      startup:
        failureThreshold: 120   # дольше инициализация в dev

# -----------------------------------------------------------------------------
# Affinity / Scheduling / Spread / Priority
# -----------------------------------------------------------------------------
scheduling:
  nodeSelector: {}
  tolerations: []
  priorityClassName: ""
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution: []
  topologySpreadConstraints:
    enabled: true
    rules:
      - maxSkew: 1
        topologyKey: "topology.kubernetes.io/zone"
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: "aethernova-chain-core"
      - maxSkew: 1
        topologyKey: "kubernetes.io/hostname"
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: "aethernova-chain-core"

# -----------------------------------------------------------------------------
# Security (Pod & Container Security Context) — Restricted profile friendly
# -----------------------------------------------------------------------------
security:
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 10001
    runAsGroup: 10001
    fsGroup: 10001
    seccompProfile:
      type: RuntimeDefault
  containerSecurityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop: ["ALL"]

# -----------------------------------------------------------------------------
# Env & Secrets
# -----------------------------------------------------------------------------
env:
  # обычные env
  - name: CHAIN_ENV
    value: "prod"
  - name: AE_FEATURES
    value: "btc2_finality,parallel_exec"
  # секреты из Secret
  secretRefs:
    - name: aethernova-core-secrets
      keys:
        - AE_PRIV_VALIDATOR_KEY
        - AE_DB_PASSWORD

# -----------------------------------------------------------------------------
# Persistent storage (for stateful usage)
# -----------------------------------------------------------------------------
persistence:
  enabled: true
  accessModes: ["ReadWriteOnce"]
  size: 200Gi
  storageClass: ""
  annotations: {}
  selector: {}

# -----------------------------------------------------------------------------
# Autoscaling (HPA v2)
# -----------------------------------------------------------------------------
hpa:
  enabled: false
  minReplicas: 3
  maxReplicas: 15
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 75
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 100
          periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60

# -----------------------------------------------------------------------------
# PodDisruptionBudget
# -----------------------------------------------------------------------------
pdb:
  enabled: true
  minAvailable: "66%"   # гарантировать невыпадение кворума при деплойментах/эвикшене

# -----------------------------------------------------------------------------
# Metrics & Monitoring (Prometheus Operator)
# -----------------------------------------------------------------------------
metrics:
  enabled: true
  # альтернативный «голый» scrape через аннотации для обычного Prometheus
  serviceAnnotations: {}
  serviceMonitor:
    enabled: true
    interval: 15s
    scrapeTimeout: 10s
    labels: {}
    additionalEndpoints: []  # [{ port: "metrics", path: "/metrics" }]
    scheme: http
    tlsConfig: {}
    relabelings: []
    metricRelabelings: []

# -----------------------------------------------------------------------------
# NetworkPolicy (default deny egress optional)
# -----------------------------------------------------------------------------
networkPolicy:
  enabled: true
  ingress:
    enabled: true
    from:
      - namespaceSelector: {}
  egress:
    enabled: true
    to:
      - namespaceSelector: {}
  podSelector:
    matchLabels:
      app.kubernetes.io/name: "aethernova-chain-core"

# -----------------------------------------------------------------------------
# Sidecars / Init Containers
# -----------------------------------------------------------------------------
sidecars:
  otelCollector:
    enabled: false
    image: "otel/opentelemetry-collector:0.104.0"
    config: {}        # передаётся в ConfigMap при включении
  extra: []           # произвольные дополнительные контейнеры

initContainers:
  - name: wait-deps
    enabled: true
    image: busybox:1.36
    command:
      - /bin/sh
      - -c
      - |
        set -eu
        until nc -z ${DB_HOST:-db} ${DB_PORT:-5432}; do
          echo "waiting for db..."
          sleep 2
        done

# -----------------------------------------------------------------------------
# Annotations/Labels
# -----------------------------------------------------------------------------
podAnnotations: {}
podLabels:
  app.kubernetes.io/name: "aethernova-chain-core"

# -----------------------------------------------------------------------------
# Logging
# -----------------------------------------------------------------------------
logging:
  level: "info"
  format: "json"

# -----------------------------------------------------------------------------
# Overrides for chart consumers (advanced)
# -----------------------------------------------------------------------------
extraEnv: []
extraVolumes: []
extraVolumeMounts: []
extraArgs: []
extraLabels: {}
extraAnnotations: {}
