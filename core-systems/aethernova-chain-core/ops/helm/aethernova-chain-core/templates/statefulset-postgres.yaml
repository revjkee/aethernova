{{- /*
File: ops/helm/aethernova-chain-core/templates/statefulset-postgres.yaml
Purpose: Production-grade PostgreSQL StatefulSet
*/ -}}
{{- $name := printf "%s-postgres" .Release.Name -}}
{{- $labels := dict
  "app.kubernetes.io/name" "postgres"
  "app.kubernetes.io/instance" .Release.Name
  "app.kubernetes.io/component" "database"
  "app.kubernetes.io/part-of" "aethernova-chain-core"
  "helm.sh/chart" (printf "%s-%s" .Chart.Name .Chart.Version | replace "+" "_")
  "app.kubernetes.io/managed-by" .Release.Service
-}}
{{- $ns := .Release.Namespace -}}
{{- $image := default "postgres:17" .Values.postgresql.image.repository | printf "%s" -}}
{{- $tag := default "" .Values.postgresql.image.tag -}}
{{- $pullPolicy := default "IfNotPresent" .Values.postgresql.image.pullPolicy -}}
{{- $metricsEnabled := default false .Values.postgresql.metrics.enabled -}}
{{- $walgEnabled := default false .Values.postgresql.backup.walg.enabled -}}
{{- $replicas := default 1 .Values.postgresql.replicas -}}
{{- $svcHeadless := default (printf "%s-postgres" .Release.Name) .Values.postgresql.service.headlessName -}}
{{- $storage := default "20Gi" .Values.postgresql.persistence.size -}}
{{- $sc := .Values.postgresql.persistence.storageClass -}}
{{- $accessModes := default (list "ReadWriteOnce") .Values.postgresql.persistence.accessModes -}}
{{- $pgPort := default 5432 .Values.postgresql.port -}}
{{- $pgDb := default "appdb" .Values.postgresql.database -}}
{{- $pgUser := default "appuser" .Values.postgresql.username -}}
{{- $pgData := default "/var/lib/postgresql/data/pgdata" .Values.postgresql.pgData -}}
{{- $terminationGrace := default 120 .Values.postgresql.terminationGracePeriodSeconds -}}
{{- $priorityClass := .Values.postgresql.priorityClassName -}}
{{- $serviceAccount := default (printf "%s-postgres" .Release.Name) .Values.postgresql.serviceAccountName -}}
{{- $imgPullSecrets := .Values.imagePullSecrets -}}
{{- $nodeSel := .Values.nodeSelector -}}
{{- $tolerations := .Values.tolerations -}}
{{- $affinity := .Values.affinity -}}
{{- $topology := .Values.topologySpreadConstraints -}}
{{- $podAnnotations := .Values.postgresql.podAnnotations -}}
{{- $podLabels := .Values.postgresql.podLabels -}}
{{- $confChecksum := (toJson (default dict .Values.postgresql.config) | sha256sum) -}}
{{- $secChecksum := (toJson (default dict .Values.postgresql.secretRefs) | sha256sum) -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $name }}
  namespace: {{ $ns }}
  labels: {{- toYaml $labels | nindent 4 }}
  annotations:
    checksum/config: "{{ $confChecksum }}"
    checksum/secret: "{{ $secChecksum }}"
spec:
  serviceName: {{ $svcHeadless }} # headless Service должен существовать
  replicas: {{ $replicas }}
  podManagementPolicy: OrderedReady
  revisionHistoryLimit: 10
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: database
        app.kubernetes.io/part-of: aethernova-chain-core
{{- if $podLabels }}
{{ toYaml $podLabels | indent 8 }}
{{- end }}
      annotations:
        prometheus.io/scrape: "{{ ternary "true" "false" $metricsEnabled }}"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"
        checksum/config: "{{ $confChecksum }}"
        checksum/secret: "{{ $secChecksum }}"
{{- if $podAnnotations }}
{{ toYaml $podAnnotations | indent 8 }}
{{- end }}
    spec:
      enableServiceLinks: false
      {{- if $priorityClass }}
      priorityClassName: {{ $priorityClass | quote }}
      {{- end }}
      serviceAccountName: {{ $serviceAccount }}
      terminationGracePeriodSeconds: {{ $terminationGrace }}
      securityContext:
        runAsNonRoot: true
        fsGroup: 999
        fsGroupChangePolicy: OnRootMismatch
        seccompProfile:
          type: RuntimeDefault
      {{- if $imgPullSecrets }}
      imagePullSecrets:
{{ toYaml $imgPullSecrets | indent 8 }}
      {{- end }}
      {{- if $nodeSel }}
      nodeSelector:
{{ toYaml $nodeSel | indent 8 }}
      {{- end }}
      {{- if $tolerations }}
      tolerations:
{{ toYaml $tolerations | indent 8 }}
      {{- end }}
      {{- if $affinity }}
      affinity:
{{ toYaml $affinity | indent 8 }}
      {{- else }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgres
                    app.kubernetes.io/instance: {{ .Release.Name }}
      {{- end }}
      {{- if $topology }}
      topologySpreadConstraints:
{{ toYaml $topology | indent 8 }}
      {{- else }}
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: postgres
              app.kubernetes.io/instance: {{ .Release.Name }}
      {{- end }}
      initContainers:
        - name: init-permissions
          image: {{ if $tag }}{{ printf "%s:%s" $image $tag }}{{ else }}{{ $image }}{{ end }}
          imagePullPolicy: {{ $pullPolicy }}
          command: ["/bin/sh","-ec"]
          args:
            - |
              mkdir -p {{ $pgData }} && chown -R 999:999 {{ $pgData }}
          securityContext:
            runAsUser: 0
            runAsGroup: 0
            allowPrivilegeEscalation: false
            seccompProfile: { type: RuntimeDefault }
          volumeMounts:
            - name: data
              mountPath: {{ $pgData }}
      containers:
        - name: postgres
          image: {{ if $tag }}{{ printf "%s:%s" $image $tag }}{{ else }}{{ $image }}{{ end }}
          imagePullPolicy: {{ $pullPolicy }}
          ports:
            - name: postgres
              containerPort: {{ $pgPort }}
              protocol: TCP
          env:
            - name: PGDATA
              value: {{ $pgData | quote }}
            - name: POSTGRES_DB
              value: {{ $pgDb | quote }}
            - name: POSTGRES_USER
              value: {{ $pgUser | quote }}
{{- if .Values.postgresql.existingSecret }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.existingSecret | quote }}
                  key: {{ default "postgres-password" .Values.postgresql.existingSecretKey | quote }}
{{- else if .Values.postgresql.password }}
            # WARNING: для продакшена используйте existingSecret
            - name: POSTGRES_PASSWORD
              value: {{ .Values.postgresql.password | quote }}
{{- else }}
{{-   fail "postgresql.existingSecret (рекомендуется) или postgresql.password должны быть заданы" }}
{{- end }}
          securityContext:
            runAsUser: 999
            runAsGroup: 999
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: false
            capabilities:
              drop: ["ALL"]
          resources:
{{- toYaml (default (dict "requests" (dict "cpu" "250m" "memory" "512Mi") "limits" (dict "cpu" "2000m" "memory" "2Gi")) .Values.postgresql.resources) | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: {{ $pgData }}
{{- if .Values.postgresql.extraVolumeMounts }}
{{ toYaml .Values.postgresql.extraVolumeMounts | indent 12 }}
{{- end }}
          readinessProbe:
            exec:
              command: ["sh","-ec","pg_isready -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\" -h 127.0.0.1 -p {{ $pgPort }}"]
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 6
          livenessProbe:
            exec:
              command: ["sh","-ec","pg_isready -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\" -h 127.0.0.1 -p {{ $pgPort }}"]
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 6
          startupProbe:
            exec:
              command: ["sh","-ec","pg_isready -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\" -h 127.0.0.1 -p {{ $pgPort }}"]
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 60
          lifecycle:
            preStop:
              exec:
                command: ["sh","-ec","pg_ctl -D \"$PGDATA\" -m fast stop || sleep 10"]
{{- if $metricsEnabled }}
        - name: postgres-exporter
          image: {{ default "quay.io/prometheuscommunity/postgres-exporter:v0.15.0" .Values.postgresql.metrics.image }}
          imagePullPolicy: IfNotPresent
          ports:
            - name: metrics
              containerPort: 9187
              protocol: TCP
          env:
            - name: DATA_SOURCE_NAME
{{- if .Values.postgresql.metrics.existingSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.metrics.existingSecret | quote }}
                  key: {{ default "datasource" .Values.postgresql.metrics.existingSecretKey | quote }}
{{- else }}
              value: {{ printf "postgresql://%s:%s@127.0.0.1:%d/%s?sslmode=disable" (default $pgUser .Values.postgresql.metrics.username) (default "$(POSTGRES_PASSWORD)" .Values.postgresql.metrics.password) $pgPort $pgDb | quote }}
{{- end }}
          securityContext:
            runAsUser: 65534
            runAsGroup: 65534
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities: { drop: ["ALL"] }
          resources:
{{- toYaml (default (dict "requests" (dict "cpu" "50m" "memory" "64Mi") "limits" (dict "cpu" "250m" "memory" "256Mi")) .Values.postgresql.metrics.resources) | nindent 12 }}
{{- end }}
{{- if $walgEnabled }}
        - name: wal-g
          image: {{ default "ghcr.io/wal-g/wal-g:latest" .Values.postgresql.backup.walg.image }}
          imagePullPolicy: IfNotPresent
          env:
            - name: WALG_S3_PREFIX
              valueFrom:
                secretKeyRef:
                  name: {{ required "postgresql.backup.walg.secretName is required when WAL-G enabled" .Values.postgresql.backup.walg.secretName }}
                  key: {{ default "WALG_S3_PREFIX" .Values.postgresql.backup.walg.s3PrefixKey | quote }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.backup.walg.secretName }}
                  key: {{ default "AWS_ACCESS_KEY_ID" .Values.postgresql.backup.walg.accessKeyIdKey | quote }}
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.backup.walg.secretName }}
                  key: {{ default "AWS_SECRET_ACCESS_KEY" .Values.postgresql.backup.walg.secretAccessKeyKey | quote }}
            - name: AWS_REGION
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.backup.walg.secretName }}
                  key: {{ default "AWS_REGION" .Values.postgresql.backup.walg.regionKey | quote }}
            - name: PGHOST
              value: "127.0.0.1"
            - name: PGPORT
              value: "{{ $pgPort }}"
            - name: PGUSER
              value: {{ $pgUser | quote }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.postgresql.existingSecret }}
                  key: {{ default "postgres-password" .Values.postgresql.existingSecretKey | quote }}
          args: ["sh","-ec","trap : TERM INT; while true; do sleep 3600; done"]
          securityContext:
            runAsUser: 65534
            runAsGroup: 65534
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities: { drop: ["ALL"] }
          resources:
{{- toYaml (default (dict "requests" (dict "cpu" "50m" "memory" "64Mi") "limits" (dict "cpu" "250m" "memory" "256Mi")) .Values.postgresql.backup.walg.resources) | nindent 12 }}
{{- end }}
      volumes:
{{- if .Values.postgresql.extraVolumes }}
{{ toYaml .Values.postgresql.extraVolumes | indent 8 }}
{{- end }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
{{- range $accessModes }}
          - {{ . | quote }}
{{- end }}
{{- if $sc }}
        storageClassName: {{ $sc | quote }}
{{- end }}
        resources:
          requests:
            storage: {{ $storage | quote }}
