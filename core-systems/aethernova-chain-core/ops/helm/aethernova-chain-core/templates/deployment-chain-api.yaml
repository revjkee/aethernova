apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "aethernova-chain-core.fullname" . }}-api
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "aethernova-chain-core.labels" . | nindent 4 }}
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: aethernova-chain-core
  annotations:
    # Автоперезапуск по изменению ConfigMap/Secret (оператор Reloader, если используется)
    reloader.stakater.com/auto: "true"
spec:
  replicas: {{ .Values.replicaCount | default 3 }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit | default 10 }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ .Values.rollingUpdate.maxSurge | default "25%" }}
      maxUnavailable: {{ .Values.rollingUpdate.maxUnavailable | default "25%" }}
  selector:
    matchLabels:
      {{- include "aethernova-chain-core.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: api
  template:
    metadata:
      labels:
        {{- include "aethernova-chain-core.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: api
      annotations:
        # Подсказка runtime о политике seccomp (RuntimeDefault) — рекомендованный безопасный дефолт
        # См. официальные материалы Kubernetes по seccomp RuntimeDefault.  # ref
        container.apparmor.security.beta.kubernetes.io/api: runtime/default
        # Если ваш кластер поддерживает seccomp через аннотации (старые версии) — можно раскомментировать:
        # seccomp.security.alpha.kubernetes.io/pod: runtime/default
    spec:
      serviceAccountName: {{ include "aethernova-chain-core.serviceAccountName" . }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds | default 30 }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ .Values.podSecurityContext.runAsUser | default 10001 }}
        runAsGroup: {{ .Values.podSecurityContext.runAsGroup | default 10001 }}
        fsGroup: {{ .Values.podSecurityContext.fsGroup | default 10001 }}
        seccompProfile:
          type: RuntimeDefault
      topologySpreadConstraints:
        - maxSkew: 1
          whenUnsatisfiable: ScheduleAnyway
          topologyKey: topology.kubernetes.io/zone
          labelSelector:
            matchLabels:
              {{- include "aethernova-chain-core.selectorLabels" . | nindent 14 }}
              app.kubernetes.io/component: api
        - maxSkew: 1
          whenUnsatisfiable: ScheduleAnyway
          topologyKey: kubernetes.io/hostname
          labelSelector:
            matchLabels:
              {{- include "aethernova-chain-core.selectorLabels" . | nindent 14 }}
              app.kubernetes.io/component: api
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- else }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    {{- include "aethernova-chain-core.selectorLabels" . | nindent 20 }}
                    app.kubernetes.io/component: api
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: api
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
          args:
            - "--config=/etc/aethernova/prod.toml"
          ports:
            - name: http
              containerPort: {{ .Values.service.ports.http | default 8080 }}
              protocol: TCP
            - name: grpc
              containerPort: {{ .Values.service.ports.grpc | default 50051 }}
              protocol: TCP
          env:
            - name: APP_ENV
              value: "production"
            - name: TZ
              value: {{ .Values.timezone | default "UTC" | quote }}
            {{- with .Values.extraEnv }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- if .Values.envFrom }}
          envFrom:
            {{- toYaml .Values.envFrom | nindent 12 }}
          {{- else }}
          envFrom:
            - configMapRef:
                name: {{ include "aethernova-chain-core.fullname" . }}-config
            - secretRef:
                name: {{ include "aethernova-chain-core.fullname" . }}-secrets
          {{- end }}
          volumeMounts:
            - name: config
              mountPath: /etc/aethernova
              readOnly: true
            {{- with .Values.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          resources:
            {{- toYaml (.Values.resources | default (dict "requests" (dict "cpu" "500m" "memory" "512Mi") "limits" (dict "cpu" "2" "memory" "2Gi"))) | nindent 12 }}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop: ["ALL"]
          livenessProbe:
            httpGet:
              path: {{ .Values.probes.liveness.path | default "/livez" }}
              port: {{ .Values.service.ports.http | default 8080 }}
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds | default 20 }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds | default 10 }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds | default 2 }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold | default 3 }}
          readinessProbe:
            httpGet:
              path: {{ .Values.probes.readiness.path | default "/readyz" }}
              port: {{ .Values.service.ports.http | default 8080 }}
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds | default 10 }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds | default 5 }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds | default 2 }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold | default 6 }}
          startupProbe:
            httpGet:
              path: {{ .Values.probes.startup.path | default "/healthz" }}
              port: {{ .Values.service.ports.http | default 8080 }}
            failureThreshold: {{ .Values.probes.startup.failureThreshold | default 30 }}
            periodSeconds: {{ .Values.probes.startup.periodSeconds | default 2 }}
      volumes:
        - name: config
          configMap:
            name: {{ include "aethernova-chain-core.fullname" . }}-config
            items:
              - key: prod.toml
                path: prod.toml
        {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
