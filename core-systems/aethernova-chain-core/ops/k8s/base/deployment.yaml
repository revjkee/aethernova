apiVersion: apps/v1
kind: Deployment
metadata:
  name: chain-core
  namespace: chain-core
  labels:
    app.kubernetes.io/name: chain-core
    app.kubernetes.io/instance: chain-core
    app.kubernetes.io/component: core
    app.kubernetes.io/part-of: aethernova-chain-core
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: gitops
  annotations:
    # Аннотации для систем наблюдаемости / трассировки (адаптируйте под свой стек)
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
    # Эти checksum-ключи автоматически обновляются kustomize при изменении конфигов/секретов
    checksum/config: "CONFIGMAP_SHA256_REPLACED_BY_KUSTOMIZE"
    checksum/secret: "SECRET_SHA256_REPLACED_BY_KUSTOMIZE"
spec:
  replicas: 3
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  selector:
    matchLabels:
      app.kubernetes.io/name: chain-core
      app.kubernetes.io/instance: chain-core
  template:
    metadata:
      labels:
        app.kubernetes.io/name: chain-core
        app.kubernetes.io/instance: chain-core
        app.kubernetes.io/component: core
        app.kubernetes.io/part-of: aethernova-chain-core
      annotations:
        # Включите, если используете сервис-дискавери/трассировку
        openfeature.dev/enabled: "false"
        # Обновляются поверх через kustomize при изменении конфигов
        checksum/config: "CONFIGMAP_SHA256_REPLACED_BY_KUSTOMIZE"
        checksum/secret: "SECRET_SHA256_REPLACED_BY_KUSTOMIZE"
    spec:
      # Минимизируем неявные связи контейнера с API
      enableServiceLinks: false
      serviceAccountName: chain-core
      priorityClassName: "aethernova-critical" # создайте при необходимости
      dnsPolicy: ClusterFirst
      terminationGracePeriodSeconds: 60
      nodeSelector:
        kubernetes.io/os: linux
      # Безопасность на уровне Pod
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
        fsGroupChangePolicy: "OnRootMismatch"
        seccompProfile:
          type: RuntimeDefault
      affinity:
        # Снижаем риск коллокации реплик на одном узле
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: chain-core
                    app.kubernetes.io/instance: chain-core
      topologySpreadConstraints:
        - maxSkew: 1
          whenUnsatisfiable: ScheduleAnyway
          topologyKey: topology.kubernetes.io/zone
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: chain-core
              app.kubernetes.io/instance: chain-core
        - maxSkew: 1
          whenUnsatisfiable: ScheduleAnyway
          topologyKey: kubernetes.io/hostname
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: chain-core
              app.kubernetes.io/instance: chain-core
      tolerations:
        - key: "node.kubernetes.io/not-ready"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 120
        - key: "node.kubernetes.io/unreachable"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 120
      imagePullSecrets:
        - name: ghcr-creds # при необходимости
      containers:
        - name: app
          image: ghcr.io/aethernova/aethernova-chain-core:1.0.0
          imagePullPolicy: IfNotPresent
          command: ["/bin/chain-core"]
          args:
            - "--config=/etc/chain/config.yaml"
            - "--http.listen=0.0.0.0:8080"
            - "--grpc.listen=0.0.0.0:9091"
            - "--metrics.listen=0.0.0.0:9090"
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9091
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          envFrom:
            - configMapRef:
                name: chain-core
            - secretRef:
                name: chain-core
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: TZ
              value: "UTC"
          # Строгая изоляция контейнера
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            privileged: false
            capabilities:
              drop: ["ALL"]
          resources:
            requests:
              cpu: "250m"
              memory: "256Mi"
            limits:
              cpu: "2000m"
              memory: "1Gi"
          readinessProbe:
            httpGet:
              path: /healthz/ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 2
            failureThreshold: 6
            successThreshold: 1
          livenessProbe:
            httpGet:
              path: /healthz/live
              port: http
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 2
            failureThreshold: 3
            successThreshold: 1
          startupProbe:
            httpGet:
              path: /healthz/start
              port: http
            initialDelaySeconds: 0
            periodSeconds: 5
            timeoutSeconds: 2
            failureThreshold: 30
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "sleep 10"]
          volumeMounts:
            - name: config
              mountPath: /etc/chain
              readOnly: true
            - name: data
              mountPath: /var/lib/chain
              readOnly: false
            - name: tmp
              mountPath: /tmp
              readOnly: false
      volumes:
        - name: config
          configMap:
            name: chain-core
            items:
              - key: config.yaml
                path: config.yaml
        - name: data
          emptyDir:
            sizeLimit: "2Gi"
        - name: tmp
          emptyDir:
            medium: Memory
            sizeLimit: "256Mi"
