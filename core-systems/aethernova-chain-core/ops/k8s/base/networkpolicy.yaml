# ops/k8s/base/networkpolicy.yaml
# Политики совместимы с networking.k8s.io/v1 и CNI, поддерживающими Kubernetes NetworkPolicy.

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: np-default-deny-all
  labels:
    app.kubernetes.io/managed-by: gitops
    app.kubernetes.io/part-of: aethernova-chain-core
spec:
  podSelector: {}  # применить ко всем Pod в текущем namespace
  policyTypes:
    - Ingress
    - Egress
  # Отсутствие правил = deny-all по соответствующему типу

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: np-allow-dns-egress
  labels:
    app.kubernetes.io/managed-by: gitops
    app.kubernetes.io/part-of: aethernova-chain-core
spec:
  podSelector: {}  # всем Pod нужен DNS
  policyTypes:
    - Egress
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
          podSelector:
            matchExpressions:
              - key: k8s-app
                operator: In
                values: ["kube-dns", "coredns"]
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53

---
# Разрешить исходящие HTTP/HTTPS наружу (c ограничениями private RFC1918),
# чтобы обновлять пакеты/запрашивать внешние API. Уточняйте при необходимости.
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: np-allow-web-egress
  labels:
    app.kubernetes.io/managed-by: gitops
    app.kubernetes.io/part-of: aethernova-chain-core
spec:
  podSelector: {}
  policyTypes:
    - Egress
  egress:
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              - 10.0.0.0/8
              - 172.16.0.0/12
              - 192.168.0.0/16
      ports:
        - protocol: TCP
          port: 80
        - protocol: TCP
          port: 443

---
# Разрешить входящий трафик от ingress-nginx только к Pod,
# помеченным как доступные извне (ingress=enabled).
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: np-allow-from-ingress-nginx
  labels:
    app.kubernetes.io/managed-by: gitops
    app.kubernetes.io/part-of: aethernova-chain-core
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/ingress: "enabled"
  policyTypes:
    - Ingress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: ingress-nginx
          podSelector:
            matchLabels:
              app.kubernetes.io/name: ingress-nginx
      ports:
        - protocol: TCP
          port: 80
        - protocol: TCP
          port: 443

---
# Разрешить сервисное общение внутри одного приложения (микросервисы)
# по общему ярлыку "part-of". Порты уточняются по необходимости.
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: np-allow-same-app-ingress
  labels:
    app.kubernetes.io/managed-by: gitops
    app.kubernetes.io/part-of: aethernova-chain-core
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/part-of: aethernova-chain-core
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/part-of: aethernova-chain-core
      ports:
        - protocol: TCP
          port: 8080
        - protocol: TCP
          port: 9090
        - protocol: TCP
          port: 50051

---
# Разрешить мониторингу доступ к метрикам только из namespace "monitoring"
# для Pod, которые объявили метрики (metrics=true).
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: np-allow-monitoring-ingress
  labels:
    app.kubernetes.io/managed-by: gitops
    app.kubernetes.io/part-of: aethernova-chain-core
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/metrics: "true"
  policyTypes:
    - Ingress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: monitoring
      ports:
        - protocol: TCP
          port: 8080
        - protocol: TCP
          port: 9090
        - protocol: TCP
          port: 9100

---
# (Опционально) Разрешить egress к внутренним кластерам БД/кэш по service CIDR/подсетям.
# Замените CIDR/порты на фактические. Закомментировано по умолчанию.
# apiVersion: networking.k8s.io/v1
# kind: NetworkPolicy
# metadata:
#   name: np-allow-db-egress
#   labels:
#     app.kubernetes.io/managed-by: gitops
#     app.kubernetes.io/part-of: aethernova-chain-core
# spec:
#   podSelector:
#     matchLabels:
#       app.kubernetes.io/role: "api"
#   policyTypes:
#     - Egress
#   egress:
#     - to:
#         - ipBlock:
#             cidr: 10.96.0.0/12   # пример service/cluster CIDR — замените на ваш
#       ports:
#         - protocol: TCP
#           port: 5432            # PostgreSQL
#         - protocol: TCP
#           port: 6379            # Redis
#         - protocol: TCP
#           port: 27017           # MongoDB
