{
  "name": "aethernova-chain-core â€¢ devcontainer",
  "image": "mcr.microsoft.com/devcontainers/base:ubuntu-24.04",
  "features": {
    "ghcr.io/devcontainers/features/common-utils:2": {
      "installZsh": true,
      "username": "vscode",
      "userUid": 1000,
      "userGid": 1000
    },
    "ghcr.io/devcontainers/features/docker-in-docker:2": {
      "version": "latest",
      "moby": false
    },
    "ghcr.io/devcontainers/features/rust:1": {
      "profile": "minimal",
      "version": "latest",
      "components": "rustfmt,clippy",
      "target": "wasm32-unknown-unknown"
    },
    "ghcr.io/devcontainers/features/node:1": {
      "version": "lts",
      "nodeGypDependencies": true
    },
    "ghcr.io/devcontainers/features/python:1": {
      "version": "3.12"
    },
    "ghcr.io/devcontainers/features/go:1": {
      "version": "latest"
    }
  },
  "runArgs": [
    "--privileged",
    "--init"
  ],
  "remoteUser": "vscode",
  "containerUser": "vscode",
  "hostRequirements": {
    "cpus": 4,
    "memory": "8gb",
    "storage": "32gb"
  },
  "mounts": [
    "type=volume,source=aethernova-cargo,target=/workspaces/.cache/cargo",
    "type=volume,source=aethernova-rustup,target=/workspaces/.cache/rustup",
    "type=volume,source=aethernova-npm,target=/workspaces/.cache/npm",
    "type=volume,source=aethernova-pip,target=/workspaces/.cache/pip",
    "type=volume,source=aethernova-go,target=/workspaces/.cache/go",
    "type=volume,source=docker,target=/var/lib/docker"
  ],
  "remoteEnv": {
    "CARGO_HOME": "/workspaces/.cache/cargo",
    "RUSTUP_HOME": "/workspaces/.cache/rustup",
    "NPM_CONFIG_CACHE": "/workspaces/.cache/npm",
    "PIP_CACHE_DIR": "/workspaces/.cache/pip",
    "GOMODCACHE": "/workspaces/.cache/go"
  },
  "customizations": {
    "vscode": {
      "settings": {
        "terminal.integrated.defaultProfile.linux": "zsh",
        "editor.formatOnSave": true,
        "files.trimTrailingWhitespace": true,
        "rust-analyzer.cargo.allFeatures": true,
        "rust-analyzer.checkOnSave.command": "clippy",
        "rust-analyzer.procMacro.enable": true
      },
      "extensions": [
        "rust-lang.rust-analyzer",
        "tamasfe.even-better-toml",
        "serayuzgur.crates",
        "ms-azuretools.vscode-docker",
        "ms-vscode-remote.remote-containers",
        "ms-vscode.vscode-typescript-next",
        "esbenp.prettier-vscode",
        "dbaeumer.vscode-eslint",
        "ms-python.python",
        "ms-python.vscode-pylance",
        "golang.go",
        "redhat.vscode-yaml",
        "editorconfig.editorconfig",
        "eamodio.gitlens"
      ]
    }
  },
  "onCreateCommand": "/bin/bash -lc '\n  set -euo pipefail\n  echo \"[devcontainer] Initializing toolchains...\"\n  if command -v rustup >/dev/null 2>&1; then\n    rustup component add rustfmt clippy || true\n    rustup target add wasm32-unknown-unknown || true\n  fi\n  if command -v npm >/dev/null 2>&1; then\n    npm config set fund false --location=global || true\n    npm config set audit false --location=global || true\n  fi\n  if command -v go >/dev/null 2>&1; then\n    echo \"[devcontainer] Go detected: $(go version)\"\n  fi\n  echo \"[devcontainer] Done.\"\n'",
  "postCreateCommand": "/bin/bash -lc '\n  set -euo pipefail\n  echo \"[devcontainer] Post-create: validating environment\"\n  cargo --version || true\n  rustc --version || true\n  node --version || true\n  npm --version || true\n  python --version || true\n  pip --version || true\n  go version || true\n  echo \"[devcontainer] Post-create complete.\"\n'",
  "updateContentCommand": "/bin/bash -lc '\n  set -euo pipefail\n  if [ -f rust-toolchain.toml ] || [ -f rust-toolchain ]; then\n    echo \"[devcontainer] Sync Rust toolchain from project config\";\n    rustup show active-toolchain || true;\n  fi\n  if [ -f package.json ]; then\n    echo \"[devcontainer] Installing JS deps (clean install)\";\n    npm ci || npm install;\n  fi\n  if [ -f pyproject.toml ] || [ -f requirements.txt ]; then\n    echo \"[devcontainer] Installing Python deps\";\n    if command -v uv >/dev/null 2>&1; then uv pip install -r requirements.txt || true; else pip install -r requirements.txt || true; fi\n  fi\n  echo \"[devcontainer] updateContentCommand complete.\"\n'",
  "containerEnv": {
    "DEBIAN_FRONTEND": "noninteractive",
    "CARGO_TERM_COLOR": "always",
    "RUSTFLAGS": "-C target-cpu=native"
  },
  "shutdownAction": "stopContainer"
}
