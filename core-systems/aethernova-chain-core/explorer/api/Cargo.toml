[package]
name = "aethernova-explorer-api"
version = "0.1.0"
edition = "2024"
rust-version = "1.75"
publish = false
description = "Explorer API service for Aethernova: Axum-based HTTP server with OpenAPI, SQLx(Postgres), tracing and OpenTelemetry (OTLP)."

# Бинарь сервиса
[[bin]]
name = "aethernova-explorer-api"
path = "src/main.rs"

# Опциональные возможности, чтобы собирать ровно то, что нужно
[features]
default = ["full"]

full = [
  "otel-otlp",
  "swagger-ui",
  "pg",
  "tls-rustls",
  "metrics"
]

# Наблюдаемость (OTLP: traces/metrics)
otel-otlp = [
  "dep:opentelemetry",
  "dep:opentelemetry_sdk",
  "dep:opentelemetry-otlp",
  "dep:tracing",
  "dep:tracing-subscriber"
]

# Варианты UI для OpenAPI
swagger-ui = ["dep:utoipa", "dep:utoipa-axum", "dep:utoipa-swagger-ui"]
rapidoc    = ["dep:utoipa", "dep:utoipa-axum", "dep:utoipa-rapidoc"]

# PostgreSQL через SQLx и rustls
pg = [
  "dep:sqlx",
  "sqlx/runtime-tokio-rustls",
  "sqlx/postgres",
  "sqlx/macros",
  "sqlx/migrate",
  "sqlx/chrono",
  "sqlx/uuid"
]

# TLS стек
tls-rustls = ["dep:tokio-rustls"]

# Метрики на уровне HTTP middleware
metrics = ["tower-http/metrics"]

[dependencies]
# Веб-стек
axum = { version = "0.8.4", features = ["macros", "ws"] }
tower = "0.5"
tower-http = { version = "0.6.6", features = [
  "trace",
  "cors",
  "compression-br",
  "compression-gzip",
  "decompression-gzip",
  "timeout",
  "limit",
  "set-header",
  "propagate-header",
  "sensitive-headers",
  "fs",
  "auth",
  "validate-request",
  "request-id",
  "metrics"
] }
hyper = { version = "1.7", features = ["http1", "http2"] }
hyper-util = "0.1.16"
http = "1"
http-body = "1"
http-body-util = "0.1"

tokio = { version = "1", features = ["rt-multi-thread", "macros", "signal", "time", "fs"] }

# Сериализация
serde = { version = "1", features = ["derive"] }
serde_json = "1"
uuid = { version = "1", features = ["v4", "serde"] }
chrono = { version = "0.4", default-features = false, features = ["std", "clock", "serde"] }

# Ошибки
anyhow = "1"
thiserror = "2"

# OpenAPI (включается фичами swagger-ui/rapidoc)
utoipa = { version = "5", optional = true, features = ["axum_extras", "chrono", "uuid", "yaml"] }
utoipa-axum = { version = "0.2", optional = true }
utoipa-swagger-ui = { version = "7", optional = true, default-features = false, features = ["axum"] }
utoipa-rapidoc = { version = "6", optional = true, default-features = false, features = ["axum"] }

# Наблюдаемость (включается фичой otel-otlp)
opentelemetry = { version = "0.25", optional = true, features = ["trace", "metrics"] }
opentelemetry_sdk = { version = "0.29", optional = true }
opentelemetry-otlp = { version = "0.30", optional = true }
tracing = { version = "0.1", optional = true, features = ["attributes"] }
tracing-subscriber = { version = "0.3", optional = true, features = ["env-filter", "fmt", "json"] }

# База данных (включается фичой pg)
sqlx = { version = "0.8.6", optional = true, default-features = false, features = [
  "runtime-tokio-rustls",
  "postgres",
  "macros",
  "migrate",
  "chrono",
  "uuid"
] }

# TLS
tokio-rustls = { version = "0.25", optional = true }

# Конфигурация
config = "0.14"
dotenvy = { version = "0.15", optional = true }

# Прочее
bytes = "1"
mime = "0.3"

[dev-dependencies]
tokio = { version = "1", features = ["rt-multi-thread", "macros"] }
reqwest = { version = "0.12", default-features = false, features = ["json", "http2", "rustls-tls"] }
serde_json = "1"
axum-test = "18"
insta = { version = "1", features = ["json"] }

# Агрессивный прод-оптимизационный профиль (скорость/размер)
[profile.release]
lto = "fat"
codegen-units = 1
panic = "abort"
strip = "symbols"
opt-level = 3
