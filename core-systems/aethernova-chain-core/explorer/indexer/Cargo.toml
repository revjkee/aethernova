[package]
name = "aethernova-explorer-indexer"
version = "0.1.0"
edition = "2024"
rust-version = "1.85"
license = "BUSL-1.1"
description = "Aethernova Explorer Indexer service"
build = "build.rs"

# Используем новое разрешение фич (resolver = "2")
resolver = "2"

[features]
default = ["otel", "metrics-prometheus"]
# Телеметрия через OpenTelemetry OTLP (включает трассировки/метрики экспортером OTLP)
otel = ["dep:opentelemetry", "dep:opentelemetry-otlp"]
# Интеграция с Kafka (опционально)
kafka = ["dep:rdkafka"]
# Ведение метрик через metrics + Prometheus экспортер
metrics-prometheus = ["dep:metrics", "dep:metrics-exporter-prometheus"]
# Подготовка SQLx офлайн (включается переменной окружения SQLX_OFFLINE=1 при сборке)
sqlx-offline = []

[dependencies]
# Асинхронный рантайм
tokio = { version = "1.47.1", features = ["rt-multi-thread", "macros", "signal", "sync"] }

# Логирование и трассировка
tracing = "0.1.41"
tracing-subscriber = { version = "0.3.20", features = ["env-filter", "fmt", "json"] }
tracing-serde = "0.1.3"

# Сериализация
serde = { version = "1.0.219", features = ["derive"] }
serde_json = "1.0.142"

# CLI
clap = { version = "4.5.47", features = ["derive"] }

# Идентификаторы/время
uuid   = { version = "1.18.1", features = ["v4", "fast-rng"] }
chrono = { version = "0.4.41", default-features = false, features = ["clock", "std"] }

# База данных (PostgreSQL) + SQLx макросы/миграции
sqlx = { version = "0.8.6", features = [
  "runtime-tokio-rustls",
  "postgres",
  "uuid",
  "chrono",
  "json",
  "macros",
  "migrate"
]}

# HTTP-клиент для RPC/ingest
reqwest = { version = "0.12.23", default-features = false, features = ["json", "http2", "rustls-tls", "gzip", "brotli"] }

# Ошибки
anyhow    = "1.0.99"
thiserror = "2.0.3"

# Метрики (facade) + Prometheus экспортер (опционально)
metrics                       = "0.22.0"
metrics-exporter-prometheus   = { version = "0.17.2", optional = true }

# OpenTelemetry (опционально)
opentelemetry      = { version = "0.27.0", optional = true }
opentelemetry-otlp = { version = "0.27.0", optional = true }

# Kafka (опционально)
rdkafka = { version = "0.36.3", optional = true }

# ENV/конфигурация
dotenvy = "0.15.7"

[build-dependencies]
# Встраивание метаданных сборки/версии (git, rustc, cfg) через build.rs
vergen = { version = "9.0.0", features = ["build", "cargo", "rustc", "si"] }

[dev-dependencies]
tokio       = { version = "1.47.1", features = ["rt", "macros"] }
serde_json  = "1.0.142"

[profile.release]
lto = "fat"
codegen-units = 1
panic = "abort"
strip = true
opt-level = "s"

[profile.dev]
panic = "abort"

# Для sqlx offline (используйте SQLX_OFFLINE=1 и cargo sqlx prepare)
[package.metadata.sqlx]
# раздел оставлен для совместимости с tooling; параметры задаются переменными окружения
