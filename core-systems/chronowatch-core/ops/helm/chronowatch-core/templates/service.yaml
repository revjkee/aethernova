# chronowatch-core/ops/helm/chronowatch-core/templates/service.yaml
{{- /*
  Industrial-grade Service template for chronowatch-core.
  Expects helpers:
    - "chronowatch-core.fullname"
    - "chronowatch-core.labels"
    - "chronowatch-core.selectorLabels"
  Configure via .Values.service.*
*/ -}}
{{- if .Values.service.enabled }}
apiVersion: v1
kind: Service
metadata:
  name: {{ include "chronowatch-core.fullname" . }}
  labels:
    {{- include "chronowatch-core.labels" . | nindent 4 }}
  {{- $ann := merge (dict) (.Values.service.annotations | default (dict)) }}
  {{- if .Values.global }}
    {{- if .Values.global.service }}
      {{- if .Values.global.service.annotations }}
        {{- $ann = merge $ann .Values.global.service.annotations }}
      {{- end }}
    {{- end }}
  {{- end }}
  {{- if $ann }}
  annotations:
    {{- tpl ($ann | toYaml) . | nindent 4 }}
  {{- end }}
spec:
  {{- $type := .Values.service.type | default "ClusterIP" }}
  type: {{ $type }}
  {{- if eq $type "ExternalName" }}
  externalName: {{ required "service.externalName is required when service.type=ExternalName" .Values.service.externalName }}
  {{- else }}
  {{- if or (.Values.service.headless.enabled) (eq (lower (printf "%s" $type)) "headless") }}
  clusterIP: None
  publishNotReadyAddresses: {{ .Values.service.headless.publishNotReadyAddresses | default true }}
  {{- else if and (eq $type "ClusterIP") (.Values.service.clusterIP) }}
  clusterIP: {{ .Values.service.clusterIP }}
  {{- end }}

  {{- with .Values.service.ipFamilies }}
  ipFamilies:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.service.ipFamilyPolicy }}
  ipFamilyPolicy: {{ . }}
  {{- end }}

  {{- if or (eq $type "LoadBalancer") (eq $type "NodePort") }}
  {{- with .Values.service.externalTrafficPolicy }}
  externalTrafficPolicy: {{ . }}
  {{- end }}
  {{- with .Values.service.allocateLoadBalancerNodePorts }}
  allocateLoadBalancerNodePorts: {{ . }}
  {{- end }}
  {{- with .Values.service.loadBalancerClass }}
  loadBalancerClass: {{ . }}
  {{- end }}
  {{- with .Values.service.loadBalancerIP }}
  loadBalancerIP: {{ . }}
  {{- end }}
  {{- with .Values.service.loadBalancerSourceRanges }}
  loadBalancerSourceRanges:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- end }}

  {{- with .Values.service.internalTrafficPolicy }}
  internalTrafficPolicy: {{ . }}
  {{- end }}

  {{- with .Values.service.sessionAffinity }}
  sessionAffinity: {{ . | default "None" }}
  {{- end }}
  {{- with .Values.service.sessionAffinityConfig }}
  sessionAffinityConfig:
    {{- toYaml . | nindent 4 }}
  {{- end }}

  {{- /* Build ports list with sensible defaults */ -}}
  {{- $ports := (default (list
        (dict "name" "http"   "port" 8080  "targetPort" "http"   "protocol" "TCP" "appProtocol" "http")
        (dict "name" "grpc"   "port" 50051 "targetPort" "grpc"   "protocol" "TCP" "appProtocol" "grpc")
        (dict "name" "metrics" "port" 9090 "targetPort" "metrics" "protocol" "TCP" "appProtocol" "http")
      ) .Values.service.ports) -}}
  ports:
    {{- range $i, $p := $ports }}
    - name: {{ required (printf "service.ports[%d].name is required" $i) $p.name | quote }}
      port: {{ required (printf "service.ports[%d].port is required" $i) $p.port }}
      {{- if $p.targetPort }}
      targetPort: {{ $p.targetPort }}
      {{- else }}
      targetPort: {{ $p.port }}
      {{- end }}
      protocol: {{ $p.protocol | default "TCP" }}
      {{- with $p.appProtocol }}
      appProtocol: {{ . }}
      {{- end }}
      {{- if and (or (eq $type "NodePort") (eq $type "LoadBalancer")) $p.nodePort }}
      nodePort: {{ $p.nodePort }}
      {{- end }}
    {{- end }}

  selector:
    {{- include "chronowatch-core.selectorLabels" . | nindent 4 }}
  {{- end }}
{{- end }}
