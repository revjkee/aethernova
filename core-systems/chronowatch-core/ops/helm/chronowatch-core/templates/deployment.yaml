apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "chronowatch-core.fullname" . }}
  labels:
    {{- include "chronowatch-core.labels" . | nindent 4 }}
  annotations:
    {{- with .Values.annotations.deployment }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
    {{- if .Values.metrics.enabled }}
    prometheus.io/scrape: "true"
    prometheus.io/port: "{{ .Values.metrics.port }}"
    prometheus.io/path: "{{ .Values.metrics.path }}"
    {{- end }}
    {{- if .Values.checksums.configmap.enabled }}
    checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
    {{- end }}
    {{- if .Values.checksums.secret.enabled }}
    checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
    {{- end }}
    {{- if .Values.reloader.enabled }}
    reloader.stakater.com/auto: "true"
    {{- end }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount | default 2 }}
  {{- end }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit | default 10 }}
  minReadySeconds: {{ .Values.minReadySeconds | default 10 }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ .Values.updateStrategy.rollingUpdate.maxSurge | default "25%" | quote }}
      maxUnavailable: {{ .Values.updateStrategy.rollingUpdate.maxUnavailable | default "0%" | quote }}
  selector:
    matchLabels:
      {{- include "chronowatch-core.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "chronowatch-core.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
        {{- with .Values.annotations.pod }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- if .Values.metrics.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.metrics.port }}"
        prometheus.io/path: "{{ .Values.metrics.path }}"
        {{- end }}
        {{- if .Values.podSecurity.appArmor }}
        container.apparmor.security.beta.kubernetes.io/main: "{{ .Values.podSecurity.appArmor }}"
        {{- end }}
    spec:
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml .Values.imagePullSecrets | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "chronowatch-core.serviceAccountName" . }}
      automountServiceAccountToken: {{ .Values.serviceAccount.automountServiceAccountToken | default false }}
      {{- if hasKey .Values "priorityClassName" }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      {{- end }}
      securityContext:
        {{- /* Pod-level securityContext */}}
        {{- toYaml (.Values.podSecurityContext | default (dict "runAsNonRoot" true "seccompProfile" (dict "type" "RuntimeDefault") "fsGroupChangePolicy" "OnRootMismatch")) | nindent 8 }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds | default 30 }}
      {{- with .Values.hostAliases }}
      hostAliases:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.dnsConfig }}
      dnsConfig:
        {{- toYaml .Values.dnsConfig | nindent 8 }}
      {{- end }}
      {{- if .Values.hostNetwork }}
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      {{- end }}

      {{- with .Values.initContainers }}
      initContainers:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      containers:
        - name: main
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
          {{- if .Values.command }}
          command: {{- toYaml .Values.command | nindent 10 }}
          {{- end }}
          {{- if .Values.args }}
          args: {{- toYaml .Values.args | nindent 10 }}
          {{- end }}
          ports:
            {{- if .Values.containerPorts }}
            {{- toYaml .Values.containerPorts | nindent 12 }}
            {{- else }}
            - name: http
              containerPort: {{ .Values.service.port | default 8080 }}
              protocol: TCP
            {{- end }}
          env:
            - name: POD_NAME
              valueFrom: { fieldRef: { fieldPath: metadata.name } }
            - name: POD_NAMESPACE
              valueFrom: { fieldRef: { fieldPath: metadata.namespace } }
            - name: POD_IP
              valueFrom: { fieldRef: { fieldPath: status.podIP } }
            {{- with .Values.env }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- if or .Values.envFrom.configMaps .Values.envFrom.secrets .Values.extraEnvFrom }}
          envFrom:
            {{- range $cm := .Values.envFrom.configMaps | default list }}
            - configMapRef: { name: {{ $cm | quote }} }
            {{- end }}
            {{- range $sec := .Values.envFrom.secrets | default list }}
            - secretRef: { name: {{ $sec | quote }} }
            {{- end }}
            {{- with .Values.extraEnvFrom }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- end }}
          readinessProbe:
            {{- if .Values.readinessProbe.custom }}
            {{- toYaml .Values.readinessProbe.custom | nindent 12 }}
            {{- else }}
            httpGet:
              path: {{ .Values.readinessProbe.path | default "/healthz" }}
              port: {{ .Values.readinessProbe.port | default "http" }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds | default 5 }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds | default 10 }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds | default 2 }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold | default 3 }}
            successThreshold: {{ .Values.readinessProbe.successThreshold | default 1 }}
            {{- end }}
          livenessProbe:
            {{- if .Values.livenessProbe.custom }}
            {{- toYaml .Values.livenessProbe.custom | nindent 12 }}
            {{- else }}
            httpGet:
              path: {{ .Values.livenessProbe.path | default "/livez" }}
              port: {{ .Values.livenessProbe.port | default "http" }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds | default 10 }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds | default 10 }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds | default 2 }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold | default 3 }}
            successThreshold: {{ .Values.livenessProbe.successThreshold | default 1 }}
            {{- end }}
          startupProbe:
            {{- if .Values.startupProbe.enabled | default true }}
            {{- if .Values.startupProbe.custom }}
            {{- toYaml .Values.startupProbe.custom | nindent 12 }}
            {{- else }}
            httpGet:
              path: {{ .Values.startupProbe.path | default "/readyz" }}
              port: {{ .Values.startupProbe.port | default "http" }}
            periodSeconds: {{ .Values.startupProbe.periodSeconds | default 5 }}
            failureThreshold: {{ .Values.startupProbe.failureThreshold | default 30 }}
            timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds | default 2 }}
            {{- end }}
            {{- end }}
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","sleep {{ .Values.lifecycle.preStopSleepSeconds | default 5 }}"]
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: {{ .Values.containerSecurity.readOnlyRootFilesystem | default true }}
            runAsNonRoot: true
            {{- if .Values.containerSecurity.runAsUser }}
            runAsUser: {{ .Values.containerSecurity.runAsUser }}
            {{- end }}
            {{- if .Values.containerSecurity.runAsGroup }}
            runAsGroup: {{ .Values.containerSecurity.runAsGroup }}
            {{- end }}
            capabilities:
              drop: ["ALL"]
          resources:
            {{- toYaml (.Values.resources | default (dict "limits" (dict "cpu" "500m" "memory" "512Mi") "requests" (dict "cpu" "100m" "memory" "256Mi"))) | nindent 12 }}
          {{- with .Values.volumeMounts }}
          volumeMounts:
            {{- toYaml . | nindent 12 }}
          {{- end }}

        {{- with .Values.sidecars }}
        {{- toYaml . | nindent 8 }}
        {{- end }}

      {{- with .Values.volumes }}
      volumes:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- with .Values.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
