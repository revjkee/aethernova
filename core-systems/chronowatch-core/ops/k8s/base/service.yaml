# chronowatch-core/ops/k8s/base/service.yaml
# ===================================================================
# Kubernetes Service для chronowatch-core
# Промышленная версия с поддержкой observability, mesh и расширяемости
# ===================================================================

apiVersion: v1
kind: Service
metadata:
  name: chronowatch-core
  namespace: chronowatch
  labels:
    app.kubernetes.io/name: chronowatch-core
    app.kubernetes.io/instance: chronowatch-core
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: chronowatch
    app.kubernetes.io/managed-by: kustomize
    tier: backend
    env: base
  annotations:
    # Prometheus scrape config
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"

    # Service Mesh (например, Istio/Linkerd)
    proxy.istio.io/config: |
      proxyMetadata:
        DNS_CAPTURE: "true"

    # Healthcheck Hints
    service.alpha.kubernetes.io/healthcheck: "enabled"

spec:
  type: ClusterIP   # Базовый вариант (в prod можно заменить на LoadBalancer через overlay)
  clusterIP: None   # "Headless" для stateful-сервисов и mesh-совместимости
  ports:
    - name: http
      port: 80
      targetPort: 8080
      protocol: TCP
    - name: grpc
      port: 9090
      targetPort: 9090
      protocol: TCP
    - name: metrics
      port: 8080
      targetPort: 8080
      protocol: TCP
  selector:
    app.kubernetes.io/name: chronowatch-core
    app.kubernetes.io/instance: chronowatch-core

---
# ===================================================================
# Дополнительно: NetworkPolicy для ограничения доступа
# ===================================================================
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: chronowatch-core-allow-namespace
  namespace: chronowatch
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: chronowatch-core
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector: {}
          namespaceSelector:
            matchLabels:
              access: chronowatch
      ports:
        - protocol: TCP
          port: 80
        - protocol: TCP
          port: 9090
  egress:
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: TCP
          port: 443
