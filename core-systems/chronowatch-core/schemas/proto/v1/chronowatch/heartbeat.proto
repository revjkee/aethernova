syntax = "proto3";

package chronowatch.v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";

// ===========================
// Language/SDK options
// ===========================
option optimize_for = SPEED;
option java_multiple_files = true;
option java_package = "com.example.chronowatch.v1";        // I cannot verify this.
option java_outer_classname = "ChronoWatchProto";           // I cannot verify this.
option csharp_namespace = "Example.ChronoWatch.V1";         // I cannot verify this.
option objc_class_prefix = "CWV";                           // I cannot verify this.
option php_namespace = "Example\\ChronoWatch\\V1";          // I cannot verify this.
option go_package = "example.com/chronowatch/gen/proto/chronowatch/v1;chronowatchv1"; // I cannot verify this.

// ===========================
// Heartbeat Service
// ===========================
service ChronoWatchHeartbeat {
  // Однократная публикация heartbeat с подтверждением.
  rpc PublishHeartbeat(HeartbeatEnvelope) returns (HeartbeatAck);

  // Двунаправленный поток: агент шлет heartbeats, контрол-плейн отвечает Ack/командами.
  rpc StreamHeartbeats(stream HeartbeatEnvelope) returns (stream HeartbeatAck);
}

// ===========================
// Core messages
// ===========================

// Универсальное конвертируемое сообщение heartbeat с метаданными и подписью.
message HeartbeatEnvelope {
  // Версия API/схемы, например "v1".
  string api_version = 1;

  // Идентификация арендатора/организации/окружения.
  string tenant_id   = 2;
  string organization = 3;
  string environment = 4;

  // Ссылка на наблюдаемый ресурс (инстанс/под/узел и т. п.).
  ResourceRef resource = 5;

  // Непосредственно полезная нагрузка — состояние и метрики.
  Heartbeat payload = 6;

  // Последовательный номер heartbeat для дедупликации и упорядочивания.
  uint64 sequence = 7;

  // Время отправки агентом.
  google.protobuf.Timestamp sent_at = 8;

  // Подпись полезной нагрузки/конверта для целостности и аутентичности.
  Signature signature = 9;

  // Гибкие атрибуты (метки и аннотации).
  map<string, string> labels = 10;
  map<string, string> annotations = 11;

  // Произвольные дополнительные данные (например, специфичные метрики).
  google.protobuf.Struct extras = 12;

  // reserved для безопасной эволюции
  reserved 13 to 19;
}

// Содержимое heartbeat: статус, версия, процесс, метрики, проверки, зависимости.
message Heartbeat {
  HealthStatus status = 1;
  string status_message = 2;

  VersionInfo version = 3;
  ProcessInfo process = 4;
  RuntimeStats runtime = 5;

  repeated Check checks = 6;
  repeated Endpoint endpoints = 7;
  repeated Dependency dependencies = 8;

  // Накопительный аптайм на стороне агента (секунды).
  uint64 uptime_seconds = 9;

  // reserved поля для будущих SLO/SLA сэмплов
  reserved 10 to 14;
}

// Подтверждение heartbeat от контрол-плейна.
message HeartbeatAck {
  // Подтвержденный sequence.
  uint64 ack_sequence = 1;

  // Серверное время для синхронизации.
  google.protobuf.Timestamp server_time = 2;

  // Рекомендованная задержка до следующего heartbeat (адаптивный backoff).
  google.protobuf.Duration backoff = 3;

  // Необязательные команды управления агентом/процессом.
  repeated ControlCommand commands = 4;

  // reserved для эволюции протокола ack
  reserved 5 to 9;
}

// ===========================
// Supporting messages
// ===========================

message ResourceRef {
  // Логическая идентификация сервиса и инстанса.
  string service_name = 1;
  string instance_id  = 2;

  // Инфраструктурные координаты.
  string namespace    = 3;
  string cluster      = 4;
  string node_name    = 5;
  string pod_name     = 6;
  string container_id = 7;

  // Топология и адреса.
  string region       = 8;
  string zone         = 9;
  string host_ip      = 10;
  string pod_ip       = 11;

  // reserved для сторонних идентификаторов (cloud resource id и др.)
  reserved 12 to 19;
}

message VersionInfo {
  // Версия приложения (semver), билд и VCS-метки.
  string app_version = 1;     // например, "1.4.2+build.57"
  string build_id    = 2;     // например, короткий SHA/CI-номер
  string git_commit  = 3;     // полный SHA коммита
  string git_branch  = 4;     // ветка/тег
  string schema_version = 5;  // версия контракта, например "v1"

  // reserved для каналов релиза/флагов
  reserved 6 to 9;
}

message ProcessInfo {
  // PID, время старта и бинарная/рантайм информация.
  uint32 pid = 1;
  google.protobuf.Timestamp start_time = 2;

  // Параметры рантайма.
  string runtime_name    = 3; // "python", "go", "jre" и т. п.
  string runtime_version = 4; // "3.12.3", "1.21.7", "21.0.1" и т. п.
  string os              = 5; // "linux", "windows", "darwin"
  string arch            = 6; // "amd64", "arm64" и т. п.

  // reserved для cgroup/container runtime сведений
  reserved 7 to 9;
}

message RuntimeStats {
  // CPU: агрегировано в процентах (0..100). Для мультикор — нормировано по 100%.
  double cpu_total_pct  = 1;
  double cpu_user_pct   = 2;
  double cpu_system_pct = 3;

  // Память.
  uint64 mem_rss_bytes  = 4;
  uint64 mem_vms_bytes  = 5;

  // Дескрипторы/сокеты и т. п.
  uint64 fd_open        = 6;

  // Дисковые и сетевые показатели: по устройствам/интерфейсам.
  map<string, uint64> disk_used_bytes = 7;   // ключ: mount/device
  map<string, uint64> disk_free_bytes = 8;
  map<string, uint64> net_rx_bytes_per_sec = 9;   // ключ: iface
  map<string, uint64> net_tx_bytes_per_sec = 10;

  // Лаг событийного цикла/GC-паузы и др. индикаторы задержек.
  double event_loop_lag_ms = 11;

  // reserved для будущих saturation-метрик
  reserved 12 to 19;
}

message Endpoint {
  string name   = 1;   // "http", "grpc", "metrics" и т. п.
  string scheme = 2;   // "http", "https", "grpc"...
  string address = 3;  // "0.0.0.0" или FQDN
  uint32 port    = 4;
  bool tls       = 5;

  // reserved для ALPN/SNI/сертификатов
  reserved 6 to 9;
}

message Dependency {
  string name = 1;         // "postgres", "redis", "nats"
  string kind = 2;         // "database", "cache", "queue", "service"
  HealthStatus status = 3; // оценка состояния зависимости
  string reason = 4;       // краткое описание (ошибка, деградация)
  google.protobuf.Duration observed_latency = 5;

  // reserved для id/endpoint/namespace
  reserved 6 to 9;
}

message Check {
  string name = 1;                         // "readiness", "db", "redis"
  HealthStatus status = 2;
  string reason = 3;
  google.protobuf.Timestamp last_transition_time = 4;
  string remediation_url = 5;

  // reserved для tags/owner/runbook_id
  reserved 6 to 9;
}

// Подпись конверта/полезной нагрузки.
message Signature {
  string key_id = 1;      // идентификатор ключа
  bytes signature = 2;    // собственно подпись (например, Ed25519)
  string alg = 3;         // "ed25519", "rsa-pss-sha256" и т. п.

  // reserved для chain/attestation/policy
  reserved 4 to 9;
}

// Команды управления от контрол-плейна к агенту.
message ControlCommand {
  CommandType type = 1;
  map<string, string> params = 2; // параметры для команды (например, уровень логирования)

  // reserved для таймаутов/условий применения
  reserved 3 to 9;
}

enum CommandType {
  COMMAND_TYPE_UNSPECIFIED = 0;
  COMMAND_DRAIN            = 1; // плавное выведение из потока
  COMMAND_QUIESCE          = 2; // временная "тишина" (не принимать новые запросы)
  COMMAND_RESUME           = 3; // возвращение в строй
  COMMAND_SET_LOG_LEVEL    = 4; // изменить уровень логирования
  COMMAND_ROTATE_KEYS      = 5; // ротация ключей/токенов
}

// Унифицированный статус здоровья.
enum HealthStatus {
  HEALTH_STATUS_UNSPECIFIED = 0;
  HEALTHY    = 1;
  DEGRADED   = 2;
  UNHEALTHY  = 3;
  MAINTENANCE = 4;
}
