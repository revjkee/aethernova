// chronowatch-core/schemas/proto/v1/chronowatch/health.proto
syntax = "proto3";

package chronowatch.health.v1;

// ===== Language / tooling options =====
option go_package = "github.com/aethernova/chronowatch-core/gen/go/chronowatch/health/v1;healthv1";
option java_multiple_files = true;
option java_package = "io.chronowatch.health.v1";
option java_outer_classname = "HealthProto";
option csharp_namespace = "Chronowatch.Health.V1";
option php_namespace = "Chronowatch\\Health\\V1";
option ruby_package = "Chronowatch::Health::V1";
option objc_class_prefix = "CHW";

// ===== Imports =====
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";

// ===== Service =====
// HealthService предоставляет:
//  - Live     — быстрая проверка жизнеспособности процесса.
//  - Ready    — готовность к приёму трафика (зависимости доступны).
//  - Startup  — завершение фазы инициализации.
//  - Check    — детальная проверка + компоненты, латентности, сообщения.
//  - Watch    — потоковое наблюдение за состоянием (server streaming).
service HealthService {
  // Универсальная детальная проверка, может принимать имя конкретного сервиса.
  rpc Check(HealthCheckRequest) returns (HealthCheckResponse) {
    option (google.api.http) = { get: "/health/check" };
  }

  // Жив ли процесс (часто используется для livenessProbe).
  rpc Live(google.protobuf.Empty) returns (HealthCheckResponse) {
    option (google.api.http) = { get: "/health/live" };
  }

  // Готов ли сервис обслуживать трафик (часто используется для readinessProbe).
  rpc Ready(google.protobuf.Empty) returns (HealthCheckResponse) {
    option (google.api.http) = { get: "/health/ready" };
  }

  // Завершил ли сервис фазу запуска (часто используется для startupProbe).
  rpc Startup(google.protobuf.Empty) returns (HealthCheckResponse) {
    option (google.api.http) = { get: "/health/startup" };
  }

  // Непрерывное наблюдение за состоянием для панелей/агентов.
  rpc Watch(WatchRequest) returns (stream HealthCheckResponse) {
    option (google.api.http) = { get: "/health/watch" };
  }
}

// ===== Messages =====

// Запрос health-проверки.
message HealthCheckRequest {
  // Логическое имя проверяемого сервиса/подсистемы (если пусто — текущий).
  string service = 1 [(google.api.field_behavior) = OPTIONAL];

  // Произвольные метки запроса (например, shard/tenant/zone).
  map<string, string> labels = 2;

  // Запрашиваемый уровень глубины проверки (0 — быстрая, 1 — стандарт, 2 — расширенная).
  uint32 depth = 3;

  reserved 4; // зарезервировано под future-use
}

// Ответ health-проверки.
message HealthCheckResponse {
  // Итоговый статус сервиса.
  Status status = 1;

  // Какой сервис проверялся.
  string service = 2;

  // Момент фиксации результата на стороне сервиса.
  google.protobuf.Timestamp checked_at = 3;

  // Наблюдаемая общая латентность проверки.
  google.protobuf.Duration observed_latency = 4;

  // Человеко-читаемое пояснение (для журналов и UI).
  string message = 5;

  // Детализация по компонентам (БД, кэш, брокеры, внешние API и т.д.).
  repeated Component components = 6;

  // Версия/сборка сервиса (для быстрой диагностики).
  BuildInfo build_info = 7;

  reserved 8, 9; // поддержка будущих полей без ломающих изменений

  // Возможные статусы сервиса.
  enum Status {
    STATUS_UNSPECIFIED = 0; // Не указан (интерпретируется как неопределён).
    SERVING = 1;            // Полностью обслуживает запросы.
    NOT_SERVING = 2;        // Недоступен для обслуживания.
    SERVICE_UNKNOWN = 3;    // Запрошенный сервис неизвестен.
    DEGRADED = 4;           // Работает, но в деградированном режиме.
  }
}

// Описание отдельного компонента здоровья.
message Component {
  // Имя компонента (например: "postgres", "redis", "kafka", "s3", "otel").
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // Состояние компонента.
  State state = 2;

  // Латентность операции проверки компонента.
  google.protobuf.Duration latency = 3;

  // Дополнительные сведения (ошибки, коды, ключевые метрики).
  string details = 4;

  // Необязательные теги компонента (роль, shard, регион).
  map<string, string> tags = 5;

  reserved 6; // для будущих доп. полей

  enum State {
    STATE_UNSPECIFIED = 0;
    OK = 1;
    WARN = 2;
    FAIL = 3;
  }
}

// Информация о версии/сборке сервиса.
message BuildInfo {
  string version = 1;   // Семантическая версия, например: v0.1.0
  string commit = 2;    // Хеш коммита (короткий/полный)
  string branch = 3;    // Ветка/канал сборки
  string environment = 4; // Например: production/staging/dev
  google.protobuf.Timestamp built_at = 5;

  reserved 6; // future-use
}

// Параметры потокового наблюдения.
message WatchRequest {
  // Если указано — наблюдать только за конкретным сервисом.
  string service = 1;

  // Периодичность отправки обновлений (секунды). 0 — авто.
  uint32 interval_seconds = 2;

  // Максимальное количество событий; 0 — не ограничено (до разрыва).
  uint32 max_events = 3;

  reserved 4; // future-use
}
