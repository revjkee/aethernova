[build-system]
requires = ["hatchling>=1.25.0", "hatch-vcs>=0.4.0"]
build-backend = "hatchling.build"

[project]
name = "chronowatch-core"
dynamic = ["version", "readme"]
description = "Industrial-grade time orchestration and scheduling core with async support, observability, and safety checks."
requires-python = ">=3.11"
license = { text = "Apache-2.0" }
authors = [
  { name = "Aethernova / NeuroCity Engineering" }
]
maintainers = [
  { name = "Core Platform Team", email = "eng@aethernova.example" }
]
keywords = [
  "scheduling", "cron", "asyncio", "time", "observability", "opentelemetry", "prometheus", "reliability"
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: Apache Software License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Typing :: Typed",
  "Topic :: Software Development :: Libraries",
  "Topic :: System :: Monitoring"
]

# Базовые зависимости для ядра расписаний/времени/таймзон и надежной работы
dependencies = [
  "anyio>=4.3,<5",
  "apscheduler>=3.10,<4",
  "croniter>=2.0,<3",
  "pendulum>=3.0,<4",
  "tzdata>=2024.1",
  "pydantic>=2.7,<3",
  "pydantic-settings>=2.3,<3",
  "structlog>=24.1,<25",
  "tenacity>=8.2,<9",
  "typing-extensions>=4.10,<5",
]

[project.optional-dependencies]
# Наблюдаемость/трассировка/метрики (подключайте по необходимости)
observability = [
  "opentelemetry-api>=1.25,<2",
  "opentelemetry-sdk>=1.25,<2",
  "prometheus-client>=0.20,<1",
]

# Набор для разработки и CI-качества
dev = [
  "ruff>=0.5.0",
  "mypy>=1.10.0",
  "pytest>=8.2.0",
  "pytest-asyncio>=0.23.0",
  "pytest-cov>=5.0.0",
  "coverage[toml]>=7.5.0",
  "pip-audit>=2.7.0",
  "bandit>=1.7.9",
  "types-croniter>=2.0.0.20240423",
]

# Документация (опционально)
docs = [
  "mkdocs>=1.6.0",
  "mkdocs-material>=9.5.0",
]

[project.urls]
Homepage = "https://example.com/aethernova/chronowatch-core"
Repository = "https://example.com/aethernova/chronowatch-core.git"
Issues = "https://example.com/aethernova/chronowatch-core/issues"

# Версионирование из Git-тегов
[tool.hatch.version]
source = "vcs"
tag-pattern = "v?(?P<version>\\d+\\.\\d+\\.\\d+(?:[.-].*)?)"

[tool.hatch.build]
include = [
  "/src/chronowatch_core",
  "/pyproject.toml",
  "/README.md",
  "/LICENSE",
]
exclude = [
  "/tests",
  "/.github",
  "/.git",
  "/.venv",
  "/dist",
  "/build",
]

[tool.hatch.build.targets.wheel]
packages = ["src/chronowatch_core"]

[tool.hatch.build.targets.sdist]
include = ["src", "pyproject.toml", "README.md", "LICENSE"]

# Dev-окружения и команды (hatch run <cmd>)
[tool.hatch.envs.default]
dependencies = [
  "chronowatch-core[dev]"
]
[tool.hatch.envs.default.scripts]
fmt = [
  "ruff format .",
  "ruff check --fix ."
]
lint = "ruff check ."
typecheck = "mypy --config-file pyproject.toml ."
test = "pytest -q"
cov = "pytest -q --cov=src/chronowatch_core --cov-report=term-missing --cov-report=xml"
audit = "pip-audit -r requirements.txt || pip-audit"  # если нет requirements.txt, запустит аудит окружения
sec = "bandit -q -r src -x tests"
qa = [
  "ruff format --check .",
  "ruff check .",
  "mypy --config-file pyproject.toml .",
  "pytest -q --maxfail=1",
]

# ---------------------------
# Ruff (линтинг + форматирование)
# ---------------------------
[tool.ruff]
line-length = 100
target-version = "py311"
respect-gitignore = true
extend-exclude = ["dist", "build", ".venv", "venv"]

[tool.ruff.lint]
select = [
  "E", "F", "W",          # pycodestyle/pyflakes
  "I",                    # isort
  "UP",                   # pyupgrade
  "B",                    # flake8-bugbear
  "SIM",                  # flake8-simplify
  "C4",                   # flake8-comprehensions
  "TID",                  # flake8-tidy-imports
  "ARG",                  # flake8-unused-arguments
  "DTZ",                  # flake8-datetimez
  "PLC", "PLE", "PLR",    # pylint (subset)
  "RUF",                  # ruff-native rules
]
ignore = [
  "PLR0913",  # too-many-arguments (часто оправдано в планировщиках/конфигурациях)
]
fixable = ["ALL"]

[tool.ruff.lint.isort]
known-first-party = ["chronowatch_core"]
combine-as-imports = true
force-single-line = false

[tool.ruff.format]
docstring-code-format = true
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

# ---------------------------
# Mypy (строгая типизация)
# ---------------------------
[tool.mypy]
python_version = "3.11"
pretty = true
show_error_codes = true
warn_return_any = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
no_implicit_optional = true
strict_optional = true
disallow_untyped_defs = true
disallow_any_unimported = true
disallow_any_generics = true
check_untyped_defs = true
plugins = []
mypy_path = ["src"]
namespace_packages = true
explicit_package_bases = true

# Послабления для тестов
[[tool.mypy.overrides]]
module = ["tests.*"]
ignore_errors = true

# ---------------------------
# Pytest
# ---------------------------
[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
addopts = [
  "-q",
  "--strict-markers",
  "--strict-config",
  "--maxfail=1",
]
filterwarnings = [
  "error",
  "ignore::DeprecationWarning:pendulum.*",
]

# ---------------------------
# Coverage
# ---------------------------
[tool.coverage.run]
branch = true
source = ["src/chronowatch_core"]
parallel = true
omit = [
  "tests/*",
  "**/__init__.py",
]

[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 90
exclude_lines = [
  "if TYPE_CHECKING:",
  "pragma: no cover",
  "raise NotImplementedError",
]

[tool.coverage.xml]
output = "coverage.xml"

# ---------------------------
# Bandit (SAST)
# ---------------------------
[tool.bandit]
targets = ["src/chronowatch_core"]
skips = ["B101"]  # assert_used: допустимо в некоторых внутренних проверках

# ---------------------------
# pip-audit
# ---------------------------
[tool.pip-audit]
ignore-vulns = []
require-hashes = false

# ---------------------------
# Codespell (орфография в коде/доках)
# ---------------------------
[tool.codespell]
skip = "dist,build,.venv,venv,.git,*.lock,*.svg,*.ico"
ignore-words-list = "crate,uptodate,nd"

# ---------------------------
# Commitizen (Conventional Commits)
# ---------------------------
[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
update_changelog_on_bump = true
version_type = "semver"
