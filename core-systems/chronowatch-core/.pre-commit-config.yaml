# chronowatch-core/.pre-commit-config.yaml
# Промышленная конфигурация качества, безопасности и политики коммитов.
# Минимальная версия pre-commit для совместимости:
minimum_pre_commit_version: "3.7.0"

# Базовые версии интерпретаторов (при наличии нескольких):
default_language_version:
  python: python3

# Исключения (сгенерированные/вендорные/большие артефакты)
exclude: |
  (?x)(
    ^\.git/|
    ^\.venv/|
    ^venv/|
    ^.tox/|
    ^.mypy_cache/|
    ^.ruff_cache/|
    ^.pytest_cache/|
    ^build/|
    ^dist/|
    ^node_modules/|
    ^coverage\.xml$|
    ^.*\.min\.(js|css)$|
    (^|/)migrations/|
    (^|/)generated/|
    (^|/)snapshots/|
    (^|/)fixtures/|
    (^|/)third_party/|
    (^|/)vendor/
  )

repos:
  # --- Универсальные базовые проверки ---
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: check-yaml
      - id: end-of-file-fixer
      - id: trailing-whitespace
      - id: debug-statements
      - id: check-merge-conflict
      - id: detect-private-key
      - id: forbid-new-submodules
      - id: mixed-line-ending
        args: [--fix=auto]
      - id: pretty-format-json
        args: [--autofix, --indent, "2"]
        files: \.(json)$

  # --- Редактор Markdown ---
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.41.0
    hooks:
      - id: markdownlint
        args:
          - --config=.markdownlint.json
        files: \.(md|markdown)$
        additional_dependencies:
          - markdownlint@0.33.0

  # --- Prettier для фронтенд/разметки/доков ---
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        files: \.(css|less|scss|html|json|yaml|yml|md|markdown|mdx|graphql|gql|toml)$
        args: [--loglevel=warn]

  # --- YAML Lint ---
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.35.1
    hooks:
      - id: yamllint
        args:
          - -d
          - "{extends: default, rules: {line-length: disable, truthy: disable}}"
        files: \.(yaml|yml)$

  # --- Shell lint ---
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.10.0.1
    hooks:
      - id: shellcheck
        files: \.(sh|bash)$
        args: ["-S", "warning"]

  # --- Dockerfile lint ---
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint
        files: (?i)(^|/)(Dockerfile|.*\.Dockerfile)$

  # --- Орфография (основные словари EN, поддержка исключений через .codespellignore) ---
  - repo: https://github.com/codespell-project/codespell
    rev: v2.3.0
    hooks:
      - id: codespell
        args: ["-L", "crate,fo,nd,teh", "-w"]
        additional_dependencies: []
        exclude: |
          (?x)(
            ^CHANGELOG\.md$
          )

  # --- Python линтинг + автофикс (Ruff) ---
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.6.9
    hooks:
      - id: ruff
        name: ruff-lint
        args: ["--fix", "--show-fixes"]
        files: \.(py)$
      - id: ruff-format
        name: ruff-format
        files: \.(py)$

  # --- Black (форматирование как fallback к Ruff formatter или при строгих правилах проекта) ---
  - repo: https://github.com/psf/black
    rev: 24.8.0
    hooks:
      - id: black
        files: \.(py)$

  # --- isort (упорядочивание импортов, совместимо с Black) ---
  - repo: https://github.com/PyCQA/isort
    rev: 5.13.2
    hooks:
      - id: isort
        files: \.(py)$
        args: ["--profile", "black", "--filter-files"]

  # --- mypy (строгая типизация) ---
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.11.2
    hooks:
      - id: mypy
        files: \.(py)$
        args:
          - --pretty
          - --strict
          - --implicit-reexport
          - --warn-unused-ignores
          - --no-warn-no-return
          - --exclude
          - "(^|/)(tests|migrations|generated|snapshots)/"
        additional_dependencies:
          - types-requests
          - types-PyYAML

  # --- Bandit (security lint) ---
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.9
    hooks:
      - id: bandit
        files: \.(py)$
        args: ["-q", "-r", "."]
        exclude: "(^|/)(tests|migrations|generated|snapshots)/"

  # --- Поиск секретов ---
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
      - id: detect-secrets
        name: detect-secrets (scan)
        args: ["--baseline", ".secrets.baseline"]
        stages: [commit, push]
      - id: detect-secrets-hook
        name: detect-secrets (pre-commit)
        stages: [commit]

  # --- Audit Python зависимостей (CVE) ---
  - repo: https://github.com/pypa/pip-audit
    rev: v2.7.3
    hooks:
      - id: pip-audit
        name: pip-audit (requirements lock)
        args:
          - --require-hashes
          - --strict
        additional_dependencies: []
        stages: [push]

  # --- Политика коммитов (Conventional Commits) ---
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.29.0
    hooks:
      - id: commitizen
        stages: [commit-msg]
        args: ["--commit-msg-file", "$1"]

  # --- Локальные хуки (pytest, размер файлов, запрет больших бинарников) ---
  - repo: local
    hooks:
      - id: pytest-on-push
        name: pytest (on push)
        entry: bash -c 'pytest -q --disable-warnings --maxfail=1'
        language: system
        pass_filenames: false
        stages: [push]

      - id: forbid-binaries-and-large-files
        name: forbid binaries and large files (>5MB)
        entry: bash -c '
          set -e
          THRESHOLD=$${THRESHOLD:-5242880};
          for f in "$@"; do
            [ -f "$f" ] || continue;
            size=$$(wc -c < "$f");
            if [ "$size" -gt "$$THRESHOLD" ]; then
              echo "ERROR: file $$f exceeds $$THRESHOLD bytes ($$size)"; exit 1;
            fi;
            if file "$f" | grep -Eiq "executable|ELF|PE32|Mach-O|archive data|compressed data|image data"; then
              case "$f" in
                *.png|*.jpg|*.jpeg|*.gif|*.webp|*.ico) : ;; # разрешенные типы картинок
                *) echo "ERROR: binary-like file detected: $$f"; exit 1;;
              esac
            fi
          done
        '
        language: system
        require_serial: true
        stages: [commit]

      - id: block-wip-in-commit-message
        name: block WIP commits
        entry: bash -c '
          MSG_FILE="$1";
          if grep -Eiq "^\s*(WIP|TMP|DO\s*NOT\s*MERGE)\b" "$MSG_FILE"; then
            echo "ERROR: WIP/TMP/DO NOT MERGE commits are blocked.";
            exit 1;
          fi
        '
        language: system
        stages: [commit-msg]
        args: ["$1"]
