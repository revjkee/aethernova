# chronowatch-core/configs/chronowatch.yaml
# Schema version of configuration
version: 1.0.0
app:
  name: chronowatch-core
  instance_id: ${INSTANCE_ID:-local}
  # timezone for core scheduling and time calculations
  timezone: ${APP_TIMEZONE:-UTC}
  # graceful shutdown period in seconds
  shutdown_grace_period: ${GRACE_PERIOD_SECONDS:-20}
  # http/grpc server concurrency (tuned for async)
  concurrency:
    workers: ${APP_WORKERS:-1}
    worker_connections: ${APP_WORKER_CONNECTIONS:-1000}

runtime:
  # valid modes: development|staging|production
  environment: ${APP_ENV:-development}
  # feature flags toggled via env or remote flag service
  features:
    enable_metrics: ${FEATURE_METRICS:-true}
    enable_tracing: ${FEATURE_TRACING:-true}
    enable_debug_routes: ${FEATURE_DEBUG_ROUTES:-false}
    enable_health_checks: true
    enable_pprof: ${FEATURE_PPROF:-false}
    enable_readiness_gate: true
    enable_circuit_breakers: true
    enable_rate_limit: true
    enable_request_id: true
    enable_cors: ${FEATURE_CORS:-false}

server:
  # HTTP server (REST, admin, metrics)
  http:
    host: ${HTTP_HOST:-0.0.0.0}
    port: ${HTTP_PORT:-8080}
    base_path: /api
    read_timeout_ms: ${HTTP_READ_TIMEOUT_MS:-15000}
    write_timeout_ms: ${HTTP_WRITE_TIMEOUT_MS:-15000}
    idle_timeout_ms: ${HTTP_IDLE_TIMEOUT_MS:-60000}
    request_max_header_bytes: ${HTTP_MAX_HEADER_BYTES:-1048576}
    cors:
      allowed_origins: ${CORS_ALLOWED_ORIGINS:-*}
      allowed_methods: [GET, POST, PUT, PATCH, DELETE, OPTIONS]
      allowed_headers: ${CORS_ALLOWED_HEADERS:-Authorization,Content-Type,Accept,X-Request-ID}
      allow_credentials: ${CORS_ALLOW_CREDENTIALS:-false}
      max_age_seconds: 600
  # gRPC server (if used)
  grpc:
    enabled: ${GRPC_ENABLED:-false}
    host: ${GRPC_HOST:-0.0.0.0}
    port: ${GRPC_PORT:-50051}
    max_recv_mb: ${GRPC_MAX_RECV_MB:-16}
    max_send_mb: ${GRPC_MAX_SEND_MB:-16}
    keepalive_time_ms: 20000
    keepalive_timeout_ms: 20000
  # Metrics endpoint (Prometheus)
  metrics:
    path: /metrics
    port: ${METRICS_PORT:-9090}
  # Health endpoints
  health:
    liveness_path: /healthz
    readiness_path: /readyz
    startup_path: /startupz

security:
  # only async SQLAlchemy is allowed in project (policy)
  policy:
    sqlalchemy_async_only: true
    deny_blocking_calls: true
  cors_policy:
    mode: ${CORS_MODE:-restricted} # restricted|open
  headers:
    strict_transport_security: "max-age=63072000; includeSubDomains; preload"
    x_content_type_options: "nosniff"
    x_frame_options: "DENY"
    referrer_policy: "no-referrer"
    permissions_policy: "geolocation=(), microphone=(), camera=()"
  jwt:
    enabled: ${AUTH_JWT_ENABLED:-false}
    issuer: ${AUTH_JWT_ISSUER:-}
    audience: ${AUTH_JWT_AUDIENCE:-}
    jwks_url: ${AUTH_JWKS_URL:-}
    clock_skew_seconds: 5
  oauth2:
    enabled: ${AUTH_OAUTH_ENABLED:-false}
    provider: ${AUTH_OAUTH_PROVIDER:-}
    client_id: ${AUTH_OAUTH_CLIENT_ID:-}
    client_secret: ${AUTH_OAUTH_CLIENT_SECRET:-}
    token_url: ${AUTH_OAUTH_TOKEN_URL:-}
    auth_url: ${AUTH_OAUTH_AUTH_URL:-}
    scopes: ${AUTH_OAUTH_SCOPES:-openid,profile,email}
  rate_limit:
    # token bucket limiter
    enabled: ${RATE_LIMIT_ENABLED:-true}
    capacity: ${RATE_LIMIT_CAPACITY:-200}
    refill_per_second: ${RATE_LIMIT_REFILL_PER_SECOND:-100}
    key_strategy: ${RATE_LIMIT_KEY_STRATEGY:-ip} # ip|user|api_key
  ddos:
    max_body_bytes: ${MAX_BODY_BYTES:-10485760} # 10 MB
    max_requests_in_flight: ${MAX_REQUESTS_IN_FLIGHT:-2000}

observability:
  logging:
    level: ${LOG_LEVEL:-INFO} # TRACE|DEBUG|INFO|WARN|ERROR
    format: ${LOG_FORMAT:-json} # json|text
    json:
      # ECS-like fields for SIEM parsing
      include_timestamp: true
      include_logger_name: true
      include_severity_number: true
      include_request_id: true
    destination:
      type: ${LOG_DESTINATION:-stdout} # stdout|file|tcp|udp
      file_path: ${LOG_FILE_PATH:-/var/log/chronowatch/app.log}
      tcp_addr: ${LOG_TCP_ADDR:-}
      udp_addr: ${LOG_UDP_ADDR:-}
    redact:
      # redact sensitive fields in structured logs
      fields: ["authorization", "password", "secret", "token", "set-cookie"]
  tracing:
    enabled: ${TRACING_ENABLED:-true}
    provider: ${TRACING_PROVIDER:-otlp} # otlp|jaeger|zipkin
    service_name: chronowatch-core
    sampler: ${TRACING_SAMPLER:-parentbased_traceidratio}
    sampler_ratio: ${TRACING_SAMPLER_RATIO:-0.05}
    otlp:
      endpoint: ${OTLP_ENDPOINT:-http://otel-collector:4317}
      protocol: ${OTLP_PROTOCOL:-grpc} # grpc|http/protobuf
  metrics:
    enabled: ${METRICS_ENABLED:-true}
    runtime_process: true
    runtime_gc: true
    histogram_buckets_ms: [5, 10, 25, 50, 100, 200, 500, 1000, 2000]

storage:
  # Async SQLAlchemy DSN (e.g. postgresql+asyncpg://user:pass@host:5432/db)
  database:
    driver: ${DB_DRIVER:-postgresql+asyncpg}
    dsn: ${DATABASE_DSN:-}
    host: ${DB_HOST:-postgres}
    port: ${DB_PORT:-5432}
    user: ${DB_USER:-chronowatch}
    password: ${DB_PASSWORD:-changeme}
    name: ${DB_NAME:-chronowatch}
    pool_min_size: ${DB_POOL_MIN_SIZE:-5}
    pool_max_size: ${DB_POOL_MAX_SIZE:-50}
    pool_max_overflow: ${DB_POOL_MAX_OVERFLOW:-10}
    pool_recycle_seconds: ${DB_POOL_RECYCLE_SECONDS:-1800}
    statement_timeout_ms: ${DB_STATEMENT_TIMEOUT_MS:-15000}
    connect_timeout_ms: ${DB_CONNECT_TIMEOUT_MS:-3000}
    ssl_mode: ${DB_SSL_MODE:-prefer} # disable|allow|prefer|required|verify-ca|verify-full
    migrations:
      enabled: true
      # path for Alembic migrations directory
      path: ${DB_MIGRATIONS_PATH:-alembic}
  cache:
    provider: ${CACHE_PROVIDER:-redis}
    redis:
      dsn: ${REDIS_DSN:-redis://redis:6379/0}
      ssl: ${REDIS_SSL:-false}
      pool_size: ${REDIS_POOL_SIZE:-20}
      socket_timeout_ms: ${REDIS_TIMEOUT_MS:-500}
      health_check_interval_ms: 10000
  object_storage:
    enabled: ${S3_ENABLED:-false}
    provider: s3
    endpoint: ${S3_ENDPOINT:-}
    bucket: ${S3_BUCKET:-}
    region: ${S3_REGION:-}
    access_key: ${S3_ACCESS_KEY:-}
    secret_key: ${S3_SECRET_KEY:-}
    use_path_style: ${S3_PATH_STYLE:-true}

messaging:
  broker: ${BROKER_PROVIDER:-nats} # nats|kafka|rabbitmq|none
  nats:
    url: ${NATS_URL:-nats://nats:4222}
    user: ${NATS_USER:-}
    password: ${NATS_PASSWORD:-}
    max_reconnects: ${NATS_MAX_RECONNECTS:-10}
    reconnect_wait_ms: ${NATS_RECONNECT_WAIT_MS:-500}
  kafka:
    bootstrap_servers: ${KAFKA_BOOTSTRAP_SERVERS:-}
    security_protocol: ${KAFKA_SECURITY_PROTOCOL:-PLAINTEXT}
    acks: ${KAFKA_ACKS:-all}
    linger_ms: ${KAFKA_LINGER_MS:-10}
    batch_size: ${KAFKA_BATCH_SIZE:-32768}
  rabbitmq:
    url: ${RABBIT_URL:-amqp://guest:guest@rabbitmq:5672/}

resilience:
  retries:
    # default client-side retry policy
    max_attempts: ${RETRY_MAX_ATTEMPTS:-3}
    initial_backoff_ms: ${RETRY_INITIAL_MS:-100}
    max_backoff_ms: ${RETRY_MAX_MS:-2000}
    jitter: ${RETRY_JITTER:-true}
  timeouts:
    # default operation timeout
    default_ms: ${TIMEOUT_DEFAULT_MS:-3000}
    external_call_ms: ${TIMEOUT_EXTERNAL_MS:-5000}
  circuit_breakers:
    enabled: true
    half_open_max_calls: 5
    failure_rate_threshold_pct: 50
    rolling_window_seconds: 30

scheduler:
  # high-precision scheduling for chronowatch timers
  enabled: true
  tick_resolution_ms: ${SCHED_TICK_MS:-10}
  max_drift_ms: ${SCHED_MAX_DRIFT_MS:-5}
  jobs:
    - id: purge-expired-sessions
      cron: "*/5 * * * *"
      timeout_ms: 5000
      enabled: true
    - id: sync-time-sources
      cron: "0 * * * *"
      timeout_ms: 15000
      enabled: true

time_sources:
  # multi-source time sanity checks (NTP-like)
  sources:
    - name: system
      type: system
      weight: 1.0
    - name: ntp-pool
      type: ntp
      server: ${NTP_SERVER:-pool.ntp.org}
      weight: 1.5
  max_allowed_skew_ms: ${MAX_ALLOWED_SKEW_MS:-50}

api:
  # request/response size and pagination defaults
  request_max_bytes: ${API_MAX_BYTES:-1048576}
  default_page_size: ${API_DEFAULT_PAGE_SIZE:-50}
  max_page_size: ${API_MAX_PAGE_SIZE:-500}
  # idempotency keys TTL
  idempotency_ttl_seconds: ${API_IDEMPOTENCY_TTL:-600}

privacy:
  gdpr:
    data_retention_days: ${GDPR_RETENTION_DAYS:-365}
    pii_fields: ["email", "phone", "ip", "user_id", "device_id"]
    # redact PII in logs and traces
    redact_in_observability: true
  access_logs:
    enabled: ${ACCESS_LOGS_ENABLED:-true}
    include_body: ${ACCESS_LOGS_INCLUDE_BODY:-false}

# -----------------------------
# Profiles (DRY via anchors)
# -----------------------------
profiles:
  defaults: &defaults
    runtime:
      environment: development
    observability:
      logging:
        level: DEBUG
        format: text
    server:
      http:
        port: 8080
      metrics:
        port: 9090
  development:
    <<: *defaults
    security:
      cors_policy:
        mode: open
  staging:
    <<: *defaults
    runtime:
      environment: staging
    observability:
      logging:
        level: INFO
        format: json
    security:
      cors_policy:
        mode: restricted
  production:
    <<: *defaults
    runtime:
      environment: production
    observability:
      logging:
        level: INFO
        format: json
    server:
      http:
        read_timeout_ms: 20000
        write_timeout_ms: 20000
        idle_timeout_ms: 120000
    security:
      cors_policy:
        mode: restricted
    resilience:
      retries:
        max_attempts: 2
      circuit_breakers:
        failure_rate_threshold_pct: 25
