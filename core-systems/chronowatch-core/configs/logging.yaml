# chronowatch-core/configs/logging.yaml
# Промышленная конфигурация Python logging (dictConfig v1) для ChronoWatch Core.

version: 1
disable_existing_loggers: false

# Общие переменные окружения (необязательные): используйте при загрузке конфига.
# LOG_LEVEL: DEBUG|INFO|WARNING|ERROR|CRITICAL (дефолт INFO)
# LOG_DIR: каталог для файлов логов (дефолт /var/log/chronowatch)
# LOG_JSON: "true" чтобы использовать JSON-форматтер (требует python-json-logger)
# SERVICE_NAME: имя сервиса (дефолт chronowatch-core)
# SERVICE_ENV: окружение (prod|staging|dev)
# SERVICE_VERSION: версия сборки/релиза

# Фильтры стандартной библиотеки (без сторонних зависимостей).
filters:
  only_warnings_and_above:
    (): logging.Filter
  only_errors:
    (): logging.Filter

formatters:
  # Текстовый форматтер (по умолчанию безопасен для любых окружений).
  plain:
    format: "%(asctime)s %(levelname)s %(name)s %(process)d %(threadName)s | %(message)s | svc=%(service_name)s env=%(service_env)s ver=%(service_version)s"
    datefmt: "%Y-%m-%dT%H:%M:%S%z"
    # Дополнительные поля через defaults доступны, начиная с Python 3.8+
    # Эти значения будут использованы, если в record нет соответствующих extra.
    defaults:
      service_name: "chronowatch-core"
      service_env: "-"
      service_version: "-"

  # JSON-форматтер (включается, если установлен python-json-logger).
  # Если пакет отсутствует — не используйте этот форматтер в handlers.
  json:
    (): pythonjsonlogger.jsonlogger.JsonFormatter
    fmt: |
      {
        "ts": "%(asctime)s",
        "level": "%(levelname)s",
        "logger": "%(name)s",
        "message": "%(message)s",
        "process": "%(process)d",
        "thread": "%(threadName)s",
        "pathname": "%(pathname)s",
        "lineno": "%(lineno)d",
        "func": "%(funcName)s",
        "svc": "%(service_name)s",
        "env": "%(service_env)s",
        "ver": "%(service_version)s"
      }
    datefmt: "%Y-%m-%dT%H:%M:%S%z"
    json_ensure_ascii: false
    json_indent: null
    # Поля по умолчанию; не мешают, если extra не прокидывается.
    defaults:
      service_name: "chronowatch-core"
      service_env: "-"
      service_version: "-"

handlers:
  # Консоль для Kubernetes (stdout). Выберите plain или json форматтер.
  console:
    class: logging.StreamHandler
    level: INFO
    stream: ext://sys.stdout
    formatter: plain

  console_json:
    class: logging.StreamHandler
    level: INFO
    stream: ext://sys.stdout
    formatter: json

  # Файловый лог всех событий (INFO+), с ротацией.
  file_info:
    class: logging.handlers.RotatingFileHandler
    level: INFO
    formatter: plain
    filename: "/var/log/chronowatch/app.log"
    maxBytes: 10485760    # 10 MiB
    backupCount: 10
    encoding: utf8

  # Файловый лог ошибок (ERROR+), с ротацией.
  file_error:
    class: logging.handlers.RotatingFileHandler
    level: ERROR
    formatter: plain
    filename: "/var/log/chronowatch/app-error.log"
    maxBytes: 10485760
    backupCount: 20
    encoding: utf8

  # Отдельный поток для HTTP-доступа (gunicorn/uvicorn access), пригодно для парсинга.
  access_file:
    class: logging.handlers.RotatingFileHandler
    level: INFO
    formatter: plain
    filename: "/var/log/chronowatch/access.log"
    maxBytes: 10485760
    backupCount: 10
    encoding: utf8

  # Ошибки веб-сервера (gunicorn/uvicorn error).
  web_error_file:
    class: logging.handlers.RotatingFileHandler
    level: WARNING
    formatter: plain
    filename: "/var/log/chronowatch/web-error.log"
    maxBytes: 10485760
    backupCount: 10
    encoding: utf8

# Базовые уровни для отдельных подсистем. propagate=false, чтобы исключить дублирование.
loggers:
  # Uvicorn/Gunicorn
  uvicorn:
    level: INFO
    handlers: [console, web_error_file]
    propagate: false

  uvicorn.error:
    level: INFO
    handlers: [console, web_error_file]
    propagate: false

  uvicorn.access:
    level: INFO
    handlers: [console, access_file]
    propagate: false

  gunicorn:
    level: INFO
    handlers: [console, web_error_file]
    propagate: false

  gunicorn.error:
    level: INFO
    handlers: [console, web_error_file]
    propagate: false

  gunicorn.access:
    level: INFO
    handlers: [console, access_file]
    propagate: false

  # SQLAlchemy шумит в DEBUG — оставим INFO; запросы можно включать точечно при отладке.
  sqlalchemy.engine:
    level: WARNING
    handlers: [console, file_info]
    propagate: false

  alembic:
    level: INFO
    handlers: [console, file_info]
    propagate: false

  # Корневой логгер приложения (при необходимости используйте свое пространство имен).
  chronowatch_core:
    level: INFO
    handlers: [console, file_info, file_error]
    propagate: false

# Корневой логгер. Если хотите JSON в stdout, замените console на console_json.
root:
  level: INFO
  handlers: [console]
