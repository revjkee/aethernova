{
  "name": "chronowatch-core",
  "image": "mcr.microsoft.com/devcontainers/base:ubuntu-24.04",
  "features": {
    "ghcr.io/devcontainers/features/common-utils:2": {
      "installZsh": true,
      "username": "vscode",
      "userUid": 1000,
      "userGid": 1000
    },
    "ghcr.io/devcontainers/features/python:1": {
      "version": "3.12"
    },
    "ghcr.io/devcontainers/features/node:1": {
      "version": "20",
      "pnpm": "true",
      "yarn": "true"
    },
    "ghcr.io/devcontainers/features/docker-in-docker:2": {
      "version": "latest"
    },
    "ghcr.io/devcontainers/features/git:1": {}
  },
  "remoteUser": "vscode",
  "containerEnv": {
    "TZ": "Europe/Stockholm",
    "PYTHONUNBUFFERED": "1",
    "PIP_DISABLE_PIP_VERSION_CHECK": "1",
    "PIP_NO_CACHE_DIR": "0",
    "PIP_CACHE_DIR": "/workspaces/.cache/pip",
    "POETRY_VIRTUALENVS_IN_PROJECT": "1",
    "POETRY_NO_INTERACTION": "1",
    "NODE_ENV": "development"
  },
  "runArgs": [
    "--init",
    "--privileged"
  ],
  "mounts": [
    "source=chronowatch-devcache,target=/workspaces/.cache,type=volume"
  ],
  "forwardPorts": [
    3000,
    3001,
    5173,
    8000,
    8080,
    9090,
    9093
  ],
  "portsAttributes": {
    "3000": { "label": "Web UI" },
    "8000": { "label": "API" },
    "9090": { "label": "Prometheus/Grafana proxy" }
  },
  "customizations": {
    "vscode": {
      "extensions": [
        "ms-python.python",
        "ms-python.vscode-pylance",
        "ms-toolsai.jupyter",
        "charliermarsh.ruff",
        "ms-azuretools.vscode-docker",
        "esbenp.prettier-vscode",
        "dbaeumer.vscode-eslint",
        "tamasfe.even-better-toml",
        "redhat.vscode-yaml",
        "editorconfig.editorconfig",
        "GitHub.vscode-pull-request-github"
      ],
      "settings": {
        "editor.formatOnSave": true,
        "files.trimTrailingWhitespace": true,
        "python.defaultInterpreterPath": ".venv/bin/python",
        "python.testing.pytestEnabled": true,
        "python.testing.unittestEnabled": false,
        "python.linting.enabled": true,
        "python.analysis.typeCheckingMode": "basic",
        "ruff.enable": true,
        "ruff.lint.args": [
          "--fix",
          "--unsafe-fixes"
        ],
        "editor.codeActionsOnSave": {
          "source.fixAll": true,
          "source.organizeImports": true
        },
        "terminal.integrated.defaultProfile.linux": "zsh",
        "git.enableCommitSigning": false
      }
    }
  },
  "onCreateCommand": "bash -lc 'sudo apt-get update && sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends build-essential pkg-config libssl-dev libffi-dev libpq-dev sqlite3 ca-certificates tzdata curl git-lfs && sudo rm -rf /var/lib/apt/lists/* && git lfs install'",
  "postCreateCommand": "bash -lc '\nset -euo pipefail\n# Python toolchain\nif ! command -v poetry >/dev/null 2>&1; then curl -sSL https://install.python-poetry.org | python3 - --version 1.8.3; fi\nexport PATH=\"$HOME/.local/bin:$PATH\"\npython3 -m pip install -U pip wheel\npython3 -m pip install -U pre-commit ruff black mypy pytest hypothesis\n# Node toolchain\ncorepack enable || true\nnpm -g i npm@latest commitlint @commitlint/config-conventional husky\n# Repo bootstrap (idempotent)\nif [ -f pyproject.toml ]; then poetry install --no-root || true; fi\nif [ -f package.json ]; then pnpm install || yarn install || npm ci || true; fi\n# pre-commit hooks\npre-commit install --install-hooks || true\n# commitlint via husky\nif [ -d .git ]; then npx husky install || true; echo \"#!/usr/bin/env bash\n. \\\"$(pwd)/.devcontainer/commitlint.sh\\\"\" > .husky/commit-msg && chmod +x .husky/commit-msg || true; fi\n# Ruff baseline cache\nruff --version >/dev/null 2>&1 || true\n'",
  "postStartCommand": "bash -lc 'echo TZ=${TZ} && date && docker info >/dev/null 2>&1 || true'",
  "initializeCommand": "bash -lc 'mkdir -p .devcontainer && cat > .devcontainer/commitlint.sh <<\"EOF\"\n#!/usr/bin/env bash\nif command -v commitlint >/dev/null 2>&1; then\n  commitlint -E HUSKY_GIT_PARAMS -g <(echo \"module.exports = {extends: ['@commitlint/config-conventional']}\")\nelse\n  echo \"commitlint not installed; skipping\" >&2\nfi\nEOF\nchmod +x .devcontainer/commitlint.sh'"
}
