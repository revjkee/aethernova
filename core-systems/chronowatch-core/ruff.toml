# chronowatch-core/ruff.toml
# Промышленный конфиг Ruff для строгого контроля качества кода.

# Общие параметры
preview = true
line-length = 100
target-version = "py312"
respect-gitignore = true

# Исключения директорий и артефактов
exclude = [
  ".git",
  ".hg",
  ".svn",
  "__pycache__",
  ".mypy_cache",
  ".ruff_cache",
  ".pytest_cache",
  ".tox",
  ".venv",
  "venv",
  "build",
  "dist",
  "site",
  "node_modules",
  "coverage",
  "htmlcov",
  "docs/_build",
  "migrations",
  "alembic",
]

# Настройки форматирования Ruff Formatter
[format]
quote-style = "double"            # Единый стиль кавычек
indent-style = "space"            # Пробельные отступы
skip-magic-trailing-comma = false # Сохранять magic trailing comma
line-ending = "lf"                # Нормализуем переводы строк

# Линтеры и правила
[lint]
select = [
  # Базовые
  "E",   # pycodestyle errors
  "F",   # pyflakes
  "W",   # pycodestyle warnings
  "I",   # import sorting (isort)
  "N",   # pep8-naming
  "D",   # pydocstyle
  "UP",  # pyupgrade
  "C90", # mccabe complexity

  # Качество и надёжность
  "B",    # flake8-bugbear
  "BLE",  # blind-except
  "ARG",  # unused arguments
  "C4",   # comprehensions
  "DTZ",  # datetime timezone
  "EM",   # error messages
  "EXE",  # executable shebang/permissions
  "ISC",  # implicit string concat
  "PIE",  # misc correctness
  "PL",   # pylint (подмножество)
  "PT",   # pytest-style
  "PTH",  # pathlib вместо os.path
  "Q",    # quotes (доп. проверки)
  "RET",  # return statements
  "RUF",  # ruff-specific
  "SIM",  # simplify
  "SLF",  # private member access
  "TCH",  # type-checking imports
  "TID",  # tidy imports
  "TRY",  # tryceratops (исключения)
  "COM",  # commas
  "PERF", # perflint (производительность)

  # Безопасность и отладка
  "S",    # bandit (безопасность, подмножество)
  "YTT",  # flake8-2020 (устаревшее поведение)
  "T20",  # flake8-print (print/pp)
  "ERA",  # eradicate (закомментированный код)
]

# Исключаем конфликтующие/чрезмерные правила и частные случаи
ignore = [
  # Докстринги: Google-конвенция без конфликтующих пар
  "D203", # one-blank-line-before-class (конфликтует с D211)
  "D212", # multi-line-summary-first-line (конфликт с D213)
  "D401", # imperative mood только для первой строки
  "D407", # dashed-underline after section
  "D413", # blank line after last section
  "D100", # missing docstring in public module (жестко, но часто шум)
  "D104", # missing docstring in public package
  "D107", # missing docstring in __init__

  # Аннотации: не требовать для self/cls в методах
  "ANN101",
  "ANN102",
]

# Разрешаем автофикс всех безопасных правил; некоторые правила оставляем нефикисируемыми
fixable = ["ALL"]
unfixable = [
  "T20",    # print/pp лучше править вручную
  "ERA001", # удаление закомментированного кода — ручной контроль
]

# Исключения по файлам/директориям
[lint.per-file-ignores]
# Тесты: допускаем assert, упрощённые докстринги, печать для отладки, магические числа в параметризации
"tests/**" = ["S101", "D", "ANN", "ARG001", "ARG002", "PLR2004", "T20"]
# Миграции: не линкуем, оставляем как есть
"**/migrations/**" = ["E", "F", "W", "I", "N", "D", "UP", "B", "BLE", "ARG", "C90", "C4", "DTZ", "EM", "ERA", "EXE", "ISC", "PIE", "PL", "PT", "PTH", "Q", "RET", "RUF", "SIM", "SLF", "T20", "TCH", "TID", "TRY", "COM", "PERF"]
# Сценарии/утилиты: разрешаем печать и упрощённые докстринги
"scripts/**" = ["D", "T20"]

# Стандартизируем стиль докстрингов
[lint.pydocstyle]
convention = "google"

# Порог цикломатической сложности
[lint.mccabe]
max-complexity = 12

# Сортировка импортов (isort через Ruff)
[lint.isort]
combine-as-imports = true
force-sort-within-sections = true
split-on-trailing-comma = true

# Импорт-гигиена (запрещаем относительные импорты)
[lint.flake8-tidy-imports]
ban-relative-imports = "all"

# Базовые лимиты для подмножества правил pylint
[lint.pylint]
max-args = 7
max-branches = 12
max-returns = 6
max-statements = 60
