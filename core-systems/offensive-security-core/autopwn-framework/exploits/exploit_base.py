# exploits/__init__.py
# Пакет exploits — пустой файл для инициализации пакета


# exploits/exploit_base.py

import abc
from typing import Any, Dict, Optional


class ExploitBase(abc.ABC):
    """
    Базовый абстрактный класс для всех эксплоитов.
    Определяет интерфейс и общие методы.
    """

    def __init__(self, target: str, options: Optional[Dict[str, Any]] = None):
        """
        :param target: Цель атаки (IP, URL и т.д.)
        :param options: Дополнительные параметры эксплоита
        """
        self.target = target
        self.options = options or {}

    @abc.abstractmethod
    async def verify(self) -> bool:
        """
        Проверить уязвимость цели без эксплуатации.
        Возвращает True, если уязвимость подтверждена, иначе False.
        """
        pass

    @abc.abstractmethod
    async def exploit(self) -> Dict[str, Any]:
        """
        Запустить эксплуатацию уязвимости.
        Возвращает словарь с результатами (успех, данные, ошибки).
        """
        pass

    def set_option(self, key: str, value: Any) -> None:
        """
        Установить параметр эксплоита.

        :param key: имя параметра
        :param value: значение параметра
        """
        self.options[key] = value

    def get_option(self, key: str, default: Any = None) -> Any:
        """
        Получить параметр эксплоита.

        :param key: имя параметра
        :param default: значение по умолчанию
        :return: значение параметра или default
        """
        return self.options.get(key, default)
