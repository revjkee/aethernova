# exploits/exploit_loader.py

import importlib
import importlib.util
import os
import sys
from types import ModuleType
from typing import Optional


class ExploitLoader:
    """
    Динамическая загрузка модулей эксплоитов с изоляцией пространства имён.
    """

    def __init__(self, exploits_path: str):
        """
        :param exploits_path: Путь к директории с эксплоитами
        """
        self.exploits_path = exploits_path
        if not os.path.isdir(self.exploits_path):
            raise ValueError(f"Путь {self.exploits_path} не существует или не является директорией")

    def load_exploit(self, exploit_name: str) -> Optional[ModuleType]:
        """
        Динамически загрузить эксплоит по имени модуля из директории exploits_path.

        :param exploit_name: Имя модуля эксплоита (без .py)
        :return: Загруженный модуль или None если не найден/ошибка
        """
        exploit_file = os.path.join(self.exploits_path, f"{exploit_name}.py")
        if not os.path.isfile(exploit_file):
            return None

        module_name = f"exploits.{exploit_name}"

        # Проверяем, если модуль уже загружен, удаляем из sys.modules для повторной загрузки
        if module_name in sys.modules:
            del sys.modules[module_name]

        spec = importlib.util.spec_from_file_location(module_name, exploit_file)
        if spec is None:
            return None

        module = importlib.util.module_from_spec(spec)
        try:
            spec.loader.exec_module(module)  # type: ignore
        except Exception:
            return None

        # Вставляем модуль в sys.modules
        sys.modules[module_name] = module
        return module

    def list_exploits(self) -> list[str]:
        """
        Получить список доступных модулей эксплоитов в директории.

        :return: Список имён файлов без расширения .py
        """
        files = []
        for fname in os.listdir(self.exploits_path):
            if fname.endswith(".py") and not fname.startswith("__"):
                files.append(fname[:-3])
        return files
