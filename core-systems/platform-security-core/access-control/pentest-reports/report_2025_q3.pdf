# /security/pentest-reports/report_2025_q3.py
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.platypus import Paragraph, Frame, Table, TableStyle, Spacer, SimpleDocTemplate, PageBreak
from reportlab.lib.enums import TA_CENTER, TA_LEFT
from reportlab.lib import colors
from datetime import datetime


class PentestReport:
    def __init__(self, filename: str):
        self.filename = filename
        self.doc = SimpleDocTemplate(filename, pagesize=A4,
                                     rightMargin=40, leftMargin=40,
                                     topMargin=60, bottomMargin=60)
        self.styles = getSampleStyleSheet()
        self.story = []

    def add_title_page(self):
        style = ParagraphStyle(name='TitleStyle', fontSize=24, alignment=TA_CENTER, spaceAfter=40)
        self.story.append(Spacer(1, 100))
        self.story.append(Paragraph("Отчёт по Пентесту Q3 2025", style))
        self.story.append(Spacer(1, 20))
        self.story.append(Paragraph("TeslaAI Genesis Project", self.styles['Title']))
        self.story.append(Spacer(1, 40))
        self.story.append(Paragraph(f"Дата: {datetime.now().strftime('%d.%m.%Y')}", self.styles['Normal']))
        self.story.append(PageBreak())

    def add_table_of_contents(self):
        toc_style = ParagraphStyle(name='TOCStyle', fontSize=16, alignment=TA_LEFT, spaceAfter=20)
        self.story.append(Paragraph("Содержание", toc_style))
        toc_items = [
            "1. Введение",
            "2. Обзор среды тестирования",
            "3. Методология тестирования",
            "4. Найденные уязвимости",
            "5. Рекомендации по исправлению",
            "6. Заключение",
            "7. Приложения"
        ]
        for item in toc_items:
            self.story.append(Paragraph(item, self.styles['Normal']))
            self.story.append(Spacer(1, 5))
        self.story.append(PageBreak())

    def add_section(self, title: str, content: str):
        title_style = ParagraphStyle(name='SectionTitle', fontSize=18, spaceAfter=15)
        self.story.append(Paragraph(title, title_style))
        self.story.append(Paragraph(content, self.styles['Normal']))
        self.story.append(Spacer(1, 20))

    def add_vulnerabilities_table(self, vulnerabilities: list):
        data = [["ID", "Название уязвимости", "Критичность", "Описание", "Статус"]]
        for vuln in vulnerabilities:
            data.append([
                vuln.get('id', ''),
                vuln.get('name', ''),
                vuln.get('severity', ''),
                vuln.get('description', ''),
                vuln.get('status', '')
            ])

        table = Table(data, colWidths=[40, 120, 70, 230, 70])
        style = TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 8),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0,0), (-1,-1), 0.5, colors.grey),
        ])
        table.setStyle(style)
        self.story.append(table)
        self.story.append(Spacer(1, 20))

    def build_pdf(self):
        self.doc.build(self.story)


def generate_report(output_path: str):
    report = PentestReport(output_path)

    report.add_title_page()
    report.add_table_of_contents()

    report.add_section("1. Введение",
                       "Данный отчёт содержит результаты пентестирования за третий квартал 2025 года. "
                       "Цель - выявить уязвимости и дать рекомендации по их устранению.")

    report.add_section("2. Обзор среды тестирования",
                       "Тестирование проводилось в изолированной среде TeslaAI Genesis с использованием стандартных инструментов.")

    report.add_section("3. Методология тестирования",
                       "Использованы черный ящик, белый ящик и автоматизированное сканирование уязвимостей.")

    vulnerabilities = [
        {"id": "VULN-001", "name": "SQL Injection", "severity": "Высокая",
         "description": "Возможность внедрения SQL кода через форму входа.", "status": "Открыта"},
        {"id": "VULN-002", "name": "XSS", "severity": "Средняя",
         "description": "Отсутствие фильтрации пользовательского ввода в комментариях.", "status": "Закрыта"},
    ]

    report.add_section("4. Найденные уязвимости", "")
    report.add_vulnerabilities_table(vulnerabilities)

    report.add_section("5. Рекомендации по исправлению",
                       "Рекомендуется внедрить параметризированные запросы для предотвращения SQL Injection, "
                       "а также использовать современные фильтры и CSP для защиты от XSS.")

    report.add_section("6. Заключение",
                       "В целом, система соответствует требованиям безопасности, однако требует устранения выявленных уязвимостей.")

    report.add_section("7. Приложения",
                       "Приложения включают логи сканирования и подробные отчёты по каждому уязвимому месту.")

    report.build_pdf()


if __name__ == "__main__":
    generate_report("/security/pentest-reports/report_2025_q3.pdf")
