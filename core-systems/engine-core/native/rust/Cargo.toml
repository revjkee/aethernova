# engine/native/rust/Cargo.toml

[workspace]
members = [
    "crates/engine-native-core",   # Основная логика, без FFI
    "crates/engine-native-ffi",    # C FFI (cdylib/staticlib), headers через cbindgen
    "crates/engine-native-py",     # Python обёртка (pyo3, maturin)
]
default-members = [
    "crates/engine-native-core",
    "crates/engine-native-ffi",
]
resolver = "2"

[workspace.package]
edition = "2021"
rust-version = "1.75"
license = "Apache-2.0"
keywords = ["ai", "engine", "ffi", "telemetry", "tracing"]
categories = ["development-tools", "science", "algorithms"]

[workspace.dependencies]
# Логирование/трейсинг
tracing = { version = "0.1", default-features = false, features = ["std", "log"] }
tracing-subscriber = { version = "0.3", default-features = false, features = ["fmt", "env-filter", "time", "ansi"] }
tracing-error = "0.2"

# Ошибки и утилиты
anyhow = "1"
thiserror = "1"
once_cell = "1.19"
parking_lot = "0.12"

# Серилизация
serde = { version = "1", features = ["derive"] }
serde_json = "1"

# Асинхронность
tokio = { version = "1", default-features = false, features = ["rt-multi-thread", "macros", "time", "sync"] }

# Метрики
metrics = "0.21"
metrics-util = "0.17"
metrics-exporter-prometheus = { version = "0.14", default-features = false, features = ["http-listener"] }

# Производительность/аллокатор (опционально)
jemallocator = { version = "0.5", optional = true }

# FFI / Python (подключаются в соответствующих крейтах через features)
pyo3 = { version = "0.20", features = ["extension-module"], optional = true }
pyo3-ffi = { version = "0.20", optional = true }

# Низкоуровневые штуки
bytemuck = { version = "1", features = ["derive"] }
bytes = "1.6"
smallvec = "1.13"
ahash = "0.8"

# Безопасность/хеши
blake3 = "1.5"

# Тесты/бенчи (dev)
criterion = { version = "0.5", default-features = false, features = ["html_reports"] }
proptest = "1.5"
approx = "0.5"

# ------- Профили сборки (единые для всех пакетов workspace) -------

[profile.dev]
opt-level = 1
debug = 2
overflow-checks = true
incremental = true

[profile.release]
opt-level = 3
lto = "thin"
codegen-units = 1
panic = "abort"
debug = 1
strip = "debuginfo"   # требуются символы для отладки в проде, но без мусора

[profile.bench]
opt-level = 3
lto = "thin"
codegen-units = 1
debug = 1
panic = "abort"

# Возможность кастомного профиля для CI (например, быстрые релизы с минимальным дебагом)
[profile.ci]
inherits = "release"
debug = 0
strip = "symbols"

# ------- Единые линтеры и политика качества -------

[workspace.lints.rust]
unsafe_code = "deny"
unused_extern_crates = "deny"
unused_imports = "deny"
deprecated_in_future = "warn"
missing_docs = "warn"
rust_2018_idioms = "deny"

[workspace.lints.clippy]
# Строгий набор, но практичный для индустрии
all = "warn"
pedantic = "warn"
nursery = "warn"
unwrap_used = "deny"
expect_used = "deny"
perf = "warn"
cargo = "warn"
module_name_repetitions = "allow"
missing_errors_doc = "allow"
missing_panics_doc = "allow"

# ------- Метаданные инструментов экосистемы -------

[workspace.metadata.docs.rs]
# Документация для всех целевых платформ (ключевые)
all-features = true
rustdoc-args = ["--cfg", "docsrs"]
targets = ["x86_64-unknown-linux-gnu", "aarch64-unknown-linux-gnu", "x86_64-pc-windows-msvc", "aarch64-apple-darwin", "x86_64-apple-darwin"]

[workspace.metadata.release]
# cargo-release настройки для предсказуемых релизов
allow-branch = ["main", "release/*"]
sign-commit = false
sign-tag = false
consolidate-commits = true
push = true
tag = true
tag-prefix = "engine-native-"
pre-release-commit-message = "chore(release): {version}"
post-release-commit-message = "chore(post-release): bump to {next_version}"

[workspace.metadata.cargo-udeps]
# Поддержка проверки неиспользуемых зависимостей
backend = "depinfo"

# ------- Опциональные глобальные фичи (реализуются в пакетах через cfg) -------
# Примечание: Cargo не поддерживает workspace-уровневые features напрямую.
# Ниже — договорённость: пакеты читают эти cfg через env!/build.rs.
[workspace.metadata.engine.features]
# Включайте эти флаги в пакетах через соответствующие features:
#   - "simd"     : активация SIMD путей (std::arch)
#   - "prom"     : экспорт метрик Prometheus
#   - "pyo3"     : сборка Python расширения
#   - "ffi"      : сборка C FFI (cdylib/staticlib)
#   - "jemalloc" : использование jemallocator в качестве глобального аллокатора

# ------- Переопределения/зеркала при необходимости -------
# [source.crates-io]
# replace-with = "mirror"
# 
# [source.mirror]
# registry = "https://your.cargo.mirror/index"

# ------- Пример настроек по умолчанию для пакетов (наследуются) -------
[workspace.metadata.package.defaults]
# Включать jemalloc для продакшен окружений через RUSTFLAGS/feature
enable_jemalloc_by_default = false
enable_prometheus_exporter = true

# ------- Пояснение по используемым инструментам -------
# Сборка Python-обёртки:
#   maturin build --release -m crates/engine-native-py/Cargo.toml
# Генерация C-заголовков:
#   cbindgen --config crates/engine-native-ffi/cbindgen.toml --crate engine-native-ffi --output target/engine_native.h
