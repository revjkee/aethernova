version: 1
disable_existing_loggers: false

# Глобальные форматтеры
formatters:
  concise_console:
    # Компактный читаемый вид для терминала
    format: "%(asctime)s | %(levelname)s | %(name)s | %(message)s"
    datefmt: "%Y-%m-%d %H:%M:%S"

  detailed_file:
    # Детальный формат для файлового лога приложения
    format: >
      ts="%(asctime)s" lvl="%(levelname)s" logger="%(name)s" pid=%(process)d
      tid=%(thread)d file="%(pathname)s:%(lineno)d" func="%(funcName)s"
      msg="%(message)s"
    datefmt: "%Y-%m-%dT%H:%M:%S%z"

  error_file:
    # Расширенный формат для ошибок
    format: >
      ts="%(asctime)s" lvl="%(levelname)s" logger="%(name)s" pid=%(process)d
      tid=%(thread)d file="%(pathname)s:%(lineno)d" func="%(funcName)s"
      exc="%(exc_info)s" msg="%(message)s"
    datefmt: "%Y-%m-%dT%H:%M:%S%z"

  audit_file:
    # Формат для аудита действий/событий
    format: >
      ts="%(asctime)s" AUDIT logger="%(name)s" actor="%(user)s"
      action="%(action)s" resource="%(resource)s" result="%(result)s"
      msg="%(message)s"
    datefmt: "%Y-%m-%dT%H:%M:%S%z"

# Фильтры (при необходимости можно добавить динамическую фильтрацию по окружению)
filters:
  only_warnings_and_above:
    (): logging.Filter

handlers:
  console:
    class: logging.StreamHandler
    level: INFO
    formatter: concise_console
    stream: ext://sys.stdout

  app_file:
    class: logging.handlers.RotatingFileHandler
    level: INFO
    formatter: detailed_file
    filename: logs/app.log
    maxBytes: 52428800          # 50 MB
    backupCount: 10
    encoding: utf-8
    delay: true

  error_file:
    class: logging.handlers.RotatingFileHandler
    level: ERROR
    formatter: error_file
    filename: logs/error.log
    maxBytes: 52428800          # 50 MB
    backupCount: 10
    encoding: utf-8
    delay: true

  audit_file:
    class: logging.handlers.TimedRotatingFileHandler
    level: INFO
    formatter: audit_file
    filename: logs/audit.log
    when: midnight
    interval: 1
    backupCount: 30
    encoding: utf-8
    delay: true

  # Включайте syslog при наличии демона rsyslog/syslog-ng и сокета /dev/log
  # syslog:
  #   class: logging.handlers.SysLogHandler
  #   level: WARNING
  #   formatter: detailed_file
  #   address: /dev/log

  # Критические уведомления по email — заполните реальные параметры и раскомментируйте
  # smtp_critical:
  #   class: logging.handlers.SMTPHandler
  #   level: CRITICAL
  #   formatter: error_file
  #   mailhost: "smtp.example.com:587"
  #   fromaddr: "noreply@your-domain.com"
  #   toaddrs: ["ops@your-domain.com", "security@your-domain.com"]
  #   subject: "[ENGINE-CORE] CRITICAL alert"
  #   credentials: ["smtp_user", "smtp_password"]
  #   secure: []  # STARTTLS

# Настройка «шумных» библиотек, чтобы не засоряли логи
loggers:
  uvicorn:
    level: INFO
    handlers: [console]
    propagate: false

  uvicorn.error:
    level: INFO
    handlers: [console, app_file]
    propagate: false

  uvicorn.access:
    level: WARNING
    handlers: [console]
    propagate: false

  gunicorn:
    level: INFO
    handlers: [console]
    propagate: false

  sqlalchemy.engine:
    level: WARNING
    handlers: [console, app_file]
    propagate: false

  asyncio:
    level: WARNING
    handlers: [console]
    propagate: false

  aiogram:
    level: INFO
    handlers: [console, app_file]
    propagate: false

  httpx:
    level: WARNING
    handlers: [console]
    propagate: false

# Корневой логгер — то, что используется по умолчанию
root:
  level: INFO
  handlers:
    - console
    - app_file
    - error_file
    - audit_file
    # - syslog
    # - smtp_critical
