[tool.poetry]
name = "engine-core"
version = "0.1.0"
description = "Core engine service skeleton (FastAPI, Typer CLI, structlog, health/metrics, feature flags)"
authors = ["Aethernova <dev@aethernova.example>"]
license = "Apache-2.0"
readme = "README.md"
packages = [{ include = "engine_core", from = "src" }]
homepage = "https://example.com/engine-core"
repository = "https://example.com/engine-core/repo"
documentation = "https://example.com/engine-core/docs"
keywords = ["fastapi", "backend", "observability", "ai", "platform"]
classifiers = [
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Framework :: FastAPI",
  "License :: OSI Approved :: Apache Software License",
  "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
  "Topic :: Software Development :: Libraries :: Application Frameworks"
]

# Включаем файлы конфигураций в sdist
include = [
  "configs/**",
  "ops/**",
  "scripts/**",
  "README.md",
  "CHANGELOG.md",
  "LICENSE",
  "VERSION",
  ".editorconfig",
  ".pre-commit-config.yaml",
  "ruff.toml",
  "mypy.ini"
]

[tool.poetry.dependencies]
python = ">=3.11,<3.12"
fastapi = "^0.115.0"
uvicorn = { version = "^0.30.0", extras = ["standard"] }
typer = "^0.12.3"
pydantic = "^2.8.2"
pydantic-settings = "^2.4.0"
structlog = "^24.1.0"
python-dotenv = "^1.0.1"
prometheus-client = "^0.20.0"
# HTTP‑клиент для интеграций
httpx = "^0.27.0"

# Опциональные зависимости (экстры)
opentelemetry-sdk = { version = "^1.26.0", optional = true }
opentelemetry-exporter-otlp = { version = "^1.26.0", optional = true }
sentry-sdk = { version = "^2.7.0", optional = true }
redis = { version = "^5.0.7", optional = true }
psycopg = { version = "^3.2.1", optional = true, extras = ["binary"] }
sqlalchemy = { version = "^2.0.32", optional = true }
aiokafka = { version = "^0.10.0", optional = true }
pika = { version = "^1.3.2", optional = true }

[tool.poetry.extras]
otel = ["opentelemetry-sdk", "opentelemetry-exporter-otlp"]
sentry = ["sentry-sdk"]
redis = ["redis"]
db = ["sqlalchemy", "psycopg"]
kafka = ["aiokafka"]
rabbitmq = ["pika"]

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.0"
pytest-asyncio = "^0.23.8"
pytest-cov = "^5.0.0"
mypy = "^1.10.0"
types-requests = "^2.32.0.20240712"
ruff = "^0.5.0"
pre-commit = "^3.7.1"
detect-secrets = "^1.5.0"
coverage = "^7.6.0"

[tool.poetry.scripts]
engine-core = "engine_core.cli:app"

# -------------------------------
# Pytest настройка через pyproject
# (синхронизирована с .vscode/settings.json)
# -------------------------------
[tool.pytest.ini_options]
addopts = "-q --maxfail=1 --disable-warnings --cov=engine_core --cov-report=term-missing --cov-report=xml"
testpaths = ["tests"]
asyncio_mode = "auto"

# -------------------------------
# Coverage (опционально; .coveragerc не требуется)
# -------------------------------
[tool.coverage.run]
branch = true
source = ["src/engine_core"]
omit = [
  "src/engine_core/**/__init__.py",
  "src/engine_core/**/wiring.py",
  "src/engine_core/**/contracts/*",
]

[tool.coverage.report]
show_missing = true
skip_empty = true
exclude_lines = [
  "pragma: no cover",
  "if TYPE_CHECKING:",
  "raise NotImplementedError",
]

# -------------------------------
# Ruff — конфиг хранится в ruff.toml.
# Если хотите централизовать здесь — перенесите блоки.
# -------------------------------

# -------------------------------
# Mypy — конфиг в mypy.ini.
# -------------------------------

[build-system]
requires = ["poetry-core>=1.9.0"]
build-backend = "poetry.core.masonry.api"

# -------------------------------
# Параметры публикации/репродьюса (Poetry)
# -------------------------------
[tool.poetry.urls]
"Bug Tracker" = "https://example.com/engine-core/issues"
"Security" = "https://example.com/engine-core/security"

# Оптимизация разрешения зависимостей (источники можно дополнять при необходимости)
[[tool.poetry.source]]
name = "pypi"
priority = "default"
