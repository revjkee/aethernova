# engine-core/engine/examples/minimal_zone/config.yaml
# Минимальная, но промышленная конфигурация зоны выполнения для engine-core.
# Поддерживает переопределение любым значением через переменные окружения вида:
#   ${ENV_VAR}            — взять как есть
#   ${ENV_VAR:-default}   — взять или подставить default
# Пример запуска:
#   ENGINE_PROFILE=dev ENGINE_TRACING_EXPORTER=console python -m engine.cli.admin status

version: "1"

meta:
  zone: ${ENGINE_ZONE:-minimal}
  service: ${ENGINE_SERVICE_NAME:-engine-core}
  service_version: ${ENGINE_SERVICE_VERSION:-0.0.0}
  owner: "platform"
  description: "Minimal, production-grade config zone for engine-core"

# ------------------------------------------------------------------------------
# Профили окружений через YAML-якоря. Выбор профиля: переменная ENGINE_PROFILE.
# ------------------------------------------------------------------------------
profiles:
  base: &base
    observability:
      log:
        level: ${ENGINE_OBS_LOG_LEVEL:-INFO}     # DEBUG|INFO|WARNING|ERROR
        json: ${ENGINE_OBS_LOG_JSON:-true}
      metrics:
        enabled: ${ENGINE_OBS_PROM_ENABLED:-true}
        namespace: ${ENGINE_OBS_PROM_NAMESPACE:-engine}
        path: ${ENGINE_OBS_PROM_PATH:-/metrics}
      tracing:
        enabled: ${ENGINE_OBS_TRACING_ENABLED:-true}
        exporter: ${ENGINE_TRACING_EXPORTER:-otlp_grpc}       # otlp_grpc|otlp_http|jaeger|console|none
        otlp_endpoint: ${ENGINE_TRACING_OTLP_ENDPOINT:-http://localhost:4317}
        jaeger_endpoint: ${ENGINE_TRACING_JAEGER_ENDPOINT:-http://localhost:14268/api/traces}
        sampler: ${ENGINE_TRACING_SAMPLER:-parent}            # parent|always_on|always_off|ratio
        sampler_ratio: ${ENGINE_TRACING_SAMPLER_RATIO:-0.05}
        use_b3: ${ENGINE_TRACING_USE_B3:-false}
        resource_extra:
          deployment.environment: ${ENGINE_OBS_DEPLOY_ENV:-dev}
          telemetry.distro.name: engine-core
    server:
      host: ${ENGINE_HTTP_HOST:-0.0.0.0}
      port: ${ENGINE_HTTP_PORT:-8080}
      workers: ${ENGINE_HTTP_WORKERS:-1}
      request_timeout_s: ${ENGINE_HTTP_REQUEST_TIMEOUT:-30}
      graceful_timeout_s: ${ENGINE_HTTP_GRACEFUL_TIMEOUT:-20}
    security:
      cors:
        enabled: ${ENGINE_CORS_ENABLED:-true}
        allow_origins: ${ENGINE_CORS_ORIGINS:-*}
      rate_limit:
        rps: ${ENGINE_RATE_RPS:-50}
        burst: ${ENGINE_RATE_BURST:-100}
      headers:
        x_frame_options: "DENY"
        x_content_type_options: "nosniff"
        referrer_policy: "no-referrer"
    features:
      enable_mocks: ${ENGINE_ENABLE_MOCKS:-true}
      enable_health: ${ENGINE_ENABLE_HEALTH:-true}
      enable_admin_cli: ${ENGINE_ENABLE_ADMIN_CLI:-true}
    limits:
      max_payload_mb: ${ENGINE_MAX_PAYLOAD_MB:-16}
      max_concurrency: ${ENGINE_MAX_CONCURRENCY:-256}
      shutdown_timeout_s: ${ENGINE_SHUTDOWN_TIMEOUT:-25}
    chaos:   # отключено по умолчанию; включать в тестах
      enabled: ${ENGINE_CHAOS_ENABLED:-false}
      seed: ${ENGINE_CHAOS_SEED:-1337}
      error_rate: ${ENGINE_CHAOS_ERROR_RATE:-0.0}
      timeout_rate: ${ENGINE_CHAOS_TIMEOUT_RATE:-0.0}
      jitter_ms: ${ENGINE_CHAOS_JITTER_MS:-10}
      max_extra_latency_ms: ${ENGINE_CHAOS_MAX_LAT_MS:-200}

    # ---------- Моки и тестовые подсистемы ----------
    mocks:
      data_fabric:
        enabled: ${ENGINE_MOCK_DF_ENABLED:-true}
        default_ttl_seconds: ${ENGINE_MOCK_DF_TTL:-0}   # 0 = без TTL
        tables:
          users:
            primary_key: "id"
            soft_delete: true
            ttl_seconds: ${ENGINE_MOCK_USERS_TTL:-0}
            columns:
              - { name: "id",   type: "int",  required: true }
              - { name: "name", type: "str",  required: true }
              - { name: "age",  type: "int",  required: false }
              - { name: "tags", type: "list", required: false }
          items:
            primary_key: "sku"
            soft_delete: false
            ttl_seconds: ${ENGINE_MOCK_ITEMS_TTL:-0}
            columns:
              - { name: "sku",     type: "str", required: true }
              - { name: "price",   type: "float", required: true }
              - { name: "in_stock", type: "bool", required: true }
      ai:
        enabled: ${ENGINE_MOCK_AI_ENABLED:-true}
        profile:
          name: ${ENGINE_MOCK_AI_MODEL:-mock-3.5}
          context_window: ${ENGINE_MOCK_AI_CTX:-8192}
          max_output_tokens: ${ENGINE_MOCK_AI_MAX_TOKENS:-1024}
          base_latency_ms: ${ENGINE_MOCK_AI_BASE_LAT_MS:-50}
          tokens_per_second: ${ENGINE_MOCK_AI_TPS:-200}
        rate:
          rps: ${ENGINE_MOCK_AI_RPS:-50}
          burst: ${ENGINE_MOCK_AI_BURST:-100}
          tpm: ${ENGINE_MOCK_AI_TPM:-100000}
          tph: ${ENGINE_MOCK_AI_TPH:-2000000}
        safety:
          allowlist: []
          denylist: ["<script>", "DROP TABLE", "rm -rf"]
          redact_placeholders: true
        chaos:
          enabled: ${ENGINE_MOCK_AI_CHAOS_ENABLED:-false}
          seed: ${ENGINE_MOCK_AI_SEED:-1337}
          error_rate: ${ENGINE_MOCK_AI_ERROR_RATE:-0.0}
          timeout_rate: ${ENGINE_MOCK_AI_TIMEOUT_RATE:-0.0}
          jitter_ms: ${ENGINE_MOCK_AI_JITTER_MS:-10}
          max_extra_latency_ms: ${ENGINE_MOCK_AI_MAX_LAT_MS:-200}
        stream_chunk_tokens: ${ENGINE_MOCK_AI_STREAM_CHUNK:-16}
        normalize_embeddings: ${ENGINE_MOCK_AI_NORM_EMB:-true}
        truncate_strategy: ${ENGINE_MOCK_AI_TRUNCATE:-tail}   # head|tail|middle

    cli:
      default_output: ${ENGINE_CLI_OUTPUT:-text}  # text|json
      default_timeout_s: ${ENGINE_CLI_TIMEOUT:-30}
      confirm_writes: ${ENGINE_CLI_CONFIRM_WRITES:-true}

  dev: &dev
    <<: *base
    meta:
      <<: *{meta}
    observability:
      <<: *{observability}
      log:
        level: ${ENGINE_OBS_LOG_LEVEL:-DEBUG}
        json: ${ENGINE_OBS_LOG_JSON:-true}
      tracing:
        enabled: ${ENGINE_OBS_TRACING_ENABLED:-true}
        exporter: ${ENGINE_TRACING_EXPORTER:-console}
    features:
      enable_mocks: true

  staging: &staging
    <<: *base
    observability:
      <<: *{observability}
      tracing:
        exporter: ${ENGINE_TRACING_EXPORTER:-otlp_grpc}
        otlp_endpoint: ${ENGINE_TRACING_OTLP_ENDPOINT:-http://otel-collector:4317}
      log:
        level: ${ENGINE_OBS_LOG_LEVEL:-INFO}
        json: true
    server:
      <<: *{server}
      workers: ${ENGINE_HTTP_WORKERS:-2}

  prod: &prod
    <<: *base
    observability:
      <<: *{observability}
      log:
        level: ${ENGINE_OBS_LOG_LEVEL:-INFO}
        json: true
      tracing:
        exporter: ${ENGINE_TRACING_EXPORTER:-otlp_grpc}
        sampler: ${ENGINE_TRACING_SAMPLER:-ratio}
        sampler_ratio: ${ENGINE_TRACING_SAMPLER_RATIO:-0.02}
        use_b3: ${ENGINE_TRACING_USE_B3:-false}
    features:
      enable_mocks: ${ENGINE_ENABLE_MOCKS:-false}
    server:
      <<: *{server}
      workers: ${ENGINE_HTTP_WORKERS:-4}
    limits:
      <<: *{limits}
      max_payload_mb: ${ENGINE_MAX_PAYLOAD_MB:-32}
      max_concurrency: ${ENGINE_MAX_CONCURRENCY:-1024}

# ------------------------------------------------------------------------------
# Активный профиль: подставьте одно из dev|staging|prod. По умолчанию dev.
# ------------------------------------------------------------------------------
active_profile: ${ENGINE_PROFILE:-dev}

# ------------------------------------------------------------------------------
# Инициализационные задачи (выполняются при старте сервиса/зоны).
# ------------------------------------------------------------------------------
init_tasks:
  - id: "trace.selftest"
    enabled: ${ENGINE_INIT_TRACE_SELFTEST:-true}
    action: "trace_selftest"
    params:
      exporter: ${ENGINE_TRACING_EXPORTER:-console}
      endpoint: ${ENGINE_TRACING_OTLP_ENDPOINT:-}
      timeout_s: 5

  - id: "mock.seed.users"
    enabled: ${ENGINE_INIT_SEED_USERS:-false}
    action: "mock_seed"
    params:
      table: "users"
      schema_file: ""
      data_file: ${ENGINE_INIT_USERS_DATA:-}
      batch: ${ENGINE_INIT_USERS_BATCH:-1000}

# ------------------------------------------------------------------------------
# Политики здоровья и готовности.
# ------------------------------------------------------------------------------
health:
  liveness:
    enabled: ${ENGINE_HEALTH_LIVENESS_ENABLED:-true}
    path: "/health/live"
  readiness:
    enabled: ${ENGINE_HEALTH_READINESS_ENABLED:-true}
    path: "/health/ready"
    checks:
      - name: "observability"
        type: "module"
        module: "engine.adapters.observability_adapter"
      - name: "tracing"
        type: "module"
        module: "engine.telemetry.tracing"

# ------------------------------------------------------------------------------
# Примеры overrides для локала (.env или переменные окружения):
#
# ENGINE_PROFILE=prod
# ENGINE_TRACING_EXPORTER=otlp_grpc
# ENGINE_TRACING_OTLP_ENDPOINT=http://otel-collector:4317
# ENGINE_OBS_LOG_LEVEL=INFO
# ENGINE_ENABLE_MOCKS=false
# ------------------------------------------------------------------------------
